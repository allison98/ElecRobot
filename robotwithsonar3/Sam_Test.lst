0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 02 16:12:59 2018
0000              5   ;--------------------------------------------------------
                  5   $name Sam_Test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _detectobstacle
0000             30            public _waitquarterperiod
0000             31            public _voltsAtPeak
0000             32            public _checkTime
0000             33            public _PWMStop
0000             34            public _PWMRight
0000             35            public _PWMLeft
0000             36            public _PWMbackward
0000             37            public _PWMforward
0000             38            public _InitPinADC
0000             39            public _Volts_at_Pin
0000             40            public _TIMER0_Init
0000             41            public _InitADC
0000             42            public _Timer2_ISR
0000             43            public _ADC_at_Pin
0000             44            public _waitms
0000             45            public _Timer3us
0000             46            public __c51_external_startup
0000             47            public _command
0000             48            public _right
0000             49            public _left
0000             50            public _backward
0000             51            public _forward
0000             52            public _stop
0000             53            public _claw_flag
0000             54            public _flag
0000             55            public _cartMoveB
0000             56            public _cartMoveF
0000             57            public _pwmSig6
0000             58            public _pwmSig5
0000             59            public _pwmSig4
0000             60            public _pwmSig3
0000             61            public _pwmSig2
0000             62            public _pwmSig1
0000             63            public _pwm_count3
0000             64            public _pwm_count2
0000             65            public _pwm_count1
0000             66            public _pwm_count
0000             67   ;--------------------------------------------------------
0000             68   ; Special Function Registers
0000             69   ;--------------------------------------------------------
0000             70   _ACC            DATA 0xe0
0000             71   _ADC0ASAH       DATA 0xb6
0000             72   _ADC0ASAL       DATA 0xb5
0000             73   _ADC0ASCF       DATA 0xa1
0000             74   _ADC0ASCT       DATA 0xc7
0000             75   _ADC0CF0        DATA 0xbc
0000             76   _ADC0CF1        DATA 0xb9
0000             77   _ADC0CF2        DATA 0xdf
0000             78   _ADC0CN0        DATA 0xe8
0000             79   _ADC0CN1        DATA 0xb2
0000             80   _ADC0CN2        DATA 0xb3
0000             81   _ADC0GTH        DATA 0xc4
0000             82   _ADC0GTL        DATA 0xc3
0000             83   _ADC0H          DATA 0xbe
0000             84   _ADC0L          DATA 0xbd
0000             85   _ADC0LTH        DATA 0xc6
0000             86   _ADC0LTL        DATA 0xc5
0000             87   _ADC0MX         DATA 0xbb
0000             88   _B              DATA 0xf0
0000             89   _CKCON0         DATA 0x8e
0000             90   _CKCON1         DATA 0xa6
0000             91   _CLEN0          DATA 0xc6
0000             92   _CLIE0          DATA 0xc7
0000             93   _CLIF0          DATA 0xe8
0000             94   _CLKSEL         DATA 0xa9
0000             95   _CLOUT0         DATA 0xd1
0000             96   _CLU0CF         DATA 0xb1
0000             97   _CLU0FN         DATA 0xaf
0000             98   _CLU0MX         DATA 0x84
0000             99   _CLU1CF         DATA 0xb3
0000            100   _CLU1FN         DATA 0xb2
0000            101   _CLU1MX         DATA 0x85
0000            102   _CLU2CF         DATA 0xb6
0000            103   _CLU2FN         DATA 0xb5
0000            104   _CLU2MX         DATA 0x91
0000            105   _CLU3CF         DATA 0xbf
0000            106   _CLU3FN         DATA 0xbe
0000            107   _CLU3MX         DATA 0xae
0000            108   _CMP0CN0        DATA 0x9b
0000            109   _CMP0CN1        DATA 0x99
0000            110   _CMP0MD         DATA 0x9d
0000            111   _CMP0MX         DATA 0x9f
0000            112   _CMP1CN0        DATA 0xbf
0000            113   _CMP1CN1        DATA 0xac
0000            114   _CMP1MD         DATA 0xab
0000            115   _CMP1MX         DATA 0xaa
0000            116   _CRC0CN0        DATA 0xce
0000            117   _CRC0CN1        DATA 0x86
0000            118   _CRC0CNT        DATA 0xd3
0000            119   _CRC0DAT        DATA 0xcb
0000            120   _CRC0FLIP       DATA 0xcf
0000            121   _CRC0IN         DATA 0xca
0000            122   _CRC0ST         DATA 0xd2
0000            123   _DAC0CF0        DATA 0x91
0000            124   _DAC0CF1        DATA 0x92
0000            125   _DAC0H          DATA 0x85
0000            126   _DAC0L          DATA 0x84
0000            127   _DAC1CF0        DATA 0x93
0000            128   _DAC1CF1        DATA 0x94
0000            129   _DAC1H          DATA 0x8a
0000            130   _DAC1L          DATA 0x89
0000            131   _DAC2CF0        DATA 0x95
0000            132   _DAC2CF1        DATA 0x96
0000            133   _DAC2H          DATA 0x8c
0000            134   _DAC2L          DATA 0x8b
0000            135   _DAC3CF0        DATA 0x9a
0000            136   _DAC3CF1        DATA 0x9c
0000            137   _DAC3H          DATA 0x8e
0000            138   _DAC3L          DATA 0x8d
0000            139   _DACGCF0        DATA 0x88
0000            140   _DACGCF1        DATA 0x98
0000            141   _DACGCF2        DATA 0xa2
0000            142   _DERIVID        DATA 0xad
0000            143   _DEVICEID       DATA 0xb5
0000            144   _DPH            DATA 0x83
0000            145   _DPL            DATA 0x82
0000            146   _EIE1           DATA 0xe6
0000            147   _EIE2           DATA 0xf3
0000            148   _EIP1           DATA 0xbb
0000            149   _EIP1H          DATA 0xee
0000            150   _EIP2           DATA 0xed
0000            151   _EIP2H          DATA 0xf6
0000            152   _EMI0CN         DATA 0xe7
0000            153   _FLKEY          DATA 0xb7
0000            154   _HFO0CAL        DATA 0xc7
0000            155   _HFO1CAL        DATA 0xd6
0000            156   _HFOCN          DATA 0xef
0000            157   _I2C0ADM        DATA 0xff
0000            158   _I2C0CN0        DATA 0xba
0000            159   _I2C0DIN        DATA 0xbc
0000            160   _I2C0DOUT       DATA 0xbb
0000            161   _I2C0FCN0       DATA 0xad
0000            162   _I2C0FCN1       DATA 0xab
0000            163   _I2C0FCT        DATA 0xf5
0000            164   _I2C0SLAD       DATA 0xbd
0000            165   _I2C0STAT       DATA 0xb9
0000            166   _IE             DATA 0xa8
0000            167   _IP             DATA 0xb8
0000            168   _IPH            DATA 0xf2
0000            169   _IT01CF         DATA 0xe4
0000            170   _LFO0CN         DATA 0xb1
0000            171   _P0             DATA 0x80
0000            172   _P0MASK         DATA 0xfe
0000            173   _P0MAT          DATA 0xfd
0000            174   _P0MDIN         DATA 0xf1
0000            175   _P0MDOUT        DATA 0xa4
0000            176   _P0SKIP         DATA 0xd4
0000            177   _P1             DATA 0x90
0000            178   _P1MASK         DATA 0xee
0000            179   _P1MAT          DATA 0xed
0000            180   _P1MDIN         DATA 0xf2
0000            181   _P1MDOUT        DATA 0xa5
0000            182   _P1SKIP         DATA 0xd5
0000            183   _P2             DATA 0xa0
0000            184   _P2MASK         DATA 0xfc
0000            185   _P2MAT          DATA 0xfb
0000            186   _P2MDIN         DATA 0xf3
0000            187   _P2MDOUT        DATA 0xa6
0000            188   _P2SKIP         DATA 0xcc
0000            189   _P3             DATA 0xb0
0000            190   _P3MDIN         DATA 0xf4
0000            191   _P3MDOUT        DATA 0x9c
0000            192   _PCA0CENT       DATA 0x9e
0000            193   _PCA0CLR        DATA 0x9c
0000            194   _PCA0CN0        DATA 0xd8
0000            195   _PCA0CPH0       DATA 0xfc
0000            196   _PCA0CPH1       DATA 0xea
0000            197   _PCA0CPH2       DATA 0xec
0000            198   _PCA0CPH3       DATA 0xf5
0000            199   _PCA0CPH4       DATA 0x85
0000            200   _PCA0CPH5       DATA 0xde
0000            201   _PCA0CPL0       DATA 0xfb
0000            202   _PCA0CPL1       DATA 0xe9
0000            203   _PCA0CPL2       DATA 0xeb
0000            204   _PCA0CPL3       DATA 0xf4
0000            205   _PCA0CPL4       DATA 0x84
0000            206   _PCA0CPL5       DATA 0xdd
0000            207   _PCA0CPM0       DATA 0xda
0000            208   _PCA0CPM1       DATA 0xdb
0000            209   _PCA0CPM2       DATA 0xdc
0000            210   _PCA0CPM3       DATA 0xae
0000            211   _PCA0CPM4       DATA 0xaf
0000            212   _PCA0CPM5       DATA 0xcc
0000            213   _PCA0H          DATA 0xfa
0000            214   _PCA0L          DATA 0xf9
0000            215   _PCA0MD         DATA 0xd9
0000            216   _PCA0POL        DATA 0x96
0000            217   _PCA0PWM        DATA 0xf7
0000            218   _PCON0          DATA 0x87
0000            219   _PCON1          DATA 0xcd
0000            220   _PFE0CN         DATA 0xc1
0000            221   _PRTDRV         DATA 0xf6
0000            222   _PSCTL          DATA 0x8f
0000            223   _PSTAT0         DATA 0xaa
0000            224   _PSW            DATA 0xd0
0000            225   _REF0CN         DATA 0xd1
0000            226   _REG0CN         DATA 0xc9
0000            227   _REVID          DATA 0xb6
0000            228   _RSTSRC         DATA 0xef
0000            229   _SBCON1         DATA 0x94
0000            230   _SBRLH1         DATA 0x96
0000            231   _SBRLL1         DATA 0x95
0000            232   _SBUF           DATA 0x99
0000            233   _SBUF0          DATA 0x99
0000            234   _SBUF1          DATA 0x92
0000            235   _SCON           DATA 0x98
0000            236   _SCON0          DATA 0x98
0000            237   _SCON1          DATA 0xc8
0000            238   _SFRPAGE        DATA 0xa7
0000            239   _SFRPGCN        DATA 0xbc
0000            240   _SFRSTACK       DATA 0xd7
0000            241   _SMB0ADM        DATA 0xd6
0000            242   _SMB0ADR        DATA 0xd7
0000            243   _SMB0CF         DATA 0xc1
0000            244   _SMB0CN0        DATA 0xc0
0000            245   _SMB0DAT        DATA 0xc2
0000            246   _SMB0FCN0       DATA 0xc3
0000            247   _SMB0FCN1       DATA 0xc4
0000            248   _SMB0FCT        DATA 0xef
0000            249   _SMB0RXLN       DATA 0xc5
0000            250   _SMB0TC         DATA 0xac
0000            251   _SMOD1          DATA 0x93
0000            252   _SP             DATA 0x81
0000            253   _SPI0CFG        DATA 0xa1
0000            254   _SPI0CKR        DATA 0xa2
0000            255   _SPI0CN0        DATA 0xf8
0000            256   _SPI0DAT        DATA 0xa3
0000            257   _SPI0FCN0       DATA 0x9a
0000            258   _SPI0FCN1       DATA 0x9b
0000            259   _SPI0FCT        DATA 0xf7
0000            260   _SPI0PCF        DATA 0xdf
0000            261   _TCON           DATA 0x88
0000            262   _TH0            DATA 0x8c
0000            263   _TH1            DATA 0x8d
0000            264   _TL0            DATA 0x8a
0000            265   _TL1            DATA 0x8b
0000            266   _TMOD           DATA 0x89
0000            267   _TMR2CN0        DATA 0xc8
0000            268   _TMR2CN1        DATA 0xfd
0000            269   _TMR2H          DATA 0xcf
0000            270   _TMR2L          DATA 0xce
0000            271   _TMR2RLH        DATA 0xcb
0000            272   _TMR2RLL        DATA 0xca
0000            273   _TMR3CN0        DATA 0x91
0000            274   _TMR3CN1        DATA 0xfe
0000            275   _TMR3H          DATA 0x95
0000            276   _TMR3L          DATA 0x94
0000            277   _TMR3RLH        DATA 0x93
0000            278   _TMR3RLL        DATA 0x92
0000            279   _TMR4CN0        DATA 0x98
0000            280   _TMR4CN1        DATA 0xff
0000            281   _TMR4H          DATA 0xa5
0000            282   _TMR4L          DATA 0xa4
0000            283   _TMR4RLH        DATA 0xa3
0000            284   _TMR4RLL        DATA 0xa2
0000            285   _TMR5CN0        DATA 0xc0
0000            286   _TMR5CN1        DATA 0xf1
0000            287   _TMR5H          DATA 0xd5
0000            288   _TMR5L          DATA 0xd4
0000            289   _TMR5RLH        DATA 0xd3
0000            290   _TMR5RLL        DATA 0xd2
0000            291   _UART0PCF       DATA 0xd9
0000            292   _UART1FCN0      DATA 0x9d
0000            293   _UART1FCN1      DATA 0xd8
0000            294   _UART1FCT       DATA 0xfa
0000            295   _UART1LIN       DATA 0x9e
0000            296   _UART1PCF       DATA 0xda
0000            297   _VDM0CN         DATA 0xff
0000            298   _WDTCN          DATA 0x97
0000            299   _XBR0           DATA 0xe1
0000            300   _XBR1           DATA 0xe2
0000            301   _XBR2           DATA 0xe3
0000            302   _XOSC0CN        DATA 0x86
0000            303   _DPTR           DATA 0x8382
0000            304   _TMR2RL         DATA 0xcbca
0000            305   _TMR3RL         DATA 0x9392
0000            306   _TMR4RL         DATA 0xa3a2
0000            307   _TMR5RL         DATA 0xd3d2
0000            308   _TMR0           DATA 0x8c8a
0000            309   _TMR1           DATA 0x8d8b
0000            310   _TMR2           DATA 0xcfce
0000            311   _TMR3           DATA 0x9594
0000            312   _TMR4           DATA 0xa5a4
0000            313   _TMR5           DATA 0xd5d4
0000            314   _SBRL1          DATA 0x9695
0000            315   _PCA0           DATA 0xfaf9
0000            316   _PCA0CP0        DATA 0xfcfb
0000            317   _PCA0CP1        DATA 0xeae9
0000            318   _PCA0CP2        DATA 0xeceb
0000            319   _PCA0CP3        DATA 0xf5f4
0000            320   _PCA0CP4        DATA 0x8584
0000            321   _PCA0CP5        DATA 0xdedd
0000            322   _ADC0ASA        DATA 0xb6b5
0000            323   _ADC0GT         DATA 0xc4c3
0000            324   _ADC0           DATA 0xbebd
0000            325   _ADC0LT         DATA 0xc6c5
0000            326   _DAC0           DATA 0x8584
0000            327   _DAC1           DATA 0x8a89
0000            328   _DAC2           DATA 0x8c8b
0000            329   _DAC3           DATA 0x8e8d
0000            330   ;--------------------------------------------------------
0000            331   ; special function bits
0000            332   ;--------------------------------------------------------
0000            333   _ACC_0          BIT 0xe0
0000            334   _ACC_1          BIT 0xe1
0000            335   _ACC_2          BIT 0xe2
0000            336   _ACC_3          BIT 0xe3
0000            337   _ACC_4          BIT 0xe4
0000            338   _ACC_5          BIT 0xe5
0000            339   _ACC_6          BIT 0xe6
0000            340   _ACC_7          BIT 0xe7
0000            341   _TEMPE          BIT 0xe8
0000            342   _ADGN0          BIT 0xe9
0000            343   _ADGN1          BIT 0xea
0000            344   _ADWINT         BIT 0xeb
0000            345   _ADBUSY         BIT 0xec
0000            346   _ADINT          BIT 0xed
0000            347   _IPOEN          BIT 0xee
0000            348   _ADEN           BIT 0xef
0000            349   _B_0            BIT 0xf0
0000            350   _B_1            BIT 0xf1
0000            351   _B_2            BIT 0xf2
0000            352   _B_3            BIT 0xf3
0000            353   _B_4            BIT 0xf4
0000            354   _B_5            BIT 0xf5
0000            355   _B_6            BIT 0xf6
0000            356   _B_7            BIT 0xf7
0000            357   _C0FIF          BIT 0xe8
0000            358   _C0RIF          BIT 0xe9
0000            359   _C1FIF          BIT 0xea
0000            360   _C1RIF          BIT 0xeb
0000            361   _C2FIF          BIT 0xec
0000            362   _C2RIF          BIT 0xed
0000            363   _C3FIF          BIT 0xee
0000            364   _C3RIF          BIT 0xef
0000            365   _D1SRC0         BIT 0x88
0000            366   _D1SRC1         BIT 0x89
0000            367   _D1AMEN         BIT 0x8a
0000            368   _D01REFSL       BIT 0x8b
0000            369   _D3SRC0         BIT 0x8c
0000            370   _D3SRC1         BIT 0x8d
0000            371   _D3AMEN         BIT 0x8e
0000            372   _D23REFSL       BIT 0x8f
0000            373   _D0UDIS         BIT 0x98
0000            374   _D1UDIS         BIT 0x99
0000            375   _D2UDIS         BIT 0x9a
0000            376   _D3UDIS         BIT 0x9b
0000            377   _EX0            BIT 0xa8
0000            378   _ET0            BIT 0xa9
0000            379   _EX1            BIT 0xaa
0000            380   _ET1            BIT 0xab
0000            381   _ES0            BIT 0xac
0000            382   _ET2            BIT 0xad
0000            383   _ESPI0          BIT 0xae
0000            384   _EA             BIT 0xaf
0000            385   _PX0            BIT 0xb8
0000            386   _PT0            BIT 0xb9
0000            387   _PX1            BIT 0xba
0000            388   _PT1            BIT 0xbb
0000            389   _PS0            BIT 0xbc
0000            390   _PT2            BIT 0xbd
0000            391   _PSPI0          BIT 0xbe
0000            392   _P0_0           BIT 0x80
0000            393   _P0_1           BIT 0x81
0000            394   _P0_2           BIT 0x82
0000            395   _P0_3           BIT 0x83
0000            396   _P0_4           BIT 0x84
0000            397   _P0_5           BIT 0x85
0000            398   _P0_6           BIT 0x86
0000            399   _P0_7           BIT 0x87
0000            400   _P1_0           BIT 0x90
0000            401   _P1_1           BIT 0x91
0000            402   _P1_2           BIT 0x92
0000            403   _P1_3           BIT 0x93
0000            404   _P1_4           BIT 0x94
0000            405   _P1_5           BIT 0x95
0000            406   _P1_6           BIT 0x96
0000            407   _P1_7           BIT 0x97
0000            408   _P2_0           BIT 0xa0
0000            409   _P2_1           BIT 0xa1
0000            410   _P2_2           BIT 0xa2
0000            411   _P2_3           BIT 0xa3
0000            412   _P2_4           BIT 0xa4
0000            413   _P2_5           BIT 0xa5
0000            414   _P2_6           BIT 0xa6
0000            415   _P3_0           BIT 0xb0
0000            416   _P3_1           BIT 0xb1
0000            417   _P3_2           BIT 0xb2
0000            418   _P3_3           BIT 0xb3
0000            419   _P3_4           BIT 0xb4
0000            420   _P3_7           BIT 0xb7
0000            421   _CCF0           BIT 0xd8
0000            422   _CCF1           BIT 0xd9
0000            423   _CCF2           BIT 0xda
0000            424   _CCF3           BIT 0xdb
0000            425   _CCF4           BIT 0xdc
0000            426   _CCF5           BIT 0xdd
0000            427   _CR             BIT 0xde
0000            428   _CF             BIT 0xdf
0000            429   _PARITY         BIT 0xd0
0000            430   _F1             BIT 0xd1
0000            431   _OV             BIT 0xd2
0000            432   _RS0            BIT 0xd3
0000            433   _RS1            BIT 0xd4
0000            434   _F0             BIT 0xd5
0000            435   _AC             BIT 0xd6
0000            436   _CY             BIT 0xd7
0000            437   _RI             BIT 0x98
0000            438   _TI             BIT 0x99
0000            439   _RB8            BIT 0x9a
0000            440   _TB8            BIT 0x9b
0000            441   _REN            BIT 0x9c
0000            442   _CE             BIT 0x9d
0000            443   _SMODE          BIT 0x9e
0000            444   _RI1            BIT 0xc8
0000            445   _TI1            BIT 0xc9
0000            446   _RBX1           BIT 0xca
0000            447   _TBX1           BIT 0xcb
0000            448   _REN1           BIT 0xcc
0000            449   _PERR1          BIT 0xcd
0000            450   _OVR1           BIT 0xce
0000            451   _SI             BIT 0xc0
0000            452   _ACK            BIT 0xc1
0000            453   _ARBLOST        BIT 0xc2
0000            454   _ACKRQ          BIT 0xc3
0000            455   _STO            BIT 0xc4
0000            456   _STA            BIT 0xc5
0000            457   _TXMODE         BIT 0xc6
0000            458   _MASTER         BIT 0xc7
0000            459   _SPIEN          BIT 0xf8
0000            460   _TXNF           BIT 0xf9
0000            461   _NSSMD0         BIT 0xfa
0000            462   _NSSMD1         BIT 0xfb
0000            463   _RXOVRN         BIT 0xfc
0000            464   _MODF           BIT 0xfd
0000            465   _WCOL           BIT 0xfe
0000            466   _SPIF           BIT 0xff
0000            467   _IT0            BIT 0x88
0000            468   _IE0            BIT 0x89
0000            469   _IT1            BIT 0x8a
0000            470   _IE1            BIT 0x8b
0000            471   _TR0            BIT 0x8c
0000            472   _TF0            BIT 0x8d
0000            473   _TR1            BIT 0x8e
0000            474   _TF1            BIT 0x8f
0000            475   _T2XCLK0        BIT 0xc8
0000            476   _T2XCLK1        BIT 0xc9
0000            477   _TR2            BIT 0xca
0000            478   _T2SPLIT        BIT 0xcb
0000            479   _TF2CEN         BIT 0xcc
0000            480   _TF2LEN         BIT 0xcd
0000            481   _TF2L           BIT 0xce
0000            482   _TF2H           BIT 0xcf
0000            483   _T4XCLK0        BIT 0x98
0000            484   _T4XCLK1        BIT 0x99
0000            485   _TR4            BIT 0x9a
0000            486   _T4SPLIT        BIT 0x9b
0000            487   _TF4CEN         BIT 0x9c
0000            488   _TF4LEN         BIT 0x9d
0000            489   _TF4L           BIT 0x9e
0000            490   _TF4H           BIT 0x9f
0000            491   _T5XCLK0        BIT 0xc0
0000            492   _T5XCLK1        BIT 0xc1
0000            493   _TR5            BIT 0xc2
0000            494   _T5SPLIT        BIT 0xc3
0000            495   _TF5CEN         BIT 0xc4
0000            496   _TF5LEN         BIT 0xc5
0000            497   _TF5L           BIT 0xc6
0000            498   _TF5H           BIT 0xc7
0000            499   _RIE            BIT 0xd8
0000            500   _RXTO0          BIT 0xd9
0000            501   _RXTO1          BIT 0xda
0000            502   _RFRQ           BIT 0xdb
0000            503   _TIE            BIT 0xdc
0000            504   _TXHOLD         BIT 0xdd
0000            505   _TXNF1          BIT 0xde
0000            506   _TFRQ           BIT 0xdf
0000            507   ;--------------------------------------------------------
0000            508   ; overlayable register banks
0000            509   ;--------------------------------------------------------
0000            510            rbank0 segment data overlay
0000            511   ;--------------------------------------------------------
0000            512   ; internal ram data
0000            513   ;--------------------------------------------------------
0000            514            rseg R_DSEG
0000            515   _pwm_count:
0000            516            ds 1
0001            517   _pwm_count1:
0001            518            ds 1
0002            519   _pwm_count2:
0002            520            ds 1
0003            521   _pwm_count3:
0003            522            ds 1
0004            523   _pwmSig1:
0004            524            ds 2
0006            525   _pwmSig2:
0006            526            ds 2
0008            527   _pwmSig3:
0008            528            ds 2
000A            529   _pwmSig4:
000A            530            ds 2
000C            531   _pwmSig5:
000C            532            ds 2
000E            533   _pwmSig6:
000E            534            ds 2
0010            535   _cartMoveF:
0010            536            ds 2
0012            537   _cartMoveB:
0012            538            ds 2
0014            539   _flag:
0014            540            ds 2
0016            541   _claw_flag:
0016            542            ds 2
0018            543   _stop:
0018            544            ds 8
0020            545   _forward:
0020            546            ds 8
0028            547   _backward:
0028            548            ds 8
0030            549   _left:
0030            550            ds 8
0038            551   _right:
0038            552            ds 8
0040            553   _command:
0040            554            ds 8
0048            555   _checkTime_overflow_count_1_73:
0048            556            ds 2
004A            557   _checkTime_sloc0_1_0:
004A            558            ds 4
004E            559   ;--------------------------------------------------------
004E            560   ; overlayable items in internal ram 
004E            561   ;--------------------------------------------------------
0000            562            rseg    R_OSEG
0000            563            rseg    R_OSEG
0000            564            rseg    R_OSEG
0000            565   _InitPinADC_PARM_2:
0000            566            ds 1
0001            567   ;--------------------------------------------------------
0001            568   ; indirectly addressable internal ram data
0001            569   ;--------------------------------------------------------
0000            570            rseg R_ISEG
0000            571   ;--------------------------------------------------------
0000            572   ; absolute internal ram data
0000            573   ;--------------------------------------------------------
0000            574            DSEG
0000            575   ;--------------------------------------------------------
0000            576   ; bit data
0000            577   ;--------------------------------------------------------
0000            578            rseg R_BSEG
0000            579   _Timer2_ISR_sloc0_1_0:
0000            580            DBIT    1
0001            581   ;--------------------------------------------------------
0001            582   ; paged external ram data
0001            583   ;--------------------------------------------------------
0000            584            rseg R_PSEG
0000            585   ;--------------------------------------------------------
0000            586   ; external ram data
0000            587   ;--------------------------------------------------------
0000            588            rseg R_XSEG
0000            589   ;--------------------------------------------------------
0000            590   ; absolute external ram data
0000            591   ;--------------------------------------------------------
0000            592            XSEG
0000            593   ;--------------------------------------------------------
0000            594   ; external initialized ram data
0000            595   ;--------------------------------------------------------
0000            596            rseg R_IXSEG
0000            597            rseg R_HOME
0000            598            rseg R_GSINIT
0000            599            rseg R_CSEG
0000            600   ;--------------------------------------------------------
0000            601   ; Reset entry point and interrupt vectors
0000            602   ;--------------------------------------------------------
0000            603            CSEG at 0x0000
0000 020100     604            ljmp    _crt0
002B            605            CSEG at 0x002b
002B 020100     606            ljmp    _Timer2_ISR
002E            607   ;--------------------------------------------------------
002E            608   ; global & static initialisations
002E            609   ;--------------------------------------------------------
0000            610            rseg R_HOME
0000            611            rseg R_GSINIT
0000            612            rseg R_GSINIT
0000            613   ;--------------------------------------------------------
0000            614   ; data variables initialization
0000            615   ;--------------------------------------------------------
0000            616            rseg R_DINIT
0000            617   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:53: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 75E000     618            mov     _pwm_count,#0x00
0003            619   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:54: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75A000     620            mov     _pwm_count1,#0x00
0006            621   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:55: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 756000     622            mov     _pwm_count2,#0x00
0009            623   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:56: volatile unsigned char pwm_count3 = 0; //
0009 752000     624            mov     _pwm_count3,#0x00
000C            625   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:71: volatile int flag = 0;
000C E4         626            clr     a
000D F530       627            mov     _flag,a
000F F531       628            mov     (_flag + 1),a
0011            629   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:72: volatile int claw_flag = 0;
0011 E4         630            clr     a
0012 F5F0       631            mov     _claw_flag,a
0014 F5F1       632            mov     (_claw_flag + 1),a
0016            633   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:73: int stop[]={1,0,0,0};
0016 75B001     634            mov     _stop,#0x01
0019 75B100     635            mov     (_stop + 1),#0x00
001C 75B200     636            mov     (_stop + 0x0002),#0x00
001F 75B300     637            mov     ((_stop + 0x0002) + 1),#0x00
0022 75B400     638            mov     (_stop + 0x0004),#0x00
0025 75B500     639            mov     ((_stop + 0x0004) + 1),#0x00
0028 75B600     640            mov     (_stop + 0x0006),#0x00
002B 75B700     641            mov     ((_stop + 0x0006) + 1),#0x00
002E            642   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:74: int forward[]={1,1,1,1};
002E 757001     643            mov     _forward,#0x01
0031 757100     644            mov     (_forward + 1),#0x00
0034 757201     645            mov     (_forward + 0x0002),#0x01
0037 757300     646            mov     ((_forward + 0x0002) + 1),#0x00
003A 757401     647            mov     (_forward + 0x0004),#0x01
003D 757500     648            mov     ((_forward + 0x0004) + 1),#0x00
0040 757601     649            mov     (_forward + 0x0006),#0x01
0043 757700     650            mov     ((_forward + 0x0006) + 1),#0x00
0046            651   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:75: int backward[]={1,0,0,0};
0046 753001     652            mov     _backward,#0x01
0049 753100     653            mov     (_backward + 1),#0x00
004C 753200     654            mov     (_backward + 0x0002),#0x00
004F 753300     655            mov     ((_backward + 0x0002) + 1),#0x00
0052 753400     656            mov     (_backward + 0x0004),#0x00
0055 753500     657            mov     ((_backward + 0x0004) + 1),#0x00
0058 753600     658            mov     (_backward + 0x0006),#0x00
005B 753700     659            mov     ((_backward + 0x0006) + 1),#0x00
005E            660   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:76: int left[]={1,0,1,0};
005E 75F001     661            mov     _left,#0x01
0061 75F100     662            mov     (_left + 1),#0x00
0064 75F200     663            mov     (_left + 0x0002),#0x00
0067 75F300     664            mov     ((_left + 0x0002) + 1),#0x00
006A 75F401     665            mov     (_left + 0x0004),#0x01
006D 75F500     666            mov     ((_left + 0x0004) + 1),#0x00
0070 75F600     667            mov     (_left + 0x0006),#0x00
0073 75F700     668            mov     ((_left + 0x0006) + 1),#0x00
0076            669   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:77: int right[]={1,1,0,1};
0076 75B001     670            mov     _right,#0x01
0079 75B100     671            mov     (_right + 1),#0x00
007C 75B201     672            mov     (_right + 0x0002),#0x01
007F 75B300     673            mov     ((_right + 0x0002) + 1),#0x00
0082 75B400     674            mov     (_right + 0x0004),#0x00
0085 75B500     675            mov     ((_right + 0x0004) + 1),#0x00
0088 75B601     676            mov     (_right + 0x0006),#0x01
008B 75B700     677            mov     ((_right + 0x0006) + 1),#0x00
008E            678   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:79: int command[4] = {0,0,0,0};
008E 757000     679            mov     _command,#0x00
0091 757100     680            mov     (_command + 1),#0x00
0094 757200     681            mov     (_command + 0x0002),#0x00
0097 757300     682            mov     ((_command + 0x0002) + 1),#0x00
009A 757400     683            mov     (_command + 0x0004),#0x00
009D 757500     684            mov     ((_command + 0x0004) + 1),#0x00
00A0 757600     685            mov     (_command + 0x0006),#0x00
00A3 757700     686            mov     ((_command + 0x0006) + 1),#0x00
00A6            687            ; The linker places a 'ret' at the end of segment R_DINIT.
00A6            688   ;--------------------------------------------------------
00A6            689   ; code
00A6            690   ;--------------------------------------------------------
0000            691            rseg R_CSEG
0000            692   ;------------------------------------------------------------
0000            693   ;Allocation info for local variables in function '_c51_external_startup'
0000            694   ;------------------------------------------------------------
0000            695   ;------------------------------------------------------------
0000            696   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:81: char _c51_external_startup(void)
0000            697   ;        -----------------------------------------
0000            698   ;         function _c51_external_startup
0000            699   ;        -----------------------------------------
0000            700   __c51_external_startup:
0000            701            using   0
0000            702   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:84: SFRPAGE = 0x00;
0000 75A700     703            mov     _SFRPAGE,#0x00
0003            704   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:85: WDTCN = 0xDE; //First key
0003 7597DE     705            mov     _WDTCN,#0xDE
0006            706   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:86: WDTCN = 0xAD; //Second key
0006 7597AD     707            mov     _WDTCN,#0xAD
0009            708   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:88: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     709            mov     _VDM0CN,#0x80
000C            710   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:89: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     711            mov     _RSTSRC,#0x06
000F            712   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:96: SFRPAGE = 0x10;
000F 75A710     713            mov     _SFRPAGE,#0x10
0012            714   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:97: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     715            mov     _PFE0CN,#0x20
0015            716   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:98: SFRPAGE = 0x00;
0015 75A700     717            mov     _SFRPAGE,#0x00
0018            718   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:119: CLKSEL = 0x00;
0018 75A900     719            mov     _CLKSEL,#0x00
001B            720   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:120: CLKSEL = 0x00;
001B 75A900     721            mov     _CLKSEL,#0x00
001E            722   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:121: while ((CLKSEL & 0x80) == 0);
001E            723   L002001?:
001E E5A9       724            mov     a,_CLKSEL
0020 30E718     725            jnb     acc.7,L002001?
0023            726   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:122: CLKSEL = 0x03;
0023 75A903     727            mov     _CLKSEL,#0x03
0026            728   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:123: CLKSEL = 0x03;
0026 75A903     729            mov     _CLKSEL,#0x03
0029            730   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:124: while ((CLKSEL & 0x80) == 0);
0029            731   L002004?:
0029 E5A9       732            mov     a,_CLKSEL
002B 30E798     733            jnb     acc.7,L002004?
002E            734   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:129: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     735            orl     _P0MDOUT,#0x10
0031            736   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:130: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     737            mov     _XBR0,#0x01
0034            738   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:131: XBR1 = 0X00;
0034 75E200     739            mov     _XBR1,#0x00
0037            740   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:132: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     741            mov     _XBR2,#0x40
003A            742   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:138: SCON0 = 0x10;
003A 759810     743            mov     _SCON0,#0x10
003D            744   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:139: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     745            mov     _TH1,#0xE6
0040            746   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:140: TL1 = TH1;      // Init Timer1
0040 858D8B     747            mov     _TL1,_TH1
0043            748   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:141: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     749            anl     _TMOD,#0x0F
0046            750   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:142: TMOD |= 0x20;
0046 438920     751            orl     _TMOD,#0x20
0049            752   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:143: TR1 = 1; // START Timer1
0049 D28E       753            setb    _TR1
004B            754   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:144: TI = 1;  // Indicate TX0 ready
004B D299       755            setb    _TI
004D            756   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:147: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     757            mov     _TMR2CN0,#0x00
0050            758   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:148: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     759            orl     _CKCON0,#0x10
0053            760   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:149: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     761            mov     _TMR2RL,#0xE0
0056 75CBE3     762            mov     (_TMR2RL >> 8),#0xE3
0059            763   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:150: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     764            mov     _TMR2,#0xFF
005C 75CFFF     765            mov     (_TMR2 >> 8),#0xFF
005F            766   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:151: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       767            setb    _ET2
0061            768   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:152: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       769            setb    _TR2
0063            770   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:169: EA = 1; // Enable interrupts
0063 D2AF       771            setb    _EA
0065            772   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:172: return 0;
0065 758200     773            mov     dpl,#0x00
0068 22         774            ret
0069            775   ;------------------------------------------------------------
0069            776   ;Allocation info for local variables in function 'Timer3us'
0069            777   ;------------------------------------------------------------
0069            778   ;us                        Allocated to registers r2 r3 
0069            779   ;i                         Allocated to registers r4 r5 
0069            780   ;------------------------------------------------------------
0069            781   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:174: void Timer3us(unsigned int us)
0069            782   ;        -----------------------------------------
0069            783   ;         function Timer3us
0069            784   ;        -----------------------------------------
0069            785   _Timer3us:
0069 AA82       786            mov     r2,dpl
006B AB83       787            mov     r3,dph
006D            788   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:179: CKCON0|=0b_0100_0000;
006D 438E40     789            orl     _CKCON0,#0x40
0070            790   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:181: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     791            mov     _TMR3RL,#0xB8
0073 7593FF     792            mov     (_TMR3RL >> 8),#0xFF
0076            793   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:182: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     794            mov     _TMR3,_TMR3RL
0079 859395     795            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            796   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:184: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     797            mov     _TMR3CN0,#0x04
007F            798   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:185: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       799            mov     r4,#0x00
0081 7D00       800            mov     r5,#0x00
0083            801   L003004?:
0083 C3         802            clr     c
0084 EC         803            mov     a,r4
0085 9A         804            subb    a,r2
0086 ED         805            mov     a,r5
0087 9B         806            subb    a,r3
0088 5001       807            jnc     L003007?
008A            808   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:187: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            809   L003001?:
008A E591       810            mov     a,_TMR3CN0
008C 30E7D8     811            jnb     acc.7,L003001?
008F            812   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:188: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     813            anl     _TMR3CN0,#0x7F
0092            814   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:185: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         815            inc     r4
0093 BC0058     816            cjne    r4,#0x00,L003004?
0096 0D         817            inc     r5
0097 8001       818            sjmp    L003004?
0099            819   L003007?:
0099            820   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:190: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     821            mov     _TMR3CN0,#0x00
009C 22         822            ret
009D            823   ;------------------------------------------------------------
009D            824   ;Allocation info for local variables in function 'waitms'
009D            825   ;------------------------------------------------------------
009D            826   ;ms                        Allocated to registers r2 r3 
009D            827   ;j                         Allocated to registers r4 r5 
009D            828   ;k                         Allocated to registers r6 
009D            829   ;------------------------------------------------------------
009D            830   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:192: void waitms (unsigned int ms)
009D            831   ;        -----------------------------------------
009D            832   ;         function waitms
009D            833   ;        -----------------------------------------
009D            834   _waitms:
009D AA82       835            mov     r2,dpl
009F AB83       836            mov     r3,dph
00A1            837   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:196: for(j=0; j<ms; j++)
00A1 7C00       838            mov     r4,#0x00
00A3 7D00       839            mov     r5,#0x00
00A5            840   L004005?:
00A5 C3         841            clr     c
00A6 EC         842            mov     a,r4
00A7 9A         843            subb    a,r2
00A8 ED         844            mov     a,r5
00A9 9B         845            subb    a,r3
00AA 5001       846            jnc     L004009?
00AC            847   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:197: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       848            mov     r6,#0x00
00AE            849   L004001?:
00AE BE04D8     850            cjne    r6,#0x04,L004018?
00B1            851   L004018?:
00B1 5001       852            jnc     L004007?
00B3 9000FA     853            mov     dptr,#0x00FA
00B6 C002       854            push    ar2
00B8 C003       855            push    ar3
00BA C004       856            push    ar4
00BC C005       857            push    ar5
00BE C006       858            push    ar6
00C0 120100     859            lcall   _Timer3us
00C3 D006       860            pop     ar6
00C5 D005       861            pop     ar5
00C7 D004       862            pop     ar4
00C9 D003       863            pop     ar3
00CB D002       864            pop     ar2
00CD 0E         865            inc     r6
00CE 8001       866            sjmp    L004001?
00D0            867   L004007?:
00D0            868   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:196: for(j=0; j<ms; j++)
00D0 0C         869            inc     r4
00D1 BC0018     870            cjne    r4,#0x00,L004005?
00D4 0D         871            inc     r5
00D5 8001       872            sjmp    L004005?
00D7            873   L004009?:
00D7 22         874            ret
00D8            875   ;------------------------------------------------------------
00D8            876   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            877   ;------------------------------------------------------------
00D8            878   ;pin                       Allocated to registers 
00D8            879   ;------------------------------------------------------------
00D8            880   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:200: unsigned int ADC_at_Pin(unsigned char pin)
00D8            881   ;        -----------------------------------------
00D8            882   ;         function ADC_at_Pin
00D8            883   ;        -----------------------------------------
00D8            884   _ADC_at_Pin:
00D8 8582BB     885            mov     _ADC0MX,dpl
00DB            886   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:203: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       887            setb    _ADBUSY
00DD            888   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:204: while (ADBUSY); // Wait for dummy conversion to finish
00DD            889   L005001?:
00DD 20EC58     890            jb      _ADBUSY,L005001?
00E0            891   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:205: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       892            setb    _ADBUSY
00E2            893   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:206: while (ADBUSY); // Wait for conversion to complete
00E2            894   L005004?:
00E2 20EC98     895            jb      _ADBUSY,L005004?
00E5            896   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:207: return (ADC0);
00E5 85BD82     897            mov     dpl,_ADC0
00E8 85BE83     898            mov     dph,(_ADC0 >> 8)
00EB 22         899            ret
00EC            900   ;------------------------------------------------------------
00EC            901   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            902   ;------------------------------------------------------------
00EC            903   ;------------------------------------------------------------
00EC            904   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:211: void Timer2_ISR(void) interrupt 5
00EC            905   ;        -----------------------------------------
00EC            906   ;         function Timer2_ISR
00EC            907   ;        -----------------------------------------
00EC            908   _Timer2_ISR:
00EC C0E0       909            push    acc
00EE C002       910            push    ar2
00F0 C003       911            push    ar3
00F2 C0D0       912            push    psw
00F4 75D000     913            mov     psw,#0x00
00F7            914   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:213: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       915            clr     _TF2H
00F9            916   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:215: pwm_count++;
00F9 05E0       917            inc     _pwm_count
00FB            918   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:216: if (pwm_count>100)
00FB E5E0       919            mov     a,_pwm_count
00FD 249B       920            add     a,#0xff - 0x64
00FF 5001       921            jnc     L006002?
0101            922   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:217: pwm_count = 0;
0101 75E000     923            mov     _pwm_count,#0x00
0104            924   L006002?:
0104            925   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:220: motorR1 = pwm_count>pwmSig1 ? 0 : 1;  //rightforward
0104 AAE0       926            mov     r2,_pwm_count
0106 7B00       927            mov     r3,#0x00
0108 C3         928            clr     c
0109 E5E0       929            mov     a,_pwmSig1
010B 9A         930            subb    a,r2
010C E5E1       931            mov     a,(_pwmSig1 + 1)
010E 9B         932            subb    a,r3
010F 9298       933            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         934            cpl     c
0112 9294       935            mov     _P1_4,c
0114            936   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:221: motorR2 = pwm_count>pwmSig2 ? 0 : 1;  //rightbackward
0114 AAE0       937            mov     r2,_pwm_count
0116 7B00       938            mov     r3,#0x00
0118 C3         939            clr     c
0119 E5A0       940            mov     a,_pwmSig2
011B 9A         941            subb    a,r2
011C E5A1       942            mov     a,(_pwmSig2 + 1)
011E 9B         943            subb    a,r3
011F 9298       944            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         945            cpl     c
0122 9295       946            mov     _P1_5,c
0124            947   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:223: motorL1 = pwm_count>pwmSig3 ? 0 : 1;  //leftforward
0124 AAE0       948            mov     r2,_pwm_count
0126 7B00       949            mov     r3,#0x00
0128 C3         950            clr     c
0129 E560       951            mov     a,_pwmSig3
012B 9A         952            subb    a,r2
012C E561       953            mov     a,(_pwmSig3 + 1)
012E 9B         954            subb    a,r3
012F 9298       955            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         956            cpl     c
0132 9292       957            mov     _P1_2,c
0134            958   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:224: motorL2 = pwm_count>pwmSig4 ? 0 : 1;  //leftbackward
0134 AAE0       959            mov     r2,_pwm_count
0136 7B00       960            mov     r3,#0x00
0138 C3         961            clr     c
0139 E520       962            mov     a,_pwmSig4
013B 9A         963            subb    a,r2
013C E521       964            mov     a,(_pwmSig4 + 1)
013E 9B         965            subb    a,r3
013F 9298       966            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         967            cpl     c
0142 9293       968            mov     _P1_3,c
0144            969   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:226: OUT0=pwm_count>80?0:1;
0144 E5E0       970            mov     a,_pwm_count
0146 24AF       971            add     a,#0xff - 0x50
0148 9298       972            mov  _Timer2_ISR_sloc0_1_0,c
014A B3         973            cpl     c
014B 92A0       974            mov     _P2_0,c
014D D0D0       975            pop     psw
014F D003       976            pop     ar3
0151 D002       977            pop     ar2
0153 D0E0       978            pop     acc
0155 32         979            reti
0156            980   ;        eliminated unneeded push/pop dpl
0156            981   ;        eliminated unneeded push/pop dph
0156            982   ;        eliminated unneeded push/pop b
0156            983   ;------------------------------------------------------------
0156            984   ;Allocation info for local variables in function 'InitADC'
0156            985   ;------------------------------------------------------------
0156            986   ;------------------------------------------------------------
0156            987   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:230: void InitADC(void)
0156            988   ;        -----------------------------------------
0156            989   ;         function InitADC
0156            990   ;        -----------------------------------------
0156            991   _InitADC:
0156            992   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:232: SFRPAGE = 0x00;
0156 75A700     993            mov     _SFRPAGE,#0x00
0159            994   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:233: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0159 75B280     995            mov     _ADC0CN1,#0x80
015C            996   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:234: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
015C 75BCF8     997            mov     _ADC0CF0,#0xF8
015F            998   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:235: ADC0CF1 = 0b_0_0_011110; // Same as default for now
015F 75B91E     999            mov     _ADC0CF1,#0x1E
0162           1000   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:236: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0162 75E800    1001            mov     _ADC0CN0,#0x00
0165           1002   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:237: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
0165 75DF3F    1003            mov     _ADC0CF2,#0x3F
0168           1004   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:238: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0168 75B300    1005            mov     _ADC0CN2,#0x00
016B           1006   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:239: ADEN = 1; // Enable ADC
016B D2EF      1007            setb    _ADEN
016D 22        1008            ret
016E           1009   ;------------------------------------------------------------
016E           1010   ;Allocation info for local variables in function 'TIMER0_Init'
016E           1011   ;------------------------------------------------------------
016E           1012   ;------------------------------------------------------------
016E           1013   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:241: void TIMER0_Init(void)
016E           1014   ;        -----------------------------------------
016E           1015   ;         function TIMER0_Init
016E           1016   ;        -----------------------------------------
016E           1017   _TIMER0_Init:
016E           1018   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:243: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
016E 5389F0    1019            anl     _TMOD,#0xF0
0171           1020   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:244: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0171 438901    1021            orl     _TMOD,#0x01
0174           1022   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:245: TR0 = 0; // Stop Timer/Counter 0
0174 C28C      1023            clr     _TR0
0176 22        1024            ret
0177           1025   ;------------------------------------------------------------
0177           1026   ;Allocation info for local variables in function 'Volts_at_Pin'
0177           1027   ;------------------------------------------------------------
0177           1028   ;pin                       Allocated to registers r2 
0177           1029   ;------------------------------------------------------------
0177           1030   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:250: float Volts_at_Pin(unsigned char pin)
0177           1031   ;        -----------------------------------------
0177           1032   ;         function Volts_at_Pin
0177           1033   ;        -----------------------------------------
0177           1034   _Volts_at_Pin:
0177           1035   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:252: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
0177 120100    1036            lcall   _ADC_at_Pin
017A 120100    1037            lcall   ___uint2fs
017D AA82      1038            mov     r2,dpl
017F AB83      1039            mov     r3,dph
0181 ACF0      1040            mov     r4,b
0183 FD        1041            mov     r5,a
0184 C002      1042            push    ar2
0186 C003      1043            push    ar3
0188 C004      1044            push    ar4
018A C005      1045            push    ar5
018C 906C8B    1046            mov     dptr,#0x6C8B
018F 75F053    1047            mov     b,#0x53
0192 7440      1048            mov     a,#0x40
0194 120100    1049            lcall   ___fsmul
0197 AA82      1050            mov     r2,dpl
0199 AB83      1051            mov     r3,dph
019B ACF0      1052            mov     r4,b
019D FD        1053            mov     r5,a
019E E581      1054            mov     a,sp
01A0 24FC      1055            add     a,#0xfc
01A2 F581      1056            mov     sp,a
01A4 E4        1057            clr     a
01A5 C0E0      1058            push    acc
01A7 74FC      1059            mov     a,#0xFC
01A9 C0E0      1060            push    acc
01AB 747F      1061            mov     a,#0x7F
01AD C0E0      1062            push    acc
01AF 7446      1063            mov     a,#0x46
01B1 C0E0      1064            push    acc
01B3 8A82      1065            mov     dpl,r2
01B5 8B83      1066            mov     dph,r3
01B7 8CF0      1067            mov     b,r4
01B9 ED        1068            mov     a,r5
01BA 120100    1069            lcall   ___fsdiv
01BD AA82      1070            mov     r2,dpl
01BF AB83      1071            mov     r3,dph
01C1 ACF0      1072            mov     r4,b
01C3 FD        1073            mov     r5,a
01C4 E581      1074            mov     a,sp
01C6 24FC      1075            add     a,#0xfc
01C8 F581      1076            mov     sp,a
01CA 8A82      1077            mov     dpl,r2
01CC 8B83      1078            mov     dph,r3
01CE 8CF0      1079            mov     b,r4
01D0 ED        1080            mov     a,r5
01D1 22        1081            ret
01D2           1082   ;------------------------------------------------------------
01D2           1083   ;Allocation info for local variables in function 'InitPinADC'
01D2           1084   ;------------------------------------------------------------
01D2           1085   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01D2           1086   ;portno                    Allocated to registers r2 
01D2           1087   ;mask                      Allocated to registers r3 
01D2           1088   ;------------------------------------------------------------
01D2           1089   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:254: void InitPinADC(unsigned char portno, unsigned char pinno)
01D2           1090   ;        -----------------------------------------
01D2           1091   ;         function InitPinADC
01D2           1092   ;        -----------------------------------------
01D2           1093   _InitPinADC:
01D2 AA82      1094            mov     r2,dpl
01D4           1095   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:258: mask = 1 << pinno;
01D4 8550F0    1096            mov     b,_InitPinADC_PARM_2
01D7 05F0      1097            inc     b
01D9 7401      1098            mov     a,#0x01
01DB 8001      1099            sjmp    L010013?
01DD           1100   L010011?:
01DD 25E0      1101            add     a,acc
01DF           1102   L010013?:
01DF D5F0D8    1103            djnz    b,L010011?
01E2 FB        1104            mov     r3,a
01E3           1105   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:260: SFRPAGE = 0x20;
01E3 75A720    1106            mov     _SFRPAGE,#0x20
01E6           1107   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:261: switch (portno)
01E6 BA0018    1108            cjne    r2,#0x00,L010014?
01E9 8001      1109            sjmp    L010001?
01EB           1110   L010014?:
01EB BA0198    1111            cjne    r2,#0x01,L010015?
01EE 8001      1112            sjmp    L010002?
01F0           1113   L010015?:
01F0           1114   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:263: case 0:
01F0 BA0218    1115            cjne    r2,#0x02,L010005?
01F3 8001      1116            sjmp    L010003?
01F5           1117   L010001?:
01F5           1118   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:264: P0MDIN &= (~mask); // Set pin as analog input
01F5 EB        1119            mov     a,r3
01F6 F4        1120            cpl     a
01F7 FA        1121            mov     r2,a
01F8 52F1      1122            anl     _P0MDIN,a
01FA           1123   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:265: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01FA EB        1124            mov     a,r3
01FB 42D4      1125            orl     _P0SKIP,a
01FD           1126   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:266: break;
01FD           1127   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:267: case 1:
01FD 8001      1128            sjmp    L010005?
01FF           1129   L010002?:
01FF           1130   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:268: P1MDIN &= (~mask); // Set pin as analog input
01FF EB        1131            mov     a,r3
0200 F4        1132            cpl     a
0201 FA        1133            mov     r2,a
0202 52F2      1134            anl     _P1MDIN,a
0204           1135   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:269: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0204 EB        1136            mov     a,r3
0205 42D5      1137            orl     _P1SKIP,a
0207           1138   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:270: break;
0207           1139   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:271: case 2:
0207 8001      1140            sjmp    L010005?
0209           1141   L010003?:
0209           1142   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:272: P2MDIN &= (~mask); // Set pin as analog input
0209 EB        1143            mov     a,r3
020A F4        1144            cpl     a
020B FA        1145            mov     r2,a
020C 52F3      1146            anl     _P2MDIN,a
020E           1147   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:273: P2SKIP |= mask; // Skip Crossbar decoding for this pin
020E EB        1148            mov     a,r3
020F 42CC      1149            orl     _P2SKIP,a
0211           1150   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:277: }
0211           1151   L010005?:
0211           1152   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:278: SFRPAGE = 0x00;
0211 75A700    1153            mov     _SFRPAGE,#0x00
0214 22        1154            ret
0215           1155   ;------------------------------------------------------------
0215           1156   ;Allocation info for local variables in function 'PWMforward'
0215           1157   ;------------------------------------------------------------
0215           1158   ;------------------------------------------------------------
0215           1159   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:287: void PWMforward(void) {
0215           1160   ;        -----------------------------------------
0215           1161   ;         function PWMforward
0215           1162   ;        -----------------------------------------
0215           1163   _PWMforward:
0215           1164   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:288: pwmSig1 = 99;
0215 75E063    1165            mov     _pwmSig1,#0x63
0218 E4        1166            clr     a
0219 F5E1      1167            mov     (_pwmSig1 + 1),a
021B           1168   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:289: pwmSig2 = 0;
021B           1169   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:291: pwmSig3 = 0;
021B E4        1170            clr     a
021C F5A0      1171            mov     _pwmSig2,a
021E F5A1      1172            mov     (_pwmSig2 + 1),a
0220 F560      1173            mov     _pwmSig3,a
0222 F561      1174            mov     (_pwmSig3 + 1),a
0224           1175   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:292: pwmSig4 = 99;
0224 752063    1176            mov     _pwmSig4,#0x63
0227 E4        1177            clr     a
0228 F521      1178            mov     (_pwmSig4 + 1),a
022A           1179   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:293: printf("Forward\n\r");
022A 7498      1180            mov     a,#__str_0
022C C0E0      1181            push    acc
022E 74C1      1182            mov     a,#(__str_0 >> 8)
0230 C0E0      1183            push    acc
0232 7480      1184            mov     a,#0x80
0234 C0E0      1185            push    acc
0236 120100    1186            lcall   _printf
0239 1581      1187            dec     sp
023B 1581      1188            dec     sp
023D 1581      1189            dec     sp
023F 22        1190            ret
0240           1191   ;------------------------------------------------------------
0240           1192   ;Allocation info for local variables in function 'PWMbackward'
0240           1193   ;------------------------------------------------------------
0240           1194   ;------------------------------------------------------------
0240           1195   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:296: void PWMbackward(void) {
0240           1196   ;        -----------------------------------------
0240           1197   ;         function PWMbackward
0240           1198   ;        -----------------------------------------
0240           1199   _PWMbackward:
0240           1200   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:297: pwmSig1 = 0;
0240 E4        1201            clr     a
0241 F5E0      1202            mov     _pwmSig1,a
0243 F5E1      1203            mov     (_pwmSig1 + 1),a
0245           1204   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:298: pwmSig2 = 99;
0245 75A063    1205            mov     _pwmSig2,#0x63
0248 E4        1206            clr     a
0249 F5A1      1207            mov     (_pwmSig2 + 1),a
024B           1208   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:300: pwmSig3 = 99;
024B 756063    1209            mov     _pwmSig3,#0x63
024E E4        1210            clr     a
024F F561      1211            mov     (_pwmSig3 + 1),a
0251           1212   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:301: pwmSig4 = 0;
0251 E4        1213            clr     a
0252 F520      1214            mov     _pwmSig4,a
0254 F521      1215            mov     (_pwmSig4 + 1),a
0256           1216   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:302: printf("Backward\n\r");
0256 7418      1217            mov     a,#__str_1
0258 C0E0      1218            push    acc
025A 74C2      1219            mov     a,#(__str_1 >> 8)
025C C0E0      1220            push    acc
025E 7480      1221            mov     a,#0x80
0260 C0E0      1222            push    acc
0262 120100    1223            lcall   _printf
0265 1581      1224            dec     sp
0267 1581      1225            dec     sp
0269 1581      1226            dec     sp
026B 22        1227            ret
026C           1228   ;------------------------------------------------------------
026C           1229   ;Allocation info for local variables in function 'PWMLeft'
026C           1230   ;------------------------------------------------------------
026C           1231   ;------------------------------------------------------------
026C           1232   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:305: void PWMLeft(void) {
026C           1233   ;        -----------------------------------------
026C           1234   ;         function PWMLeft
026C           1235   ;        -----------------------------------------
026C           1236   _PWMLeft:
026C           1237   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:306: pwmSig1 = 0;
026C E4        1238            clr     a
026D F5E0      1239            mov     _pwmSig1,a
026F F5E1      1240            mov     (_pwmSig1 + 1),a
0271           1241   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:307: pwmSig2 = 99;
0271 75A063    1242            mov     _pwmSig2,#0x63
0274 E4        1243            clr     a
0275 F5A1      1244            mov     (_pwmSig2 + 1),a
0277           1245   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:308: pwmSig3 = 0;
0277 E4        1246            clr     a
0278 F560      1247            mov     _pwmSig3,a
027A F561      1248            mov     (_pwmSig3 + 1),a
027C           1249   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:309: pwmSig4 = 99;
027C 752063    1250            mov     _pwmSig4,#0x63
027F E4        1251            clr     a
0280 F521      1252            mov     (_pwmSig4 + 1),a
0282           1253   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:310: printf("Left\n\r");
0282 7458      1254            mov     a,#__str_2
0284 C0E0      1255            push    acc
0286 74C2      1256            mov     a,#(__str_2 >> 8)
0288 C0E0      1257            push    acc
028A 7480      1258            mov     a,#0x80
028C C0E0      1259            push    acc
028E 120100    1260            lcall   _printf
0291 1581      1261            dec     sp
0293 1581      1262            dec     sp
0295 1581      1263            dec     sp
0297 22        1264            ret
0298           1265   ;------------------------------------------------------------
0298           1266   ;Allocation info for local variables in function 'PWMRight'
0298           1267   ;------------------------------------------------------------
0298           1268   ;------------------------------------------------------------
0298           1269   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:313: void PWMRight(void) {
0298           1270   ;        -----------------------------------------
0298           1271   ;         function PWMRight
0298           1272   ;        -----------------------------------------
0298           1273   _PWMRight:
0298           1274   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:314: pwmSig1 = 99;
0298 75E063    1275            mov     _pwmSig1,#0x63
029B E4        1276            clr     a
029C F5E1      1277            mov     (_pwmSig1 + 1),a
029E           1278   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:315: pwmSig2 = 0;
029E E4        1279            clr     a
029F F5A0      1280            mov     _pwmSig2,a
02A1 F5A1      1281            mov     (_pwmSig2 + 1),a
02A3           1282   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:317: pwmSig3 = 99;
02A3 756063    1283            mov     _pwmSig3,#0x63
02A6 E4        1284            clr     a
02A7 F561      1285            mov     (_pwmSig3 + 1),a
02A9           1286   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:318: pwmSig4 = 0;
02A9 E4        1287            clr     a
02AA F520      1288            mov     _pwmSig4,a
02AC F521      1289            mov     (_pwmSig4 + 1),a
02AE           1290   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:319: printf("Right\n\r");
02AE 7498      1291            mov     a,#__str_3
02B0 C0E0      1292            push    acc
02B2 74C2      1293            mov     a,#(__str_3 >> 8)
02B4 C0E0      1294            push    acc
02B6 7480      1295            mov     a,#0x80
02B8 C0E0      1296            push    acc
02BA 120100    1297            lcall   _printf
02BD 1581      1298            dec     sp
02BF 1581      1299            dec     sp
02C1 1581      1300            dec     sp
02C3 22        1301            ret
02C4           1302   ;------------------------------------------------------------
02C4           1303   ;Allocation info for local variables in function 'PWMStop'
02C4           1304   ;------------------------------------------------------------
02C4           1305   ;------------------------------------------------------------
02C4           1306   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:322: void PWMStop(void) {
02C4           1307   ;        -----------------------------------------
02C4           1308   ;         function PWMStop
02C4           1309   ;        -----------------------------------------
02C4           1310   _PWMStop:
02C4           1311   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:323: pwmSig1 = 0;
02C4           1312   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:324: pwmSig2 = 0;
02C4           1313   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:326: pwmSig3 = 0;
02C4           1314   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:327: pwmSig4 = 0;
02C4 E4        1315            clr     a
02C5 F5E0      1316            mov     _pwmSig1,a
02C7 F5E1      1317            mov     (_pwmSig1 + 1),a
02C9 F5A0      1318            mov     _pwmSig2,a
02CB F5A1      1319            mov     (_pwmSig2 + 1),a
02CD F560      1320            mov     _pwmSig3,a
02CF F561      1321            mov     (_pwmSig3 + 1),a
02D1 F520      1322            mov     _pwmSig4,a
02D3 F521      1323            mov     (_pwmSig4 + 1),a
02D5           1324   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:328: printf("Stop\n\r");
02D5 74D8      1325            mov     a,#__str_4
02D7 C0E0      1326            push    acc
02D9 74C2      1327            mov     a,#(__str_4 >> 8)
02DB C0E0      1328            push    acc
02DD 7480      1329            mov     a,#0x80
02DF C0E0      1330            push    acc
02E1 120100    1331            lcall   _printf
02E4 1581      1332            dec     sp
02E6 1581      1333            dec     sp
02E8 1581      1334            dec     sp
02EA 22        1335            ret
02EB           1336   ;------------------------------------------------------------
02EB           1337   ;Allocation info for local variables in function 'checkTime'
02EB           1338   ;------------------------------------------------------------
02EB           1339   ;time                      Allocated to registers r2 r3 r4 r5 
02EB           1340   ;overflow_count            Allocated with name '_checkTime_overflow_count_1_73'
02EB           1341   ;sloc0                     Allocated with name '_checkTime_sloc0_1_0'
02EB           1342   ;------------------------------------------------------------
02EB           1343   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:334: float checkTime (void) {
02EB           1344   ;        -----------------------------------------
02EB           1345   ;         function checkTime
02EB           1346   ;        -----------------------------------------
02EB           1347   _checkTime:
02EB           1348   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:338: TL0=0; 
02EB 758A00    1349            mov     _TL0,#0x00
02EE           1350   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:339: TH0=0;
02EE 758C00    1351            mov     _TH0,#0x00
02F1           1352   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:340: TF0=0;
02F1 C28D      1353            clr     _TF0
02F3           1354   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:342: TR0=0;
02F3 C28C      1355            clr     _TR0
02F5           1356   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:347: printf("Waiting for the signal to be 1\n\r");
02F5 7418      1357            mov     a,#__str_5
02F7 C0E0      1358            push    acc
02F9 74C3      1359            mov     a,#(__str_5 >> 8)
02FB C0E0      1360            push    acc
02FD 7480      1361            mov     a,#0x80
02FF C0E0      1362            push    acc
0301 120100    1363            lcall   _printf
0304 1581      1364            dec     sp
0306 1581      1365            dec     sp
0308 1581      1366            dec     sp
030A           1367   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:348: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
030A 75820C    1368            mov     dpl,#0x0C
030D 120100    1369            lcall   _Volts_at_Pin
0310 AA82      1370            mov     r2,dpl
0312 AB83      1371            mov     r3,dph
0314 ACF0      1372            mov     r4,b
0316 FD        1373            mov     r5,a
0317 C002      1374            push    ar2
0319 C003      1375            push    ar3
031B C004      1376            push    ar4
031D C005      1377            push    ar5
031F 7458      1378            mov     a,#__str_6
0321 C0E0      1379            push    acc
0323 74C3      1380            mov     a,#(__str_6 >> 8)
0325 C0E0      1381            push    acc
0327 7480      1382            mov     a,#0x80
0329 C0E0      1383            push    acc
032B 120100    1384            lcall   _printf
032E E581      1385            mov     a,sp
0330 24F9      1386            add     a,#0xf9
0332 F581      1387            mov     sp,a
0334           1388   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:349: while(Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt);
0334           1389   L016001?:
0334 75820C    1390            mov     dpl,#0x0C
0337 120100    1391            lcall   _Volts_at_Pin
033A AA82      1392            mov     r2,dpl
033C AB83      1393            mov     r3,dph
033E ACF0      1394            mov     r4,b
0340 FD        1395            mov     r5,a
0341 74CD      1396            mov     a,#0xCD
0343 C0E0      1397            push    acc
0345 74CC      1398            mov     a,#0xCC
0347 C0E0      1399            push    acc
0349 744C      1400            mov     a,#0x4C
034B C0E0      1401            push    acc
034D 743D      1402            mov     a,#0x3D
034F C0E0      1403            push    acc
0351 8A82      1404            mov     dpl,r2
0353 8B83      1405            mov     dph,r3
0355 8CF0      1406            mov     b,r4
0357 ED        1407            mov     a,r5
0358 120100    1408            lcall   ___fslt
035B AA82      1409            mov     r2,dpl
035D E581      1410            mov     a,sp
035F 24FC      1411            add     a,#0xfc
0361 F581      1412            mov     sp,a
0363 EA        1413            mov     a,r2
0364 7001      1414            jnz     L016001?
0366           1415   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:350: while(Volts_at_Pin(QFP32_MUX_P1_6) >= thresholdVolt); //wait for the signal to be 0
0366           1416   L016004?:
0366 75820C    1417            mov     dpl,#0x0C
0369 120100    1418            lcall   _Volts_at_Pin
036C AA82      1419            mov     r2,dpl
036E AB83      1420            mov     r3,dph
0370 ACF0      1421            mov     r4,b
0372 FD        1422            mov     r5,a
0373 74CD      1423            mov     a,#0xCD
0375 C0E0      1424            push    acc
0377 74CC      1425            mov     a,#0xCC
0379 C0E0      1426            push    acc
037B 744C      1427            mov     a,#0x4C
037D C0E0      1428            push    acc
037F 743D      1429            mov     a,#0x3D
0381 C0E0      1430            push    acc
0383 8A82      1431            mov     dpl,r2
0385 8B83      1432            mov     dph,r3
0387 8CF0      1433            mov     b,r4
0389 ED        1434            mov     a,r5
038A 120100    1435            lcall   ___fslt
038D AA82      1436            mov     r2,dpl
038F E581      1437            mov     a,sp
0391 24FC      1438            add     a,#0xfc
0393 F581      1439            mov     sp,a
0395 EA        1440            mov     a,r2
0396 6001      1441            jz      L016004?
0398           1442   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:351: printf("Signal is 0\n\r");
0398 7458      1443            mov     a,#__str_7
039A C0E0      1444            push    acc
039C 74C4      1445            mov     a,#(__str_7 >> 8)
039E C0E0      1446            push    acc
03A0 7480      1447            mov     a,#0x80
03A2 C0E0      1448            push    acc
03A4 120100    1449            lcall   _printf
03A7 1581      1450            dec     sp
03A9 1581      1451            dec     sp
03AB 1581      1452            dec     sp
03AD           1453   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:352: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
03AD 75820C    1454            mov     dpl,#0x0C
03B0 120100    1455            lcall   _Volts_at_Pin
03B3 AA82      1456            mov     r2,dpl
03B5 AB83      1457            mov     r3,dph
03B7 ACF0      1458            mov     r4,b
03B9 FD        1459            mov     r5,a
03BA C002      1460            push    ar2
03BC C003      1461            push    ar3
03BE C004      1462            push    ar4
03C0 C005      1463            push    ar5
03C2 7458      1464            mov     a,#__str_6
03C4 C0E0      1465            push    acc
03C6 74C3      1466            mov     a,#(__str_6 >> 8)
03C8 C0E0      1467            push    acc
03CA 7480      1468            mov     a,#0x80
03CC C0E0      1469            push    acc
03CE 120100    1470            lcall   _printf
03D1 E581      1471            mov     a,sp
03D3 24F9      1472            add     a,#0xf9
03D5 F581      1473            mov     sp,a
03D7           1474   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:353: printf("Start Timer\n\r");
03D7 7498      1475            mov     a,#__str_8
03D9 C0E0      1476            push    acc
03DB 74C4      1477            mov     a,#(__str_8 >> 8)
03DD C0E0      1478            push    acc
03DF 7480      1479            mov     a,#0x80
03E1 C0E0      1480            push    acc
03E3 120100    1481            lcall   _printf
03E6 1581      1482            dec     sp
03E8 1581      1483            dec     sp
03EA 1581      1484            dec     sp
03EC           1485   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:354: TR0=1; // Start the timer
03EC D28C      1486            setb    _TR0
03EE           1487   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:356: while (Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt) {        // wait for signal to be 1
03EE E4        1488            clr     a
03EF F5F8      1489            mov     _checkTime_overflow_count_1_73,a
03F1 F5F9      1490            mov     (_checkTime_overflow_count_1_73 + 1),a
03F3           1491   L016009?:
03F3 75820C    1492            mov     dpl,#0x0C
03F6 120100    1493            lcall   _Volts_at_Pin
03F9 AC82      1494            mov     r4,dpl
03FB AD83      1495            mov     r5,dph
03FD AEF0      1496            mov     r6,b
03FF FF        1497            mov     r7,a
0400 74CD      1498            mov     a,#0xCD
0402 C0E0      1499            push    acc
0404 74CC      1500            mov     a,#0xCC
0406 C0E0      1501            push    acc
0408 744C      1502            mov     a,#0x4C
040A C0E0      1503            push    acc
040C 743D      1504            mov     a,#0x3D
040E C0E0      1505            push    acc
0410 8C82      1506            mov     dpl,r4
0412 8D83      1507            mov     dph,r5
0414 8EF0      1508            mov     b,r6
0416 EF        1509            mov     a,r7
0417 120100    1510            lcall   ___fslt
041A AC82      1511            mov     r4,dpl
041C E581      1512            mov     a,sp
041E 24FC      1513            add     a,#0xfc
0420 F581      1514            mov     sp,a
0422 EC        1515            mov     a,r4
0423 6001      1516            jz      L016011?
0425           1517   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:357: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
0425 75820C    1518            mov     dpl,#0x0C
0428 120100    1519            lcall   _Volts_at_Pin
042B AC82      1520            mov     r4,dpl
042D AD83      1521            mov     r5,dph
042F AEF0      1522            mov     r6,b
0431 FF        1523            mov     r7,a
0432 C004      1524            push    ar4
0434 C005      1525            push    ar5
0436 C006      1526            push    ar6
0438 C007      1527            push    ar7
043A 7458      1528            mov     a,#__str_6
043C C0E0      1529            push    acc
043E 74C3      1530            mov     a,#(__str_6 >> 8)
0440 C0E0      1531            push    acc
0442 7480      1532            mov     a,#0x80
0444 C0E0      1533            push    acc
0446 120100    1534            lcall   _printf
0449 E581      1535            mov     a,sp
044B 24F9      1536            add     a,#0xf9
044D F581      1537            mov     sp,a
044F           1538   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:358: if(TF0==1) { // Did the 16-bit timer overflow                         {
044F           1539   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:359: TF0=0;
044F 108D58    1540            jbc     _TF0,L016035?
0452 8001      1541            sjmp    L016009?
0454           1542   L016035?:
0454           1543   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:360: overflow_count++;
0454 05F8      1544            inc     _checkTime_overflow_count_1_73
0456 E4        1545            clr     a
0457 B5F8D8    1546            cjne    a,_checkTime_overflow_count_1_73,L016009?
045A 05F9      1547            inc     (_checkTime_overflow_count_1_73 + 1)
045C 8001      1548            sjmp    L016009?
045E           1549   L016011?:
045E           1550   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:369: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 < 10) {
045E 85F882    1551            mov     dpl,_checkTime_overflow_count_1_73
0461 85F983    1552            mov     dph,(_checkTime_overflow_count_1_73 + 1)
0464 120100    1553            lcall   ___sint2fs
0467 AC82      1554            mov     r4,dpl
0469 AD83      1555            mov     r5,dph
046B AEF0      1556            mov     r6,b
046D FF        1557            mov     r7,a
046E C004      1558            push    ar4
0470 C005      1559            push    ar5
0472 C006      1560            push    ar6
0474 C007      1561            push    ar7
0476 C004      1562            push    ar4
0478 C005      1563            push    ar5
047A C006      1564            push    ar6
047C C007      1565            push    ar7
047E 900000    1566            mov     dptr,#0x0000
0481 75F080    1567            mov     b,#0x80
0484 7447      1568            mov     a,#0x47
0486 120100    1569            lcall   ___fsmul
0489 858248    1570            mov     _checkTime_sloc0_1_0,dpl
048C 858349    1571            mov     (_checkTime_sloc0_1_0 + 1),dph
048F 85F04A    1572            mov     (_checkTime_sloc0_1_0 + 2),b
0492 F54B      1573            mov     (_checkTime_sloc0_1_0 + 3),a
0494 E581      1574            mov     a,sp
0496 24FC      1575            add     a,#0xfc
0498 F581      1576            mov     sp,a
049A 858C82    1577            mov     dpl,_TH0
049D 120100    1578            lcall   ___uchar2fs
04A0 AA82      1579            mov     r2,dpl
04A2 AB83      1580            mov     r3,dph
04A4 A8F0      1581            mov     r0,b
04A6 F9        1582            mov     r1,a
04A7 C002      1583            push    ar2
04A9 C003      1584            push    ar3
04AB C000      1585            push    ar0
04AD C001      1586            push    ar1
04AF 900000    1587            mov     dptr,#0x0000
04B2 75F080    1588            mov     b,#0x80
04B5 7443      1589            mov     a,#0x43
04B7 120100    1590            lcall   ___fsmul
04BA AA82      1591            mov     r2,dpl
04BC AB83      1592            mov     r3,dph
04BE A8F0      1593            mov     r0,b
04C0 F9        1594            mov     r1,a
04C1 E581      1595            mov     a,sp
04C3 24FC      1596            add     a,#0xfc
04C5 F581      1597            mov     sp,a
04C7 C002      1598            push    ar2
04C9 C003      1599            push    ar3
04CB C000      1600            push    ar0
04CD C001      1601            push    ar1
04CF 854882    1602            mov     dpl,_checkTime_sloc0_1_0
04D2 854983    1603            mov     dph,(_checkTime_sloc0_1_0 + 1)
04D5 854AF0    1604            mov     b,(_checkTime_sloc0_1_0 + 2)
04D8 E54B      1605            mov     a,(_checkTime_sloc0_1_0 + 3)
04DA 120100    1606            lcall   ___fsadd
04DD 858248    1607            mov     _checkTime_sloc0_1_0,dpl
04E0 858349    1608            mov     (_checkTime_sloc0_1_0 + 1),dph
04E3 85F04A    1609            mov     (_checkTime_sloc0_1_0 + 2),b
04E6 F54B      1610            mov     (_checkTime_sloc0_1_0 + 3),a
04E8 E581      1611            mov     a,sp
04EA 24FC      1612            add     a,#0xfc
04EC F581      1613            mov     sp,a
04EE AA8A      1614            mov     r2,_TL0
04F0 7B00      1615            mov     r3,#0x00
04F2 8A82      1616            mov     dpl,r2
04F4 8B83      1617            mov     dph,r3
04F6 120100    1618            lcall   ___sint2fs
04F9 AA82      1619            mov     r2,dpl
04FB AB83      1620            mov     r3,dph
04FD A8F0      1621            mov     r0,b
04FF F9        1622            mov     r1,a
0500 C002      1623            push    ar2
0502 C003      1624            push    ar3
0504 C000      1625            push    ar0
0506 C001      1626            push    ar1
0508 854882    1627            mov     dpl,_checkTime_sloc0_1_0
050B 854983    1628            mov     dph,(_checkTime_sloc0_1_0 + 1)
050E 854AF0    1629            mov     b,(_checkTime_sloc0_1_0 + 2)
0511 E54B      1630            mov     a,(_checkTime_sloc0_1_0 + 3)
0513 120100    1631            lcall   ___fsadd
0516 AA82      1632            mov     r2,dpl
0518 AB83      1633            mov     r3,dph
051A A8F0      1634            mov     r0,b
051C F9        1635            mov     r1,a
051D E581      1636            mov     a,sp
051F 24FC      1637            add     a,#0xfc
0521 F581      1638            mov     sp,a
0523 C002      1639            push    ar2
0525 C003      1640            push    ar3
0527 C000      1641            push    ar0
0529 C001      1642            push    ar1
052B 90C33E    1643            mov     dptr,#0xC33E
052E 75F02E    1644            mov     b,#0x2E
0531 7439      1645            mov     a,#0x39
0533 120100    1646            lcall   ___fsmul
0536 AA82      1647            mov     r2,dpl
0538 AB83      1648            mov     r3,dph
053A A8F0      1649            mov     r0,b
053C F9        1650            mov     r1,a
053D E581      1651            mov     a,sp
053F 24FC      1652            add     a,#0xfc
0541 F581      1653            mov     sp,a
0543 E4        1654            clr     a
0544 C0E0      1655            push    acc
0546 C0E0      1656            push    acc
0548 7420      1657            mov     a,#0x20
054A C0E0      1658            push    acc
054C 7441      1659            mov     a,#0x41
054E C0E0      1660            push    acc
0550 8A82      1661            mov     dpl,r2
0552 8B83      1662            mov     dph,r3
0554 88F0      1663            mov     b,r0
0556 E9        1664            mov     a,r1
0557 120100    1665            lcall   ___fslt
055A AA82      1666            mov     r2,dpl
055C E581      1667            mov     a,sp
055E 24FC      1668            add     a,#0xfc
0560 F581      1669            mov     sp,a
0562 D007      1670            pop     ar7
0564 D006      1671            pop     ar6
0566 D005      1672            pop     ar5
0568 D004      1673            pop     ar4
056A EA        1674            mov     a,r2
056B 7001      1675            jnz     L016037?
056D 020100    1676            ljmp    L016018?
0570           1677   L016037?:
0570           1678   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:370: while (Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt) {        // wait for signal to be 1
0570           1679   L016014?:
0570 75820C    1680            mov     dpl,#0x0C
0573 C004      1681            push    ar4
0575 C005      1682            push    ar5
0577 C006      1683            push    ar6
0579 C007      1684            push    ar7
057B 120100    1685            lcall   _Volts_at_Pin
057E A882      1686            mov     r0,dpl
0580 A983      1687            mov     r1,dph
0582 AAF0      1688            mov     r2,b
0584 FB        1689            mov     r3,a
0585 74CD      1690            mov     a,#0xCD
0587 C0E0      1691            push    acc
0589 74CC      1692            mov     a,#0xCC
058B C0E0      1693            push    acc
058D 744C      1694            mov     a,#0x4C
058F C0E0      1695            push    acc
0591 743D      1696            mov     a,#0x3D
0593 C0E0      1697            push    acc
0595 8882      1698            mov     dpl,r0
0597 8983      1699            mov     dph,r1
0599 8AF0      1700            mov     b,r2
059B EB        1701            mov     a,r3
059C 120100    1702            lcall   ___fslt
059F AA82      1703            mov     r2,dpl
05A1 E581      1704            mov     a,sp
05A3 24FC      1705            add     a,#0xfc
05A5 F581      1706            mov     sp,a
05A7 D007      1707            pop     ar7
05A9 D006      1708            pop     ar6
05AB D005      1709            pop     ar5
05AD D004      1710            pop     ar4
05AF EA        1711            mov     a,r2
05B0 6001      1712            jz      L016018?
05B2           1713   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:371: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
05B2 75820C    1714            mov     dpl,#0x0C
05B5 C004      1715            push    ar4
05B7 C005      1716            push    ar5
05B9 C006      1717            push    ar6
05BB C007      1718            push    ar7
05BD 120100    1719            lcall   _Volts_at_Pin
05C0 AA82      1720            mov     r2,dpl
05C2 AB83      1721            mov     r3,dph
05C4 A8F0      1722            mov     r0,b
05C6 F9        1723            mov     r1,a
05C7 C002      1724            push    ar2
05C9 C003      1725            push    ar3
05CB C000      1726            push    ar0
05CD C001      1727            push    ar1
05CF 7458      1728            mov     a,#__str_6
05D1 C0E0      1729            push    acc
05D3 74C3      1730            mov     a,#(__str_6 >> 8)
05D5 C0E0      1731            push    acc
05D7 7480      1732            mov     a,#0x80
05D9 C0E0      1733            push    acc
05DB 120100    1734            lcall   _printf
05DE E581      1735            mov     a,sp
05E0 24F9      1736            add     a,#0xf9
05E2 F581      1737            mov     sp,a
05E4 D007      1738            pop     ar7
05E6 D006      1739            pop     ar6
05E8 D005      1740            pop     ar5
05EA D004      1741            pop     ar4
05EC           1742   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:372: if(TF0==1) { // Did the 16-bit timer overflow                         {
05EC           1743   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:373: TF0=0;
05EC 108D18    1744            jbc     _TF0,L016039?
05EF 020100    1745            ljmp    L016014?
05F2           1746   L016039?:
05F2           1747   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:374: overflow_count++;
05F2 05F8      1748            inc     _checkTime_overflow_count_1_73
05F4 E4        1749            clr     a
05F5 B5F858    1750            cjne    a,_checkTime_overflow_count_1_73,L016040?
05F8 05F9      1751            inc     (_checkTime_overflow_count_1_73 + 1)
05FA           1752   L016040?:
05FA 020100    1753            ljmp    L016014?
05FD           1754   L016018?:
05FD           1755   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:385: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
05FD C28C      1756            clr     _TR0
05FF           1757   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:386: printf("Stop Timer\n\r");
05FF C004      1758            push    ar4
0601 C005      1759            push    ar5
0603 C006      1760            push    ar6
0605 C007      1761            push    ar7
0607 7498      1762            mov     a,#__str_9
0609 C0E0      1763            push    acc
060B 74C7      1764            mov     a,#(__str_9 >> 8)
060D C0E0      1765            push    acc
060F 7480      1766            mov     a,#0x80
0611 C0E0      1767            push    acc
0613 120100    1768            lcall   _printf
0616 1581      1769            dec     sp
0618 1581      1770            dec     sp
061A 1581      1771            dec     sp
061C           1772   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:387: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
061C 900000    1773            mov     dptr,#0x0000
061F 75F080    1774            mov     b,#0x80
0622 7447      1775            mov     a,#0x47
0624 120100    1776            lcall   ___fsmul
0627 AA82      1777            mov     r2,dpl
0629 AB83      1778            mov     r3,dph
062B ACF0      1779            mov     r4,b
062D FD        1780            mov     r5,a
062E E581      1781            mov     a,sp
0630 24FC      1782            add     a,#0xfc
0632 F581      1783            mov     sp,a
0634 858C82    1784            mov     dpl,_TH0
0637 C002      1785            push    ar2
0639 C003      1786            push    ar3
063B C004      1787            push    ar4
063D C005      1788            push    ar5
063F 120100    1789            lcall   ___uchar2fs
0642 AE82      1790            mov     r6,dpl
0644 AF83      1791            mov     r7,dph
0646 A8F0      1792            mov     r0,b
0648 F9        1793            mov     r1,a
0649 C006      1794            push    ar6
064B C007      1795            push    ar7
064D C000      1796            push    ar0
064F C001      1797            push    ar1
0651 900000    1798            mov     dptr,#0x0000
0654 75F080    1799            mov     b,#0x80
0657 7443      1800            mov     a,#0x43
0659 120100    1801            lcall   ___fsmul
065C AE82      1802            mov     r6,dpl
065E AF83      1803            mov     r7,dph
0660 A8F0      1804            mov     r0,b
0662 F9        1805            mov     r1,a
0663 E581      1806            mov     a,sp
0665 24FC      1807            add     a,#0xfc
0667 F581      1808            mov     sp,a
0669 D005      1809            pop     ar5
066B D004      1810            pop     ar4
066D D003      1811            pop     ar3
066F D002      1812            pop     ar2
0671 C006      1813            push    ar6
0673 C007      1814            push    ar7
0675 C000      1815            push    ar0
0677 C001      1816            push    ar1
0679 8A82      1817            mov     dpl,r2
067B 8B83      1818            mov     dph,r3
067D 8CF0      1819            mov     b,r4
067F ED        1820            mov     a,r5
0680 120100    1821            lcall   ___fsadd
0683 AA82      1822            mov     r2,dpl
0685 AB83      1823            mov     r3,dph
0687 ACF0      1824            mov     r4,b
0689 FD        1825            mov     r5,a
068A E581      1826            mov     a,sp
068C 24FC      1827            add     a,#0xfc
068E F581      1828            mov     sp,a
0690 AE8A      1829            mov     r6,_TL0
0692 7F00      1830            mov     r7,#0x00
0694 8E82      1831            mov     dpl,r6
0696 8F83      1832            mov     dph,r7
0698 C002      1833            push    ar2
069A C003      1834            push    ar3
069C C004      1835            push    ar4
069E C005      1836            push    ar5
06A0 120100    1837            lcall   ___sint2fs
06A3 AE82      1838            mov     r6,dpl
06A5 AF83      1839            mov     r7,dph
06A7 A8F0      1840            mov     r0,b
06A9 F9        1841            mov     r1,a
06AA D005      1842            pop     ar5
06AC D004      1843            pop     ar4
06AE D003      1844            pop     ar3
06B0 D002      1845            pop     ar2
06B2 C006      1846            push    ar6
06B4 C007      1847            push    ar7
06B6 C000      1848            push    ar0
06B8 C001      1849            push    ar1
06BA 8A82      1850            mov     dpl,r2
06BC 8B83      1851            mov     dph,r3
06BE 8CF0      1852            mov     b,r4
06C0 ED        1853            mov     a,r5
06C1 120100    1854            lcall   ___fsadd
06C4 AA82      1855            mov     r2,dpl
06C6 AB83      1856            mov     r3,dph
06C8 ACF0      1857            mov     r4,b
06CA FD        1858            mov     r5,a
06CB E581      1859            mov     a,sp
06CD 24FC      1860            add     a,#0xfc
06CF F581      1861            mov     sp,a
06D1 C002      1862            push    ar2
06D3 C003      1863            push    ar3
06D5 C004      1864            push    ar4
06D7 C005      1865            push    ar5
06D9 90F4FC    1866            mov     dptr,#0xF4FC
06DC 75F032    1867            mov     b,#0x32
06DF 7434      1868            mov     a,#0x34
06E1 120100    1869            lcall   ___fsmul
06E4 AA82      1870            mov     r2,dpl
06E6 AB83      1871            mov     r3,dph
06E8 ACF0      1872            mov     r4,b
06EA FD        1873            mov     r5,a
06EB E581      1874            mov     a,sp
06ED 24FC      1875            add     a,#0xfc
06EF F581      1876            mov     sp,a
06F1           1877   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:388: return time*1000; //return period of high pulse in seconds            
06F1 C002      1878            push    ar2
06F3 C003      1879            push    ar3
06F5 C004      1880            push    ar4
06F7 C005      1881            push    ar5
06F9 900000    1882            mov     dptr,#0x0000
06FC 75F07A    1883            mov     b,#0x7A
06FF 7444      1884            mov     a,#0x44
0701 120100    1885            lcall   ___fsmul
0704 AA82      1886            mov     r2,dpl
0706 AB83      1887            mov     r3,dph
0708 ACF0      1888            mov     r4,b
070A FD        1889            mov     r5,a
070B E581      1890            mov     a,sp
070D 24FC      1891            add     a,#0xfc
070F F581      1892            mov     sp,a
0711 8A82      1893            mov     dpl,r2
0713 8B83      1894            mov     dph,r3
0715 8CF0      1895            mov     b,r4
0717 ED        1896            mov     a,r5
0718 22        1897            ret
0719           1898   ;------------------------------------------------------------
0719           1899   ;Allocation info for local variables in function 'voltsAtPeak'
0719           1900   ;------------------------------------------------------------
0719           1901   ;------------------------------------------------------------
0719           1902   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:395: float voltsAtPeak(void) {
0719           1903   ;        -----------------------------------------
0719           1904   ;         function voltsAtPeak
0719           1905   ;        -----------------------------------------
0719           1906   _voltsAtPeak:
0719           1907   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:396: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //input pin waiting to be  
0719           1908   L017001?:
0719 75820C    1909            mov     dpl,#0x0C
071C 120100    1910            lcall   _ADC_at_Pin
071F E582      1911            mov     a,dpl
0721 8583F0    1912            mov     b,dph
0724 45F0      1913            orl     a,b
0726 6001      1914            jz      L017001?
0728           1915   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:397: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
0728           1916   L017004?:
0728 75820C    1917            mov     dpl,#0x0C
072B 120100    1918            lcall   _ADC_at_Pin
072E E582      1919            mov     a,dpl
0730 8583F0    1920            mov     b,dph
0733 45F0      1921            orl     a,b
0735 6001      1922            jz      L017004?
0737           1923   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:398: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
0737 900000    1924            mov     dptr,#0x0000
073A 120100    1925            lcall   _Timer3us
073D           1926   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:399: return(Volts_at_Pin(QFP32_MUX_P1_6));
073D 75820C    1927            mov     dpl,#0x0C
0740 020100    1928            ljmp    _Volts_at_Pin
0743           1929   ;------------------------------------------------------------
0743           1930   ;Allocation info for local variables in function 'waitquarterperiod'
0743           1931   ;------------------------------------------------------------
0743           1932   ;------------------------------------------------------------
0743           1933   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:412: void waitquarterperiod(void){
0743           1934   ;        -----------------------------------------
0743           1935   ;         function waitquarterperiod
0743           1936   ;        -----------------------------------------
0743           1937   _waitquarterperiod:
0743           1938   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:413: waitms(constant_delay_time);
0743 90000A    1939            mov     dptr,#0x000A
0746 020100    1940            ljmp    _waitms
0749           1941   ;------------------------------------------------------------
0749           1942   ;Allocation info for local variables in function 'detectobstacle'
0749           1943   ;------------------------------------------------------------
0749           1944   ;threshold                 Allocated to registers r2 r3 r4 r5 
0749           1945   ;------------------------------------------------------------
0749           1946   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:417: void detectobstacle(float threshold){
0749           1947   ;        -----------------------------------------
0749           1948   ;         function detectobstacle
0749           1949   ;        -----------------------------------------
0749           1950   _detectobstacle:
0749 AA82      1951            mov     r2,dpl
074B AB83      1952            mov     r3,dph
074D ACF0      1953            mov     r4,b
074F FD        1954            mov     r5,a
0750           1955   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:428: if(threshold <= 0.6 ){
0750 749A      1956            mov     a,#0x9A
0752 C0E0      1957            push    acc
0754 7499      1958            mov     a,#0x99
0756 C0E0      1959            push    acc
0758 7419      1960            mov     a,#0x19
075A C0E0      1961            push    acc
075C 743F      1962            mov     a,#0x3F
075E C0E0      1963            push    acc
0760 8A82      1964            mov     dpl,r2
0762 8B83      1965            mov     dph,r3
0764 8CF0      1966            mov     b,r4
0766 ED        1967            mov     a,r5
0767 120100    1968            lcall   ___fsgt
076A AA82      1969            mov     r2,dpl
076C E581      1970            mov     a,sp
076E 24FC      1971            add     a,#0xfc
0770 F581      1972            mov     sp,a
0772 EA        1973            mov     a,r2
0773 7001      1974            jnz     L019002?
0775           1975   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:430: printf("Turn right \r\n");
0775 74D8      1976            mov     a,#__str_10
0777 C0E0      1977            push    acc
0779 74C8      1978            mov     a,#(__str_10 >> 8)
077B C0E0      1979            push    acc
077D 7480      1980            mov     a,#0x80
077F C0E0      1981            push    acc
0781 120100    1982            lcall   _printf
0784 1581      1983            dec     sp
0786 1581      1984            dec     sp
0788 1581      1985            dec     sp
078A           1986   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:431: PWMRight();
078A 120100    1987            lcall   _PWMRight
078D           1988   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:432: waitms(500); //Make waits longer
078D 9001F4    1989            mov     dptr,#0x01F4
0790 120100    1990            lcall   _waitms
0793           1991   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:433: waitms(500); 
0793 9001F4    1992            mov     dptr,#0x01F4
0796 120100    1993            lcall   _waitms
0799           1994   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:434: waitms(300); 
0799 90012C    1995            mov     dptr,#0x012C
079C 120100    1996            lcall   _waitms
079F           1997   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:436: PWMStop();
079F 120100    1998            lcall   _PWMStop
07A2           1999   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:437: waitms(500);
07A2 9001F4    2000            mov     dptr,#0x01F4
07A5 120100    2001            lcall   _waitms
07A8           2002   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:438: waitms(250);
07A8 9000FA    2003            mov     dptr,#0x00FA
07AB 020100    2004            ljmp    _waitms
07AE           2005   L019002?:
07AE           2006   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:443: printf("Go Straight \r\n");
07AE 7418      2007            mov     a,#__str_11
07B0 C0E0      2008            push    acc
07B2 74C9      2009            mov     a,#(__str_11 >> 8)
07B4 C0E0      2010            push    acc
07B6 7480      2011            mov     a,#0x80
07B8 C0E0      2012            push    acc
07BA 120100    2013            lcall   _printf
07BD 1581      2014            dec     sp
07BF 1581      2015            dec     sp
07C1 1581      2016            dec     sp
07C3           2017   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:445: PWMforward();
07C3 020100    2018            ljmp    _PWMforward
07C6           2019   ;------------------------------------------------------------
07C6           2020   ;Allocation info for local variables in function 'main'
07C6           2021   ;------------------------------------------------------------
07C6           2022   ;checkcommand              Allocated to registers 
07C6           2023   ;i                         Allocated to registers 
07C6           2024   ;sig1                      Allocated to registers 
07C6           2025   ;sig2                      Allocated to registers 
07C6           2026   ;peak                      Allocated to registers 
07C6           2027   ;voltspeak                 Allocated to registers 
07C6           2028   ;periodpwm                 Allocated to registers 
07C6           2029   ;time                      Allocated to registers 
07C6           2030   ;pasttime                  Allocated to registers 
07C6           2031   ;period                    Allocated to registers r2 r3 r4 r5 
07C6           2032   ;overflow_count            Allocated to registers r2 r3 
07C6           2033   ;------------------------------------------------------------
07C6           2034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:453: void main(void)
07C6           2035   ;        -----------------------------------------
07C6           2036   ;         function main
07C6           2037   ;        -----------------------------------------
07C6           2038   _main:
07C6           2039   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:466: TL0=0; 
07C6 758A00    2040            mov     _TL0,#0x00
07C9           2041   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:467: TH0=0;
07C9 758C00    2042            mov     _TH0,#0x00
07CC           2043   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:468: TF0=0;
07CC C28D      2044            clr     _TF0
07CE           2045   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:469: TIMER0_Init();
07CE 120100    2046            lcall   _TIMER0_Init
07D1           2047   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:471: InitPinADC(1, 6); // Configure P2.5 as analog input
07D1 755006    2048            mov     _InitPinADC_PARM_2,#0x06
07D4 758201    2049            mov     dpl,#0x01
07D7 120100    2050            lcall   _InitPinADC
07DA           2051   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:473: InitADC();
07DA 120100    2052            lcall   _InitADC
07DD           2053   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:474: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
07DD 7458      2054            mov     a,#__str_12
07DF C0E0      2055            push    acc
07E1 74C9      2056            mov     a,#(__str_12 >> 8)
07E3 C0E0      2057            push    acc
07E5 7480      2058            mov     a,#0x80
07E7 C0E0      2059            push    acc
07E9 120100    2060            lcall   _printf
07EC 1581      2061            dec     sp
07EE 1581      2062            dec     sp
07F0 1581      2063            dec     sp
07F2           2064   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:476: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
07F2 7498      2065            mov     a,#__str_13
07F4 C0E0      2066            push    acc
07F6 74C9      2067            mov     a,#(__str_13 >> 8)
07F8 C0E0      2068            push    acc
07FA 7480      2069            mov     a,#0x80
07FC C0E0      2070            push    acc
07FE 120100    2071            lcall   _printf
0801 1581      2072            dec     sp
0803 1581      2073            dec     sp
0805 1581      2074            dec     sp
0807           2075   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:478: printf("\n\r");
0807 74D8      2076            mov     a,#__str_14
0809 C0E0      2077            push    acc
080B 74C9      2078            mov     a,#(__str_14 >> 8)
080D C0E0      2079            push    acc
080F 7480      2080            mov     a,#0x80
0811 C0E0      2081            push    acc
0813 120100    2082            lcall   _printf
0816 1581      2083            dec     sp
0818 1581      2084            dec     sp
081A 1581      2085            dec     sp
081C           2086   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:481: while (1)
081C           2087   L020013?:
081C           2088   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:512: TL0=0; 
081C 758A00    2089            mov     _TL0,#0x00
081F           2090   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:513: TH0=0;
081F 758C00    2091            mov     _TH0,#0x00
0822           2092   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:514: TF0=0;
0822 C28D      2093            clr     _TF0
0824           2094   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:516: while(P2_1!=0); // Wait for the signal to be zero
0824           2095   L020001?:
0824 20A158    2096            jb      _P2_1,L020001?
0827           2097   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:517: while(P2_1!=1); // Wait for the signal to be one
0827           2098   L020004?:
0827 30A198    2099            jnb     _P2_1,L020004?
082A           2100   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:518: TR0=1; // Start the timer
082A D28C      2101            setb    _TR0
082C           2102   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:519: while(P2_1!=0) // Wait for the signal to be zero
082C 7A00      2103            mov     r2,#0x00
082E 7B00      2104            mov     r3,#0x00
0830           2105   L020009?:
0830 30A118    2106            jnb     _P2_1,L020011?
0833           2107   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:521: if(TF0==1) // Did the 16-bit timer overflow?
0833           2108   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:523: TF0=0;
0833 108D58    2109            jbc     _TF0,L020028?
0836 8001      2110            sjmp    L020009?
0838           2111   L020028?:
0838           2112   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:524: overflow_count++;
0838 0A        2113            inc     r2
0839 BA00D8    2114            cjne    r2,#0x00,L020009?
083C 0B        2115            inc     r3
083D 8001      2116            sjmp    L020009?
083F           2117   L020011?:
083F           2118   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:535: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
083F C28C      2119            clr     _TR0
0841           2120   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:536: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0841 8A82      2121            mov     dpl,r2
0843 8B83      2122            mov     dph,r3
0845 120100    2123            lcall   ___sint2fs
0848 AA82      2124            mov     r2,dpl
084A AB83      2125            mov     r3,dph
084C ACF0      2126            mov     r4,b
084E FD        2127            mov     r5,a
084F C002      2128            push    ar2
0851 C003      2129            push    ar3
0853 C004      2130            push    ar4
0855 C005      2131            push    ar5
0857 900000    2132            mov     dptr,#0x0000
085A 75F080    2133            mov     b,#0x80
085D 7447      2134            mov     a,#0x47
085F 120100    2135            lcall   ___fsmul
0862 AA82      2136            mov     r2,dpl
0864 AB83      2137            mov     r3,dph
0866 ACF0      2138            mov     r4,b
0868 FD        2139            mov     r5,a
0869 E581      2140            mov     a,sp
086B 24FC      2141            add     a,#0xfc
086D F581      2142            mov     sp,a
086F 858C82    2143            mov     dpl,_TH0
0872 C002      2144            push    ar2
0874 C003      2145            push    ar3
0876 C004      2146            push    ar4
0878 C005      2147            push    ar5
087A 120100    2148            lcall   ___uchar2fs
087D AE82      2149            mov     r6,dpl
087F AF83      2150            mov     r7,dph
0881 A8F0      2151            mov     r0,b
0883 F9        2152            mov     r1,a
0884 C006      2153            push    ar6
0886 C007      2154            push    ar7
0888 C000      2155            push    ar0
088A C001      2156            push    ar1
088C 900000    2157            mov     dptr,#0x0000
088F 75F080    2158            mov     b,#0x80
0892 7443      2159            mov     a,#0x43
0894 120100    2160            lcall   ___fsmul
0897 AE82      2161            mov     r6,dpl
0899 AF83      2162            mov     r7,dph
089B A8F0      2163            mov     r0,b
089D F9        2164            mov     r1,a
089E E581      2165            mov     a,sp
08A0 24FC      2166            add     a,#0xfc
08A2 F581      2167            mov     sp,a
08A4 D005      2168            pop     ar5
08A6 D004      2169            pop     ar4
08A8 D003      2170            pop     ar3
08AA D002      2171            pop     ar2
08AC C006      2172            push    ar6
08AE C007      2173            push    ar7
08B0 C000      2174            push    ar0
08B2 C001      2175            push    ar1
08B4 8A82      2176            mov     dpl,r2
08B6 8B83      2177            mov     dph,r3
08B8 8CF0      2178            mov     b,r4
08BA ED        2179            mov     a,r5
08BB 120100    2180            lcall   ___fsadd
08BE AA82      2181            mov     r2,dpl
08C0 AB83      2182            mov     r3,dph
08C2 ACF0      2183            mov     r4,b
08C4 FD        2184            mov     r5,a
08C5 E581      2185            mov     a,sp
08C7 24FC      2186            add     a,#0xfc
08C9 F581      2187            mov     sp,a
08CB AE8A      2188            mov     r6,_TL0
08CD 7F00      2189            mov     r7,#0x00
08CF 8E82      2190            mov     dpl,r6
08D1 8F83      2191            mov     dph,r7
08D3 C002      2192            push    ar2
08D5 C003      2193            push    ar3
08D7 C004      2194            push    ar4
08D9 C005      2195            push    ar5
08DB 120100    2196            lcall   ___sint2fs
08DE AE82      2197            mov     r6,dpl
08E0 AF83      2198            mov     r7,dph
08E2 A8F0      2199            mov     r0,b
08E4 F9        2200            mov     r1,a
08E5 D005      2201            pop     ar5
08E7 D004      2202            pop     ar4
08E9 D003      2203            pop     ar3
08EB D002      2204            pop     ar2
08ED C006      2205            push    ar6
08EF C007      2206            push    ar7
08F1 C000      2207            push    ar0
08F3 C001      2208            push    ar1
08F5 8A82      2209            mov     dpl,r2
08F7 8B83      2210            mov     dph,r3
08F9 8CF0      2211            mov     b,r4
08FB ED        2212            mov     a,r5
08FC 120100    2213            lcall   ___fsadd
08FF AA82      2214            mov     r2,dpl
0901 AB83      2215            mov     r3,dph
0903 ACF0      2216            mov     r4,b
0905 FD        2217            mov     r5,a
0906 E581      2218            mov     a,sp
0908 24FC      2219            add     a,#0xfc
090A F581      2220            mov     sp,a
090C C002      2221            push    ar2
090E C003      2222            push    ar3
0910 C004      2223            push    ar4
0912 C005      2224            push    ar5
0914 90F4FC    2225            mov     dptr,#0xF4FC
0917 75F032    2226            mov     b,#0x32
091A 7434      2227            mov     a,#0x34
091C 120100    2228            lcall   ___fsmul
091F AA82      2229            mov     r2,dpl
0921 AB83      2230            mov     r3,dph
0923 ACF0      2231            mov     r4,b
0925 FD        2232            mov     r5,a
0926 E581      2233            mov     a,sp
0928 24FC      2234            add     a,#0xfc
092A F581      2235            mov     sp,a
092C           2236   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:538: printf( "\rT=%f ms   \n ", period*1000.0);
092C C002      2237            push    ar2
092E C003      2238            push    ar3
0930 C004      2239            push    ar4
0932 C005      2240            push    ar5
0934 900000    2241            mov     dptr,#0x0000
0937 75F07A    2242            mov     b,#0x7A
093A 7444      2243            mov     a,#0x44
093C 120100    2244            lcall   ___fsmul
093F AA82      2245            mov     r2,dpl
0941 AB83      2246            mov     r3,dph
0943 ACF0      2247            mov     r4,b
0945 FD        2248            mov     r5,a
0946 E581      2249            mov     a,sp
0948 24FC      2250            add     a,#0xfc
094A F581      2251            mov     sp,a
094C C002      2252            push    ar2
094E C003      2253            push    ar3
0950 C004      2254            push    ar4
0952 C005      2255            push    ar5
0954 C002      2256            push    ar2
0956 C003      2257            push    ar3
0958 C004      2258            push    ar4
095A C005      2259            push    ar5
095C 7498      2260            mov     a,#__str_15
095E C0E0      2261            push    acc
0960 74CB      2262            mov     a,#(__str_15 >> 8)
0962 C0E0      2263            push    acc
0964 7480      2264            mov     a,#0x80
0966 C0E0      2265            push    acc
0968 120100    2266            lcall   _printf
096B E581      2267            mov     a,sp
096D 24F9      2268            add     a,#0xf9
096F F581      2269            mov     sp,a
0971           2270   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:539: waitms(50);
0971 900032    2271            mov     dptr,#0x0032
0974 120100    2272            lcall   _waitms
0977 D005      2273            pop     ar5
0979 D004      2274            pop     ar4
097B D003      2275            pop     ar3
097D D002      2276            pop     ar2
097F           2277   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:540: detectobstacle(period*1000.0);
097F 8A82      2278            mov     dpl,r2
0981 8B83      2279            mov     dph,r3
0983 8CF0      2280            mov     b,r4
0985 ED        2281            mov     a,r5
0986 120100    2282            lcall   _detectobstacle
0989           2283   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\robotwithsonar3\Sam_Test.c:549: waitms(50);   
0989 900032    2284            mov     dptr,#0x0032
098C 120100    2285            lcall   _waitms
098F 020100    2286            ljmp    L020013?
0992           2287            rseg R_CSEG
0992           2288   
0000           2289            rseg R_XINIT
0000           2290   
0000           2291            rseg R_CONST
0000           2292   __str_0:
0000 466F7277  2293            db 'Forward'
     617264
0007 0A        2294            db 0x0A
0008 0D        2295            db 0x0D
0009 00        2296            db 0x00
000A           2297   __str_1:
000A 4261636B  2298            db 'Backward'
     77617264
0012 0A        2299            db 0x0A
0013 0D        2300            db 0x0D
0014 00        2301            db 0x00
0015           2302   __str_2:
0015 4C656674  2303            db 'Left'
0019 0A        2304            db 0x0A
001A 0D        2305            db 0x0D
001B 00        2306            db 0x00
001C           2307   __str_3:
001C 52696768  2308            db 'Right'
     74
0021 0A        2309            db 0x0A
0022 0D        2310            db 0x0D
0023 00        2311            db 0x00
0024           2312   __str_4:
0024 53746F70  2313            db 'Stop'
0028 0A        2314            db 0x0A
0029 0D        2315            db 0x0D
002A 00        2316            db 0x00
002B           2317   __str_5:
002B 57616974  2318            db 'Waiting for the signal to be 1'
     696E6720
     666F7220
     74686520
     7369676E
     616C2074
     6F206265
     2031
0049 0A        2319            db 0x0A
004A 0D        2320            db 0x0D
004B 00        2321            db 0x00
004C           2322   __str_6:
004C 566F6C74  2323            db 'Volt at ADC: %f'
     20617420
     4144433A
     202566
005B 0A        2324            db 0x0A
005C 0D        2325            db 0x0D
005D 00        2326            db 0x00
005E           2327   __str_7:
005E 5369676E  2328            db 'Signal is 0'
     616C2069
     732030
0069 0A        2329            db 0x0A
006A 0D        2330            db 0x0D
006B 00        2331            db 0x00
006C           2332   __str_8:
006C 53746172  2333            db 'Start Timer'
     74205469
     6D6572
0077 0A        2334            db 0x0A
0078 0D        2335            db 0x0D
0079 00        2336            db 0x00
007A           2337   __str_9:
007A 53746F70  2338            db 'Stop Timer'
     2054696D
     6572
0084 0A        2339            db 0x0A
0085 0D        2340            db 0x0D
0086 00        2341            db 0x00
0087           2342   __str_10:
0087 5475726E  2343            db 'Turn right '
     20726967
     687420
0092 0D        2344            db 0x0D
0093 0A        2345            db 0x0A
0094 00        2346            db 0x00
0095           2347   __str_11:
0095 476F2053  2348            db 'Go Straight '
     74726169
     67687420
00A1 0D        2349            db 0x0D
00A2 0A        2350            db 0x0A
00A3 00        2351            db 0x00
00A4           2352   __str_12:
00A4 1B        2353            db 0x1B
00A5 5B324A    2354            db '[2J'
00A8 00        2355            db 0x00
00A9           2356   __str_13:
00A9 53717561  2357            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
00CF 0D        2358            db 0x0D
00D0 0A        2359            db 0x0A
00D1 43686563  2360            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
00E5 50322E31  2361            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
0100 0D        2362            db 0x0D
0101 0A        2363            db 0x0A
0102 00        2364            db 0x00
0103           2365   __str_14:
0103 0A        2366            db 0x0A
0104 0D        2367            db 0x0D
0105 00        2368            db 0x00
0106           2369   __str_15:
0106 0D        2370            db 0x0D
0107 543D2566  2371            db 'T=%f ms   '
     206D7320
     2020
0111 0A        2372            db 0x0A
0112 20        2373            db ' '
0113 00        2374            db 0x00
0114           2375   
002E           2376            CSEG
002E           2377   
002E           2378   end
