0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 11:14:30 2018
0000              5   ;--------------------------------------------------------
                  5   $name reciever_new__2_
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _recieveData
0000             32            public _waitquarterperiod
0000             33            public _getDigitalSignal
0000             34            public _checkCommands
0000             35            public _arrayEqual
0000             36            public _periodcalc
0000             37            public _PWMStop
0000             38            public _PWMRight
0000             39            public _PWMLeft
0000             40            public _PWMbackward
0000             41            public _PWMforward
0000             42            public _InitPinADC
0000             43            public _Volts_at_Pin
0000             44            public _TIMER0_Init
0000             45            public _InitADC
0000             46            public _Timer2_ISR
0000             47            public _ADC_at_Pin
0000             48            public _waitms
0000             49            public _Timer3us
0000             50            public __c51_external_startup
0000             51            public _command
0000             52            public _right
0000             53            public _left
0000             54            public _backward
0000             55            public _forward
0000             56            public _stop
0000             57            public _claw_flag
0000             58            public _flag
0000             59            public _cartMoveB
0000             60            public _cartMoveF
0000             61            public _pwmSig6
0000             62            public _pwmSig5
0000             63            public _pwmSig4
0000             64            public _pwmSig3
0000             65            public _pwmSig2
0000             66            public _pwmSig1
0000             67            public _pwm_count3
0000             68            public _pwm_count2
0000             69            public _pwm_count1
0000             70            public _pwm_count
0000             71   ;--------------------------------------------------------
0000             72   ; Special Function Registers
0000             73   ;--------------------------------------------------------
0000             74   _ACC            DATA 0xe0
0000             75   _ADC0ASAH       DATA 0xb6
0000             76   _ADC0ASAL       DATA 0xb5
0000             77   _ADC0ASCF       DATA 0xa1
0000             78   _ADC0ASCT       DATA 0xc7
0000             79   _ADC0CF0        DATA 0xbc
0000             80   _ADC0CF1        DATA 0xb9
0000             81   _ADC0CF2        DATA 0xdf
0000             82   _ADC0CN0        DATA 0xe8
0000             83   _ADC0CN1        DATA 0xb2
0000             84   _ADC0CN2        DATA 0xb3
0000             85   _ADC0GTH        DATA 0xc4
0000             86   _ADC0GTL        DATA 0xc3
0000             87   _ADC0H          DATA 0xbe
0000             88   _ADC0L          DATA 0xbd
0000             89   _ADC0LTH        DATA 0xc6
0000             90   _ADC0LTL        DATA 0xc5
0000             91   _ADC0MX         DATA 0xbb
0000             92   _B              DATA 0xf0
0000             93   _CKCON0         DATA 0x8e
0000             94   _CKCON1         DATA 0xa6
0000             95   _CLEN0          DATA 0xc6
0000             96   _CLIE0          DATA 0xc7
0000             97   _CLIF0          DATA 0xe8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _CLOUT0         DATA 0xd1
0000            100   _CLU0CF         DATA 0xb1
0000            101   _CLU0FN         DATA 0xaf
0000            102   _CLU0MX         DATA 0x84
0000            103   _CLU1CF         DATA 0xb3
0000            104   _CLU1FN         DATA 0xb2
0000            105   _CLU1MX         DATA 0x85
0000            106   _CLU2CF         DATA 0xb6
0000            107   _CLU2FN         DATA 0xb5
0000            108   _CLU2MX         DATA 0x91
0000            109   _CLU3CF         DATA 0xbf
0000            110   _CLU3FN         DATA 0xbe
0000            111   _CLU3MX         DATA 0xae
0000            112   _CMP0CN0        DATA 0x9b
0000            113   _CMP0CN1        DATA 0x99
0000            114   _CMP0MD         DATA 0x9d
0000            115   _CMP0MX         DATA 0x9f
0000            116   _CMP1CN0        DATA 0xbf
0000            117   _CMP1CN1        DATA 0xac
0000            118   _CMP1MD         DATA 0xab
0000            119   _CMP1MX         DATA 0xaa
0000            120   _CRC0CN0        DATA 0xce
0000            121   _CRC0CN1        DATA 0x86
0000            122   _CRC0CNT        DATA 0xd3
0000            123   _CRC0DAT        DATA 0xcb
0000            124   _CRC0FLIP       DATA 0xcf
0000            125   _CRC0IN         DATA 0xca
0000            126   _CRC0ST         DATA 0xd2
0000            127   _DAC0CF0        DATA 0x91
0000            128   _DAC0CF1        DATA 0x92
0000            129   _DAC0H          DATA 0x85
0000            130   _DAC0L          DATA 0x84
0000            131   _DAC1CF0        DATA 0x93
0000            132   _DAC1CF1        DATA 0x94
0000            133   _DAC1H          DATA 0x8a
0000            134   _DAC1L          DATA 0x89
0000            135   _DAC2CF0        DATA 0x95
0000            136   _DAC2CF1        DATA 0x96
0000            137   _DAC2H          DATA 0x8c
0000            138   _DAC2L          DATA 0x8b
0000            139   _DAC3CF0        DATA 0x9a
0000            140   _DAC3CF1        DATA 0x9c
0000            141   _DAC3H          DATA 0x8e
0000            142   _DAC3L          DATA 0x8d
0000            143   _DACGCF0        DATA 0x88
0000            144   _DACGCF1        DATA 0x98
0000            145   _DACGCF2        DATA 0xa2
0000            146   _DERIVID        DATA 0xad
0000            147   _DEVICEID       DATA 0xb5
0000            148   _DPH            DATA 0x83
0000            149   _DPL            DATA 0x82
0000            150   _EIE1           DATA 0xe6
0000            151   _EIE2           DATA 0xf3
0000            152   _EIP1           DATA 0xbb
0000            153   _EIP1H          DATA 0xee
0000            154   _EIP2           DATA 0xed
0000            155   _EIP2H          DATA 0xf6
0000            156   _EMI0CN         DATA 0xe7
0000            157   _FLKEY          DATA 0xb7
0000            158   _HFO0CAL        DATA 0xc7
0000            159   _HFO1CAL        DATA 0xd6
0000            160   _HFOCN          DATA 0xef
0000            161   _I2C0ADM        DATA 0xff
0000            162   _I2C0CN0        DATA 0xba
0000            163   _I2C0DIN        DATA 0xbc
0000            164   _I2C0DOUT       DATA 0xbb
0000            165   _I2C0FCN0       DATA 0xad
0000            166   _I2C0FCN1       DATA 0xab
0000            167   _I2C0FCT        DATA 0xf5
0000            168   _I2C0SLAD       DATA 0xbd
0000            169   _I2C0STAT       DATA 0xb9
0000            170   _IE             DATA 0xa8
0000            171   _IP             DATA 0xb8
0000            172   _IPH            DATA 0xf2
0000            173   _IT01CF         DATA 0xe4
0000            174   _LFO0CN         DATA 0xb1
0000            175   _P0             DATA 0x80
0000            176   _P0MASK         DATA 0xfe
0000            177   _P0MAT          DATA 0xfd
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P0MDOUT        DATA 0xa4
0000            180   _P0SKIP         DATA 0xd4
0000            181   _P1             DATA 0x90
0000            182   _P1MASK         DATA 0xee
0000            183   _P1MAT          DATA 0xed
0000            184   _P1MDIN         DATA 0xf2
0000            185   _P1MDOUT        DATA 0xa5
0000            186   _P1SKIP         DATA 0xd5
0000            187   _P2             DATA 0xa0
0000            188   _P2MASK         DATA 0xfc
0000            189   _P2MAT          DATA 0xfb
0000            190   _P2MDIN         DATA 0xf3
0000            191   _P2MDOUT        DATA 0xa6
0000            192   _P2SKIP         DATA 0xcc
0000            193   _P3             DATA 0xb0
0000            194   _P3MDIN         DATA 0xf4
0000            195   _P3MDOUT        DATA 0x9c
0000            196   _PCA0CENT       DATA 0x9e
0000            197   _PCA0CLR        DATA 0x9c
0000            198   _PCA0CN0        DATA 0xd8
0000            199   _PCA0CPH0       DATA 0xfc
0000            200   _PCA0CPH1       DATA 0xea
0000            201   _PCA0CPH2       DATA 0xec
0000            202   _PCA0CPH3       DATA 0xf5
0000            203   _PCA0CPH4       DATA 0x85
0000            204   _PCA0CPH5       DATA 0xde
0000            205   _PCA0CPL0       DATA 0xfb
0000            206   _PCA0CPL1       DATA 0xe9
0000            207   _PCA0CPL2       DATA 0xeb
0000            208   _PCA0CPL3       DATA 0xf4
0000            209   _PCA0CPL4       DATA 0x84
0000            210   _PCA0CPL5       DATA 0xdd
0000            211   _PCA0CPM0       DATA 0xda
0000            212   _PCA0CPM1       DATA 0xdb
0000            213   _PCA0CPM2       DATA 0xdc
0000            214   _PCA0CPM3       DATA 0xae
0000            215   _PCA0CPM4       DATA 0xaf
0000            216   _PCA0CPM5       DATA 0xcc
0000            217   _PCA0H          DATA 0xfa
0000            218   _PCA0L          DATA 0xf9
0000            219   _PCA0MD         DATA 0xd9
0000            220   _PCA0POL        DATA 0x96
0000            221   _PCA0PWM        DATA 0xf7
0000            222   _PCON0          DATA 0x87
0000            223   _PCON1          DATA 0xcd
0000            224   _PFE0CN         DATA 0xc1
0000            225   _PRTDRV         DATA 0xf6
0000            226   _PSCTL          DATA 0x8f
0000            227   _PSTAT0         DATA 0xaa
0000            228   _PSW            DATA 0xd0
0000            229   _REF0CN         DATA 0xd1
0000            230   _REG0CN         DATA 0xc9
0000            231   _REVID          DATA 0xb6
0000            232   _RSTSRC         DATA 0xef
0000            233   _SBCON1         DATA 0x94
0000            234   _SBRLH1         DATA 0x96
0000            235   _SBRLL1         DATA 0x95
0000            236   _SBUF           DATA 0x99
0000            237   _SBUF0          DATA 0x99
0000            238   _SBUF1          DATA 0x92
0000            239   _SCON           DATA 0x98
0000            240   _SCON0          DATA 0x98
0000            241   _SCON1          DATA 0xc8
0000            242   _SFRPAGE        DATA 0xa7
0000            243   _SFRPGCN        DATA 0xbc
0000            244   _SFRSTACK       DATA 0xd7
0000            245   _SMB0ADM        DATA 0xd6
0000            246   _SMB0ADR        DATA 0xd7
0000            247   _SMB0CF         DATA 0xc1
0000            248   _SMB0CN0        DATA 0xc0
0000            249   _SMB0DAT        DATA 0xc2
0000            250   _SMB0FCN0       DATA 0xc3
0000            251   _SMB0FCN1       DATA 0xc4
0000            252   _SMB0FCT        DATA 0xef
0000            253   _SMB0RXLN       DATA 0xc5
0000            254   _SMB0TC         DATA 0xac
0000            255   _SMOD1          DATA 0x93
0000            256   _SP             DATA 0x81
0000            257   _SPI0CFG        DATA 0xa1
0000            258   _SPI0CKR        DATA 0xa2
0000            259   _SPI0CN0        DATA 0xf8
0000            260   _SPI0DAT        DATA 0xa3
0000            261   _SPI0FCN0       DATA 0x9a
0000            262   _SPI0FCN1       DATA 0x9b
0000            263   _SPI0FCT        DATA 0xf7
0000            264   _SPI0PCF        DATA 0xdf
0000            265   _TCON           DATA 0x88
0000            266   _TH0            DATA 0x8c
0000            267   _TH1            DATA 0x8d
0000            268   _TL0            DATA 0x8a
0000            269   _TL1            DATA 0x8b
0000            270   _TMOD           DATA 0x89
0000            271   _TMR2CN0        DATA 0xc8
0000            272   _TMR2CN1        DATA 0xfd
0000            273   _TMR2H          DATA 0xcf
0000            274   _TMR2L          DATA 0xce
0000            275   _TMR2RLH        DATA 0xcb
0000            276   _TMR2RLL        DATA 0xca
0000            277   _TMR3CN0        DATA 0x91
0000            278   _TMR3CN1        DATA 0xfe
0000            279   _TMR3H          DATA 0x95
0000            280   _TMR3L          DATA 0x94
0000            281   _TMR3RLH        DATA 0x93
0000            282   _TMR3RLL        DATA 0x92
0000            283   _TMR4CN0        DATA 0x98
0000            284   _TMR4CN1        DATA 0xff
0000            285   _TMR4H          DATA 0xa5
0000            286   _TMR4L          DATA 0xa4
0000            287   _TMR4RLH        DATA 0xa3
0000            288   _TMR4RLL        DATA 0xa2
0000            289   _TMR5CN0        DATA 0xc0
0000            290   _TMR5CN1        DATA 0xf1
0000            291   _TMR5H          DATA 0xd5
0000            292   _TMR5L          DATA 0xd4
0000            293   _TMR5RLH        DATA 0xd3
0000            294   _TMR5RLL        DATA 0xd2
0000            295   _UART0PCF       DATA 0xd9
0000            296   _UART1FCN0      DATA 0x9d
0000            297   _UART1FCN1      DATA 0xd8
0000            298   _UART1FCT       DATA 0xfa
0000            299   _UART1LIN       DATA 0x9e
0000            300   _UART1PCF       DATA 0xda
0000            301   _VDM0CN         DATA 0xff
0000            302   _WDTCN          DATA 0x97
0000            303   _XBR0           DATA 0xe1
0000            304   _XBR1           DATA 0xe2
0000            305   _XBR2           DATA 0xe3
0000            306   _XOSC0CN        DATA 0x86
0000            307   _DPTR           DATA 0x8382
0000            308   _TMR2RL         DATA 0xcbca
0000            309   _TMR3RL         DATA 0x9392
0000            310   _TMR4RL         DATA 0xa3a2
0000            311   _TMR5RL         DATA 0xd3d2
0000            312   _TMR0           DATA 0x8c8a
0000            313   _TMR1           DATA 0x8d8b
0000            314   _TMR2           DATA 0xcfce
0000            315   _TMR3           DATA 0x9594
0000            316   _TMR4           DATA 0xa5a4
0000            317   _TMR5           DATA 0xd5d4
0000            318   _SBRL1          DATA 0x9695
0000            319   _PCA0           DATA 0xfaf9
0000            320   _PCA0CP0        DATA 0xfcfb
0000            321   _PCA0CP1        DATA 0xeae9
0000            322   _PCA0CP2        DATA 0xeceb
0000            323   _PCA0CP3        DATA 0xf5f4
0000            324   _PCA0CP4        DATA 0x8584
0000            325   _PCA0CP5        DATA 0xdedd
0000            326   _ADC0ASA        DATA 0xb6b5
0000            327   _ADC0GT         DATA 0xc4c3
0000            328   _ADC0           DATA 0xbebd
0000            329   _ADC0LT         DATA 0xc6c5
0000            330   _DAC0           DATA 0x8584
0000            331   _DAC1           DATA 0x8a89
0000            332   _DAC2           DATA 0x8c8b
0000            333   _DAC3           DATA 0x8e8d
0000            334   ;--------------------------------------------------------
0000            335   ; special function bits
0000            336   ;--------------------------------------------------------
0000            337   _ACC_0          BIT 0xe0
0000            338   _ACC_1          BIT 0xe1
0000            339   _ACC_2          BIT 0xe2
0000            340   _ACC_3          BIT 0xe3
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_5          BIT 0xe5
0000            343   _ACC_6          BIT 0xe6
0000            344   _ACC_7          BIT 0xe7
0000            345   _TEMPE          BIT 0xe8
0000            346   _ADGN0          BIT 0xe9
0000            347   _ADGN1          BIT 0xea
0000            348   _ADWINT         BIT 0xeb
0000            349   _ADBUSY         BIT 0xec
0000            350   _ADINT          BIT 0xed
0000            351   _IPOEN          BIT 0xee
0000            352   _ADEN           BIT 0xef
0000            353   _B_0            BIT 0xf0
0000            354   _B_1            BIT 0xf1
0000            355   _B_2            BIT 0xf2
0000            356   _B_3            BIT 0xf3
0000            357   _B_4            BIT 0xf4
0000            358   _B_5            BIT 0xf5
0000            359   _B_6            BIT 0xf6
0000            360   _B_7            BIT 0xf7
0000            361   _C0FIF          BIT 0xe8
0000            362   _C0RIF          BIT 0xe9
0000            363   _C1FIF          BIT 0xea
0000            364   _C1RIF          BIT 0xeb
0000            365   _C2FIF          BIT 0xec
0000            366   _C2RIF          BIT 0xed
0000            367   _C3FIF          BIT 0xee
0000            368   _C3RIF          BIT 0xef
0000            369   _D1SRC0         BIT 0x88
0000            370   _D1SRC1         BIT 0x89
0000            371   _D1AMEN         BIT 0x8a
0000            372   _D01REFSL       BIT 0x8b
0000            373   _D3SRC0         BIT 0x8c
0000            374   _D3SRC1         BIT 0x8d
0000            375   _D3AMEN         BIT 0x8e
0000            376   _D23REFSL       BIT 0x8f
0000            377   _D0UDIS         BIT 0x98
0000            378   _D1UDIS         BIT 0x99
0000            379   _D2UDIS         BIT 0x9a
0000            380   _D3UDIS         BIT 0x9b
0000            381   _EX0            BIT 0xa8
0000            382   _ET0            BIT 0xa9
0000            383   _EX1            BIT 0xaa
0000            384   _ET1            BIT 0xab
0000            385   _ES0            BIT 0xac
0000            386   _ET2            BIT 0xad
0000            387   _ESPI0          BIT 0xae
0000            388   _EA             BIT 0xaf
0000            389   _PX0            BIT 0xb8
0000            390   _PT0            BIT 0xb9
0000            391   _PX1            BIT 0xba
0000            392   _PT1            BIT 0xbb
0000            393   _PS0            BIT 0xbc
0000            394   _PT2            BIT 0xbd
0000            395   _PSPI0          BIT 0xbe
0000            396   _P0_0           BIT 0x80
0000            397   _P0_1           BIT 0x81
0000            398   _P0_2           BIT 0x82
0000            399   _P0_3           BIT 0x83
0000            400   _P0_4           BIT 0x84
0000            401   _P0_5           BIT 0x85
0000            402   _P0_6           BIT 0x86
0000            403   _P0_7           BIT 0x87
0000            404   _P1_0           BIT 0x90
0000            405   _P1_1           BIT 0x91
0000            406   _P1_2           BIT 0x92
0000            407   _P1_3           BIT 0x93
0000            408   _P1_4           BIT 0x94
0000            409   _P1_5           BIT 0x95
0000            410   _P1_6           BIT 0x96
0000            411   _P1_7           BIT 0x97
0000            412   _P2_0           BIT 0xa0
0000            413   _P2_1           BIT 0xa1
0000            414   _P2_2           BIT 0xa2
0000            415   _P2_3           BIT 0xa3
0000            416   _P2_4           BIT 0xa4
0000            417   _P2_5           BIT 0xa5
0000            418   _P2_6           BIT 0xa6
0000            419   _P3_0           BIT 0xb0
0000            420   _P3_1           BIT 0xb1
0000            421   _P3_2           BIT 0xb2
0000            422   _P3_3           BIT 0xb3
0000            423   _P3_4           BIT 0xb4
0000            424   _P3_7           BIT 0xb7
0000            425   _CCF0           BIT 0xd8
0000            426   _CCF1           BIT 0xd9
0000            427   _CCF2           BIT 0xda
0000            428   _CCF3           BIT 0xdb
0000            429   _CCF4           BIT 0xdc
0000            430   _CCF5           BIT 0xdd
0000            431   _CR             BIT 0xde
0000            432   _CF             BIT 0xdf
0000            433   _PARITY         BIT 0xd0
0000            434   _F1             BIT 0xd1
0000            435   _OV             BIT 0xd2
0000            436   _RS0            BIT 0xd3
0000            437   _RS1            BIT 0xd4
0000            438   _F0             BIT 0xd5
0000            439   _AC             BIT 0xd6
0000            440   _CY             BIT 0xd7
0000            441   _RI             BIT 0x98
0000            442   _TI             BIT 0x99
0000            443   _RB8            BIT 0x9a
0000            444   _TB8            BIT 0x9b
0000            445   _REN            BIT 0x9c
0000            446   _CE             BIT 0x9d
0000            447   _SMODE          BIT 0x9e
0000            448   _RI1            BIT 0xc8
0000            449   _TI1            BIT 0xc9
0000            450   _RBX1           BIT 0xca
0000            451   _TBX1           BIT 0xcb
0000            452   _REN1           BIT 0xcc
0000            453   _PERR1          BIT 0xcd
0000            454   _OVR1           BIT 0xce
0000            455   _SI             BIT 0xc0
0000            456   _ACK            BIT 0xc1
0000            457   _ARBLOST        BIT 0xc2
0000            458   _ACKRQ          BIT 0xc3
0000            459   _STO            BIT 0xc4
0000            460   _STA            BIT 0xc5
0000            461   _TXMODE         BIT 0xc6
0000            462   _MASTER         BIT 0xc7
0000            463   _SPIEN          BIT 0xf8
0000            464   _TXNF           BIT 0xf9
0000            465   _NSSMD0         BIT 0xfa
0000            466   _NSSMD1         BIT 0xfb
0000            467   _RXOVRN         BIT 0xfc
0000            468   _MODF           BIT 0xfd
0000            469   _WCOL           BIT 0xfe
0000            470   _SPIF           BIT 0xff
0000            471   _IT0            BIT 0x88
0000            472   _IE0            BIT 0x89
0000            473   _IT1            BIT 0x8a
0000            474   _IE1            BIT 0x8b
0000            475   _TR0            BIT 0x8c
0000            476   _TF0            BIT 0x8d
0000            477   _TR1            BIT 0x8e
0000            478   _TF1            BIT 0x8f
0000            479   _T2XCLK0        BIT 0xc8
0000            480   _T2XCLK1        BIT 0xc9
0000            481   _TR2            BIT 0xca
0000            482   _T2SPLIT        BIT 0xcb
0000            483   _TF2CEN         BIT 0xcc
0000            484   _TF2LEN         BIT 0xcd
0000            485   _TF2L           BIT 0xce
0000            486   _TF2H           BIT 0xcf
0000            487   _T4XCLK0        BIT 0x98
0000            488   _T4XCLK1        BIT 0x99
0000            489   _TR4            BIT 0x9a
0000            490   _T4SPLIT        BIT 0x9b
0000            491   _TF4CEN         BIT 0x9c
0000            492   _TF4LEN         BIT 0x9d
0000            493   _TF4L           BIT 0x9e
0000            494   _TF4H           BIT 0x9f
0000            495   _T5XCLK0        BIT 0xc0
0000            496   _T5XCLK1        BIT 0xc1
0000            497   _TR5            BIT 0xc2
0000            498   _T5SPLIT        BIT 0xc3
0000            499   _TF5CEN         BIT 0xc4
0000            500   _TF5LEN         BIT 0xc5
0000            501   _TF5L           BIT 0xc6
0000            502   _TF5H           BIT 0xc7
0000            503   _RIE            BIT 0xd8
0000            504   _RXTO0          BIT 0xd9
0000            505   _RXTO1          BIT 0xda
0000            506   _RFRQ           BIT 0xdb
0000            507   _TIE            BIT 0xdc
0000            508   _TXHOLD         BIT 0xdd
0000            509   _TXNF1          BIT 0xde
0000            510   _TFRQ           BIT 0xdf
0000            511   ;--------------------------------------------------------
0000            512   ; overlayable register banks
0000            513   ;--------------------------------------------------------
0000            514            rbank0 segment data overlay
0000            515   ;--------------------------------------------------------
0000            516   ; internal ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_DSEG
0000            519   _pwm_count:
0000            520            ds 1
0001            521   _pwm_count1:
0001            522            ds 1
0002            523   _pwm_count2:
0002            524            ds 1
0003            525   _pwm_count3:
0003            526            ds 1
0004            527   _pwmSig1:
0004            528            ds 2
0006            529   _pwmSig2:
0006            530            ds 2
0008            531   _pwmSig3:
0008            532            ds 2
000A            533   _pwmSig4:
000A            534            ds 2
000C            535   _pwmSig5:
000C            536            ds 2
000E            537   _pwmSig6:
000E            538            ds 2
0010            539   _cartMoveF:
0010            540            ds 2
0012            541   _cartMoveB:
0012            542            ds 2
0014            543   _flag:
0014            544            ds 2
0016            545   _claw_flag:
0016            546            ds 2
0018            547   _stop:
0018            548            ds 8
0020            549   _forward:
0020            550            ds 8
0028            551   _backward:
0028            552            ds 8
0030            553   _left:
0030            554            ds 8
0038            555   _right:
0038            556            ds 8
0040            557   _command:
0040            558            ds 8
0048            559   ;--------------------------------------------------------
0048            560   ; overlayable items in internal ram 
0048            561   ;--------------------------------------------------------
0000            562            rseg    R_OSEG
0000            563            rseg    R_OSEG
0000            564            rseg    R_OSEG
0000            565   _InitPinADC_PARM_2:
0000            566            ds 1
0001            567            rseg    R_OSEG
0001            568   _arrayEqual_PARM_2:
0001            569            ds 2
0003            570   _arrayEqual_PARM_3:
0003            571            ds 3
0006            572   _arrayEqual_arr1_1_78:
0006            573            ds 3
0009            574   ;--------------------------------------------------------
0009            575   ; indirectly addressable internal ram data
0009            576   ;--------------------------------------------------------
0000            577            rseg R_ISEG
0000            578   ;--------------------------------------------------------
0000            579   ; absolute internal ram data
0000            580   ;--------------------------------------------------------
0000            581            DSEG
0000            582   ;--------------------------------------------------------
0000            583   ; bit data
0000            584   ;--------------------------------------------------------
0000            585            rseg R_BSEG
0000            586   _Timer2_ISR_sloc0_1_0:
0000            587            DBIT    1
0001            588   ;--------------------------------------------------------
0001            589   ; paged external ram data
0001            590   ;--------------------------------------------------------
0000            591            rseg R_PSEG
0000            592   ;--------------------------------------------------------
0000            593   ; external ram data
0000            594   ;--------------------------------------------------------
0000            595            rseg R_XSEG
0000            596   ;--------------------------------------------------------
0000            597   ; absolute external ram data
0000            598   ;--------------------------------------------------------
0000            599            XSEG
0000            600   ;--------------------------------------------------------
0000            601   ; external initialized ram data
0000            602   ;--------------------------------------------------------
0000            603            rseg R_IXSEG
0000            604            rseg R_HOME
0000            605            rseg R_GSINIT
0000            606            rseg R_CSEG
0000            607   ;--------------------------------------------------------
0000            608   ; Reset entry point and interrupt vectors
0000            609   ;--------------------------------------------------------
0000            610            CSEG at 0x0000
0000 020100     611            ljmp    _crt0
002B            612            CSEG at 0x002b
002B 020100     613            ljmp    _Timer2_ISR
002E            614   ;--------------------------------------------------------
002E            615   ; global & static initialisations
002E            616   ;--------------------------------------------------------
0000            617            rseg R_HOME
0000            618            rseg R_GSINIT
0000            619            rseg R_GSINIT
0000            620   ;--------------------------------------------------------
0000            621   ; data variables initialization
0000            622   ;--------------------------------------------------------
0000            623            rseg R_DINIT
0000            624   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:44: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 75A000     625            mov     _pwm_count,#0x00
0003            626   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:45: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 756000     627            mov     _pwm_count1,#0x00
0006            628   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:46: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 752000     629            mov     _pwm_count2,#0x00
0009            630   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:47: volatile unsigned char pwm_count3 = 0; //
0009 75E000     631            mov     _pwm_count3,#0x00
000C            632   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:62: volatile int flag = 0;
000C E4         633            clr     a
000D F5C8       634            mov     _flag,a
000F F5C9       635            mov     (_flag + 1),a
0011            636   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:63: volatile int claw_flag = 0;
0011 E4         637            clr     a
0012 F588       638            mov     _claw_flag,a
0014 F589       639            mov     (_claw_flag + 1),a
0016            640   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:64: int stop[]={0,0,0,0};
0016 754800     641            mov     _stop,#0x00
0019 754900     642            mov     (_stop + 1),#0x00
001C 754A00     643            mov     (_stop + 0x0002),#0x00
001F 754B00     644            mov     ((_stop + 0x0002) + 1),#0x00
0022 754C00     645            mov     (_stop + 0x0004),#0x00
0025 754D00     646            mov     ((_stop + 0x0004) + 1),#0x00
0028 754E00     647            mov     (_stop + 0x0006),#0x00
002B 754F00     648            mov     ((_stop + 0x0006) + 1),#0x00
002E            649   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:65: int forward[]={1,1,1,1};
002E 750801     650            mov     _forward,#0x01
0031 750900     651            mov     (_forward + 1),#0x00
0034 750A01     652            mov     (_forward + 0x0002),#0x01
0037 750B00     653            mov     ((_forward + 0x0002) + 1),#0x00
003A 750C01     654            mov     (_forward + 0x0004),#0x01
003D 750D00     655            mov     ((_forward + 0x0004) + 1),#0x00
0040 750E01     656            mov     (_forward + 0x0006),#0x01
0043 750F00     657            mov     ((_forward + 0x0006) + 1),#0x00
0046            658   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:66: int backward[]={1,0,1,1};
0046 75C801     659            mov     _backward,#0x01
0049 75C900     660            mov     (_backward + 1),#0x00
004C 75CA00     661            mov     (_backward + 0x0002),#0x00
004F 75CB00     662            mov     ((_backward + 0x0002) + 1),#0x00
0052 75CC01     663            mov     (_backward + 0x0004),#0x01
0055 75CD00     664            mov     ((_backward + 0x0004) + 1),#0x00
0058 75CE01     665            mov     (_backward + 0x0006),#0x01
005B 75CF00     666            mov     ((_backward + 0x0006) + 1),#0x00
005E            667   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:67: int left[]={1,0,0,1};
005E 758801     668            mov     _left,#0x01
0061 758900     669            mov     (_left + 1),#0x00
0064 758A00     670            mov     (_left + 0x0002),#0x00
0067 758B00     671            mov     ((_left + 0x0002) + 1),#0x00
006A 758C00     672            mov     (_left + 0x0004),#0x00
006D 758D00     673            mov     ((_left + 0x0004) + 1),#0x00
0070 758E01     674            mov     (_left + 0x0006),#0x01
0073 758F00     675            mov     ((_left + 0x0006) + 1),#0x00
0076            676   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:68: int right[]={1,0,0,0};
0076 754801     677            mov     _right,#0x01
0079 754900     678            mov     (_right + 1),#0x00
007C 754A00     679            mov     (_right + 0x0002),#0x00
007F 754B00     680            mov     ((_right + 0x0002) + 1),#0x00
0082 754C00     681            mov     (_right + 0x0004),#0x00
0085 754D00     682            mov     ((_right + 0x0004) + 1),#0x00
0088 754E00     683            mov     (_right + 0x0006),#0x00
008B 754F00     684            mov     ((_right + 0x0006) + 1),#0x00
008E            685   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:70: int command[4] = {0,0,0,0};
008E 750800     686            mov     _command,#0x00
0091 750900     687            mov     (_command + 1),#0x00
0094 750A00     688            mov     (_command + 0x0002),#0x00
0097 750B00     689            mov     ((_command + 0x0002) + 1),#0x00
009A 750C00     690            mov     (_command + 0x0004),#0x00
009D 750D00     691            mov     ((_command + 0x0004) + 1),#0x00
00A0 750E00     692            mov     (_command + 0x0006),#0x00
00A3 750F00     693            mov     ((_command + 0x0006) + 1),#0x00
00A6            694            ; The linker places a 'ret' at the end of segment R_DINIT.
00A6            695   ;--------------------------------------------------------
00A6            696   ; code
00A6            697   ;--------------------------------------------------------
0000            698            rseg R_CSEG
0000            699   ;------------------------------------------------------------
0000            700   ;Allocation info for local variables in function '_c51_external_startup'
0000            701   ;------------------------------------------------------------
0000            702   ;------------------------------------------------------------
0000            703   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:72: char _c51_external_startup(void)
0000            704   ;        -----------------------------------------
0000            705   ;         function _c51_external_startup
0000            706   ;        -----------------------------------------
0000            707   __c51_external_startup:
0000            708            using   0
0000            709   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:75: SFRPAGE = 0x00;
0000 75A700     710            mov     _SFRPAGE,#0x00
0003            711   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:76: WDTCN = 0xDE; //First key
0003 7597DE     712            mov     _WDTCN,#0xDE
0006            713   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:77: WDTCN = 0xAD; //Second key
0006 7597AD     714            mov     _WDTCN,#0xAD
0009            715   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:79: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     716            mov     _VDM0CN,#0x80
000C            717   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:80: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     718            mov     _RSTSRC,#0x06
000F            719   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:87: SFRPAGE = 0x10;
000F 75A710     720            mov     _SFRPAGE,#0x10
0012            721   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:88: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     722            mov     _PFE0CN,#0x20
0015            723   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:89: SFRPAGE = 0x00;
0015 75A700     724            mov     _SFRPAGE,#0x00
0018            725   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:110: CLKSEL = 0x00;
0018 75A900     726            mov     _CLKSEL,#0x00
001B            727   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:111: CLKSEL = 0x00;
001B 75A900     728            mov     _CLKSEL,#0x00
001E            729   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:112: while ((CLKSEL & 0x80) == 0);
001E            730   L002001?:
001E E5A9       731            mov     a,_CLKSEL
0020 30E788     732            jnb     acc.7,L002001?
0023            733   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:113: CLKSEL = 0x03;
0023 75A903     734            mov     _CLKSEL,#0x03
0026            735   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:114: CLKSEL = 0x03;
0026 75A903     736            mov     _CLKSEL,#0x03
0029            737   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:115: while ((CLKSEL & 0x80) == 0);
0029            738   L002004?:
0029 E5A9       739            mov     a,_CLKSEL
002B 30E708     740            jnb     acc.7,L002004?
002E            741   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:120: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     742            orl     _P0MDOUT,#0x10
0031            743   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:121: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     744            mov     _XBR0,#0x01
0034            745   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:122: XBR1 = 0X00;
0034 75E200     746            mov     _XBR1,#0x00
0037            747   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:123: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     748            mov     _XBR2,#0x40
003A            749   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:129: SCON0 = 0x10;
003A 759810     750            mov     _SCON0,#0x10
003D            751   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:130: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     752            mov     _TH1,#0xE6
0040            753   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:131: TL1 = TH1;      // Init Timer1
0040 858D8B     754            mov     _TL1,_TH1
0043            755   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:132: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     756            anl     _TMOD,#0x0F
0046            757   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:133: TMOD |= 0x20;
0046 438920     758            orl     _TMOD,#0x20
0049            759   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:134: TR1 = 1; // START Timer1
0049 D28E       760            setb    _TR1
004B            761   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:135: TI = 1;  // Indicate TX0 ready
004B D299       762            setb    _TI
004D            763   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:138: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     764            mov     _TMR2CN0,#0x00
0050            765   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:139: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     766            orl     _CKCON0,#0x10
0053            767   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:140: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     768            mov     _TMR2RL,#0xE0
0056 75CBE3     769            mov     (_TMR2RL >> 8),#0xE3
0059            770   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:141: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     771            mov     _TMR2,#0xFF
005C 75CFFF     772            mov     (_TMR2 >> 8),#0xFF
005F            773   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:142: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       774            setb    _ET2
0061            775   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:143: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       776            setb    _TR2
0063            777   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:160: EA = 1; // Enable interrupts
0063 D2AF       778            setb    _EA
0065            779   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:163: return 0;
0065 758200     780            mov     dpl,#0x00
0068 22         781            ret
0069            782   ;------------------------------------------------------------
0069            783   ;Allocation info for local variables in function 'Timer3us'
0069            784   ;------------------------------------------------------------
0069            785   ;us                        Allocated to registers r2 r3 
0069            786   ;i                         Allocated to registers r4 r5 
0069            787   ;------------------------------------------------------------
0069            788   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:165: void Timer3us(unsigned int us)
0069            789   ;        -----------------------------------------
0069            790   ;         function Timer3us
0069            791   ;        -----------------------------------------
0069            792   _Timer3us:
0069 AA82       793            mov     r2,dpl
006B AB83       794            mov     r3,dph
006D            795   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:170: CKCON0|=0b_0100_0000;
006D 438E40     796            orl     _CKCON0,#0x40
0070            797   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:172: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     798            mov     _TMR3RL,#0xB8
0073 7593FF     799            mov     (_TMR3RL >> 8),#0xFF
0076            800   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:173: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     801            mov     _TMR3,_TMR3RL
0079 859395     802            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            803   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:175: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     804            mov     _TMR3CN0,#0x04
007F            805   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:176: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       806            mov     r4,#0x00
0081 7D00       807            mov     r5,#0x00
0083            808   L003004?:
0083 C3         809            clr     c
0084 EC         810            mov     a,r4
0085 9A         811            subb    a,r2
0086 ED         812            mov     a,r5
0087 9B         813            subb    a,r3
0088 5001       814            jnc     L003007?
008A            815   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:178: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            816   L003001?:
008A E591       817            mov     a,_TMR3CN0
008C 30E748     818            jnb     acc.7,L003001?
008F            819   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:179: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     820            anl     _TMR3CN0,#0x7F
0092            821   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:176: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         822            inc     r4
0093 BC00C8     823            cjne    r4,#0x00,L003004?
0096 0D         824            inc     r5
0097 8001       825            sjmp    L003004?
0099            826   L003007?:
0099            827   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:181: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     828            mov     _TMR3CN0,#0x00
009C 22         829            ret
009D            830   ;------------------------------------------------------------
009D            831   ;Allocation info for local variables in function 'waitms'
009D            832   ;------------------------------------------------------------
009D            833   ;ms                        Allocated to registers r2 r3 
009D            834   ;j                         Allocated to registers r4 r5 
009D            835   ;k                         Allocated to registers r6 
009D            836   ;------------------------------------------------------------
009D            837   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:183: void waitms (unsigned int ms)
009D            838   ;        -----------------------------------------
009D            839   ;         function waitms
009D            840   ;        -----------------------------------------
009D            841   _waitms:
009D AA82       842            mov     r2,dpl
009F AB83       843            mov     r3,dph
00A1            844   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:189: for(j=0; j<ms; j++)
00A1 7C00       845            mov     r4,#0x00
00A3 7D00       846            mov     r5,#0x00
00A5            847   L004005?:
00A5 C3         848            clr     c
00A6 EC         849            mov     a,r4
00A7 9A         850            subb    a,r2
00A8 ED         851            mov     a,r5
00A9 9B         852            subb    a,r3
00AA 5001       853            jnc     L004009?
00AC            854   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:190: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       855            mov     r6,#0x00
00AE            856   L004001?:
00AE BE0448     857            cjne    r6,#0x04,L004018?
00B1            858   L004018?:
00B1 5001       859            jnc     L004007?
00B3 9000FA     860            mov     dptr,#0x00FA
00B6 C002       861            push    ar2
00B8 C003       862            push    ar3
00BA C004       863            push    ar4
00BC C005       864            push    ar5
00BE C006       865            push    ar6
00C0 120100     866            lcall   _Timer3us
00C3 D006       867            pop     ar6
00C5 D005       868            pop     ar5
00C7 D004       869            pop     ar4
00C9 D003       870            pop     ar3
00CB D002       871            pop     ar2
00CD 0E         872            inc     r6
00CE 8001       873            sjmp    L004001?
00D0            874   L004007?:
00D0            875   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:189: for(j=0; j<ms; j++)
00D0 0C         876            inc     r4
00D1 BC0088     877            cjne    r4,#0x00,L004005?
00D4 0D         878            inc     r5
00D5 8001       879            sjmp    L004005?
00D7            880   L004009?:
00D7 22         881            ret
00D8            882   ;------------------------------------------------------------
00D8            883   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            884   ;------------------------------------------------------------
00D8            885   ;pin                       Allocated to registers 
00D8            886   ;------------------------------------------------------------
00D8            887   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:193: unsigned int ADC_at_Pin(unsigned char pin)
00D8            888   ;        -----------------------------------------
00D8            889   ;         function ADC_at_Pin
00D8            890   ;        -----------------------------------------
00D8            891   _ADC_at_Pin:
00D8 8582BB     892            mov     _ADC0MX,dpl
00DB            893   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:196: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       894            setb    _ADBUSY
00DD            895   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:197: while (ADBUSY); // Wait for dummy conversion to finish
00DD            896   L005001?:
00DD 20ECC8     897            jb      _ADBUSY,L005001?
00E0            898   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:198: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       899            setb    _ADBUSY
00E2            900   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:199: while (ADBUSY); // Wait for conversion to complete
00E2            901   L005004?:
00E2 20EC08     902            jb      _ADBUSY,L005004?
00E5            903   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:200: return (ADC0);
00E5 85BD82     904            mov     dpl,_ADC0
00E8 85BE83     905            mov     dph,(_ADC0 >> 8)
00EB 22         906            ret
00EC            907   ;------------------------------------------------------------
00EC            908   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            909   ;------------------------------------------------------------
00EC            910   ;------------------------------------------------------------
00EC            911   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:204: void Timer2_ISR(void) interrupt 5
00EC            912   ;        -----------------------------------------
00EC            913   ;         function Timer2_ISR
00EC            914   ;        -----------------------------------------
00EC            915   _Timer2_ISR:
00EC C0E0       916            push    acc
00EE C002       917            push    ar2
00F0 C003       918            push    ar3
00F2 C0D0       919            push    psw
00F4 75D000     920            mov     psw,#0x00
00F7            921   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:206: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       922            clr     _TF2H
00F9            923   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:208: pwm_count++;
00F9 05A0       924            inc     _pwm_count
00FB            925   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:209: if (pwm_count>100)
00FB E5A0       926            mov     a,_pwm_count
00FD 249B       927            add     a,#0xff - 0x64
00FF 5001       928            jnc     L006002?
0101            929   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:210: pwm_count = 0;
0101 75A000     930            mov     _pwm_count,#0x00
0104            931   L006002?:
0104            932   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:213: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AAA0       933            mov     r2,_pwm_count
0106 7B00       934            mov     r3,#0x00
0108 C3         935            clr     c
0109 E5C8       936            mov     a,_pwmSig1
010B 9A         937            subb    a,r2
010C E5C9       938            mov     a,(_pwmSig1 + 1)
010E 9B         939            subb    a,r3
010F 9208       940            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         941            cpl     c
0112 9294       942            mov     _P1_4,c
0114            943   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:214: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AAA0       944            mov     r2,_pwm_count
0116 7B00       945            mov     r3,#0x00
0118 C3         946            clr     c
0119 E588       947            mov     a,_pwmSig2
011B 9A         948            subb    a,r2
011C E589       949            mov     a,(_pwmSig2 + 1)
011E 9B         950            subb    a,r3
011F 9208       951            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         952            cpl     c
0122 9295       953            mov     _P1_5,c
0124            954   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:216: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AAA0       955            mov     r2,_pwm_count
0126 7B00       956            mov     r3,#0x00
0128 C3         957            clr     c
0129 E548       958            mov     a,_pwmSig3
012B 9A         959            subb    a,r2
012C E549       960            mov     a,(_pwmSig3 + 1)
012E 9B         961            subb    a,r3
012F 9208       962            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         963            cpl     c
0132 9292       964            mov     _P1_2,c
0134            965   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:217: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AAA0       966            mov     r2,_pwm_count
0136 7B00       967            mov     r3,#0x00
0138 C3         968            clr     c
0139 E508       969            mov     a,_pwmSig4
013B 9A         970            subb    a,r2
013C E509       971            mov     a,(_pwmSig4 + 1)
013E 9B         972            subb    a,r3
013F 9208       973            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         974            cpl     c
0142 9293       975            mov     _P1_3,c
0144 D0D0       976            pop     psw
0146 D003       977            pop     ar3
0148 D002       978            pop     ar2
014A D0E0       979            pop     acc
014C 32         980            reti
014D            981   ;        eliminated unneeded push/pop dpl
014D            982   ;        eliminated unneeded push/pop dph
014D            983   ;        eliminated unneeded push/pop b
014D            984   ;------------------------------------------------------------
014D            985   ;Allocation info for local variables in function 'InitADC'
014D            986   ;------------------------------------------------------------
014D            987   ;------------------------------------------------------------
014D            988   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:249: void InitADC(void)
014D            989   ;        -----------------------------------------
014D            990   ;         function InitADC
014D            991   ;        -----------------------------------------
014D            992   _InitADC:
014D            993   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:251: SFRPAGE = 0x00;
014D 75A700     994            mov     _SFRPAGE,#0x00
0150            995   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:252: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0150 75B280     996            mov     _ADC0CN1,#0x80
0153            997   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:253: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0153 75BCF8     998            mov     _ADC0CF0,#0xF8
0156            999   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:254: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0156 75B91E    1000            mov     _ADC0CF1,#0x1E
0159           1001   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:255: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0159 75E800    1002            mov     _ADC0CN0,#0x00
015C           1003   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:256: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
015C 75DF3F    1004            mov     _ADC0CF2,#0x3F
015F           1005   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:257: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
015F 75B300    1006            mov     _ADC0CN2,#0x00
0162           1007   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:258: ADEN = 1; // Enable ADC
0162 D2EF      1008            setb    _ADEN
0164 22        1009            ret
0165           1010   ;------------------------------------------------------------
0165           1011   ;Allocation info for local variables in function 'TIMER0_Init'
0165           1012   ;------------------------------------------------------------
0165           1013   ;------------------------------------------------------------
0165           1014   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:260: void TIMER0_Init(void)
0165           1015   ;        -----------------------------------------
0165           1016   ;         function TIMER0_Init
0165           1017   ;        -----------------------------------------
0165           1018   _TIMER0_Init:
0165           1019   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:262: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0165 5389F0    1020            anl     _TMOD,#0xF0
0168           1021   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:263: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0168 438901    1022            orl     _TMOD,#0x01
016B           1023   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:264: TR0 = 0; // Stop Timer/Counter 0
016B C28C      1024            clr     _TR0
016D 22        1025            ret
016E           1026   ;------------------------------------------------------------
016E           1027   ;Allocation info for local variables in function 'Volts_at_Pin'
016E           1028   ;------------------------------------------------------------
016E           1029   ;pin                       Allocated to registers r2 
016E           1030   ;------------------------------------------------------------
016E           1031   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:269: float Volts_at_Pin(unsigned char pin)
016E           1032   ;        -----------------------------------------
016E           1033   ;         function Volts_at_Pin
016E           1034   ;        -----------------------------------------
016E           1035   _Volts_at_Pin:
016E           1036   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:271: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
016E 120100    1037            lcall   _ADC_at_Pin
0171 120100    1038            lcall   ___uint2fs
0174 AA82      1039            mov     r2,dpl
0176 AB83      1040            mov     r3,dph
0178 ACF0      1041            mov     r4,b
017A FD        1042            mov     r5,a
017B C002      1043            push    ar2
017D C003      1044            push    ar3
017F C004      1045            push    ar4
0181 C005      1046            push    ar5
0183 906C8B    1047            mov     dptr,#0x6C8B
0186 75F053    1048            mov     b,#0x53
0189 7440      1049            mov     a,#0x40
018B 120100    1050            lcall   ___fsmul
018E AA82      1051            mov     r2,dpl
0190 AB83      1052            mov     r3,dph
0192 ACF0      1053            mov     r4,b
0194 FD        1054            mov     r5,a
0195 E581      1055            mov     a,sp
0197 24FC      1056            add     a,#0xfc
0199 F581      1057            mov     sp,a
019B E4        1058            clr     a
019C C0E0      1059            push    acc
019E 74FC      1060            mov     a,#0xFC
01A0 C0E0      1061            push    acc
01A2 747F      1062            mov     a,#0x7F
01A4 C0E0      1063            push    acc
01A6 7446      1064            mov     a,#0x46
01A8 C0E0      1065            push    acc
01AA 8A82      1066            mov     dpl,r2
01AC 8B83      1067            mov     dph,r3
01AE 8CF0      1068            mov     b,r4
01B0 ED        1069            mov     a,r5
01B1 120100    1070            lcall   ___fsdiv
01B4 AA82      1071            mov     r2,dpl
01B6 AB83      1072            mov     r3,dph
01B8 ACF0      1073            mov     r4,b
01BA FD        1074            mov     r5,a
01BB E581      1075            mov     a,sp
01BD 24FC      1076            add     a,#0xfc
01BF F581      1077            mov     sp,a
01C1 8A82      1078            mov     dpl,r2
01C3 8B83      1079            mov     dph,r3
01C5 8CF0      1080            mov     b,r4
01C7 ED        1081            mov     a,r5
01C8 22        1082            ret
01C9           1083   ;------------------------------------------------------------
01C9           1084   ;Allocation info for local variables in function 'InitPinADC'
01C9           1085   ;------------------------------------------------------------
01C9           1086   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01C9           1087   ;portno                    Allocated to registers r2 
01C9           1088   ;mask                      Allocated to registers r3 
01C9           1089   ;------------------------------------------------------------
01C9           1090   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:273: void InitPinADC(unsigned char portno, unsigned char pinno)
01C9           1091   ;        -----------------------------------------
01C9           1092   ;         function InitPinADC
01C9           1093   ;        -----------------------------------------
01C9           1094   _InitPinADC:
01C9 AA82      1095            mov     r2,dpl
01CB           1096   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:277: mask = 1 << pinno;
01CB 8558F0    1097            mov     b,_InitPinADC_PARM_2
01CE 05F0      1098            inc     b
01D0 7401      1099            mov     a,#0x01
01D2 8001      1100            sjmp    L010013?
01D4           1101   L010011?:
01D4 25E0      1102            add     a,acc
01D6           1103   L010013?:
01D6 D5F048    1104            djnz    b,L010011?
01D9 FB        1105            mov     r3,a
01DA           1106   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:279: SFRPAGE = 0x20;
01DA 75A720    1107            mov     _SFRPAGE,#0x20
01DD           1108   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:280: switch (portno)
01DD BA0088    1109            cjne    r2,#0x00,L010014?
01E0 8001      1110            sjmp    L010001?
01E2           1111   L010014?:
01E2 BA0108    1112            cjne    r2,#0x01,L010015?
01E5 8001      1113            sjmp    L010002?
01E7           1114   L010015?:
01E7           1115   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:282: case 0:
01E7 BA0288    1116            cjne    r2,#0x02,L010005?
01EA 8001      1117            sjmp    L010003?
01EC           1118   L010001?:
01EC           1119   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:283: P0MDIN &= (~mask); // Set pin as analog input
01EC EB        1120            mov     a,r3
01ED F4        1121            cpl     a
01EE FA        1122            mov     r2,a
01EF 52F1      1123            anl     _P0MDIN,a
01F1           1124   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:284: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01F1 EB        1125            mov     a,r3
01F2 42D4      1126            orl     _P0SKIP,a
01F4           1127   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:285: break;
01F4           1128   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:286: case 1:
01F4 8001      1129            sjmp    L010005?
01F6           1130   L010002?:
01F6           1131   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:287: P1MDIN &= (~mask); // Set pin as analog input
01F6 EB        1132            mov     a,r3
01F7 F4        1133            cpl     a
01F8 FA        1134            mov     r2,a
01F9 52F2      1135            anl     _P1MDIN,a
01FB           1136   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:288: P1SKIP |= mask; // Skip Crossbar decoding for this pin
01FB EB        1137            mov     a,r3
01FC 42D5      1138            orl     _P1SKIP,a
01FE           1139   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:289: break;
01FE           1140   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:290: case 2:
01FE 8001      1141            sjmp    L010005?
0200           1142   L010003?:
0200           1143   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:291: P2MDIN &= (~mask); // Set pin as analog input
0200 EB        1144            mov     a,r3
0201 F4        1145            cpl     a
0202 FA        1146            mov     r2,a
0203 52F3      1147            anl     _P2MDIN,a
0205           1148   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:292: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0205 EB        1149            mov     a,r3
0206 42CC      1150            orl     _P2SKIP,a
0208           1151   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:296: }
0208           1152   L010005?:
0208           1153   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:297: SFRPAGE = 0x00;
0208 75A700    1154            mov     _SFRPAGE,#0x00
020B 22        1155            ret
020C           1156   ;------------------------------------------------------------
020C           1157   ;Allocation info for local variables in function 'PWMforward'
020C           1158   ;------------------------------------------------------------
020C           1159   ;------------------------------------------------------------
020C           1160   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:306: void PWMforward(void) {
020C           1161   ;        -----------------------------------------
020C           1162   ;         function PWMforward
020C           1163   ;        -----------------------------------------
020C           1164   _PWMforward:
020C           1165   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:307: pwmSig1 = 99;
020C 75C863    1166            mov     _pwmSig1,#0x63
020F E4        1167            clr     a
0210 F5C9      1168            mov     (_pwmSig1 + 1),a
0212           1169   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:308: pwmSig2 = 0;
0212           1170   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:310: pwmSig3 = 0;
0212 E4        1171            clr     a
0213 F588      1172            mov     _pwmSig2,a
0215 F589      1173            mov     (_pwmSig2 + 1),a
0217 F548      1174            mov     _pwmSig3,a
0219 F549      1175            mov     (_pwmSig3 + 1),a
021B           1176   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:311: pwmSig4 =99;
021B 750863    1177            mov     _pwmSig4,#0x63
021E E4        1178            clr     a
021F F509      1179            mov     (_pwmSig4 + 1),a
0221           1180   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:312: printf("Forward\n\r");
0221 7408      1181            mov     a,#__str_0
0223 C0E0      1182            push    acc
0225 74C6      1183            mov     a,#(__str_0 >> 8)
0227 C0E0      1184            push    acc
0229 7480      1185            mov     a,#0x80
022B C0E0      1186            push    acc
022D 120100    1187            lcall   _printf
0230 1581      1188            dec     sp
0232 1581      1189            dec     sp
0234 1581      1190            dec     sp
0236 22        1191            ret
0237           1192   ;------------------------------------------------------------
0237           1193   ;Allocation info for local variables in function 'PWMbackward'
0237           1194   ;------------------------------------------------------------
0237           1195   ;------------------------------------------------------------
0237           1196   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:315: void PWMbackward(void) {
0237           1197   ;        -----------------------------------------
0237           1198   ;         function PWMbackward
0237           1199   ;        -----------------------------------------
0237           1200   _PWMbackward:
0237           1201   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:316: pwmSig1 = 0;
0237 E4        1202            clr     a
0238 F5C8      1203            mov     _pwmSig1,a
023A F5C9      1204            mov     (_pwmSig1 + 1),a
023C           1205   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:317: pwmSig2 = 99;
023C 758863    1206            mov     _pwmSig2,#0x63
023F E4        1207            clr     a
0240 F589      1208            mov     (_pwmSig2 + 1),a
0242           1209   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:319: pwmSig3 = 99;
0242 754863    1210            mov     _pwmSig3,#0x63
0245 E4        1211            clr     a
0246 F549      1212            mov     (_pwmSig3 + 1),a
0248           1213   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:320: pwmSig4 = 0;
0248 E4        1214            clr     a
0249 F508      1215            mov     _pwmSig4,a
024B F509      1216            mov     (_pwmSig4 + 1),a
024D           1217   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:321: printf("Backward\n\r");
024D 7488      1218            mov     a,#__str_1
024F C0E0      1219            push    acc
0251 74C6      1220            mov     a,#(__str_1 >> 8)
0253 C0E0      1221            push    acc
0255 7480      1222            mov     a,#0x80
0257 C0E0      1223            push    acc
0259 120100    1224            lcall   _printf
025C 1581      1225            dec     sp
025E 1581      1226            dec     sp
0260 1581      1227            dec     sp
0262 22        1228            ret
0263           1229   ;------------------------------------------------------------
0263           1230   ;Allocation info for local variables in function 'PWMLeft'
0263           1231   ;------------------------------------------------------------
0263           1232   ;------------------------------------------------------------
0263           1233   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:324: void PWMLeft(void) {
0263           1234   ;        -----------------------------------------
0263           1235   ;         function PWMLeft
0263           1236   ;        -----------------------------------------
0263           1237   _PWMLeft:
0263           1238   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:325: pwmSig1 = 0;
0263           1239   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:326: pwmSig2 = 0;
0263 E4        1240            clr     a
0264 F5C8      1241            mov     _pwmSig1,a
0266 F5C9      1242            mov     (_pwmSig1 + 1),a
0268 F588      1243            mov     _pwmSig2,a
026A F589      1244            mov     (_pwmSig2 + 1),a
026C           1245   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:328: pwmSig3 = 70;
026C 754846    1246            mov     _pwmSig3,#0x46
026F E4        1247            clr     a
0270 F549      1248            mov     (_pwmSig3 + 1),a
0272           1249   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:329: pwmSig4 = 0;
0272 E4        1250            clr     a
0273 F508      1251            mov     _pwmSig4,a
0275 F509      1252            mov     (_pwmSig4 + 1),a
0277           1253   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:330: printf("Left\n\r");
0277 74C8      1254            mov     a,#__str_2
0279 C0E0      1255            push    acc
027B 74C6      1256            mov     a,#(__str_2 >> 8)
027D C0E0      1257            push    acc
027F 7480      1258            mov     a,#0x80
0281 C0E0      1259            push    acc
0283 120100    1260            lcall   _printf
0286 1581      1261            dec     sp
0288 1581      1262            dec     sp
028A 1581      1263            dec     sp
028C 22        1264            ret
028D           1265   ;------------------------------------------------------------
028D           1266   ;Allocation info for local variables in function 'PWMRight'
028D           1267   ;------------------------------------------------------------
028D           1268   ;------------------------------------------------------------
028D           1269   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:333: void PWMRight(void) {
028D           1270   ;        -----------------------------------------
028D           1271   ;         function PWMRight
028D           1272   ;        -----------------------------------------
028D           1273   _PWMRight:
028D           1274   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:334: pwmSig1 = 99;
028D 75C863    1275            mov     _pwmSig1,#0x63
0290 E4        1276            clr     a
0291 F5C9      1277            mov     (_pwmSig1 + 1),a
0293           1278   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:335: pwmSig2 = 0;
0293           1279   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:337: pwmSig3 = 0;
0293           1280   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:338: pwmSig4 = 0;
0293 E4        1281            clr     a
0294 F588      1282            mov     _pwmSig2,a
0296 F589      1283            mov     (_pwmSig2 + 1),a
0298 F548      1284            mov     _pwmSig3,a
029A F549      1285            mov     (_pwmSig3 + 1),a
029C F508      1286            mov     _pwmSig4,a
029E F509      1287            mov     (_pwmSig4 + 1),a
02A0           1288   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:339: printf("Right\n\r");
02A0 7408      1289            mov     a,#__str_3
02A2 C0E0      1290            push    acc
02A4 74C7      1291            mov     a,#(__str_3 >> 8)
02A6 C0E0      1292            push    acc
02A8 7480      1293            mov     a,#0x80
02AA C0E0      1294            push    acc
02AC 120100    1295            lcall   _printf
02AF 1581      1296            dec     sp
02B1 1581      1297            dec     sp
02B3 1581      1298            dec     sp
02B5 22        1299            ret
02B6           1300   ;------------------------------------------------------------
02B6           1301   ;Allocation info for local variables in function 'PWMStop'
02B6           1302   ;------------------------------------------------------------
02B6           1303   ;------------------------------------------------------------
02B6           1304   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:342: void PWMStop(void) {
02B6           1305   ;        -----------------------------------------
02B6           1306   ;         function PWMStop
02B6           1307   ;        -----------------------------------------
02B6           1308   _PWMStop:
02B6           1309   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:343: pwmSig1 = 0;
02B6           1310   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:344: pwmSig2 = 0;
02B6           1311   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:346: pwmSig3 = 0;
02B6           1312   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:347: pwmSig4 = 0;
02B6 E4        1313            clr     a
02B7 F5C8      1314            mov     _pwmSig1,a
02B9 F5C9      1315            mov     (_pwmSig1 + 1),a
02BB F588      1316            mov     _pwmSig2,a
02BD F589      1317            mov     (_pwmSig2 + 1),a
02BF F548      1318            mov     _pwmSig3,a
02C1 F549      1319            mov     (_pwmSig3 + 1),a
02C3 F508      1320            mov     _pwmSig4,a
02C5 F509      1321            mov     (_pwmSig4 + 1),a
02C7           1322   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:348: printf("Stop\n\r");
02C7 7448      1323            mov     a,#__str_4
02C9 C0E0      1324            push    acc
02CB 74C7      1325            mov     a,#(__str_4 >> 8)
02CD C0E0      1326            push    acc
02CF 7480      1327            mov     a,#0x80
02D1 C0E0      1328            push    acc
02D3 120100    1329            lcall   _printf
02D6 1581      1330            dec     sp
02D8 1581      1331            dec     sp
02DA 1581      1332            dec     sp
02DC 22        1333            ret
02DD           1334   ;------------------------------------------------------------
02DD           1335   ;Allocation info for local variables in function 'periodcalc'
02DD           1336   ;------------------------------------------------------------
02DD           1337   ;period1                   Allocated to registers r2 r3 r4 r5 
02DD           1338   ;overflow_count            Allocated to registers r2 r3 
02DD           1339   ;------------------------------------------------------------
02DD           1340   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:351: float periodcalc(void) {
02DD           1341   ;        -----------------------------------------
02DD           1342   ;         function periodcalc
02DD           1343   ;        -----------------------------------------
02DD           1344   _periodcalc:
02DD           1345   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:355: TL0=0; 
02DD 758A00    1346            mov     _TL0,#0x00
02E0           1347   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:356: TH0=0;
02E0 758C00    1348            mov     _TH0,#0x00
02E3           1349   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:357: TF0=0;
02E3 C28D      1350            clr     _TF0
02E5           1351   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:359: TR0=0;
02E5 C28C      1352            clr     _TR0
02E7           1353   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:361: while(P1_6!=0); // Wait for the signal to be zero
02E7           1354   L016001?:
02E7 209688    1355            jb      _P1_6,L016001?
02EA           1356   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:362: while(P1_6!=1); // Wait for the signal to be one
02EA           1357   L016004?:
02EA 3096C8    1358            jnb     _P1_6,L016004?
02ED           1359   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:363: TR0=1; // Start the timer
02ED D28C      1360            setb    _TR0
02EF           1361   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:364: while(P1_6!=0) // Wait for the signal to be zero
02EF 7A00      1362            mov     r2,#0x00
02F1 7B00      1363            mov     r3,#0x00
02F3           1364   L016009?:
02F3 309648    1365            jnb     _P1_6,L016026?
02F6           1366   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:366: if(TF0==1) // Did the 16-bit timer overflow?
02F6           1367   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:368: TF0=0;
02F6 108D88    1368            jbc     _TF0,L016033?
02F9 8001      1369            sjmp    L016009?
02FB           1370   L016033?:
02FB           1371   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:369: overflow_count++;
02FB 0A        1372            inc     r2
02FC BA0008    1373            cjne    r2,#0x00,L016009?
02FF 0B        1374            inc     r3
0300           1375   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:373: while(P1_6!=1) // Wait for the signal to be zero
0300 8001      1376            sjmp    L016009?
0302           1377   L016026?:
0302           1378   L016014?:
0302 209608    1379            jb      _P1_6,L016016?
0305           1380   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:375: if(TF0==1) // Did the 16-bit timer overflow?
0305           1381   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:377: TF0=0;
0305 108D48    1382            jbc     _TF0,L016035?
0308 8001      1383            sjmp    L016014?
030A           1384   L016035?:
030A           1385   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:378: overflow_count++;
030A 0A        1386            inc     r2
030B BA00C8    1387            cjne    r2,#0x00,L016014?
030E 0B        1388            inc     r3
030F 8001      1389            sjmp    L016014?
0311           1390   L016016?:
0311           1391   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:383: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0311 C28C      1392            clr     _TR0
0313           1393   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:384: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0313 8A82      1394            mov     dpl,r2
0315 8B83      1395            mov     dph,r3
0317 120100    1396            lcall   ___sint2fs
031A AA82      1397            mov     r2,dpl
031C AB83      1398            mov     r3,dph
031E ACF0      1399            mov     r4,b
0320 FD        1400            mov     r5,a
0321 C002      1401            push    ar2
0323 C003      1402            push    ar3
0325 C004      1403            push    ar4
0327 C005      1404            push    ar5
0329 900000    1405            mov     dptr,#0x0000
032C 75F080    1406            mov     b,#0x80
032F 7447      1407            mov     a,#0x47
0331 120100    1408            lcall   ___fsmul
0334 AA82      1409            mov     r2,dpl
0336 AB83      1410            mov     r3,dph
0338 ACF0      1411            mov     r4,b
033A FD        1412            mov     r5,a
033B E581      1413            mov     a,sp
033D 24FC      1414            add     a,#0xfc
033F F581      1415            mov     sp,a
0341 858C82    1416            mov     dpl,_TH0
0344 C002      1417            push    ar2
0346 C003      1418            push    ar3
0348 C004      1419            push    ar4
034A C005      1420            push    ar5
034C 120100    1421            lcall   ___uchar2fs
034F AE82      1422            mov     r6,dpl
0351 AF83      1423            mov     r7,dph
0353 A8F0      1424            mov     r0,b
0355 F9        1425            mov     r1,a
0356 C006      1426            push    ar6
0358 C007      1427            push    ar7
035A C000      1428            push    ar0
035C C001      1429            push    ar1
035E 900000    1430            mov     dptr,#0x0000
0361 75F080    1431            mov     b,#0x80
0364 7443      1432            mov     a,#0x43
0366 120100    1433            lcall   ___fsmul
0369 AE82      1434            mov     r6,dpl
036B AF83      1435            mov     r7,dph
036D A8F0      1436            mov     r0,b
036F F9        1437            mov     r1,a
0370 E581      1438            mov     a,sp
0372 24FC      1439            add     a,#0xfc
0374 F581      1440            mov     sp,a
0376 D005      1441            pop     ar5
0378 D004      1442            pop     ar4
037A D003      1443            pop     ar3
037C D002      1444            pop     ar2
037E C006      1445            push    ar6
0380 C007      1446            push    ar7
0382 C000      1447            push    ar0
0384 C001      1448            push    ar1
0386 8A82      1449            mov     dpl,r2
0388 8B83      1450            mov     dph,r3
038A 8CF0      1451            mov     b,r4
038C ED        1452            mov     a,r5
038D 120100    1453            lcall   ___fsadd
0390 AA82      1454            mov     r2,dpl
0392 AB83      1455            mov     r3,dph
0394 ACF0      1456            mov     r4,b
0396 FD        1457            mov     r5,a
0397 E581      1458            mov     a,sp
0399 24FC      1459            add     a,#0xfc
039B F581      1460            mov     sp,a
039D AE8A      1461            mov     r6,_TL0
039F 7F00      1462            mov     r7,#0x00
03A1 8E82      1463            mov     dpl,r6
03A3 8F83      1464            mov     dph,r7
03A5 C002      1465            push    ar2
03A7 C003      1466            push    ar3
03A9 C004      1467            push    ar4
03AB C005      1468            push    ar5
03AD 120100    1469            lcall   ___sint2fs
03B0 AE82      1470            mov     r6,dpl
03B2 AF83      1471            mov     r7,dph
03B4 A8F0      1472            mov     r0,b
03B6 F9        1473            mov     r1,a
03B7 D005      1474            pop     ar5
03B9 D004      1475            pop     ar4
03BB D003      1476            pop     ar3
03BD D002      1477            pop     ar2
03BF C006      1478            push    ar6
03C1 C007      1479            push    ar7
03C3 C000      1480            push    ar0
03C5 C001      1481            push    ar1
03C7 8A82      1482            mov     dpl,r2
03C9 8B83      1483            mov     dph,r3
03CB 8CF0      1484            mov     b,r4
03CD ED        1485            mov     a,r5
03CE 120100    1486            lcall   ___fsadd
03D1 AA82      1487            mov     r2,dpl
03D3 AB83      1488            mov     r3,dph
03D5 ACF0      1489            mov     r4,b
03D7 FD        1490            mov     r5,a
03D8 E581      1491            mov     a,sp
03DA 24FC      1492            add     a,#0xfc
03DC F581      1493            mov     sp,a
03DE C002      1494            push    ar2
03E0 C003      1495            push    ar3
03E2 C004      1496            push    ar4
03E4 C005      1497            push    ar5
03E6 90F4FC    1498            mov     dptr,#0xF4FC
03E9 75F032    1499            mov     b,#0x32
03EC 7434      1500            mov     a,#0x34
03EE 120100    1501            lcall   ___fsmul
03F1 AA82      1502            mov     r2,dpl
03F3 AB83      1503            mov     r3,dph
03F5 ACF0      1504            mov     r4,b
03F7 FD        1505            mov     r5,a
03F8 E581      1506            mov     a,sp
03FA 24FC      1507            add     a,#0xfc
03FC F581      1508            mov     sp,a
03FE           1509   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:385: printf("%f\n\r", period1);
03FE C002      1510            push    ar2
0400 C003      1511            push    ar3
0402 C004      1512            push    ar4
0404 C005      1513            push    ar5
0406 C002      1514            push    ar2
0408 C003      1515            push    ar3
040A C004      1516            push    ar4
040C C005      1517            push    ar5
040E 7448      1518            mov     a,#__str_5
0410 C0E0      1519            push    acc
0412 74CA      1520            mov     a,#(__str_5 >> 8)
0414 C0E0      1521            push    acc
0416 7480      1522            mov     a,#0x80
0418 C0E0      1523            push    acc
041A 120100    1524            lcall   _printf
041D E581      1525            mov     a,sp
041F 24F9      1526            add     a,#0xf9
0421 F581      1527            mov     sp,a
0423           1528   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:386: return period1*1000; //return period of high pulse in seconds
0423 900000    1529            mov     dptr,#0x0000
0426 75F07A    1530            mov     b,#0x7A
0429 7444      1531            mov     a,#0x44
042B 120100    1532            lcall   ___fsmul
042E AA82      1533            mov     r2,dpl
0430 AB83      1534            mov     r3,dph
0432 ACF0      1535            mov     r4,b
0434 FD        1536            mov     r5,a
0435 E581      1537            mov     a,sp
0437 24FC      1538            add     a,#0xfc
0439 F581      1539            mov     sp,a
043B 8A82      1540            mov     dpl,r2
043D 8B83      1541            mov     dph,r3
043F 8CF0      1542            mov     b,r4
0441 ED        1543            mov     a,r5
0442 22        1544            ret
0443           1545   ;------------------------------------------------------------
0443           1546   ;Allocation info for local variables in function 'arrayEqual'
0443           1547   ;------------------------------------------------------------
0443           1548   ;size                      Allocated with name '_arrayEqual_PARM_2'
0443           1549   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
0443           1550   ;arr1                      Allocated with name '_arrayEqual_arr1_1_78'
0443           1551   ;i                         Allocated to registers r5 r6 
0443           1552   ;------------------------------------------------------------
0443           1553   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:390: int arrayEqual (int arr1[], int size, int arr2[]){
0443           1554   ;        -----------------------------------------
0443           1555   ;         function arrayEqual
0443           1556   ;        -----------------------------------------
0443           1557   _arrayEqual:
0443 8582B8    1558            mov     _arrayEqual_arr1_1_78,dpl
0446 8583B9    1559            mov     (_arrayEqual_arr1_1_78 + 1),dph
0449 85F0BA    1560            mov     (_arrayEqual_arr1_1_78 + 2),b
044C           1561   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:392: for(i=0; i<size; i++){
044C 7D00      1562            mov     r5,#0x00
044E 7E00      1563            mov     r6,#0x00
0450           1564   L017003?:
0450 C3        1565            clr     c
0451 ED        1566            mov     a,r5
0452 9508      1567            subb    a,_arrayEqual_PARM_2
0454 EE        1568            mov     a,r6
0455 6480      1569            xrl     a,#0x80
0457 8509F0    1570            mov     b,(_arrayEqual_PARM_2 + 1)
045A 63F080    1571            xrl     b,#0x80
045D 95F0      1572            subb    a,b
045F 5001      1573            jnc     L017006?
0461           1574   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:393: if(arr1[i]!=arr2[i])
0461 8D07      1575            mov     ar7,r5
0463 EE        1576            mov     a,r6
0464 CF        1577            xch     a,r7
0465 25E0      1578            add     a,acc
0467 CF        1579            xch     a,r7
0468 33        1580            rlc     a
0469 F8        1581            mov     r0,a
046A EF        1582            mov     a,r7
046B 25B8      1583            add     a,_arrayEqual_arr1_1_78
046D F9        1584            mov     r1,a
046E E8        1585            mov     a,r0
046F 35B9      1586            addc    a,(_arrayEqual_arr1_1_78 + 1)
0471 FA        1587            mov     r2,a
0472 ABBA      1588            mov     r3,(_arrayEqual_arr1_1_78 + 2)
0474 8982      1589            mov     dpl,r1
0476 8A83      1590            mov     dph,r2
0478 8BF0      1591            mov     b,r3
047A 120100    1592            lcall   __gptrget
047D F9        1593            mov     r1,a
047E A3        1594            inc     dptr
047F 120100    1595            lcall   __gptrget
0482 FA        1596            mov     r2,a
0483 EF        1597            mov     a,r7
0484 25B8      1598            add     a,_arrayEqual_PARM_3
0486 FF        1599            mov     r7,a
0487 E8        1600            mov     a,r0
0488 35B9      1601            addc    a,(_arrayEqual_PARM_3 + 1)
048A F8        1602            mov     r0,a
048B ABBA      1603            mov     r3,(_arrayEqual_PARM_3 + 2)
048D 8F82      1604            mov     dpl,r7
048F 8883      1605            mov     dph,r0
0491 8BF0      1606            mov     b,r3
0493 120100    1607            lcall   __gptrget
0496 FF        1608            mov     r7,a
0497 A3        1609            inc     dptr
0498 120100    1610            lcall   __gptrget
049B F8        1611            mov     r0,a
049C E9        1612            mov     a,r1
049D B50748    1613            cjne    a,ar7,L017013?
04A0 EA        1614            mov     a,r2
04A1 B50048    1615            cjne    a,ar0,L017013?
04A4 8001      1616            sjmp    L017005?
04A6           1617   L017013?:
04A6           1618   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:394: return 0; 
04A6 900000    1619            mov     dptr,#0x0000
04A9 22        1620            ret
04AA           1621   L017005?:
04AA           1622   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:392: for(i=0; i<size; i++){
04AA 0D        1623            inc     r5
04AB BD0088    1624            cjne    r5,#0x00,L017003?
04AE 0E        1625            inc     r6
04AF 8001      1626            sjmp    L017003?
04B1           1627   L017006?:
04B1           1628   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:396: return 1; 
04B1 900001    1629            mov     dptr,#0x0001
04B4 22        1630            ret
04B5           1631   ;------------------------------------------------------------
04B5           1632   ;Allocation info for local variables in function 'checkCommands'
04B5           1633   ;------------------------------------------------------------
04B5           1634   ;------------------------------------------------------------
04B5           1635   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:402: void checkCommands (void){
04B5           1636   ;        -----------------------------------------
04B5           1637   ;         function checkCommands
04B5           1638   ;        -----------------------------------------
04B5           1639   _checkCommands:
04B5           1640   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:403: if(arrayEqual(command, 4, stop)) PWMStop();
04B5 75B848    1641            mov     _arrayEqual_PARM_3,#_stop
04B8 75B900    1642            mov     (_arrayEqual_PARM_3 + 1),#0x00
04BB 75BA40    1643            mov     (_arrayEqual_PARM_3 + 2),#0x40
04BE 750804    1644            mov     _arrayEqual_PARM_2,#0x04
04C1 E4        1645            clr     a
04C2 F509      1646            mov     (_arrayEqual_PARM_2 + 1),a
04C4 901808    1647            mov     dptr,#_command
04C7 75F040    1648            mov     b,#0x40
04CA 120100    1649            lcall   _arrayEqual
04CD E582      1650            mov     a,dpl
04CF 8583F0    1651            mov     b,dph
04D2 45F0      1652            orl     a,b
04D4 6001      1653            jz      L018014?
04D6 120100    1654            lcall   _PWMStop
04D9 020100    1655            ljmp    L018015?
04DC           1656   L018014?:
04DC           1657   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:404: else if (arrayEqual(command,4,forward)) PWMforward(); 
04DC 75B808    1658            mov     _arrayEqual_PARM_3,#_forward
04DF 75B900    1659            mov     (_arrayEqual_PARM_3 + 1),#0x00
04E2 75BA40    1660            mov     (_arrayEqual_PARM_3 + 2),#0x40
04E5 750804    1661            mov     _arrayEqual_PARM_2,#0x04
04E8 E4        1662            clr     a
04E9 F509      1663            mov     (_arrayEqual_PARM_2 + 1),a
04EB 901808    1664            mov     dptr,#_command
04EE 75F040    1665            mov     b,#0x40
04F1 120100    1666            lcall   _arrayEqual
04F4 E582      1667            mov     a,dpl
04F6 8583F0    1668            mov     b,dph
04F9 45F0      1669            orl     a,b
04FB 6001      1670            jz      L018011?
04FD 120100    1671            lcall   _PWMforward
0500 020100    1672            ljmp    L018015?
0503           1673   L018011?:
0503           1674   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:405: else if (arrayEqual(command,4,backward)) PWMbackward(); 
0503 75B8C8    1675            mov     _arrayEqual_PARM_3,#_backward
0506 75B900    1676            mov     (_arrayEqual_PARM_3 + 1),#0x00
0509 75BA40    1677            mov     (_arrayEqual_PARM_3 + 2),#0x40
050C 750804    1678            mov     _arrayEqual_PARM_2,#0x04
050F E4        1679            clr     a
0510 F509      1680            mov     (_arrayEqual_PARM_2 + 1),a
0512 901808    1681            mov     dptr,#_command
0515 75F040    1682            mov     b,#0x40
0518 120100    1683            lcall   _arrayEqual
051B E582      1684            mov     a,dpl
051D 8583F0    1685            mov     b,dph
0520 45F0      1686            orl     a,b
0522 6001      1687            jz      L018008?
0524 120100    1688            lcall   _PWMbackward
0527 8001      1689            sjmp    L018015?
0529           1690   L018008?:
0529           1691   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:406: else if (arrayEqual(command,4, left)) PWMLeft(); 
0529 75B888    1692            mov     _arrayEqual_PARM_3,#_left
052C 75B900    1693            mov     (_arrayEqual_PARM_3 + 1),#0x00
052F 75BA40    1694            mov     (_arrayEqual_PARM_3 + 2),#0x40
0532 750804    1695            mov     _arrayEqual_PARM_2,#0x04
0535 E4        1696            clr     a
0536 F509      1697            mov     (_arrayEqual_PARM_2 + 1),a
0538 901808    1698            mov     dptr,#_command
053B 75F040    1699            mov     b,#0x40
053E 120100    1700            lcall   _arrayEqual
0541 E582      1701            mov     a,dpl
0543 8583F0    1702            mov     b,dph
0546 45F0      1703            orl     a,b
0548 6001      1704            jz      L018005?
054A 120100    1705            lcall   _PWMLeft
054D 8001      1706            sjmp    L018015?
054F           1707   L018005?:
054F           1708   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:407: else if (arrayEqual(command,4, right)) PWMRight(); 
054F 75B848    1709            mov     _arrayEqual_PARM_3,#_right
0552 75B900    1710            mov     (_arrayEqual_PARM_3 + 1),#0x00
0555 75BA40    1711            mov     (_arrayEqual_PARM_3 + 2),#0x40
0558 750804    1712            mov     _arrayEqual_PARM_2,#0x04
055B E4        1713            clr     a
055C F509      1714            mov     (_arrayEqual_PARM_2 + 1),a
055E 901808    1715            mov     dptr,#_command
0561 75F040    1716            mov     b,#0x40
0564 120100    1717            lcall   _arrayEqual
0567 E582      1718            mov     a,dpl
0569 8583F0    1719            mov     b,dph
056C 45F0      1720            orl     a,b
056E 6001      1721            jz      L018002?
0570 120100    1722            lcall   _PWMRight
0573 8001      1723            sjmp    L018015?
0575           1724   L018002?:
0575           1725   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:408: else PWMStop(); //defaults to a halt (redundant)
0575 120100    1726            lcall   _PWMStop
0578           1727   L018015?:
0578           1728   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:409: waitms(350);
0578 90015E    1729            mov     dptr,#0x015E
057B 020100    1730            ljmp    _waitms
057E           1731   ;------------------------------------------------------------
057E           1732   ;Allocation info for local variables in function 'getDigitalSignal'
057E           1733   ;------------------------------------------------------------
057E           1734   ;------------------------------------------------------------
057E           1735   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:427: int getDigitalSignal (void){
057E           1736   ;        -----------------------------------------
057E           1737   ;         function getDigitalSignal
057E           1738   ;        -----------------------------------------
057E           1739   _getDigitalSignal:
057E           1740   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:429: if (Volts_at_Pin(QFP32_MUX_P2_3)>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
057E 758210    1741            mov     dpl,#0x10
0581 120100    1742            lcall   _Volts_at_Pin
0584 AA82      1743            mov     r2,dpl
0586 AB83      1744            mov     r3,dph
0588 ACF0      1745            mov     r4,b
058A FD        1746            mov     r5,a
058B E4        1747            clr     a
058C C0E0      1748            push    acc
058E C0E0      1749            push    acc
0590 C0E0      1750            push    acc
0592 743F      1751            mov     a,#0x3F
0594 C0E0      1752            push    acc
0596 8A82      1753            mov     dpl,r2
0598 8B83      1754            mov     dph,r3
059A 8CF0      1755            mov     b,r4
059C ED        1756            mov     a,r5
059D 120100    1757            lcall   ___fslt
05A0 AA82      1758            mov     r2,dpl
05A2 E581      1759            mov     a,sp
05A4 24FC      1760            add     a,#0xfc
05A6 F581      1761            mov     sp,a
05A8 EA        1762            mov     a,r2
05A9 7001      1763            jnz     L019002?
05AB           1764   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:431: printf("\nread 1:  at pin 2.3: %f\r", Volts_at_Pin(QFP32_MUX_P2_3));
05AB 758210    1765            mov     dpl,#0x10
05AE 120100    1766            lcall   _Volts_at_Pin
05B1 AA82      1767            mov     r2,dpl
05B3 AB83      1768            mov     r3,dph
05B5 ACF0      1769            mov     r4,b
05B7 FD        1770            mov     r5,a
05B8 C002      1771            push    ar2
05BA C003      1772            push    ar3
05BC C004      1773            push    ar4
05BE C005      1774            push    ar5
05C0 74C8      1775            mov     a,#__str_6
05C2 C0E0      1776            push    acc
05C4 74CD      1777            mov     a,#(__str_6 >> 8)
05C6 C0E0      1778            push    acc
05C8 7480      1779            mov     a,#0x80
05CA C0E0      1780            push    acc
05CC 120100    1781            lcall   _printf
05CF E581      1782            mov     a,sp
05D1 24F9      1783            add     a,#0xf9
05D3 F581      1784            mov     sp,a
05D5           1785   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:432: return 1;
05D5 900001    1786            mov     dptr,#0x0001
05D8           1787   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:436: return 0; 
05D8 22        1788            ret
05D9           1789   L019002?:
05D9 900000    1790            mov     dptr,#0x0000
05DC 22        1791            ret
05DD           1792   ;------------------------------------------------------------
05DD           1793   ;Allocation info for local variables in function 'waitquarterperiod'
05DD           1794   ;------------------------------------------------------------
05DD           1795   ;------------------------------------------------------------
05DD           1796   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:442: void waitquarterperiod(void){
05DD           1797   ;        -----------------------------------------
05DD           1798   ;         function waitquarterperiod
05DD           1799   ;        -----------------------------------------
05DD           1800   _waitquarterperiod:
05DD           1801   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:443: waitms(constant_delay_time);
05DD 900014    1802            mov     dptr,#0x0014
05E0 020100    1803            ljmp    _waitms
05E3           1804   ;------------------------------------------------------------
05E3           1805   ;Allocation info for local variables in function 'recieveData'
05E3           1806   ;------------------------------------------------------------
05E3           1807   ;checkcomm                 Allocated to registers 
05E3           1808   ;i                         Allocated to registers r2 r3 
05E3           1809   ;------------------------------------------------------------
05E3           1810   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:449: void recieveData (){
05E3           1811   ;        -----------------------------------------
05E3           1812   ;         function recieveData
05E3           1813   ;        -----------------------------------------
05E3           1814   _recieveData:
05E3           1815   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:453: while(getDigitalSignal()==0);         //wait for the signal to be 1 
05E3           1816   L021001?:
05E3 120100    1817            lcall   _getDigitalSignal
05E6 E582      1818            mov     a,dpl
05E8 8583F0    1819            mov     b,dph
05EB 45F0      1820            orl     a,b
05ED 6001      1821            jz      L021001?
05EF           1822   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:457: waitms(175);  //wait 
05EF 9000AF    1823            mov     dptr,#0x00AF
05F2 120100    1824            lcall   _waitms
05F5           1825   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:458: command[0] = 1;
05F5 750801    1826            mov     _command,#0x01
05F8 750900    1827            mov     (_command + 1),#0x00
05FB           1828   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:460: for( i=1; i<4; i++){
05FB 7A01      1829            mov     r2,#0x01
05FD 7B00      1830            mov     r3,#0x00
05FF           1831   L021004?:
05FF C3        1832            clr     c
0600 EA        1833            mov     a,r2
0601 9404      1834            subb    a,#0x04
0603 EB        1835            mov     a,r3
0604 6480      1836            xrl     a,#0x80
0606 9480      1837            subb    a,#0x80
0608 5001      1838            jnc     L021007?
060A           1839   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:461: waitms(358); //wait for a period
060A 900166    1840            mov     dptr,#0x0166
060D C002      1841            push    ar2
060F C003      1842            push    ar3
0611 120100    1843            lcall   _waitms
0614 D003      1844            pop     ar3
0616 D002      1845            pop     ar2
0618           1846   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:462: command[i]=getDigitalSignal();        
0618 8A04      1847            mov     ar4,r2
061A EB        1848            mov     a,r3
061B CC        1849            xch     a,r4
061C 25E0      1850            add     a,acc
061E CC        1851            xch     a,r4
061F 33        1852            rlc     a
0620 EC        1853            mov     a,r4
0621 2408      1854            add     a,#_command
0623 F8        1855            mov     r0,a
0624 C002      1856            push    ar2
0626 C003      1857            push    ar3
0628 C000      1858            push    ar0
062A 120100    1859            lcall   _getDigitalSignal
062D E582      1860            mov     a,dpl
062F 8583F0    1861            mov     b,dph
0632 D000      1862            pop     ar0
0634 D003      1863            pop     ar3
0636 D002      1864            pop     ar2
0638 F6        1865            mov     @r0,a
0639 08        1866            inc     r0
063A A6F0      1867            mov     @r0,b
063C 18        1868            dec     r0
063D           1869   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:460: for( i=1; i<4; i++){
063D 0A        1870            inc     r2
063E BA0048    1871            cjne    r2,#0x00,L021004?
0641 0B        1872            inc     r3
0642 8001      1873            sjmp    L021004?
0644           1874   L021007?:
0644           1875   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:465: checkCommands();                              //does activity depending on the command given 
0644 020100    1876            ljmp    _checkCommands
0647           1877   ;------------------------------------------------------------
0647           1878   ;Allocation info for local variables in function 'main'
0647           1879   ;------------------------------------------------------------
0647           1880   ;checkcommand              Allocated to registers 
0647           1881   ;i                         Allocated to registers r2 r3 
0647           1882   ;sig1                      Allocated to registers 
0647           1883   ;sig2                      Allocated to registers 
0647           1884   ;peak                      Allocated to registers 
0647           1885   ;voltspeak                 Allocated to registers 
0647           1886   ;periodpwm                 Allocated to registers 
0647           1887   ;period                    Allocated to registers 
0647           1888   ;overflow_count            Allocated to registers 
0647           1889   ;------------------------------------------------------------
0647           1890   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:474: void main(void){
0647           1891   ;        -----------------------------------------
0647           1892   ;         function main
0647           1893   ;        -----------------------------------------
0647           1894   _main:
0647           1895   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:485: TIMER0_Init();
0647 120100    1896            lcall   _TIMER0_Init
064A           1897   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:487: InitPinADC(2, 3); // Configure P2.5 as analog input
064A 755803    1898            mov     _InitPinADC_PARM_2,#0x03
064D 758202    1899            mov     dpl,#0x02
0650 120100    1900            lcall   _InitPinADC
0653           1901   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:489: InitADC();
0653 120100    1902            lcall   _InitADC
0656           1903   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:490: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0656 74C8      1904            mov     a,#__str_7
0658 C0E0      1905            push    acc
065A 74CE      1906            mov     a,#(__str_7 >> 8)
065C C0E0      1907            push    acc
065E 7480      1908            mov     a,#0x80
0660 C0E0      1909            push    acc
0662 120100    1910            lcall   _printf
0665 1581      1911            dec     sp
0667 1581      1912            dec     sp
0669 1581      1913            dec     sp
066B           1914   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:492: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
066B 7408      1915            mov     a,#__str_8
066D C0E0      1916            push    acc
066F 74CF      1917            mov     a,#(__str_8 >> 8)
0671 C0E0      1918            push    acc
0673 7480      1919            mov     a,#0x80
0675 C0E0      1920            push    acc
0677 120100    1921            lcall   _printf
067A 1581      1922            dec     sp
067C 1581      1923            dec     sp
067E 1581      1924            dec     sp
0680           1925   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:494: printf("\n\r");
0680 7448      1926            mov     a,#__str_9
0682 C0E0      1927            push    acc
0684 74CF      1928            mov     a,#(__str_9 >> 8)
0686 C0E0      1929            push    acc
0688 7480      1930            mov     a,#0x80
068A C0E0      1931            push    acc
068C 120100    1932            lcall   _printf
068F 1581      1933            dec     sp
0691 1581      1934            dec     sp
0693 1581      1935            dec     sp
0695           1936   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:495: P2_1=0;
0695 C2A1      1937            clr     _P2_1
0697           1938   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:497: while (1)
0697           1939   L022002?:
0697           1940   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:500: recieveData();        //keep reading data continously 
0697 120100    1941            lcall   _recieveData
069A           1942   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:501: printf("Command: ");
069A 74C8      1943            mov     a,#__str_10
069C C0E0      1944            push    acc
069E 74CF      1945            mov     a,#(__str_10 >> 8)
06A0 C0E0      1946            push    acc
06A2 7480      1947            mov     a,#0x80
06A4 C0E0      1948            push    acc
06A6 120100    1949            lcall   _printf
06A9 1581      1950            dec     sp
06AB 1581      1951            dec     sp
06AD 1581      1952            dec     sp
06AF           1953   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:502: for(i=0; i<4; i++)
06AF 7A00      1954            mov     r2,#0x00
06B1 7B00      1955            mov     r3,#0x00
06B3           1956   L022004?:
06B3 C3        1957            clr     c
06B4 EA        1958            mov     a,r2
06B5 9404      1959            subb    a,#0x04
06B7 EB        1960            mov     a,r3
06B8 6480      1961            xrl     a,#0x80
06BA 9480      1962            subb    a,#0x80
06BC 5001      1963            jnc     L022007?
06BE           1964   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:503: printf("%d\t", command[i]);
06BE 8A04      1965            mov     ar4,r2
06C0 EB        1966            mov     a,r3
06C1 CC        1967            xch     a,r4
06C2 25E0      1968            add     a,acc
06C4 CC        1969            xch     a,r4
06C5 33        1970            rlc     a
06C6 EC        1971            mov     a,r4
06C7 2408      1972            add     a,#_command
06C9 F8        1973            mov     r0,a
06CA 8604      1974            mov     ar4,@r0
06CC 08        1975            inc     r0
06CD 8605      1976            mov     ar5,@r0
06CF 18        1977            dec     r0
06D0 C002      1978            push    ar2
06D2 C003      1979            push    ar3
06D4 C004      1980            push    ar4
06D6 C005      1981            push    ar5
06D8 7488      1982            mov     a,#__str_11
06DA C0E0      1983            push    acc
06DC 74D0      1984            mov     a,#(__str_11 >> 8)
06DE C0E0      1985            push    acc
06E0 7480      1986            mov     a,#0x80
06E2 C0E0      1987            push    acc
06E4 120100    1988            lcall   _printf
06E7 E581      1989            mov     a,sp
06E9 24FB      1990            add     a,#0xfb
06EB F581      1991            mov     sp,a
06ED D003      1992            pop     ar3
06EF D002      1993            pop     ar2
06F1           1994   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:502: for(i=0; i<4; i++)
06F1 0A        1995            inc     r2
06F2 BA0008    1996            cjne    r2,#0x00,L022004?
06F5 0B        1997            inc     r3
06F6 8001      1998            sjmp    L022004?
06F8           1999   L022007?:
06F8           2000   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:504: printf("\n\r");
06F8 7448      2001            mov     a,#__str_9
06FA C0E0      2002            push    acc
06FC 74CF      2003            mov     a,#(__str_9 >> 8)
06FE C0E0      2004            push    acc
0700 7480      2005            mov     a,#0x80
0702 C0E0      2006            push    acc
0704 120100    2007            lcall   _printf
0707 1581      2008            dec     sp
0709 1581      2009            dec     sp
070B 1581      2010            dec     sp
070D           2011   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:505: command[0] = 0;
070D 750800    2012            mov     _command,#0x00
0710 750900    2013            mov     (_command + 1),#0x00
0713           2014   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:506: command[1] = 0;
0713 750A00    2015            mov     (_command + 0x0002),#0x00
0716 750B00    2016            mov     ((_command + 0x0002) + 1),#0x00
0719           2017   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:507: command[2] = 0;
0719 750C00    2018            mov     (_command + 0x0004),#0x00
071C 750D00    2019            mov     ((_command + 0x0004) + 1),#0x00
071F           2020   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever new (2).c:508: command[3] = 0;
071F 750E00    2021            mov     (_command + 0x0006),#0x00
0722 750F00    2022            mov     ((_command + 0x0006) + 1),#0x00
0725 020100    2023            ljmp    L022002?
0728           2024            rseg R_CSEG
0728           2025   
0000           2026            rseg R_XINIT
0000           2027   
0000           2028            rseg R_CONST
0000           2029   __str_0:
0000 466F7277  2030            db 'Forward'
     617264
0007 0A        2031            db 0x0A
0008 0D        2032            db 0x0D
0009 00        2033            db 0x00
000A           2034   __str_1:
000A 4261636B  2035            db 'Backward'
     77617264
0012 0A        2036            db 0x0A
0013 0D        2037            db 0x0D
0014 00        2038            db 0x00
0015           2039   __str_2:
0015 4C656674  2040            db 'Left'
0019 0A        2041            db 0x0A
001A 0D        2042            db 0x0D
001B 00        2043            db 0x00
001C           2044   __str_3:
001C 52696768  2045            db 'Right'
     74
0021 0A        2046            db 0x0A
0022 0D        2047            db 0x0D
0023 00        2048            db 0x00
0024           2049   __str_4:
0024 53746F70  2050            db 'Stop'
0028 0A        2051            db 0x0A
0029 0D        2052            db 0x0D
002A 00        2053            db 0x00
002B           2054   __str_5:
002B 2566      2055            db '%f'
002D 0A        2056            db 0x0A
002E 0D        2057            db 0x0D
002F 00        2058            db 0x00
0030           2059   __str_6:
0030 0A        2060            db 0x0A
0031 72656164  2061            db 'read 1:  at pin 2.3: %f'
     20313A20
     20617420
     70696E20
     322E333A
     202566
0048 0D        2062            db 0x0D
0049 00        2063            db 0x00
004A           2064   __str_7:
004A 1B        2065            db 0x1B
004B 5B324A    2066            db '[2J'
004E 00        2067            db 0x00
004F           2068   __str_8:
004F 53717561  2069            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0075 0D        2070            db 0x0D
0076 0A        2071            db 0x0A
0077 43686563  2072            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
008B 50322E31  2073            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00A6 0D        2074            db 0x0D
00A7 0A        2075            db 0x0A
00A8 00        2076            db 0x00
00A9           2077   __str_9:
00A9 0A        2078            db 0x0A
00AA 0D        2079            db 0x0D
00AB 00        2080            db 0x00
00AC           2081   __str_10:
00AC 436F6D6D  2082            db 'Command: '
     616E643A
     20
00B5 00        2083            db 0x00
00B6           2084   __str_11:
00B6 2564      2085            db '%d'
00B8 09        2086            db 0x09
00B9 00        2087            db 0x00
00BA           2088   
002E           2089            CSEG
002E           2090   
002E           2091   end
