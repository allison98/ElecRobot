0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Wed Apr 04 12:22:55 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkTestBonus
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _getchar1
0000             32            public _laserPattern
0000             33            public _detectobstacle
0000             34            public _checkMode
0000             35            public _recieveData
0000             36            public _waitquarterperiod
0000             37            public _getDigitalSignal
0000             38            public _voltsAtPeak
0000             39            public _checkCommands
0000             40            public _arrayEqual
0000             41            public _periodcalc
0000             42            public _PWMStop
0000             43            public _PWMLeftM
0000             44            public _PWMRightM
0000             45            public _PWMforwardM
0000             46            public _PWMbackwardM
0000             47            public _PWMLeft
0000             48            public _PWMRight
0000             49            public _PWMforward
0000             50            public _PWMbackward
0000             51            public _InitPinADC
0000             52            public _Volts_at_Pin
0000             53            public _TIMER0_Init
0000             54            public _InitADC
0000             55            public _Timer2_ISR
0000             56            public _ADC_at_Pin
0000             57            public _waitms
0000             58            public _Timer3us
0000             59            public _UART1_Init
0000             60            public __c51_external_startup
0000             61            public _x
0000             62            public _command
0000             63            public _right
0000             64            public _left
0000             65            public _backward
0000             66            public _forward
0000             67            public _stop
0000             68            public _claw_flag
0000             69            public _flag
0000             70            public _cartMoveB
0000             71            public _cartMoveF
0000             72            public _pwmSig6
0000             73            public _pwmSig5
0000             74            public _pwmSig4
0000             75            public _pwmSig3
0000             76            public _pwmSig2
0000             77            public _pwmSig1
0000             78            public _pwm_count3
0000             79            public _pwm_count2
0000             80            public _pwm_count1
0000             81            public _pwm_count
0000             82   ;--------------------------------------------------------
0000             83   ; Special Function Registers
0000             84   ;--------------------------------------------------------
0000             85   _ACC            DATA 0xe0
0000             86   _ADC0ASAH       DATA 0xb6
0000             87   _ADC0ASAL       DATA 0xb5
0000             88   _ADC0ASCF       DATA 0xa1
0000             89   _ADC0ASCT       DATA 0xc7
0000             90   _ADC0CF0        DATA 0xbc
0000             91   _ADC0CF1        DATA 0xb9
0000             92   _ADC0CF2        DATA 0xdf
0000             93   _ADC0CN0        DATA 0xe8
0000             94   _ADC0CN1        DATA 0xb2
0000             95   _ADC0CN2        DATA 0xb3
0000             96   _ADC0GTH        DATA 0xc4
0000             97   _ADC0GTL        DATA 0xc3
0000             98   _ADC0H          DATA 0xbe
0000             99   _ADC0L          DATA 0xbd
0000            100   _ADC0LTH        DATA 0xc6
0000            101   _ADC0LTL        DATA 0xc5
0000            102   _ADC0MX         DATA 0xbb
0000            103   _B              DATA 0xf0
0000            104   _CKCON0         DATA 0x8e
0000            105   _CKCON1         DATA 0xa6
0000            106   _CLEN0          DATA 0xc6
0000            107   _CLIE0          DATA 0xc7
0000            108   _CLIF0          DATA 0xe8
0000            109   _CLKSEL         DATA 0xa9
0000            110   _CLOUT0         DATA 0xd1
0000            111   _CLU0CF         DATA 0xb1
0000            112   _CLU0FN         DATA 0xaf
0000            113   _CLU0MX         DATA 0x84
0000            114   _CLU1CF         DATA 0xb3
0000            115   _CLU1FN         DATA 0xb2
0000            116   _CLU1MX         DATA 0x85
0000            117   _CLU2CF         DATA 0xb6
0000            118   _CLU2FN         DATA 0xb5
0000            119   _CLU2MX         DATA 0x91
0000            120   _CLU3CF         DATA 0xbf
0000            121   _CLU3FN         DATA 0xbe
0000            122   _CLU3MX         DATA 0xae
0000            123   _CMP0CN0        DATA 0x9b
0000            124   _CMP0CN1        DATA 0x99
0000            125   _CMP0MD         DATA 0x9d
0000            126   _CMP0MX         DATA 0x9f
0000            127   _CMP1CN0        DATA 0xbf
0000            128   _CMP1CN1        DATA 0xac
0000            129   _CMP1MD         DATA 0xab
0000            130   _CMP1MX         DATA 0xaa
0000            131   _CRC0CN0        DATA 0xce
0000            132   _CRC0CN1        DATA 0x86
0000            133   _CRC0CNT        DATA 0xd3
0000            134   _CRC0DAT        DATA 0xcb
0000            135   _CRC0FLIP       DATA 0xcf
0000            136   _CRC0IN         DATA 0xca
0000            137   _CRC0ST         DATA 0xd2
0000            138   _DAC0CF0        DATA 0x91
0000            139   _DAC0CF1        DATA 0x92
0000            140   _DAC0H          DATA 0x85
0000            141   _DAC0L          DATA 0x84
0000            142   _DAC1CF0        DATA 0x93
0000            143   _DAC1CF1        DATA 0x94
0000            144   _DAC1H          DATA 0x8a
0000            145   _DAC1L          DATA 0x89
0000            146   _DAC2CF0        DATA 0x95
0000            147   _DAC2CF1        DATA 0x96
0000            148   _DAC2H          DATA 0x8c
0000            149   _DAC2L          DATA 0x8b
0000            150   _DAC3CF0        DATA 0x9a
0000            151   _DAC3CF1        DATA 0x9c
0000            152   _DAC3H          DATA 0x8e
0000            153   _DAC3L          DATA 0x8d
0000            154   _DACGCF0        DATA 0x88
0000            155   _DACGCF1        DATA 0x98
0000            156   _DACGCF2        DATA 0xa2
0000            157   _DERIVID        DATA 0xad
0000            158   _DEVICEID       DATA 0xb5
0000            159   _DPH            DATA 0x83
0000            160   _DPL            DATA 0x82
0000            161   _EIE1           DATA 0xe6
0000            162   _EIE2           DATA 0xf3
0000            163   _EIP1           DATA 0xbb
0000            164   _EIP1H          DATA 0xee
0000            165   _EIP2           DATA 0xed
0000            166   _EIP2H          DATA 0xf6
0000            167   _EMI0CN         DATA 0xe7
0000            168   _FLKEY          DATA 0xb7
0000            169   _HFO0CAL        DATA 0xc7
0000            170   _HFO1CAL        DATA 0xd6
0000            171   _HFOCN          DATA 0xef
0000            172   _I2C0ADM        DATA 0xff
0000            173   _I2C0CN0        DATA 0xba
0000            174   _I2C0DIN        DATA 0xbc
0000            175   _I2C0DOUT       DATA 0xbb
0000            176   _I2C0FCN0       DATA 0xad
0000            177   _I2C0FCN1       DATA 0xab
0000            178   _I2C0FCT        DATA 0xf5
0000            179   _I2C0SLAD       DATA 0xbd
0000            180   _I2C0STAT       DATA 0xb9
0000            181   _IE             DATA 0xa8
0000            182   _IP             DATA 0xb8
0000            183   _IPH            DATA 0xf2
0000            184   _IT01CF         DATA 0xe4
0000            185   _LFO0CN         DATA 0xb1
0000            186   _P0             DATA 0x80
0000            187   _P0MASK         DATA 0xfe
0000            188   _P0MAT          DATA 0xfd
0000            189   _P0MDIN         DATA 0xf1
0000            190   _P0MDOUT        DATA 0xa4
0000            191   _P0SKIP         DATA 0xd4
0000            192   _P1             DATA 0x90
0000            193   _P1MASK         DATA 0xee
0000            194   _P1MAT          DATA 0xed
0000            195   _P1MDIN         DATA 0xf2
0000            196   _P1MDOUT        DATA 0xa5
0000            197   _P1SKIP         DATA 0xd5
0000            198   _P2             DATA 0xa0
0000            199   _P2MASK         DATA 0xfc
0000            200   _P2MAT          DATA 0xfb
0000            201   _P2MDIN         DATA 0xf3
0000            202   _P2MDOUT        DATA 0xa6
0000            203   _P2SKIP         DATA 0xcc
0000            204   _P3             DATA 0xb0
0000            205   _P3MDIN         DATA 0xf4
0000            206   _P3MDOUT        DATA 0x9c
0000            207   _PCA0CENT       DATA 0x9e
0000            208   _PCA0CLR        DATA 0x9c
0000            209   _PCA0CN0        DATA 0xd8
0000            210   _PCA0CPH0       DATA 0xfc
0000            211   _PCA0CPH1       DATA 0xea
0000            212   _PCA0CPH2       DATA 0xec
0000            213   _PCA0CPH3       DATA 0xf5
0000            214   _PCA0CPH4       DATA 0x85
0000            215   _PCA0CPH5       DATA 0xde
0000            216   _PCA0CPL0       DATA 0xfb
0000            217   _PCA0CPL1       DATA 0xe9
0000            218   _PCA0CPL2       DATA 0xeb
0000            219   _PCA0CPL3       DATA 0xf4
0000            220   _PCA0CPL4       DATA 0x84
0000            221   _PCA0CPL5       DATA 0xdd
0000            222   _PCA0CPM0       DATA 0xda
0000            223   _PCA0CPM1       DATA 0xdb
0000            224   _PCA0CPM2       DATA 0xdc
0000            225   _PCA0CPM3       DATA 0xae
0000            226   _PCA0CPM4       DATA 0xaf
0000            227   _PCA0CPM5       DATA 0xcc
0000            228   _PCA0H          DATA 0xfa
0000            229   _PCA0L          DATA 0xf9
0000            230   _PCA0MD         DATA 0xd9
0000            231   _PCA0POL        DATA 0x96
0000            232   _PCA0PWM        DATA 0xf7
0000            233   _PCON0          DATA 0x87
0000            234   _PCON1          DATA 0xcd
0000            235   _PFE0CN         DATA 0xc1
0000            236   _PRTDRV         DATA 0xf6
0000            237   _PSCTL          DATA 0x8f
0000            238   _PSTAT0         DATA 0xaa
0000            239   _PSW            DATA 0xd0
0000            240   _REF0CN         DATA 0xd1
0000            241   _REG0CN         DATA 0xc9
0000            242   _REVID          DATA 0xb6
0000            243   _RSTSRC         DATA 0xef
0000            244   _SBCON1         DATA 0x94
0000            245   _SBRLH1         DATA 0x96
0000            246   _SBRLL1         DATA 0x95
0000            247   _SBUF           DATA 0x99
0000            248   _SBUF0          DATA 0x99
0000            249   _SBUF1          DATA 0x92
0000            250   _SCON           DATA 0x98
0000            251   _SCON0          DATA 0x98
0000            252   _SCON1          DATA 0xc8
0000            253   _SFRPAGE        DATA 0xa7
0000            254   _SFRPGCN        DATA 0xbc
0000            255   _SFRSTACK       DATA 0xd7
0000            256   _SMB0ADM        DATA 0xd6
0000            257   _SMB0ADR        DATA 0xd7
0000            258   _SMB0CF         DATA 0xc1
0000            259   _SMB0CN0        DATA 0xc0
0000            260   _SMB0DAT        DATA 0xc2
0000            261   _SMB0FCN0       DATA 0xc3
0000            262   _SMB0FCN1       DATA 0xc4
0000            263   _SMB0FCT        DATA 0xef
0000            264   _SMB0RXLN       DATA 0xc5
0000            265   _SMB0TC         DATA 0xac
0000            266   _SMOD1          DATA 0x93
0000            267   _SP             DATA 0x81
0000            268   _SPI0CFG        DATA 0xa1
0000            269   _SPI0CKR        DATA 0xa2
0000            270   _SPI0CN0        DATA 0xf8
0000            271   _SPI0DAT        DATA 0xa3
0000            272   _SPI0FCN0       DATA 0x9a
0000            273   _SPI0FCN1       DATA 0x9b
0000            274   _SPI0FCT        DATA 0xf7
0000            275   _SPI0PCF        DATA 0xdf
0000            276   _TCON           DATA 0x88
0000            277   _TH0            DATA 0x8c
0000            278   _TH1            DATA 0x8d
0000            279   _TL0            DATA 0x8a
0000            280   _TL1            DATA 0x8b
0000            281   _TMOD           DATA 0x89
0000            282   _TMR2CN0        DATA 0xc8
0000            283   _TMR2CN1        DATA 0xfd
0000            284   _TMR2H          DATA 0xcf
0000            285   _TMR2L          DATA 0xce
0000            286   _TMR2RLH        DATA 0xcb
0000            287   _TMR2RLL        DATA 0xca
0000            288   _TMR3CN0        DATA 0x91
0000            289   _TMR3CN1        DATA 0xfe
0000            290   _TMR3H          DATA 0x95
0000            291   _TMR3L          DATA 0x94
0000            292   _TMR3RLH        DATA 0x93
0000            293   _TMR3RLL        DATA 0x92
0000            294   _TMR4CN0        DATA 0x98
0000            295   _TMR4CN1        DATA 0xff
0000            296   _TMR4H          DATA 0xa5
0000            297   _TMR4L          DATA 0xa4
0000            298   _TMR4RLH        DATA 0xa3
0000            299   _TMR4RLL        DATA 0xa2
0000            300   _TMR5CN0        DATA 0xc0
0000            301   _TMR5CN1        DATA 0xf1
0000            302   _TMR5H          DATA 0xd5
0000            303   _TMR5L          DATA 0xd4
0000            304   _TMR5RLH        DATA 0xd3
0000            305   _TMR5RLL        DATA 0xd2
0000            306   _UART0PCF       DATA 0xd9
0000            307   _UART1FCN0      DATA 0x9d
0000            308   _UART1FCN1      DATA 0xd8
0000            309   _UART1FCT       DATA 0xfa
0000            310   _UART1LIN       DATA 0x9e
0000            311   _UART1PCF       DATA 0xda
0000            312   _VDM0CN         DATA 0xff
0000            313   _WDTCN          DATA 0x97
0000            314   _XBR0           DATA 0xe1
0000            315   _XBR1           DATA 0xe2
0000            316   _XBR2           DATA 0xe3
0000            317   _XOSC0CN        DATA 0x86
0000            318   _DPTR           DATA 0x8382
0000            319   _TMR2RL         DATA 0xcbca
0000            320   _TMR3RL         DATA 0x9392
0000            321   _TMR4RL         DATA 0xa3a2
0000            322   _TMR5RL         DATA 0xd3d2
0000            323   _TMR0           DATA 0x8c8a
0000            324   _TMR1           DATA 0x8d8b
0000            325   _TMR2           DATA 0xcfce
0000            326   _TMR3           DATA 0x9594
0000            327   _TMR4           DATA 0xa5a4
0000            328   _TMR5           DATA 0xd5d4
0000            329   _SBRL1          DATA 0x9695
0000            330   _PCA0           DATA 0xfaf9
0000            331   _PCA0CP0        DATA 0xfcfb
0000            332   _PCA0CP1        DATA 0xeae9
0000            333   _PCA0CP2        DATA 0xeceb
0000            334   _PCA0CP3        DATA 0xf5f4
0000            335   _PCA0CP4        DATA 0x8584
0000            336   _PCA0CP5        DATA 0xdedd
0000            337   _ADC0ASA        DATA 0xb6b5
0000            338   _ADC0GT         DATA 0xc4c3
0000            339   _ADC0           DATA 0xbebd
0000            340   _ADC0LT         DATA 0xc6c5
0000            341   _DAC0           DATA 0x8584
0000            342   _DAC1           DATA 0x8a89
0000            343   _DAC2           DATA 0x8c8b
0000            344   _DAC3           DATA 0x8e8d
0000            345   ;--------------------------------------------------------
0000            346   ; special function bits
0000            347   ;--------------------------------------------------------
0000            348   _ACC_0          BIT 0xe0
0000            349   _ACC_1          BIT 0xe1
0000            350   _ACC_2          BIT 0xe2
0000            351   _ACC_3          BIT 0xe3
0000            352   _ACC_4          BIT 0xe4
0000            353   _ACC_5          BIT 0xe5
0000            354   _ACC_6          BIT 0xe6
0000            355   _ACC_7          BIT 0xe7
0000            356   _TEMPE          BIT 0xe8
0000            357   _ADGN0          BIT 0xe9
0000            358   _ADGN1          BIT 0xea
0000            359   _ADWINT         BIT 0xeb
0000            360   _ADBUSY         BIT 0xec
0000            361   _ADINT          BIT 0xed
0000            362   _IPOEN          BIT 0xee
0000            363   _ADEN           BIT 0xef
0000            364   _B_0            BIT 0xf0
0000            365   _B_1            BIT 0xf1
0000            366   _B_2            BIT 0xf2
0000            367   _B_3            BIT 0xf3
0000            368   _B_4            BIT 0xf4
0000            369   _B_5            BIT 0xf5
0000            370   _B_6            BIT 0xf6
0000            371   _B_7            BIT 0xf7
0000            372   _C0FIF          BIT 0xe8
0000            373   _C0RIF          BIT 0xe9
0000            374   _C1FIF          BIT 0xea
0000            375   _C1RIF          BIT 0xeb
0000            376   _C2FIF          BIT 0xec
0000            377   _C2RIF          BIT 0xed
0000            378   _C3FIF          BIT 0xee
0000            379   _C3RIF          BIT 0xef
0000            380   _D1SRC0         BIT 0x88
0000            381   _D1SRC1         BIT 0x89
0000            382   _D1AMEN         BIT 0x8a
0000            383   _D01REFSL       BIT 0x8b
0000            384   _D3SRC0         BIT 0x8c
0000            385   _D3SRC1         BIT 0x8d
0000            386   _D3AMEN         BIT 0x8e
0000            387   _D23REFSL       BIT 0x8f
0000            388   _D0UDIS         BIT 0x98
0000            389   _D1UDIS         BIT 0x99
0000            390   _D2UDIS         BIT 0x9a
0000            391   _D3UDIS         BIT 0x9b
0000            392   _EX0            BIT 0xa8
0000            393   _ET0            BIT 0xa9
0000            394   _EX1            BIT 0xaa
0000            395   _ET1            BIT 0xab
0000            396   _ES0            BIT 0xac
0000            397   _ET2            BIT 0xad
0000            398   _ESPI0          BIT 0xae
0000            399   _EA             BIT 0xaf
0000            400   _PX0            BIT 0xb8
0000            401   _PT0            BIT 0xb9
0000            402   _PX1            BIT 0xba
0000            403   _PT1            BIT 0xbb
0000            404   _PS0            BIT 0xbc
0000            405   _PT2            BIT 0xbd
0000            406   _PSPI0          BIT 0xbe
0000            407   _P0_0           BIT 0x80
0000            408   _P0_1           BIT 0x81
0000            409   _P0_2           BIT 0x82
0000            410   _P0_3           BIT 0x83
0000            411   _P0_4           BIT 0x84
0000            412   _P0_5           BIT 0x85
0000            413   _P0_6           BIT 0x86
0000            414   _P0_7           BIT 0x87
0000            415   _P1_0           BIT 0x90
0000            416   _P1_1           BIT 0x91
0000            417   _P1_2           BIT 0x92
0000            418   _P1_3           BIT 0x93
0000            419   _P1_4           BIT 0x94
0000            420   _P1_5           BIT 0x95
0000            421   _P1_6           BIT 0x96
0000            422   _P1_7           BIT 0x97
0000            423   _P2_0           BIT 0xa0
0000            424   _P2_1           BIT 0xa1
0000            425   _P2_2           BIT 0xa2
0000            426   _P2_3           BIT 0xa3
0000            427   _P2_4           BIT 0xa4
0000            428   _P2_5           BIT 0xa5
0000            429   _P2_6           BIT 0xa6
0000            430   _P3_0           BIT 0xb0
0000            431   _P3_1           BIT 0xb1
0000            432   _P3_2           BIT 0xb2
0000            433   _P3_3           BIT 0xb3
0000            434   _P3_4           BIT 0xb4
0000            435   _P3_7           BIT 0xb7
0000            436   _CCF0           BIT 0xd8
0000            437   _CCF1           BIT 0xd9
0000            438   _CCF2           BIT 0xda
0000            439   _CCF3           BIT 0xdb
0000            440   _CCF4           BIT 0xdc
0000            441   _CCF5           BIT 0xdd
0000            442   _CR             BIT 0xde
0000            443   _CF             BIT 0xdf
0000            444   _PARITY         BIT 0xd0
0000            445   _F1             BIT 0xd1
0000            446   _OV             BIT 0xd2
0000            447   _RS0            BIT 0xd3
0000            448   _RS1            BIT 0xd4
0000            449   _F0             BIT 0xd5
0000            450   _AC             BIT 0xd6
0000            451   _CY             BIT 0xd7
0000            452   _RI             BIT 0x98
0000            453   _TI             BIT 0x99
0000            454   _RB8            BIT 0x9a
0000            455   _TB8            BIT 0x9b
0000            456   _REN            BIT 0x9c
0000            457   _CE             BIT 0x9d
0000            458   _SMODE          BIT 0x9e
0000            459   _RI1            BIT 0xc8
0000            460   _TI1            BIT 0xc9
0000            461   _RBX1           BIT 0xca
0000            462   _TBX1           BIT 0xcb
0000            463   _REN1           BIT 0xcc
0000            464   _PERR1          BIT 0xcd
0000            465   _OVR1           BIT 0xce
0000            466   _SI             BIT 0xc0
0000            467   _ACK            BIT 0xc1
0000            468   _ARBLOST        BIT 0xc2
0000            469   _ACKRQ          BIT 0xc3
0000            470   _STO            BIT 0xc4
0000            471   _STA            BIT 0xc5
0000            472   _TXMODE         BIT 0xc6
0000            473   _MASTER         BIT 0xc7
0000            474   _SPIEN          BIT 0xf8
0000            475   _TXNF           BIT 0xf9
0000            476   _NSSMD0         BIT 0xfa
0000            477   _NSSMD1         BIT 0xfb
0000            478   _RXOVRN         BIT 0xfc
0000            479   _MODF           BIT 0xfd
0000            480   _WCOL           BIT 0xfe
0000            481   _SPIF           BIT 0xff
0000            482   _IT0            BIT 0x88
0000            483   _IE0            BIT 0x89
0000            484   _IT1            BIT 0x8a
0000            485   _IE1            BIT 0x8b
0000            486   _TR0            BIT 0x8c
0000            487   _TF0            BIT 0x8d
0000            488   _TR1            BIT 0x8e
0000            489   _TF1            BIT 0x8f
0000            490   _T2XCLK0        BIT 0xc8
0000            491   _T2XCLK1        BIT 0xc9
0000            492   _TR2            BIT 0xca
0000            493   _T2SPLIT        BIT 0xcb
0000            494   _TF2CEN         BIT 0xcc
0000            495   _TF2LEN         BIT 0xcd
0000            496   _TF2L           BIT 0xce
0000            497   _TF2H           BIT 0xcf
0000            498   _T4XCLK0        BIT 0x98
0000            499   _T4XCLK1        BIT 0x99
0000            500   _TR4            BIT 0x9a
0000            501   _T4SPLIT        BIT 0x9b
0000            502   _TF4CEN         BIT 0x9c
0000            503   _TF4LEN         BIT 0x9d
0000            504   _TF4L           BIT 0x9e
0000            505   _TF4H           BIT 0x9f
0000            506   _T5XCLK0        BIT 0xc0
0000            507   _T5XCLK1        BIT 0xc1
0000            508   _TR5            BIT 0xc2
0000            509   _T5SPLIT        BIT 0xc3
0000            510   _TF5CEN         BIT 0xc4
0000            511   _TF5LEN         BIT 0xc5
0000            512   _TF5L           BIT 0xc6
0000            513   _TF5H           BIT 0xc7
0000            514   _RIE            BIT 0xd8
0000            515   _RXTO0          BIT 0xd9
0000            516   _RXTO1          BIT 0xda
0000            517   _RFRQ           BIT 0xdb
0000            518   _TIE            BIT 0xdc
0000            519   _TXHOLD         BIT 0xdd
0000            520   _TXNF1          BIT 0xde
0000            521   _TFRQ           BIT 0xdf
0000            522   ;--------------------------------------------------------
0000            523   ; overlayable register banks
0000            524   ;--------------------------------------------------------
0000            525            rbank0 segment data overlay
0000            526   ;--------------------------------------------------------
0000            527   ; internal ram data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_DSEG
0000            530   _pwm_count:
0000            531            ds 1
0001            532   _pwm_count1:
0001            533            ds 1
0002            534   _pwm_count2:
0002            535            ds 1
0003            536   _pwm_count3:
0003            537            ds 1
0004            538   _pwmSig1:
0004            539            ds 2
0006            540   _pwmSig2:
0006            541            ds 2
0008            542   _pwmSig3:
0008            543            ds 2
000A            544   _pwmSig4:
000A            545            ds 2
000C            546   _pwmSig5:
000C            547            ds 2
000E            548   _pwmSig6:
000E            549            ds 2
0010            550   _cartMoveF:
0010            551            ds 2
0012            552   _cartMoveB:
0012            553            ds 2
0014            554   _flag:
0014            555            ds 2
0016            556   _claw_flag:
0016            557            ds 2
0018            558   _stop:
0018            559            ds 8
0020            560   _forward:
0020            561            ds 8
0028            562   _backward:
0028            563            ds 8
0030            564   _left:
0030            565            ds 8
0038            566   _right:
0038            567            ds 8
0040            568   _command:
0040            569            ds 8
0048            570   _x:
0048            571            ds 2
004A            572   _main_pir_voltage_1_116:
004A            573            ds 4
004E            574   _main_temp_1_116:
004E            575            ds 4
0052            576   _main_sloc0_1_0:
0052            577            ds 4
0056            578   ;--------------------------------------------------------
0056            579   ; overlayable items in internal ram 
0056            580   ;--------------------------------------------------------
0000            581            rseg    R_OSEG
0000            582            rseg    R_OSEG
0000            583            rseg    R_OSEG
0000            584   _InitPinADC_PARM_2:
0000            585            ds 1
0001            586            rseg    R_OSEG
0001            587   _arrayEqual_PARM_2:
0001            588            ds 2
0003            589   _arrayEqual_PARM_3:
0003            590            ds 3
0006            591   _arrayEqual_arr1_1_88:
0006            592            ds 3
0009            593            rseg    R_OSEG
0009            594   ;--------------------------------------------------------
0009            595   ; indirectly addressable internal ram data
0009            596   ;--------------------------------------------------------
0000            597            rseg R_ISEG
0000            598   ;--------------------------------------------------------
0000            599   ; absolute internal ram data
0000            600   ;--------------------------------------------------------
0000            601            DSEG
0000            602   ;--------------------------------------------------------
0000            603   ; bit data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_BSEG
0000            606   _Timer2_ISR_sloc0_1_0:
0000            607            DBIT    1
0001            608   ;--------------------------------------------------------
0001            609   ; paged external ram data
0001            610   ;--------------------------------------------------------
0000            611            rseg R_PSEG
0000            612   ;--------------------------------------------------------
0000            613   ; external ram data
0000            614   ;--------------------------------------------------------
0000            615            rseg R_XSEG
0000            616   ;--------------------------------------------------------
0000            617   ; absolute external ram data
0000            618   ;--------------------------------------------------------
0000            619            XSEG
0000            620   ;--------------------------------------------------------
0000            621   ; external initialized ram data
0000            622   ;--------------------------------------------------------
0000            623            rseg R_IXSEG
0000            624            rseg R_HOME
0000            625            rseg R_GSINIT
0000            626            rseg R_CSEG
0000            627   ;--------------------------------------------------------
0000            628   ; Reset entry point and interrupt vectors
0000            629   ;--------------------------------------------------------
0000            630            CSEG at 0x0000
0000 020100     631            ljmp    _crt0
002B            632            CSEG at 0x002b
002B 020100     633            ljmp    _Timer2_ISR
002E            634   ;--------------------------------------------------------
002E            635   ; global & static initialisations
002E            636   ;--------------------------------------------------------
0000            637            rseg R_HOME
0000            638            rseg R_GSINIT
0000            639            rseg R_GSINIT
0000            640   ;--------------------------------------------------------
0000            641   ; data variables initialization
0000            642   ;--------------------------------------------------------
0000            643            rseg R_DINIT
0000            644   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:60: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 754800     645            mov     _pwm_count,#0x00
0003            646   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:61: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 750800     647            mov     _pwm_count1,#0x00
0006            648   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:62: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 75C800     649            mov     _pwm_count2,#0x00
0009            650   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:63: volatile unsigned char pwm_count3 = 0; //
0009 758800     651            mov     _pwm_count3,#0x00
000C            652   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:78: volatile int flag = 0;
000C E4         653            clr     a
000D F548       654            mov     _flag,a
000F F549       655            mov     (_flag + 1),a
0011            656   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:79: volatile int claw_flag = 0;
0011 E4         657            clr     a
0012 F508       658            mov     _claw_flag,a
0014 F509       659            mov     (_claw_flag + 1),a
0016            660   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:80: int stop[]={0,0,0,0};
0016 75C800     661            mov     _stop,#0x00
0019 75C900     662            mov     (_stop + 1),#0x00
001C 75CA00     663            mov     (_stop + 0x0002),#0x00
001F 75CB00     664            mov     ((_stop + 0x0002) + 1),#0x00
0022 75CC00     665            mov     (_stop + 0x0004),#0x00
0025 75CD00     666            mov     ((_stop + 0x0004) + 1),#0x00
0028 75CE00     667            mov     (_stop + 0x0006),#0x00
002B 75CF00     668            mov     ((_stop + 0x0006) + 1),#0x00
002E            669   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:81: int forward[]={1,1,1,1};
002E 758801     670            mov     _forward,#0x01
0031 758900     671            mov     (_forward + 1),#0x00
0034 758A01     672            mov     (_forward + 0x0002),#0x01
0037 758B00     673            mov     ((_forward + 0x0002) + 1),#0x00
003A 758C01     674            mov     (_forward + 0x0004),#0x01
003D 758D00     675            mov     ((_forward + 0x0004) + 1),#0x00
0040 758E01     676            mov     (_forward + 0x0006),#0x01
0043 758F00     677            mov     ((_forward + 0x0006) + 1),#0x00
0046            678   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:82: int backward[]={1,0,1,1};
0046 754801     679            mov     _backward,#0x01
0049 754900     680            mov     (_backward + 1),#0x00
004C 754A00     681            mov     (_backward + 0x0002),#0x00
004F 754B00     682            mov     ((_backward + 0x0002) + 1),#0x00
0052 754C01     683            mov     (_backward + 0x0004),#0x01
0055 754D00     684            mov     ((_backward + 0x0004) + 1),#0x00
0058 754E01     685            mov     (_backward + 0x0006),#0x01
005B 754F00     686            mov     ((_backward + 0x0006) + 1),#0x00
005E            687   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:83: int left[]={1,0,0,1};
005E 750801     688            mov     _left,#0x01
0061 750900     689            mov     (_left + 1),#0x00
0064 750A00     690            mov     (_left + 0x0002),#0x00
0067 750B00     691            mov     ((_left + 0x0002) + 1),#0x00
006A 750C00     692            mov     (_left + 0x0004),#0x00
006D 750D00     693            mov     ((_left + 0x0004) + 1),#0x00
0070 750E01     694            mov     (_left + 0x0006),#0x01
0073 750F00     695            mov     ((_left + 0x0006) + 1),#0x00
0076            696   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:84: int right[]={1,0,1,0};
0076 75C801     697            mov     _right,#0x01
0079 75C900     698            mov     (_right + 1),#0x00
007C 75CA00     699            mov     (_right + 0x0002),#0x00
007F 75CB00     700            mov     ((_right + 0x0002) + 1),#0x00
0082 75CC01     701            mov     (_right + 0x0004),#0x01
0085 75CD00     702            mov     ((_right + 0x0004) + 1),#0x00
0088 75CE00     703            mov     (_right + 0x0006),#0x00
008B 75CF00     704            mov     ((_right + 0x0006) + 1),#0x00
008E            705   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:86: int command[4] = {0,0,0,0};
008E 758800     706            mov     _command,#0x00
0091 758900     707            mov     (_command + 1),#0x00
0094 758A00     708            mov     (_command + 0x0002),#0x00
0097 758B00     709            mov     ((_command + 0x0002) + 1),#0x00
009A 758C00     710            mov     (_command + 0x0004),#0x00
009D 758D00     711            mov     ((_command + 0x0004) + 1),#0x00
00A0 758E00     712            mov     (_command + 0x0006),#0x00
00A3 758F00     713            mov     ((_command + 0x0006) + 1),#0x00
00A6            714   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:88: volatile unsigned int x = 2;
00A6 754802     715            mov     _x,#0x02
00A9 E4         716            clr     a
00AA F549       717            mov     (_x + 1),a
00AC            718            ; The linker places a 'ret' at the end of segment R_DINIT.
00AC            719   ;--------------------------------------------------------
00AC            720   ; code
00AC            721   ;--------------------------------------------------------
0000            722            rseg R_CSEG
0000            723   ;------------------------------------------------------------
0000            724   ;Allocation info for local variables in function '_c51_external_startup'
0000            725   ;------------------------------------------------------------
0000            726   ;------------------------------------------------------------
0000            727   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:90: char _c51_external_startup(void)
0000            728   ;        -----------------------------------------
0000            729   ;         function _c51_external_startup
0000            730   ;        -----------------------------------------
0000            731   __c51_external_startup:
0000            732            using   0
0000            733   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:93: SFRPAGE = 0x00;
0000 75A700     734            mov     _SFRPAGE,#0x00
0003            735   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:94: WDTCN = 0xDE; //First key
0003 7597DE     736            mov     _WDTCN,#0xDE
0006            737   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:95: WDTCN = 0xAD; //Second key
0006 7597AD     738            mov     _WDTCN,#0xAD
0009            739   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:97: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     740            mov     _VDM0CN,#0x80
000C            741   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:98: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     742            mov     _RSTSRC,#0x06
000F            743   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:105: SFRPAGE = 0x10;
000F 75A710     744            mov     _SFRPAGE,#0x10
0012            745   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:106: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     746            mov     _PFE0CN,#0x20
0015            747   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:107: SFRPAGE = 0x00;
0015 75A700     748            mov     _SFRPAGE,#0x00
0018            749   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:128: CLKSEL = 0x00;
0018 75A900     750            mov     _CLKSEL,#0x00
001B            751   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:129: CLKSEL = 0x00;
001B 75A900     752            mov     _CLKSEL,#0x00
001E            753   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:130: while ((CLKSEL & 0x80) == 0);
001E            754   L002001?:
001E E5A9       755            mov     a,_CLKSEL
0020 30E708     756            jnb     acc.7,L002001?
0023            757   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:131: CLKSEL = 0x03;
0023 75A903     758            mov     _CLKSEL,#0x03
0026            759   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:132: CLKSEL = 0x03;
0026 75A903     760            mov     _CLKSEL,#0x03
0029            761   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:133: while ((CLKSEL & 0x80) == 0);
0029            762   L002004?:
0029 E5A9       763            mov     a,_CLKSEL
002B 30E788     764            jnb     acc.7,L002004?
002E            765   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:138: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     766            orl     _P0MDOUT,#0x10
0031            767   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:139: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     768            mov     _XBR0,#0x01
0034            769   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:140: XBR1 = 0X00;
0034 75E200     770            mov     _XBR1,#0x00
0037            771   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:141: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     772            mov     _XBR2,#0x40
003A            773   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:147: SCON0 = 0x10;
003A 759810     774            mov     _SCON0,#0x10
003D            775   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:148: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     776            mov     _TH1,#0xE6
0040            777   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:149: TL1 = TH1;      // Init Timer1
0040 858D8B     778            mov     _TL1,_TH1
0043            779   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:150: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     780            anl     _TMOD,#0x0F
0046            781   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:151: TMOD |= 0x20;
0046 438920     782            orl     _TMOD,#0x20
0049            783   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:152: TR1 = 1; // START Timer1
0049 D28E       784            setb    _TR1
004B            785   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:153: TI = 1;  // Indicate TX0 ready
004B D299       786            setb    _TI
004D            787   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:156: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     788            mov     _TMR2CN0,#0x00
0050            789   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:157: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     790            orl     _CKCON0,#0x10
0053            791   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:158: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     792            mov     _TMR2RL,#0xE0
0056 75CBE3     793            mov     (_TMR2RL >> 8),#0xE3
0059            794   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:159: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     795            mov     _TMR2,#0xFF
005C 75CFFF     796            mov     (_TMR2 >> 8),#0xFF
005F            797   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:160: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       798            setb    _ET2
0061            799   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:161: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       800            setb    _TR2
0063            801   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:179: EA = 1; // Enable interrupts
0063 D2AF       802            setb    _EA
0065            803   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:182: return 0;
0065 758200     804            mov     dpl,#0x00
0068 22         805            ret
0069            806   ;------------------------------------------------------------
0069            807   ;Allocation info for local variables in function 'UART1_Init'
0069            808   ;------------------------------------------------------------
0069            809   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0069            810   ;------------------------------------------------------------
0069            811   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:185: void UART1_Init (unsigned long baudrate)
0069            812   ;        -----------------------------------------
0069            813   ;         function UART1_Init
0069            814   ;        -----------------------------------------
0069            815   _UART1_Init:
0069 AA82       816            mov     r2,dpl
006B AB83       817            mov     r3,dph
006D ACF0       818            mov     r4,b
006F FD         819            mov     r5,a
0070            820   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:187: SFRPAGE = 0x20;
0070 75A720     821            mov     _SFRPAGE,#0x20
0073            822   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:188: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0073 75930C     823            mov     _SMOD1,#0x0C
0076            824   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:189: SCON1 = 0x10;
0076 75C810     825            mov     _SCON1,#0x10
0079            826   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:190: SBCON1 =0x00;   // disable baud rate generator
0079 759400     827            mov     _SBCON1,#0x00
007C            828   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:191: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
007C 8A00       829            mov     __divulong_PARM_2,r2
007E 8B01       830            mov     (__divulong_PARM_2 + 1),r3
0080 8C02       831            mov     (__divulong_PARM_2 + 2),r4
0082 8D03       832            mov     (__divulong_PARM_2 + 3),r5
0084 90A200     833            mov     dptr,#0xA200
0087 75F04A     834            mov     b,#0x4A
008A 7404       835            mov     a,#0x04
008C 120100     836            lcall   __divulong
008F AA82       837            mov     r2,dpl
0091 AB83       838            mov     r3,dph
0093 ACF0       839            mov     r4,b
0095 FD         840            mov     r5,a
0096 750018     841            mov     __divulong_PARM_2,#0x18
0099 E4         842            clr     a
009A F501       843            mov     (__divulong_PARM_2 + 1),a
009C F502       844            mov     (__divulong_PARM_2 + 2),a
009E F503       845            mov     (__divulong_PARM_2 + 3),a
00A0 8A82       846            mov     dpl,r2
00A2 8B83       847            mov     dph,r3
00A4 8CF0       848            mov     b,r4
00A6 ED         849            mov     a,r5
00A7 120100     850            lcall   __divulong
00AA AA82       851            mov     r2,dpl
00AC AB83       852            mov     r3,dph
00AE ACF0       853            mov     r4,b
00B0 FD         854            mov     r5,a
00B1 E4         855            clr     a
00B2 C3         856            clr     c
00B3 9A         857            subb    a,r2
00B4 FA         858            mov     r2,a
00B5 E4         859            clr     a
00B6 9B         860            subb    a,r3
00B7 FB         861            mov     r3,a
00B8 7401       862            mov     a,#0x01
00BA 9C         863            subb    a,r4
00BB E4         864            clr     a
00BC 9D         865            subb    a,r5
00BD 8A95       866            mov     _SBRL1,r2
00BF 8B96       867            mov     (_SBRL1 >> 8),r3
00C1            868   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:192: TI1 = 1; // indicate ready for TX
00C1 D2C9       869            setb    _TI1
00C3            870   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:193: SBCON1 |= 0x40;   // enable baud rate generator
00C3 439440     871            orl     _SBCON1,#0x40
00C6            872   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:194: SFRPAGE = 0x00;
00C6 75A700     873            mov     _SFRPAGE,#0x00
00C9 22         874            ret
00CA            875   ;------------------------------------------------------------
00CA            876   ;Allocation info for local variables in function 'Timer3us'
00CA            877   ;------------------------------------------------------------
00CA            878   ;us                        Allocated to registers r2 r3 
00CA            879   ;i                         Allocated to registers r4 r5 
00CA            880   ;------------------------------------------------------------
00CA            881   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:197: void Timer3us(unsigned int us)
00CA            882   ;        -----------------------------------------
00CA            883   ;         function Timer3us
00CA            884   ;        -----------------------------------------
00CA            885   _Timer3us:
00CA AA82       886            mov     r2,dpl
00CC AB83       887            mov     r3,dph
00CE            888   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:202: CKCON0|=0b_0100_0000;
00CE 438E40     889            orl     _CKCON0,#0x40
00D1            890   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:204: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00D1 7592B8     891            mov     _TMR3RL,#0xB8
00D4 7593FF     892            mov     (_TMR3RL >> 8),#0xFF
00D7            893   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:205: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00D7 859294     894            mov     _TMR3,_TMR3RL
00DA 859395     895            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00DD            896   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:207: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00DD 759104     897            mov     _TMR3CN0,#0x04
00E0            898   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:208: for (i = 0; i < us; i++)       // Count <us> overflows
00E0 7C00       899            mov     r4,#0x00
00E2 7D00       900            mov     r5,#0x00
00E4            901   L004004?:
00E4 C3         902            clr     c
00E5 EC         903            mov     a,r4
00E6 9A         904            subb    a,r2
00E7 ED         905            mov     a,r5
00E8 9B         906            subb    a,r3
00E9 5001       907            jnc     L004007?
00EB            908   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:210: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00EB            909   L004001?:
00EB E591       910            mov     a,_TMR3CN0
00ED 30E798     911            jnb     acc.7,L004001?
00F0            912   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:211: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00F0 53917F     913            anl     _TMR3CN0,#0x7F
00F3            914   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:208: for (i = 0; i < us; i++)       // Count <us> overflows
00F3 0C         915            inc     r4
00F4 BC0018     916            cjne    r4,#0x00,L004004?
00F7 0D         917            inc     r5
00F8 8001       918            sjmp    L004004?
00FA            919   L004007?:
00FA            920   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:213: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00FA 759100     921            mov     _TMR3CN0,#0x00
00FD 22         922            ret
00FE            923   ;------------------------------------------------------------
00FE            924   ;Allocation info for local variables in function 'waitms'
00FE            925   ;------------------------------------------------------------
00FE            926   ;ms                        Allocated to registers r2 r3 
00FE            927   ;j                         Allocated to registers r4 r5 
00FE            928   ;k                         Allocated to registers r6 
00FE            929   ;------------------------------------------------------------
00FE            930   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:215: void waitms (unsigned int ms)
00FE            931   ;        -----------------------------------------
00FE            932   ;         function waitms
00FE            933   ;        -----------------------------------------
00FE            934   _waitms:
00FE AA82       935            mov     r2,dpl
0100 AB83       936            mov     r3,dph
0102            937   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:219: for(j=0; j<ms; j++)
0102 7C00       938            mov     r4,#0x00
0104 7D00       939            mov     r5,#0x00
0106            940   L005005?:
0106 C3         941            clr     c
0107 EC         942            mov     a,r4
0108 9A         943            subb    a,r2
0109 ED         944            mov     a,r5
010A 9B         945            subb    a,r3
010B 5001       946            jnc     L005009?
010D            947   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:220: for (k=0; k<4; k++) Timer3us(250);
010D 7E00       948            mov     r6,#0x00
010F            949   L005001?:
010F BE0498     950            cjne    r6,#0x04,L005018?
0112            951   L005018?:
0112 5001       952            jnc     L005007?
0114 9000FA     953            mov     dptr,#0x00FA
0117 C002       954            push    ar2
0119 C003       955            push    ar3
011B C004       956            push    ar4
011D C005       957            push    ar5
011F C006       958            push    ar6
0121 120100     959            lcall   _Timer3us
0124 D006       960            pop     ar6
0126 D005       961            pop     ar5
0128 D004       962            pop     ar4
012A D003       963            pop     ar3
012C D002       964            pop     ar2
012E 0E         965            inc     r6
012F 8001       966            sjmp    L005001?
0131            967   L005007?:
0131            968   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:219: for(j=0; j<ms; j++)
0131 0C         969            inc     r4
0132 BC00D8     970            cjne    r4,#0x00,L005005?
0135 0D         971            inc     r5
0136 8001       972            sjmp    L005005?
0138            973   L005009?:
0138 22         974            ret
0139            975   ;------------------------------------------------------------
0139            976   ;Allocation info for local variables in function 'ADC_at_Pin'
0139            977   ;------------------------------------------------------------
0139            978   ;pin                       Allocated to registers 
0139            979   ;------------------------------------------------------------
0139            980   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:224: unsigned int ADC_at_Pin(unsigned char pin)
0139            981   ;        -----------------------------------------
0139            982   ;         function ADC_at_Pin
0139            983   ;        -----------------------------------------
0139            984   _ADC_at_Pin:
0139 8582BB     985            mov     _ADC0MX,dpl
013C            986   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:227: ADBUSY = 1;       // Dummy conversion first to select new pin
013C D2EC       987            setb    _ADBUSY
013E            988   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:228: while (ADBUSY); // Wait for dummy conversion to finish
013E            989   L006001?:
013E 20EC18     990            jb      _ADBUSY,L006001?
0141            991   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:229: ADBUSY = 1;     // Convert voltage at the pin
0141 D2EC       992            setb    _ADBUSY
0143            993   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:230: while (ADBUSY); // Wait for conversion to complete
0143            994   L006004?:
0143 20EC58     995            jb      _ADBUSY,L006004?
0146            996   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:231: return (ADC0);
0146 85BD82     997            mov     dpl,_ADC0
0149 85BE83     998            mov     dph,(_ADC0 >> 8)
014C 22         999            ret
014D           1000   ;------------------------------------------------------------
014D           1001   ;Allocation info for local variables in function 'Timer2_ISR'
014D           1002   ;------------------------------------------------------------
014D           1003   ;------------------------------------------------------------
014D           1004   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:235: void Timer2_ISR(void) interrupt 5
014D           1005   ;        -----------------------------------------
014D           1006   ;         function Timer2_ISR
014D           1007   ;        -----------------------------------------
014D           1008   _Timer2_ISR:
014D C0E0      1009            push    acc
014F C002      1010            push    ar2
0151 C003      1011            push    ar3
0153 C0D0      1012            push    psw
0155 75D000    1013            mov     psw,#0x00
0158           1014   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:237: TF2H = 0; // Clear Timer2 interrupt flag
0158 C2CF      1015            clr     _TF2H
015A           1016   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:239: pwm_count++;
015A 0548      1017            inc     _pwm_count
015C           1018   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:240: if (pwm_count>100)
015C E548      1019            mov     a,_pwm_count
015E 249B      1020            add     a,#0xff - 0x64
0160 5001      1021            jnc     L007002?
0162           1022   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:241: pwm_count = 0;
0162 754800    1023            mov     _pwm_count,#0x00
0165           1024   L007002?:
0165           1025   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:244: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0165 AA48      1026            mov     r2,_pwm_count
0167 7B00      1027            mov     r3,#0x00
0169 C3        1028            clr     c
016A E548      1029            mov     a,_pwmSig1
016C 9A        1030            subb    a,r2
016D E549      1031            mov     a,(_pwmSig1 + 1)
016F 9B        1032            subb    a,r3
0170 9288      1033            mov  _Timer2_ISR_sloc0_1_0,c
0172 B3        1034            cpl     c
0173 9294      1035            mov     _P1_4,c
0175           1036   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:245: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0175 AA48      1037            mov     r2,_pwm_count
0177 7B00      1038            mov     r3,#0x00
0179 C3        1039            clr     c
017A E508      1040            mov     a,_pwmSig2
017C 9A        1041            subb    a,r2
017D E509      1042            mov     a,(_pwmSig2 + 1)
017F 9B        1043            subb    a,r3
0180 9288      1044            mov  _Timer2_ISR_sloc0_1_0,c
0182 B3        1045            cpl     c
0183 9295      1046            mov     _P1_5,c
0185           1047   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:247: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0185 AA48      1048            mov     r2,_pwm_count
0187 7B00      1049            mov     r3,#0x00
0189 C3        1050            clr     c
018A E5C8      1051            mov     a,_pwmSig3
018C 9A        1052            subb    a,r2
018D E5C9      1053            mov     a,(_pwmSig3 + 1)
018F 9B        1054            subb    a,r3
0190 9288      1055            mov  _Timer2_ISR_sloc0_1_0,c
0192 B3        1056            cpl     c
0193 9292      1057            mov     _P1_2,c
0195           1058   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:248: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0195 AA48      1059            mov     r2,_pwm_count
0197 7B00      1060            mov     r3,#0x00
0199 C3        1061            clr     c
019A E588      1062            mov     a,_pwmSig4
019C 9A        1063            subb    a,r2
019D E589      1064            mov     a,(_pwmSig4 + 1)
019F 9B        1065            subb    a,r3
01A0 9288      1066            mov  _Timer2_ISR_sloc0_1_0,c
01A2 B3        1067            cpl     c
01A3 9293      1068            mov     _P1_3,c
01A5           1069   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:250: OUT0=pwm_count>80?0:1;
01A5 E548      1070            mov     a,_pwm_count
01A7 24AF      1071            add     a,#0xff - 0x50
01A9 9288      1072            mov  _Timer2_ISR_sloc0_1_0,c
01AB B3        1073            cpl     c
01AC 92A0      1074            mov     _P2_0,c
01AE D0D0      1075            pop     psw
01B0 D003      1076            pop     ar3
01B2 D002      1077            pop     ar2
01B4 D0E0      1078            pop     acc
01B6 32        1079            reti
01B7           1080   ;        eliminated unneeded push/pop dpl
01B7           1081   ;        eliminated unneeded push/pop dph
01B7           1082   ;        eliminated unneeded push/pop b
01B7           1083   ;------------------------------------------------------------
01B7           1084   ;Allocation info for local variables in function 'InitADC'
01B7           1085   ;------------------------------------------------------------
01B7           1086   ;------------------------------------------------------------
01B7           1087   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:280: void InitADC(void)
01B7           1088   ;        -----------------------------------------
01B7           1089   ;         function InitADC
01B7           1090   ;        -----------------------------------------
01B7           1091   _InitADC:
01B7           1092   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:282: SFRPAGE = 0x00;
01B7 75A700    1093            mov     _SFRPAGE,#0x00
01BA           1094   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:283: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
01BA 75B280    1095            mov     _ADC0CN1,#0x80
01BD           1096   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:284: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
01BD 75BCF8    1097            mov     _ADC0CF0,#0xF8
01C0           1098   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:285: ADC0CF1 = 0b_0_0_011110; // Same as default for now
01C0 75B91E    1099            mov     _ADC0CF1,#0x1E
01C3           1100   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:286: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
01C3 75E800    1101            mov     _ADC0CN0,#0x00
01C6           1102   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:287: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
01C6 75DF3F    1103            mov     _ADC0CF2,#0x3F
01C9           1104   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:288: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
01C9 75B300    1105            mov     _ADC0CN2,#0x00
01CC           1106   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:289: ADEN = 1; // Enable ADC
01CC D2EF      1107            setb    _ADEN
01CE 22        1108            ret
01CF           1109   ;------------------------------------------------------------
01CF           1110   ;Allocation info for local variables in function 'TIMER0_Init'
01CF           1111   ;------------------------------------------------------------
01CF           1112   ;------------------------------------------------------------
01CF           1113   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:291: void TIMER0_Init(void)
01CF           1114   ;        -----------------------------------------
01CF           1115   ;         function TIMER0_Init
01CF           1116   ;        -----------------------------------------
01CF           1117   _TIMER0_Init:
01CF           1118   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:293: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
01CF 5389F0    1119            anl     _TMOD,#0xF0
01D2           1120   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:294: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
01D2 438901    1121            orl     _TMOD,#0x01
01D5           1122   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:295: TR0 = 0; // Stop Timer/Counter 0
01D5 C28C      1123            clr     _TR0
01D7 22        1124            ret
01D8           1125   ;------------------------------------------------------------
01D8           1126   ;Allocation info for local variables in function 'Volts_at_Pin'
01D8           1127   ;------------------------------------------------------------
01D8           1128   ;pin                       Allocated to registers r2 
01D8           1129   ;------------------------------------------------------------
01D8           1130   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:300: float Volts_at_Pin(unsigned char pin)
01D8           1131   ;        -----------------------------------------
01D8           1132   ;         function Volts_at_Pin
01D8           1133   ;        -----------------------------------------
01D8           1134   _Volts_at_Pin:
01D8           1135   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:302: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
01D8 120100    1136            lcall   _ADC_at_Pin
01DB 120100    1137            lcall   ___uint2fs
01DE AA82      1138            mov     r2,dpl
01E0 AB83      1139            mov     r3,dph
01E2 ACF0      1140            mov     r4,b
01E4 FD        1141            mov     r5,a
01E5 C002      1142            push    ar2
01E7 C003      1143            push    ar3
01E9 C004      1144            push    ar4
01EB C005      1145            push    ar5
01ED 906C8B    1146            mov     dptr,#0x6C8B
01F0 75F053    1147            mov     b,#0x53
01F3 7440      1148            mov     a,#0x40
01F5 120100    1149            lcall   ___fsmul
01F8 AA82      1150            mov     r2,dpl
01FA AB83      1151            mov     r3,dph
01FC ACF0      1152            mov     r4,b
01FE FD        1153            mov     r5,a
01FF E581      1154            mov     a,sp
0201 24FC      1155            add     a,#0xfc
0203 F581      1156            mov     sp,a
0205 E4        1157            clr     a
0206 C0E0      1158            push    acc
0208 74FC      1159            mov     a,#0xFC
020A C0E0      1160            push    acc
020C 747F      1161            mov     a,#0x7F
020E C0E0      1162            push    acc
0210 7446      1163            mov     a,#0x46
0212 C0E0      1164            push    acc
0214 8A82      1165            mov     dpl,r2
0216 8B83      1166            mov     dph,r3
0218 8CF0      1167            mov     b,r4
021A ED        1168            mov     a,r5
021B 120100    1169            lcall   ___fsdiv
021E AA82      1170            mov     r2,dpl
0220 AB83      1171            mov     r3,dph
0222 ACF0      1172            mov     r4,b
0224 FD        1173            mov     r5,a
0225 E581      1174            mov     a,sp
0227 24FC      1175            add     a,#0xfc
0229 F581      1176            mov     sp,a
022B 8A82      1177            mov     dpl,r2
022D 8B83      1178            mov     dph,r3
022F 8CF0      1179            mov     b,r4
0231 ED        1180            mov     a,r5
0232 22        1181            ret
0233           1182   ;------------------------------------------------------------
0233           1183   ;Allocation info for local variables in function 'InitPinADC'
0233           1184   ;------------------------------------------------------------
0233           1185   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0233           1186   ;portno                    Allocated to registers r2 
0233           1187   ;mask                      Allocated to registers r3 
0233           1188   ;------------------------------------------------------------
0233           1189   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:304: void InitPinADC(unsigned char portno, unsigned char pinno)
0233           1190   ;        -----------------------------------------
0233           1191   ;         function InitPinADC
0233           1192   ;        -----------------------------------------
0233           1193   _InitPinADC:
0233 AA82      1194            mov     r2,dpl
0235           1195   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:308: mask = 1 << pinno;
0235 85F0F0    1196            mov     b,_InitPinADC_PARM_2
0238 05F0      1197            inc     b
023A 7401      1198            mov     a,#0x01
023C 8001      1199            sjmp    L011013?
023E           1200   L011011?:
023E 25E0      1201            add     a,acc
0240           1202   L011013?:
0240 D5F058    1203            djnz    b,L011011?
0243 FB        1204            mov     r3,a
0244           1205   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:310: SFRPAGE = 0x20;
0244 75A720    1206            mov     _SFRPAGE,#0x20
0247           1207   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:311: switch (portno)
0247 BA0098    1208            cjne    r2,#0x00,L011014?
024A 8001      1209            sjmp    L011001?
024C           1210   L011014?:
024C BA0118    1211            cjne    r2,#0x01,L011015?
024F 8001      1212            sjmp    L011002?
0251           1213   L011015?:
0251           1214   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:313: case 0:
0251 BA0298    1215            cjne    r2,#0x02,L011005?
0254 8001      1216            sjmp    L011003?
0256           1217   L011001?:
0256           1218   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:314: P0MDIN &= (~mask); // Set pin as analog input
0256 EB        1219            mov     a,r3
0257 F4        1220            cpl     a
0258 FA        1221            mov     r2,a
0259 52F1      1222            anl     _P0MDIN,a
025B           1223   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:315: P0SKIP |= mask; // Skip Crossbar decoding for this pin
025B EB        1224            mov     a,r3
025C 42D4      1225            orl     _P0SKIP,a
025E           1226   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:316: break;
025E           1227   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:317: case 1:
025E 8001      1228            sjmp    L011005?
0260           1229   L011002?:
0260           1230   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:318: P1MDIN &= (~mask); // Set pin as analog input
0260 EB        1231            mov     a,r3
0261 F4        1232            cpl     a
0262 FA        1233            mov     r2,a
0263 52F2      1234            anl     _P1MDIN,a
0265           1235   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:319: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0265 EB        1236            mov     a,r3
0266 42D5      1237            orl     _P1SKIP,a
0268           1238   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:320: break;
0268           1239   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:321: case 2:
0268 8001      1240            sjmp    L011005?
026A           1241   L011003?:
026A           1242   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:322: P2MDIN &= (~mask); // Set pin as analog input
026A EB        1243            mov     a,r3
026B F4        1244            cpl     a
026C FA        1245            mov     r2,a
026D 52F3      1246            anl     _P2MDIN,a
026F           1247   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:323: P2SKIP |= mask; // Skip Crossbar decoding for this pin
026F EB        1248            mov     a,r3
0270 42CC      1249            orl     _P2SKIP,a
0272           1250   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:327: }
0272           1251   L011005?:
0272           1252   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:328: SFRPAGE = 0x00;
0272 75A700    1253            mov     _SFRPAGE,#0x00
0275 22        1254            ret
0276           1255   ;------------------------------------------------------------
0276           1256   ;Allocation info for local variables in function 'PWMbackward'
0276           1257   ;------------------------------------------------------------
0276           1258   ;------------------------------------------------------------
0276           1259   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:337: void PWMbackward(void) {
0276           1260   ;        -----------------------------------------
0276           1261   ;         function PWMbackward
0276           1262   ;        -----------------------------------------
0276           1263   _PWMbackward:
0276           1264   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:338: pwmSig1 = 99;
0276 754863    1265            mov     _pwmSig1,#0x63
0279 E4        1266            clr     a
027A F549      1267            mov     (_pwmSig1 + 1),a
027C           1268   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:339: pwmSig2 = 0;
027C           1269   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:341: pwmSig3 = 0;
027C E4        1270            clr     a
027D F508      1271            mov     _pwmSig2,a
027F F509      1272            mov     (_pwmSig2 + 1),a
0281 F5C8      1273            mov     _pwmSig3,a
0283 F5C9      1274            mov     (_pwmSig3 + 1),a
0285           1275   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:342: pwmSig4 =99;
0285 758863    1276            mov     _pwmSig4,#0x63
0288 E4        1277            clr     a
0289 F589      1278            mov     (_pwmSig4 + 1),a
028B           1279   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:344: LEDRED = 1;
028B D287      1280            setb    _P0_7
028D           1281   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:345: LEDGREEN = 1;
028D D286      1282            setb    _P0_6
028F           1283   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:346: LEDWHITE = 1;
028F D290      1284            setb    _P1_0
0291           1285   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:347: printf("Backward\n\r");
0291 7418      1286            mov     a,#__str_0
0293 C0E0      1287            push    acc
0295 74C7      1288            mov     a,#(__str_0 >> 8)
0297 C0E0      1289            push    acc
0299 7480      1290            mov     a,#0x80
029B C0E0      1291            push    acc
029D 120100    1292            lcall   _printf
02A0 1581      1293            dec     sp
02A2 1581      1294            dec     sp
02A4 1581      1295            dec     sp
02A6 22        1296            ret
02A7           1297   ;------------------------------------------------------------
02A7           1298   ;Allocation info for local variables in function 'PWMforward'
02A7           1299   ;------------------------------------------------------------
02A7           1300   ;------------------------------------------------------------
02A7           1301   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:350: void PWMforward(void) {
02A7           1302   ;        -----------------------------------------
02A7           1303   ;         function PWMforward
02A7           1304   ;        -----------------------------------------
02A7           1305   _PWMforward:
02A7           1306   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:351: pwmSig1 = 0;
02A7 E4        1307            clr     a
02A8 F548      1308            mov     _pwmSig1,a
02AA F549      1309            mov     (_pwmSig1 + 1),a
02AC           1310   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:352: pwmSig2 = 99;
02AC 750863    1311            mov     _pwmSig2,#0x63
02AF E4        1312            clr     a
02B0 F509      1313            mov     (_pwmSig2 + 1),a
02B2           1314   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:354: pwmSig3 = 99;
02B2 75C863    1315            mov     _pwmSig3,#0x63
02B5 E4        1316            clr     a
02B6 F5C9      1317            mov     (_pwmSig3 + 1),a
02B8           1318   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:355: pwmSig4 = 0;
02B8 E4        1319            clr     a
02B9 F588      1320            mov     _pwmSig4,a
02BB F589      1321            mov     (_pwmSig4 + 1),a
02BD           1322   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:357: LEDRED = 1;
02BD D287      1323            setb    _P0_7
02BF           1324   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:358: LEDGREEN = 1;
02BF D286      1325            setb    _P0_6
02C1           1326   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:359: LEDWHITE = 0;
02C1 C290      1327            clr     _P1_0
02C3           1328   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:360: printf("Forward\n\r");
02C3 7498      1329            mov     a,#__str_1
02C5 C0E0      1330            push    acc
02C7 74C7      1331            mov     a,#(__str_1 >> 8)
02C9 C0E0      1332            push    acc
02CB 7480      1333            mov     a,#0x80
02CD C0E0      1334            push    acc
02CF 120100    1335            lcall   _printf
02D2 1581      1336            dec     sp
02D4 1581      1337            dec     sp
02D6 1581      1338            dec     sp
02D8 22        1339            ret
02D9           1340   ;------------------------------------------------------------
02D9           1341   ;Allocation info for local variables in function 'PWMRight'
02D9           1342   ;------------------------------------------------------------
02D9           1343   ;------------------------------------------------------------
02D9           1344   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:363: void PWMRight(void) {
02D9           1345   ;        -----------------------------------------
02D9           1346   ;         function PWMRight
02D9           1347   ;        -----------------------------------------
02D9           1348   _PWMRight:
02D9           1349   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:364: pwmSig1 = 0;
02D9 E4        1350            clr     a
02DA F548      1351            mov     _pwmSig1,a
02DC F549      1352            mov     (_pwmSig1 + 1),a
02DE           1353   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:365: pwmSig2 = 99;
02DE 750863    1354            mov     _pwmSig2,#0x63
02E1 E4        1355            clr     a
02E2 F509      1356            mov     (_pwmSig2 + 1),a
02E4           1357   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:367: pwmSig3 = 0;
02E4 E4        1358            clr     a
02E5 F5C8      1359            mov     _pwmSig3,a
02E7 F5C9      1360            mov     (_pwmSig3 + 1),a
02E9           1361   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:368: pwmSig4 = 99;
02E9 758863    1362            mov     _pwmSig4,#0x63
02EC E4        1363            clr     a
02ED F589      1364            mov     (_pwmSig4 + 1),a
02EF           1365   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:370: LEDRED = 1;
02EF D287      1366            setb    _P0_7
02F1           1367   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:371: LEDGREEN = 0;
02F1 C286      1368            clr     _P0_6
02F3           1369   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:372: LEDWHITE = 1;
02F3 D290      1370            setb    _P1_0
02F5           1371   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:374: printf("Right\n\r");
02F5 74D8      1372            mov     a,#__str_2
02F7 C0E0      1373            push    acc
02F9 74C7      1374            mov     a,#(__str_2 >> 8)
02FB C0E0      1375            push    acc
02FD 7480      1376            mov     a,#0x80
02FF C0E0      1377            push    acc
0301 120100    1378            lcall   _printf
0304 1581      1379            dec     sp
0306 1581      1380            dec     sp
0308 1581      1381            dec     sp
030A 22        1382            ret
030B           1383   ;------------------------------------------------------------
030B           1384   ;Allocation info for local variables in function 'PWMLeft'
030B           1385   ;------------------------------------------------------------
030B           1386   ;------------------------------------------------------------
030B           1387   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:377: void PWMLeft(void) {
030B           1388   ;        -----------------------------------------
030B           1389   ;         function PWMLeft
030B           1390   ;        -----------------------------------------
030B           1391   _PWMLeft:
030B           1392   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:378: pwmSig1 = 99;
030B 754863    1393            mov     _pwmSig1,#0x63
030E E4        1394            clr     a
030F F549      1395            mov     (_pwmSig1 + 1),a
0311           1396   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:379: pwmSig2 = 0;
0311 E4        1397            clr     a
0312 F508      1398            mov     _pwmSig2,a
0314 F509      1399            mov     (_pwmSig2 + 1),a
0316           1400   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:381: pwmSig3 = 99;
0316 75C863    1401            mov     _pwmSig3,#0x63
0319 E4        1402            clr     a
031A F5C9      1403            mov     (_pwmSig3 + 1),a
031C           1404   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:382: pwmSig4 = 0;
031C E4        1405            clr     a
031D F588      1406            mov     _pwmSig4,a
031F F589      1407            mov     (_pwmSig4 + 1),a
0321           1408   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:384: LEDRED = 1;
0321 D287      1409            setb    _P0_7
0323           1410   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:385: LEDGREEN = 0;
0323 C286      1411            clr     _P0_6
0325           1412   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:386: LEDWHITE = 1;
0325 D290      1413            setb    _P1_0
0327           1414   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:388: printf("Left\n\r");
0327 7418      1415            mov     a,#__str_3
0329 C0E0      1416            push    acc
032B 74C8      1417            mov     a,#(__str_3 >> 8)
032D C0E0      1418            push    acc
032F 7480      1419            mov     a,#0x80
0331 C0E0      1420            push    acc
0333 120100    1421            lcall   _printf
0336 1581      1422            dec     sp
0338 1581      1423            dec     sp
033A 1581      1424            dec     sp
033C 22        1425            ret
033D           1426   ;------------------------------------------------------------
033D           1427   ;Allocation info for local variables in function 'PWMbackwardM'
033D           1428   ;------------------------------------------------------------
033D           1429   ;------------------------------------------------------------
033D           1430   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:391: void PWMbackwardM(void) {
033D           1431   ;        -----------------------------------------
033D           1432   ;         function PWMbackwardM
033D           1433   ;        -----------------------------------------
033D           1434   _PWMbackwardM:
033D           1435   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:392: pwmSig1 = 50;
033D 754832    1436            mov     _pwmSig1,#0x32
0340 E4        1437            clr     a
0341 F549      1438            mov     (_pwmSig1 + 1),a
0343           1439   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:393: pwmSig2 = 0;
0343           1440   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:395: pwmSig3 = 0;
0343 E4        1441            clr     a
0344 F508      1442            mov     _pwmSig2,a
0346 F509      1443            mov     (_pwmSig2 + 1),a
0348 F5C8      1444            mov     _pwmSig3,a
034A F5C9      1445            mov     (_pwmSig3 + 1),a
034C           1446   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:396: pwmSig4 =50;
034C 758832    1447            mov     _pwmSig4,#0x32
034F E4        1448            clr     a
0350 F589      1449            mov     (_pwmSig4 + 1),a
0352           1450   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:398: LEDRED = 1;
0352 D287      1451            setb    _P0_7
0354           1452   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:399: LEDGREEN = 1;
0354 D286      1453            setb    _P0_6
0356           1454   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:400: LEDWHITE = 1;
0356 D290      1455            setb    _P1_0
0358           1456   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:401: printf("Backward\n\r");
0358 7418      1457            mov     a,#__str_0
035A C0E0      1458            push    acc
035C 74C7      1459            mov     a,#(__str_0 >> 8)
035E C0E0      1460            push    acc
0360 7480      1461            mov     a,#0x80
0362 C0E0      1462            push    acc
0364 120100    1463            lcall   _printf
0367 1581      1464            dec     sp
0369 1581      1465            dec     sp
036B 1581      1466            dec     sp
036D 22        1467            ret
036E           1468   ;------------------------------------------------------------
036E           1469   ;Allocation info for local variables in function 'PWMforwardM'
036E           1470   ;------------------------------------------------------------
036E           1471   ;------------------------------------------------------------
036E           1472   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:404: void PWMforwardM(void) {
036E           1473   ;        -----------------------------------------
036E           1474   ;         function PWMforwardM
036E           1475   ;        -----------------------------------------
036E           1476   _PWMforwardM:
036E           1477   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:405: pwmSig1 = 0;
036E E4        1478            clr     a
036F F548      1479            mov     _pwmSig1,a
0371 F549      1480            mov     (_pwmSig1 + 1),a
0373           1481   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:406: pwmSig2 = 50;
0373 750832    1482            mov     _pwmSig2,#0x32
0376 E4        1483            clr     a
0377 F509      1484            mov     (_pwmSig2 + 1),a
0379           1485   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:408: pwmSig3 = 50;
0379 75C832    1486            mov     _pwmSig3,#0x32
037C E4        1487            clr     a
037D F5C9      1488            mov     (_pwmSig3 + 1),a
037F           1489   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:409: pwmSig4 = 0;
037F E4        1490            clr     a
0380 F588      1491            mov     _pwmSig4,a
0382 F589      1492            mov     (_pwmSig4 + 1),a
0384           1493   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:411: LEDRED = 1;
0384 D287      1494            setb    _P0_7
0386           1495   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:412: LEDGREEN = 1;
0386 D286      1496            setb    _P0_6
0388           1497   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:413: LEDWHITE = 0;
0388 C290      1498            clr     _P1_0
038A           1499   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:414: printf("Forward\n\r");
038A 7498      1500            mov     a,#__str_1
038C C0E0      1501            push    acc
038E 74C7      1502            mov     a,#(__str_1 >> 8)
0390 C0E0      1503            push    acc
0392 7480      1504            mov     a,#0x80
0394 C0E0      1505            push    acc
0396 120100    1506            lcall   _printf
0399 1581      1507            dec     sp
039B 1581      1508            dec     sp
039D 1581      1509            dec     sp
039F 22        1510            ret
03A0           1511   ;------------------------------------------------------------
03A0           1512   ;Allocation info for local variables in function 'PWMRightM'
03A0           1513   ;------------------------------------------------------------
03A0           1514   ;------------------------------------------------------------
03A0           1515   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:417: void PWMRightM(void) {
03A0           1516   ;        -----------------------------------------
03A0           1517   ;         function PWMRightM
03A0           1518   ;        -----------------------------------------
03A0           1519   _PWMRightM:
03A0           1520   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:418: pwmSig1 = 0;
03A0 E4        1521            clr     a
03A1 F548      1522            mov     _pwmSig1,a
03A3 F549      1523            mov     (_pwmSig1 + 1),a
03A5           1524   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:419: pwmSig2 = 50;
03A5 750832    1525            mov     _pwmSig2,#0x32
03A8 E4        1526            clr     a
03A9 F509      1527            mov     (_pwmSig2 + 1),a
03AB           1528   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:421: pwmSig3 = 0;
03AB E4        1529            clr     a
03AC F5C8      1530            mov     _pwmSig3,a
03AE F5C9      1531            mov     (_pwmSig3 + 1),a
03B0           1532   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:422: pwmSig4 = 50;
03B0 758832    1533            mov     _pwmSig4,#0x32
03B3 E4        1534            clr     a
03B4 F589      1535            mov     (_pwmSig4 + 1),a
03B6           1536   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:424: LEDRED = 1;
03B6 D287      1537            setb    _P0_7
03B8           1538   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:425: LEDGREEN = 0;
03B8 C286      1539            clr     _P0_6
03BA           1540   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:426: LEDWHITE = 1;
03BA D290      1541            setb    _P1_0
03BC           1542   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:428: printf("Right\n\r");
03BC 74D8      1543            mov     a,#__str_2
03BE C0E0      1544            push    acc
03C0 74C7      1545            mov     a,#(__str_2 >> 8)
03C2 C0E0      1546            push    acc
03C4 7480      1547            mov     a,#0x80
03C6 C0E0      1548            push    acc
03C8 120100    1549            lcall   _printf
03CB 1581      1550            dec     sp
03CD 1581      1551            dec     sp
03CF 1581      1552            dec     sp
03D1 22        1553            ret
03D2           1554   ;------------------------------------------------------------
03D2           1555   ;Allocation info for local variables in function 'PWMLeftM'
03D2           1556   ;------------------------------------------------------------
03D2           1557   ;------------------------------------------------------------
03D2           1558   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:431: void PWMLeftM(void) {
03D2           1559   ;        -----------------------------------------
03D2           1560   ;         function PWMLeftM
03D2           1561   ;        -----------------------------------------
03D2           1562   _PWMLeftM:
03D2           1563   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:432: pwmSig1 = 50;
03D2 754832    1564            mov     _pwmSig1,#0x32
03D5 E4        1565            clr     a
03D6 F549      1566            mov     (_pwmSig1 + 1),a
03D8           1567   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:433: pwmSig2 = 0;
03D8 E4        1568            clr     a
03D9 F508      1569            mov     _pwmSig2,a
03DB F509      1570            mov     (_pwmSig2 + 1),a
03DD           1571   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:435: pwmSig3 = 50;
03DD 75C832    1572            mov     _pwmSig3,#0x32
03E0 E4        1573            clr     a
03E1 F5C9      1574            mov     (_pwmSig3 + 1),a
03E3           1575   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:436: pwmSig4 = 0;
03E3 E4        1576            clr     a
03E4 F588      1577            mov     _pwmSig4,a
03E6 F589      1578            mov     (_pwmSig4 + 1),a
03E8           1579   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:438: LEDRED = 1;
03E8 D287      1580            setb    _P0_7
03EA           1581   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:439: LEDGREEN = 0;
03EA C286      1582            clr     _P0_6
03EC           1583   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:440: LEDWHITE = 1;
03EC D290      1584            setb    _P1_0
03EE           1585   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:442: printf("Left\n\r");
03EE 7418      1586            mov     a,#__str_3
03F0 C0E0      1587            push    acc
03F2 74C8      1588            mov     a,#(__str_3 >> 8)
03F4 C0E0      1589            push    acc
03F6 7480      1590            mov     a,#0x80
03F8 C0E0      1591            push    acc
03FA 120100    1592            lcall   _printf
03FD 1581      1593            dec     sp
03FF 1581      1594            dec     sp
0401 1581      1595            dec     sp
0403 22        1596            ret
0404           1597   ;------------------------------------------------------------
0404           1598   ;Allocation info for local variables in function 'PWMStop'
0404           1599   ;------------------------------------------------------------
0404           1600   ;------------------------------------------------------------
0404           1601   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:445: void PWMStop(void) {
0404           1602   ;        -----------------------------------------
0404           1603   ;         function PWMStop
0404           1604   ;        -----------------------------------------
0404           1605   _PWMStop:
0404           1606   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:446: pwmSig1 = 0;
0404           1607   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:447: pwmSig2 = 0;
0404           1608   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:449: pwmSig3 = 0;
0404           1609   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:450: pwmSig4 = 0;
0404 E4        1610            clr     a
0405 F548      1611            mov     _pwmSig1,a
0407 F549      1612            mov     (_pwmSig1 + 1),a
0409 F508      1613            mov     _pwmSig2,a
040B F509      1614            mov     (_pwmSig2 + 1),a
040D F5C8      1615            mov     _pwmSig3,a
040F F5C9      1616            mov     (_pwmSig3 + 1),a
0411 F588      1617            mov     _pwmSig4,a
0413 F589      1618            mov     (_pwmSig4 + 1),a
0415           1619   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:452: LEDRED = 0;
0415 C287      1620            clr     _P0_7
0417           1621   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:453: LEDGREEN = 1;
0417 D286      1622            setb    _P0_6
0419           1623   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:454: LEDWHITE = 1;
0419 D290      1624            setb    _P1_0
041B           1625   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:456: printf("Stop\n\r");
041B 7458      1626            mov     a,#__str_4
041D C0E0      1627            push    acc
041F 74C8      1628            mov     a,#(__str_4 >> 8)
0421 C0E0      1629            push    acc
0423 7480      1630            mov     a,#0x80
0425 C0E0      1631            push    acc
0427 120100    1632            lcall   _printf
042A 1581      1633            dec     sp
042C 1581      1634            dec     sp
042E 1581      1635            dec     sp
0430 22        1636            ret
0431           1637   ;------------------------------------------------------------
0431           1638   ;Allocation info for local variables in function 'periodcalc'
0431           1639   ;------------------------------------------------------------
0431           1640   ;period1                   Allocated to registers r2 r3 r4 r5 
0431           1641   ;overflow_count            Allocated to registers r2 r3 
0431           1642   ;------------------------------------------------------------
0431           1643   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:459: float periodcalc(void) {
0431           1644   ;        -----------------------------------------
0431           1645   ;         function periodcalc
0431           1646   ;        -----------------------------------------
0431           1647   _periodcalc:
0431           1648   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:463: TL0=0; 
0431 758A00    1649            mov     _TL0,#0x00
0434           1650   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:464: TH0=0;
0434 758C00    1651            mov     _TH0,#0x00
0437           1652   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:465: TF0=0;
0437 C28D      1653            clr     _TF0
0439           1654   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:467: TR0=0;
0439 C28C      1655            clr     _TR0
043B           1656   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:469: while(P1_6!=0); // Wait for the signal to be zero
043B           1657   L021001?:
043B 209698    1658            jb      _P1_6,L021001?
043E           1659   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:470: while(P1_6!=1); // Wait for the signal to be one
043E           1660   L021004?:
043E 3096D8    1661            jnb     _P1_6,L021004?
0441           1662   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:471: TR0=1; // Start the timer
0441 D28C      1663            setb    _TR0
0443           1664   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:472: while(P1_6!=0) // Wait for the signal to be zero
0443 7A00      1665            mov     r2,#0x00
0445 7B00      1666            mov     r3,#0x00
0447           1667   L021009?:
0447 309658    1668            jnb     _P1_6,L021026?
044A           1669   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:474: if(TF0==1) // Did the 16-bit timer overflow?
044A           1670   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:476: TF0=0;
044A 108D98    1671            jbc     _TF0,L021033?
044D 8001      1672            sjmp    L021009?
044F           1673   L021033?:
044F           1674   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:477: overflow_count++;
044F 0A        1675            inc     r2
0450 BA0018    1676            cjne    r2,#0x00,L021009?
0453 0B        1677            inc     r3
0454           1678   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:481: while(P1_6!=1) // Wait for the signal to be zero
0454 8001      1679            sjmp    L021009?
0456           1680   L021026?:
0456           1681   L021014?:
0456 209618    1682            jb      _P1_6,L021016?
0459           1683   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:483: if(TF0==1) // Did the 16-bit timer overflow?
0459           1684   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:485: TF0=0;
0459 108D58    1685            jbc     _TF0,L021035?
045C 8001      1686            sjmp    L021014?
045E           1687   L021035?:
045E           1688   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:486: overflow_count++;
045E 0A        1689            inc     r2
045F BA00D8    1690            cjne    r2,#0x00,L021014?
0462 0B        1691            inc     r3
0463 8001      1692            sjmp    L021014?
0465           1693   L021016?:
0465           1694   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:491: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0465 C28C      1695            clr     _TR0
0467           1696   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:492: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0467 8A82      1697            mov     dpl,r2
0469 8B83      1698            mov     dph,r3
046B 120100    1699            lcall   ___sint2fs
046E AA82      1700            mov     r2,dpl
0470 AB83      1701            mov     r3,dph
0472 ACF0      1702            mov     r4,b
0474 FD        1703            mov     r5,a
0475 C002      1704            push    ar2
0477 C003      1705            push    ar3
0479 C004      1706            push    ar4
047B C005      1707            push    ar5
047D 900000    1708            mov     dptr,#0x0000
0480 75F080    1709            mov     b,#0x80
0483 7447      1710            mov     a,#0x47
0485 120100    1711            lcall   ___fsmul
0488 AA82      1712            mov     r2,dpl
048A AB83      1713            mov     r3,dph
048C ACF0      1714            mov     r4,b
048E FD        1715            mov     r5,a
048F E581      1716            mov     a,sp
0491 24FC      1717            add     a,#0xfc
0493 F581      1718            mov     sp,a
0495 858C82    1719            mov     dpl,_TH0
0498 C002      1720            push    ar2
049A C003      1721            push    ar3
049C C004      1722            push    ar4
049E C005      1723            push    ar5
04A0 120100    1724            lcall   ___uchar2fs
04A3 AE82      1725            mov     r6,dpl
04A5 AF83      1726            mov     r7,dph
04A7 A8F0      1727            mov     r0,b
04A9 F9        1728            mov     r1,a
04AA C006      1729            push    ar6
04AC C007      1730            push    ar7
04AE C000      1731            push    ar0
04B0 C001      1732            push    ar1
04B2 900000    1733            mov     dptr,#0x0000
04B5 75F080    1734            mov     b,#0x80
04B8 7443      1735            mov     a,#0x43
04BA 120100    1736            lcall   ___fsmul
04BD AE82      1737            mov     r6,dpl
04BF AF83      1738            mov     r7,dph
04C1 A8F0      1739            mov     r0,b
04C3 F9        1740            mov     r1,a
04C4 E581      1741            mov     a,sp
04C6 24FC      1742            add     a,#0xfc
04C8 F581      1743            mov     sp,a
04CA D005      1744            pop     ar5
04CC D004      1745            pop     ar4
04CE D003      1746            pop     ar3
04D0 D002      1747            pop     ar2
04D2 C006      1748            push    ar6
04D4 C007      1749            push    ar7
04D6 C000      1750            push    ar0
04D8 C001      1751            push    ar1
04DA 8A82      1752            mov     dpl,r2
04DC 8B83      1753            mov     dph,r3
04DE 8CF0      1754            mov     b,r4
04E0 ED        1755            mov     a,r5
04E1 120100    1756            lcall   ___fsadd
04E4 AA82      1757            mov     r2,dpl
04E6 AB83      1758            mov     r3,dph
04E8 ACF0      1759            mov     r4,b
04EA FD        1760            mov     r5,a
04EB E581      1761            mov     a,sp
04ED 24FC      1762            add     a,#0xfc
04EF F581      1763            mov     sp,a
04F1 AE8A      1764            mov     r6,_TL0
04F3 7F00      1765            mov     r7,#0x00
04F5 8E82      1766            mov     dpl,r6
04F7 8F83      1767            mov     dph,r7
04F9 C002      1768            push    ar2
04FB C003      1769            push    ar3
04FD C004      1770            push    ar4
04FF C005      1771            push    ar5
0501 120100    1772            lcall   ___sint2fs
0504 AE82      1773            mov     r6,dpl
0506 AF83      1774            mov     r7,dph
0508 A8F0      1775            mov     r0,b
050A F9        1776            mov     r1,a
050B D005      1777            pop     ar5
050D D004      1778            pop     ar4
050F D003      1779            pop     ar3
0511 D002      1780            pop     ar2
0513 C006      1781            push    ar6
0515 C007      1782            push    ar7
0517 C000      1783            push    ar0
0519 C001      1784            push    ar1
051B 8A82      1785            mov     dpl,r2
051D 8B83      1786            mov     dph,r3
051F 8CF0      1787            mov     b,r4
0521 ED        1788            mov     a,r5
0522 120100    1789            lcall   ___fsadd
0525 AA82      1790            mov     r2,dpl
0527 AB83      1791            mov     r3,dph
0529 ACF0      1792            mov     r4,b
052B FD        1793            mov     r5,a
052C E581      1794            mov     a,sp
052E 24FC      1795            add     a,#0xfc
0530 F581      1796            mov     sp,a
0532 C002      1797            push    ar2
0534 C003      1798            push    ar3
0536 C004      1799            push    ar4
0538 C005      1800            push    ar5
053A 90F4FC    1801            mov     dptr,#0xF4FC
053D 75F032    1802            mov     b,#0x32
0540 7434      1803            mov     a,#0x34
0542 120100    1804            lcall   ___fsmul
0545 AA82      1805            mov     r2,dpl
0547 AB83      1806            mov     r3,dph
0549 ACF0      1807            mov     r4,b
054B FD        1808            mov     r5,a
054C E581      1809            mov     a,sp
054E 24FC      1810            add     a,#0xfc
0550 F581      1811            mov     sp,a
0552           1812   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:493: printf("%f\n\r", period1);
0552 C002      1813            push    ar2
0554 C003      1814            push    ar3
0556 C004      1815            push    ar4
0558 C005      1816            push    ar5
055A C002      1817            push    ar2
055C C003      1818            push    ar3
055E C004      1819            push    ar4
0560 C005      1820            push    ar5
0562 7458      1821            mov     a,#__str_5
0564 C0E0      1822            push    acc
0566 74CB      1823            mov     a,#(__str_5 >> 8)
0568 C0E0      1824            push    acc
056A 7480      1825            mov     a,#0x80
056C C0E0      1826            push    acc
056E 120100    1827            lcall   _printf
0571 E581      1828            mov     a,sp
0573 24F9      1829            add     a,#0xf9
0575 F581      1830            mov     sp,a
0577           1831   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:494: return period1*1000; //return period of high pulse in seconds
0577 900000    1832            mov     dptr,#0x0000
057A 75F07A    1833            mov     b,#0x7A
057D 7444      1834            mov     a,#0x44
057F 120100    1835            lcall   ___fsmul
0582 AA82      1836            mov     r2,dpl
0584 AB83      1837            mov     r3,dph
0586 ACF0      1838            mov     r4,b
0588 FD        1839            mov     r5,a
0589 E581      1840            mov     a,sp
058B 24FC      1841            add     a,#0xfc
058D F581      1842            mov     sp,a
058F 8A82      1843            mov     dpl,r2
0591 8B83      1844            mov     dph,r3
0593 8CF0      1845            mov     b,r4
0595 ED        1846            mov     a,r5
0596 22        1847            ret
0597           1848   ;------------------------------------------------------------
0597           1849   ;Allocation info for local variables in function 'arrayEqual'
0597           1850   ;------------------------------------------------------------
0597           1851   ;size                      Allocated with name '_arrayEqual_PARM_2'
0597           1852   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
0597           1853   ;arr1                      Allocated with name '_arrayEqual_arr1_1_88'
0597           1854   ;i                         Allocated to registers r5 r6 
0597           1855   ;------------------------------------------------------------
0597           1856   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:499: int arrayEqual (int arr1[], int size, int arr2[]){
0597           1857   ;        -----------------------------------------
0597           1858   ;         function arrayEqual
0597           1859   ;        -----------------------------------------
0597           1860   _arrayEqual:
0597 858238    1861            mov     _arrayEqual_arr1_1_88,dpl
059A 858339    1862            mov     (_arrayEqual_arr1_1_88 + 1),dph
059D 85F03A    1863            mov     (_arrayEqual_arr1_1_88 + 2),b
05A0           1864   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:501: for(i=0; i<size; i++){
05A0 7D00      1865            mov     r5,#0x00
05A2 7E00      1866            mov     r6,#0x00
05A4           1867   L022003?:
05A4 C3        1868            clr     c
05A5 ED        1869            mov     a,r5
05A6 95A0      1870            subb    a,_arrayEqual_PARM_2
05A8 EE        1871            mov     a,r6
05A9 6480      1872            xrl     a,#0x80
05AB 85A1F0    1873            mov     b,(_arrayEqual_PARM_2 + 1)
05AE 63F080    1874            xrl     b,#0x80
05B1 95F0      1875            subb    a,b
05B3 5001      1876            jnc     L022006?
05B5           1877   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:502: if(arr1[i]!=arr2[i])
05B5 8D07      1878            mov     ar7,r5
05B7 EE        1879            mov     a,r6
05B8 CF        1880            xch     a,r7
05B9 25E0      1881            add     a,acc
05BB CF        1882            xch     a,r7
05BC 33        1883            rlc     a
05BD F8        1884            mov     r0,a
05BE EF        1885            mov     a,r7
05BF 2538      1886            add     a,_arrayEqual_arr1_1_88
05C1 F9        1887            mov     r1,a
05C2 E8        1888            mov     a,r0
05C3 3539      1889            addc    a,(_arrayEqual_arr1_1_88 + 1)
05C5 FA        1890            mov     r2,a
05C6 AB3A      1891            mov     r3,(_arrayEqual_arr1_1_88 + 2)
05C8 8982      1892            mov     dpl,r1
05CA 8A83      1893            mov     dph,r2
05CC 8BF0      1894            mov     b,r3
05CE 120100    1895            lcall   __gptrget
05D1 F9        1896            mov     r1,a
05D2 A3        1897            inc     dptr
05D3 120100    1898            lcall   __gptrget
05D6 FA        1899            mov     r2,a
05D7 EF        1900            mov     a,r7
05D8 2550      1901            add     a,_arrayEqual_PARM_3
05DA FF        1902            mov     r7,a
05DB E8        1903            mov     a,r0
05DC 3551      1904            addc    a,(_arrayEqual_PARM_3 + 1)
05DE F8        1905            mov     r0,a
05DF AB52      1906            mov     r3,(_arrayEqual_PARM_3 + 2)
05E1 8F82      1907            mov     dpl,r7
05E3 8883      1908            mov     dph,r0
05E5 8BF0      1909            mov     b,r3
05E7 120100    1910            lcall   __gptrget
05EA FF        1911            mov     r7,a
05EB A3        1912            inc     dptr
05EC 120100    1913            lcall   __gptrget
05EF F8        1914            mov     r0,a
05F0 E9        1915            mov     a,r1
05F1 B50758    1916            cjne    a,ar7,L022013?
05F4 EA        1917            mov     a,r2
05F5 B50058    1918            cjne    a,ar0,L022013?
05F8 8001      1919            sjmp    L022005?
05FA           1920   L022013?:
05FA           1921   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:503: return 0; 
05FA 900000    1922            mov     dptr,#0x0000
05FD 22        1923            ret
05FE           1924   L022005?:
05FE           1925   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:501: for(i=0; i<size; i++){
05FE 0D        1926            inc     r5
05FF BD0098    1927            cjne    r5,#0x00,L022003?
0602 0E        1928            inc     r6
0603 8001      1929            sjmp    L022003?
0605           1930   L022006?:
0605           1931   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:505: return 1; 
0605 900001    1932            mov     dptr,#0x0001
0608 22        1933            ret
0609           1934   ;------------------------------------------------------------
0609           1935   ;Allocation info for local variables in function 'checkCommands'
0609           1936   ;------------------------------------------------------------
0609           1937   ;------------------------------------------------------------
0609           1938   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:511: void checkCommands (void){
0609           1939   ;        -----------------------------------------
0609           1940   ;         function checkCommands
0609           1941   ;        -----------------------------------------
0609           1942   _checkCommands:
0609           1943   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:512: if(arrayEqual(command, 4, stop)) PWMStop();
0609 7550C8    1944            mov     _arrayEqual_PARM_3,#_stop
060C 755100    1945            mov     (_arrayEqual_PARM_3 + 1),#0x00
060F 755240    1946            mov     (_arrayEqual_PARM_3 + 2),#0x40
0612 75A004    1947            mov     _arrayEqual_PARM_2,#0x04
0615 E4        1948            clr     a
0616 F5A1      1949            mov     (_arrayEqual_PARM_2 + 1),a
0618 904B88    1950            mov     dptr,#_command
061B 75F040    1951            mov     b,#0x40
061E 120100    1952            lcall   _arrayEqual
0621 E582      1953            mov     a,dpl
0623 8583F0    1954            mov     b,dph
0626 45F0      1955            orl     a,b
0628 6001      1956            jz      L023014?
062A 120100    1957            lcall   _PWMStop
062D 020100    1958            ljmp    L023015?
0630           1959   L023014?:
0630           1960   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:513: else if (arrayEqual(command,4,forward)) PWMforwardM(); 
0630 755088    1961            mov     _arrayEqual_PARM_3,#_forward
0633 755100    1962            mov     (_arrayEqual_PARM_3 + 1),#0x00
0636 755240    1963            mov     (_arrayEqual_PARM_3 + 2),#0x40
0639 75A004    1964            mov     _arrayEqual_PARM_2,#0x04
063C E4        1965            clr     a
063D F5A1      1966            mov     (_arrayEqual_PARM_2 + 1),a
063F 904B88    1967            mov     dptr,#_command
0642 75F040    1968            mov     b,#0x40
0645 120100    1969            lcall   _arrayEqual
0648 E582      1970            mov     a,dpl
064A 8583F0    1971            mov     b,dph
064D 45F0      1972            orl     a,b
064F 6001      1973            jz      L023011?
0651 120100    1974            lcall   _PWMforwardM
0654 020100    1975            ljmp    L023015?
0657           1976   L023011?:
0657           1977   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:514: else if (arrayEqual(command,4,backward)) PWMbackwardM(); 
0657 755048    1978            mov     _arrayEqual_PARM_3,#_backward
065A 755100    1979            mov     (_arrayEqual_PARM_3 + 1),#0x00
065D 755240    1980            mov     (_arrayEqual_PARM_3 + 2),#0x40
0660 75A004    1981            mov     _arrayEqual_PARM_2,#0x04
0663 E4        1982            clr     a
0664 F5A1      1983            mov     (_arrayEqual_PARM_2 + 1),a
0666 904B88    1984            mov     dptr,#_command
0669 75F040    1985            mov     b,#0x40
066C 120100    1986            lcall   _arrayEqual
066F E582      1987            mov     a,dpl
0671 8583F0    1988            mov     b,dph
0674 45F0      1989            orl     a,b
0676 6001      1990            jz      L023008?
0678 120100    1991            lcall   _PWMbackwardM
067B 8001      1992            sjmp    L023015?
067D           1993   L023008?:
067D           1994   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:515: else if (arrayEqual(command,4, left)) PWMLeftM(); 
067D 755008    1995            mov     _arrayEqual_PARM_3,#_left
0680 755100    1996            mov     (_arrayEqual_PARM_3 + 1),#0x00
0683 755240    1997            mov     (_arrayEqual_PARM_3 + 2),#0x40
0686 75A004    1998            mov     _arrayEqual_PARM_2,#0x04
0689 E4        1999            clr     a
068A F5A1      2000            mov     (_arrayEqual_PARM_2 + 1),a
068C 904B88    2001            mov     dptr,#_command
068F 75F040    2002            mov     b,#0x40
0692 120100    2003            lcall   _arrayEqual
0695 E582      2004            mov     a,dpl
0697 8583F0    2005            mov     b,dph
069A 45F0      2006            orl     a,b
069C 6001      2007            jz      L023005?
069E 120100    2008            lcall   _PWMLeftM
06A1 8001      2009            sjmp    L023015?
06A3           2010   L023005?:
06A3           2011   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:516: else if (arrayEqual(command,4, right)) PWMRightM(); 
06A3 7550C8    2012            mov     _arrayEqual_PARM_3,#_right
06A6 755100    2013            mov     (_arrayEqual_PARM_3 + 1),#0x00
06A9 755240    2014            mov     (_arrayEqual_PARM_3 + 2),#0x40
06AC 75A004    2015            mov     _arrayEqual_PARM_2,#0x04
06AF E4        2016            clr     a
06B0 F5A1      2017            mov     (_arrayEqual_PARM_2 + 1),a
06B2 904B88    2018            mov     dptr,#_command
06B5 75F040    2019            mov     b,#0x40
06B8 120100    2020            lcall   _arrayEqual
06BB E582      2021            mov     a,dpl
06BD 8583F0    2022            mov     b,dph
06C0 45F0      2023            orl     a,b
06C2 6001      2024            jz      L023002?
06C4 120100    2025            lcall   _PWMRightM
06C7 8001      2026            sjmp    L023015?
06C9           2027   L023002?:
06C9           2028   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:517: else PWMStop(); //defaults to a halt (redundant)
06C9 120100    2029            lcall   _PWMStop
06CC           2030   L023015?:
06CC           2031   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:518: waitms(350);
06CC 90015E    2032            mov     dptr,#0x015E
06CF 020100    2033            ljmp    _waitms
06D2           2034   ;------------------------------------------------------------
06D2           2035   ;Allocation info for local variables in function 'voltsAtPeak'
06D2           2036   ;------------------------------------------------------------
06D2           2037   ;------------------------------------------------------------
06D2           2038   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:524: float voltsAtPeak(void) {
06D2           2039   ;        -----------------------------------------
06D2           2040   ;         function voltsAtPeak
06D2           2041   ;        -----------------------------------------
06D2           2042   _voltsAtPeak:
06D2           2043   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:526: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
06D2           2044   L024001?:
06D2 75820C    2045            mov     dpl,#0x0C
06D5 120100    2046            lcall   _ADC_at_Pin
06D8 E582      2047            mov     a,dpl
06DA 8583F0    2048            mov     b,dph
06DD 45F0      2049            orl     a,b
06DF 6001      2050            jz      L024001?
06E1           2051   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:527: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
06E1 900000    2052            mov     dptr,#0x0000
06E4 120100    2053            lcall   _Timer3us
06E7           2054   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:528: return(Volts_at_Pin(QFP32_MUX_P1_6));
06E7 75820C    2055            mov     dpl,#0x0C
06EA 020100    2056            ljmp    _Volts_at_Pin
06ED           2057   ;------------------------------------------------------------
06ED           2058   ;Allocation info for local variables in function 'getDigitalSignal'
06ED           2059   ;------------------------------------------------------------
06ED           2060   ;------------------------------------------------------------
06ED           2061   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:541: int getDigitalSignal (void){
06ED           2062   ;        -----------------------------------------
06ED           2063   ;         function getDigitalSignal
06ED           2064   ;        -----------------------------------------
06ED           2065   _getDigitalSignal:
06ED           2066   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:543: if (Volts_at_Pin(QFP32_MUX_P2_3)>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
06ED 758210    2067            mov     dpl,#0x10
06F0 120100    2068            lcall   _Volts_at_Pin
06F3 AA82      2069            mov     r2,dpl
06F5 AB83      2070            mov     r3,dph
06F7 ACF0      2071            mov     r4,b
06F9 FD        2072            mov     r5,a
06FA 7466      2073            mov     a,#0x66
06FC C0E0      2074            push    acc
06FE C0E0      2075            push    acc
0700 74A6      2076            mov     a,#0xA6
0702 C0E0      2077            push    acc
0704 743F      2078            mov     a,#0x3F
0706 C0E0      2079            push    acc
0708 8A82      2080            mov     dpl,r2
070A 8B83      2081            mov     dph,r3
070C 8CF0      2082            mov     b,r4
070E ED        2083            mov     a,r5
070F 120100    2084            lcall   ___fslt
0712 AA82      2085            mov     r2,dpl
0714 E581      2086            mov     a,sp
0716 24FC      2087            add     a,#0xfc
0718 F581      2088            mov     sp,a
071A EA        2089            mov     a,r2
071B 7001      2090            jnz     L025002?
071D           2091   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:545: printf("\nread 1:  at pin 2.3: %f\r", Volts_at_Pin(QFP32_MUX_P2_3));
071D 758210    2092            mov     dpl,#0x10
0720 120100    2093            lcall   _Volts_at_Pin
0723 AA82      2094            mov     r2,dpl
0725 AB83      2095            mov     r3,dph
0727 ACF0      2096            mov     r4,b
0729 FD        2097            mov     r5,a
072A C002      2098            push    ar2
072C C003      2099            push    ar3
072E C004      2100            push    ar4
0730 C005      2101            push    ar5
0732 7418      2102            mov     a,#__str_6
0734 C0E0      2103            push    acc
0736 74CF      2104            mov     a,#(__str_6 >> 8)
0738 C0E0      2105            push    acc
073A 7480      2106            mov     a,#0x80
073C C0E0      2107            push    acc
073E 120100    2108            lcall   _printf
0741 E581      2109            mov     a,sp
0743 24F9      2110            add     a,#0xf9
0745 F581      2111            mov     sp,a
0747           2112   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:546: return 1;
0747 900001    2113            mov     dptr,#0x0001
074A           2114   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:550: return 0; 
074A 22        2115            ret
074B           2116   L025002?:
074B 900000    2117            mov     dptr,#0x0000
074E 22        2118            ret
074F           2119   ;------------------------------------------------------------
074F           2120   ;Allocation info for local variables in function 'waitquarterperiod'
074F           2121   ;------------------------------------------------------------
074F           2122   ;------------------------------------------------------------
074F           2123   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:557: void waitquarterperiod(void){
074F           2124   ;        -----------------------------------------
074F           2125   ;         function waitquarterperiod
074F           2126   ;        -----------------------------------------
074F           2127   _waitquarterperiod:
074F           2128   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:558: waitms(constant_delay_time);
074F 900014    2129            mov     dptr,#0x0014
0752 020100    2130            ljmp    _waitms
0755           2131   ;------------------------------------------------------------
0755           2132   ;Allocation info for local variables in function 'recieveData'
0755           2133   ;------------------------------------------------------------
0755           2134   ;checkcomm                 Allocated to registers 
0755           2135   ;i                         Allocated to registers r2 r3 
0755           2136   ;------------------------------------------------------------
0755           2137   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:564: void recieveData (){
0755           2138   ;        -----------------------------------------
0755           2139   ;         function recieveData
0755           2140   ;        -----------------------------------------
0755           2141   _recieveData:
0755           2142   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:568: while(getDigitalSignal()==0);     //wait for the signal to be 1 
0755           2143   L027001?:
0755 120100    2144            lcall   _getDigitalSignal
0758 E582      2145            mov     a,dpl
075A 8583F0    2146            mov     b,dph
075D 45F0      2147            orl     a,b
075F 6001      2148            jz      L027001?
0761           2149   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:572: waitms(175);      //wait 
0761 9000AF    2150            mov     dptr,#0x00AF
0764 120100    2151            lcall   _waitms
0767           2152   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:573: command[0] = 1;
0767 758801    2153            mov     _command,#0x01
076A 758900    2154            mov     (_command + 1),#0x00
076D           2155   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:575: for( i=1; i<4; i++){
076D 7A01      2156            mov     r2,#0x01
076F 7B00      2157            mov     r3,#0x00
0771           2158   L027004?:
0771 C3        2159            clr     c
0772 EA        2160            mov     a,r2
0773 9404      2161            subb    a,#0x04
0775 EB        2162            mov     a,r3
0776 6480      2163            xrl     a,#0x80
0778 9480      2164            subb    a,#0x80
077A 5001      2165            jnc     L027007?
077C           2166   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:576: waitms(358); //wait for a period
077C 900166    2167            mov     dptr,#0x0166
077F C002      2168            push    ar2
0781 C003      2169            push    ar3
0783 120100    2170            lcall   _waitms
0786 D003      2171            pop     ar3
0788 D002      2172            pop     ar2
078A           2173   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:577: command[i]=getDigitalSignal();    
078A 8A04      2174            mov     ar4,r2
078C EB        2175            mov     a,r3
078D CC        2176            xch     a,r4
078E 25E0      2177            add     a,acc
0790 CC        2178            xch     a,r4
0791 33        2179            rlc     a
0792 EC        2180            mov     a,r4
0793 2488      2181            add     a,#_command
0795 F8        2182            mov     r0,a
0796 C002      2183            push    ar2
0798 C003      2184            push    ar3
079A C000      2185            push    ar0
079C 120100    2186            lcall   _getDigitalSignal
079F E582      2187            mov     a,dpl
07A1 8583F0    2188            mov     b,dph
07A4 D000      2189            pop     ar0
07A6 D003      2190            pop     ar3
07A8 D002      2191            pop     ar2
07AA F6        2192            mov     @r0,a
07AB 08        2193            inc     r0
07AC A6F0      2194            mov     @r0,b
07AE 18        2195            dec     r0
07AF           2196   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:575: for( i=1; i<4; i++){
07AF 0A        2197            inc     r2
07B0 BA0098    2198            cjne    r2,#0x00,L027004?
07B3 0B        2199            inc     r3
07B4 8001      2200            sjmp    L027004?
07B6           2201   L027007?:
07B6           2202   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:580: checkCommands();                          //does activity depending on the command given 
07B6 020100    2203            ljmp    _checkCommands
07B9           2204   ;------------------------------------------------------------
07B9           2205   ;Allocation info for local variables in function 'checkMode'
07B9           2206   ;------------------------------------------------------------
07B9           2207   ;------------------------------------------------------------
07B9           2208   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:589: int checkMode(){
07B9           2209   ;        -----------------------------------------
07B9           2210   ;         function checkMode
07B9           2211   ;        -----------------------------------------
07B9           2212   _checkMode:
07B9           2213   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:590: if(!BUTTON1 || x == 0){
07B9 30B118    2214            jnb     _P3_1,L028001?
07BC E548      2215            mov     a,_x
07BE 4549      2216            orl     a,(_x + 1)
07C0 7001      2217            jnz     L028019?
07C2           2218   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:591: while(!BUTTON1);
07C2           2219   L028001?:
07C2 30B118    2220            jnb     _P3_1,L028001?
07C5           2221   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:592: x= 0;
07C5           2222   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:593: return 0;
07C5 E4        2223            clr     a
07C6 F548      2224            mov     _x,a
07C8 F549      2225            mov     (_x + 1),a
07CA F582      2226            mov     dpl,a
07CC F583      2227            mov     dph,a
07CE 22        2228            ret
07CF           2229   L028019?:
07CF           2230   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:595: else if(!BUTTON2 || x == 1){
07CF 30B398    2231            jnb     _P3_3,L028004?
07D2 7401      2232            mov     a,#0x01
07D4 B548D8    2233            cjne    a,_x,L028037?
07D7 E4        2234            clr     a
07D8 B549D8    2235            cjne    a,(_x + 1),L028037?
07DB 8001      2236            sjmp    L028038?
07DD           2237   L028037?:
07DD 8001      2238            sjmp    L028015?
07DF           2239   L028038?:
07DF           2240   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:596: while(!BUTTON2);
07DF           2241   L028004?:
07DF 30B398    2242            jnb     _P3_3,L028004?
07E2           2243   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:597: x = 1;
07E2 754801    2244            mov     _x,#0x01
07E5 E4        2245            clr     a
07E6 F549      2246            mov     (_x + 1),a
07E8           2247   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:598: return 1;
07E8 900001    2248            mov     dptr,#0x0001
07EB 22        2249            ret
07EC           2250   L028015?:
07EC           2251   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:600: else if(!BUTTON3 || x == 3){
07EC 30B798    2252            jnb     _P3_7,L028007?
07EF 7403      2253            mov     a,#0x03
07F1 B548D8    2254            cjne    a,_x,L028041?
07F4 E4        2255            clr     a
07F5 B549D8    2256            cjne    a,(_x + 1),L028041?
07F8 8001      2257            sjmp    L028042?
07FA           2258   L028041?:
07FA 8001      2259            sjmp    L028011?
07FC           2260   L028042?:
07FC           2261   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:601: while(!BUTTON3);
07FC           2262   L028007?:
07FC 30B798    2263            jnb     _P3_7,L028007?
07FF           2264   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:602: x = 3;
07FF 754803    2265            mov     _x,#0x03
0802 E4        2266            clr     a
0803 F549      2267            mov     (_x + 1),a
0805           2268   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:603: return 3;
0805 900003    2269            mov     dptr,#0x0003
0808 22        2270            ret
0809           2271   L028011?:
0809           2272   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:606: x = 2;
0809 754802    2273            mov     _x,#0x02
080C E4        2274            clr     a
080D F549      2275            mov     (_x + 1),a
080F           2276   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:607: return 2;
080F 900002    2277            mov     dptr,#0x0002
0812 22        2278            ret
0813           2279   ;------------------------------------------------------------
0813           2280   ;Allocation info for local variables in function 'detectobstacle'
0813           2281   ;------------------------------------------------------------
0813           2282   ;threshold                 Allocated to registers r2 r3 r4 r5 
0813           2283   ;------------------------------------------------------------
0813           2284   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:612: void detectobstacle(float threshold){
0813           2285   ;        -----------------------------------------
0813           2286   ;         function detectobstacle
0813           2287   ;        -----------------------------------------
0813           2288   _detectobstacle:
0813 AA82      2289            mov     r2,dpl
0815 AB83      2290            mov     r3,dph
0817 ACF0      2291            mov     r4,b
0819 FD        2292            mov     r5,a
081A           2293   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:623: if(threshold <= 4.0 ){
081A E4        2294            clr     a
081B C0E0      2295            push    acc
081D C0E0      2296            push    acc
081F 7480      2297            mov     a,#0x80
0821 C0E0      2298            push    acc
0823 7440      2299            mov     a,#0x40
0825 C0E0      2300            push    acc
0827 8A82      2301            mov     dpl,r2
0829 8B83      2302            mov     dph,r3
082B 8CF0      2303            mov     b,r4
082D ED        2304            mov     a,r5
082E 120100    2305            lcall   ___fsgt
0831 AA82      2306            mov     r2,dpl
0833 E581      2307            mov     a,sp
0835 24FC      2308            add     a,#0xfc
0837 F581      2309            mov     sp,a
0839 EA        2310            mov     a,r2
083A 7001      2311            jnz     L029002?
083C           2312   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:625: printf("Turn right \r\n");
083C 7418      2313            mov     a,#__str_7
083E C0E0      2314            push    acc
0840 74D3      2315            mov     a,#(__str_7 >> 8)
0842 C0E0      2316            push    acc
0844 7480      2317            mov     a,#0x80
0846 C0E0      2318            push    acc
0848 120100    2319            lcall   _printf
084B 1581      2320            dec     sp
084D 1581      2321            dec     sp
084F 1581      2322            dec     sp
0851           2323   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:626: PWMRight();
0851 120100    2324            lcall   _PWMRight
0854           2325   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:627: waitms(500); //Make waits longer
0854 9001F4    2326            mov     dptr,#0x01F4
0857 120100    2327            lcall   _waitms
085A           2328   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:628: waitms(500); 
085A 9001F4    2329            mov     dptr,#0x01F4
085D 120100    2330            lcall   _waitms
0860           2331   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:629: waitms(300); 
0860 90012C    2332            mov     dptr,#0x012C
0863 120100    2333            lcall   _waitms
0866           2334   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:631: PWMStop();
0866 120100    2335            lcall   _PWMStop
0869           2336   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:632: waitms(500);
0869 9001F4    2337            mov     dptr,#0x01F4
086C 120100    2338            lcall   _waitms
086F           2339   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:633: waitms(250);
086F 9000FA    2340            mov     dptr,#0x00FA
0872 020100    2341            ljmp    _waitms
0875           2342   L029002?:
0875           2343   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:638: printf("Go Straight \r\n");
0875 7458      2344            mov     a,#__str_8
0877 C0E0      2345            push    acc
0879 74D3      2346            mov     a,#(__str_8 >> 8)
087B C0E0      2347            push    acc
087D 7480      2348            mov     a,#0x80
087F C0E0      2349            push    acc
0881 120100    2350            lcall   _printf
0884 1581      2351            dec     sp
0886 1581      2352            dec     sp
0888 1581      2353            dec     sp
088A           2354   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:640: PWMforward();
088A 020100    2355            ljmp    _PWMforward
088D           2356   ;------------------------------------------------------------
088D           2357   ;Allocation info for local variables in function 'laserPattern'
088D           2358   ;------------------------------------------------------------
088D           2359   ;rate                      Allocated to registers r2 r3 r4 r5 
088D           2360   ;------------------------------------------------------------
088D           2361   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:647: void laserPattern(float rate){
088D           2362   ;        -----------------------------------------
088D           2363   ;         function laserPattern
088D           2364   ;        -----------------------------------------
088D           2365   _laserPattern:
088D AA82      2366            mov     r2,dpl
088F AB83      2367            mov     r3,dph
0891 ACF0      2368            mov     r4,b
0893 FD        2369            mov     r5,a
0894           2370   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:648: LASER = 0;
0894 C2B0      2371            clr     _P3_0
0896           2372   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:649: if(rate<0.8)
0896 C002      2373            push    ar2
0898 C003      2374            push    ar3
089A C004      2375            push    ar4
089C C005      2376            push    ar5
089E 74CD      2377            mov     a,#0xCD
08A0 C0E0      2378            push    acc
08A2 74CC      2379            mov     a,#0xCC
08A4 C0E0      2380            push    acc
08A6 744C      2381            mov     a,#0x4C
08A8 C0E0      2382            push    acc
08AA 743F      2383            mov     a,#0x3F
08AC C0E0      2384            push    acc
08AE 8A82      2385            mov     dpl,r2
08B0 8B83      2386            mov     dph,r3
08B2 8CF0      2387            mov     b,r4
08B4 ED        2388            mov     a,r5
08B5 120100    2389            lcall   ___fslt
08B8 AE82      2390            mov     r6,dpl
08BA E581      2391            mov     a,sp
08BC 24FC      2392            add     a,#0xfc
08BE F581      2393            mov     sp,a
08C0 D005      2394            pop     ar5
08C2 D004      2395            pop     ar4
08C4 D003      2396            pop     ar3
08C6 D002      2397            pop     ar2
08C8 EE        2398            mov     a,r6
08C9 6001      2399            jz      L030010?
08CB           2400   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:650: waitms(200);
08CB 9000C8    2401            mov     dptr,#0x00C8
08CE 120100    2402            lcall   _waitms
08D1 020100    2403            ljmp    L030011?
08D4           2404   L030010?:
08D4           2405   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:651: else if(rate>=0.8 && rate<4.0)
08D4 EE        2406            mov     a,r6
08D5 7001      2407            jnz     L030006?
08D7 C002      2408            push    ar2
08D9 C003      2409            push    ar3
08DB C004      2410            push    ar4
08DD C005      2411            push    ar5
08DF E4        2412            clr     a
08E0 C0E0      2413            push    acc
08E2 C0E0      2414            push    acc
08E4 7480      2415            mov     a,#0x80
08E6 C0E0      2416            push    acc
08E8 7440      2417            mov     a,#0x40
08EA C0E0      2418            push    acc
08EC 8A82      2419            mov     dpl,r2
08EE 8B83      2420            mov     dph,r3
08F0 8CF0      2421            mov     b,r4
08F2 ED        2422            mov     a,r5
08F3 120100    2423            lcall   ___fslt
08F6 AE82      2424            mov     r6,dpl
08F8 E581      2425            mov     a,sp
08FA 24FC      2426            add     a,#0xfc
08FC F581      2427            mov     sp,a
08FE D005      2428            pop     ar5
0900 D004      2429            pop     ar4
0902 D003      2430            pop     ar3
0904 D002      2431            pop     ar2
0906 EE        2432            mov     a,r6
0907 6001      2433            jz      L030006?
0909           2434   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:652: waitms(500);
0909 9001F4    2435            mov     dptr,#0x01F4
090C 120100    2436            lcall   _waitms
090F 8001      2437            sjmp    L030011?
0911           2438   L030006?:
0911           2439   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:653: else if(rate>=8.0 && rate<8.8)
0911 C002      2440            push    ar2
0913 C003      2441            push    ar3
0915 C004      2442            push    ar4
0917 C005      2443            push    ar5
0919 E4        2444            clr     a
091A C0E0      2445            push    acc
091C C0E0      2446            push    acc
091E C0E0      2447            push    acc
0920 7441      2448            mov     a,#0x41
0922 C0E0      2449            push    acc
0924 8A82      2450            mov     dpl,r2
0926 8B83      2451            mov     dph,r3
0928 8CF0      2452            mov     b,r4
092A ED        2453            mov     a,r5
092B 120100    2454            lcall   ___fslt
092E AE82      2455            mov     r6,dpl
0930 E581      2456            mov     a,sp
0932 24FC      2457            add     a,#0xfc
0934 F581      2458            mov     sp,a
0936 D005      2459            pop     ar5
0938 D004      2460            pop     ar4
093A D003      2461            pop     ar3
093C D002      2462            pop     ar2
093E EE        2463            mov     a,r6
093F 7001      2464            jnz     L030002?
0941 74CD      2465            mov     a,#0xCD
0943 C0E0      2466            push    acc
0945 74CC      2467            mov     a,#0xCC
0947 C0E0      2468            push    acc
0949 740C      2469            mov     a,#0x0C
094B C0E0      2470            push    acc
094D 7441      2471            mov     a,#0x41
094F C0E0      2472            push    acc
0951 8A82      2473            mov     dpl,r2
0953 8B83      2474            mov     dph,r3
0955 8CF0      2475            mov     b,r4
0957 ED        2476            mov     a,r5
0958 120100    2477            lcall   ___fslt
095B AA82      2478            mov     r2,dpl
095D E581      2479            mov     a,sp
095F 24FC      2480            add     a,#0xfc
0961 F581      2481            mov     sp,a
0963 EA        2482            mov     a,r2
0964 6001      2483            jz      L030002?
0966           2484   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:654: waitms(800);
0966 900320    2485            mov     dptr,#0x0320
0969 120100    2486            lcall   _waitms
096C 8001      2487            sjmp    L030011?
096E           2488   L030002?:
096E           2489   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:656: waitms(1000);
096E 9003E8    2490            mov     dptr,#0x03E8
0971 120100    2491            lcall   _waitms
0974           2492   L030011?:
0974           2493   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:657: LASER = 1;
0974 D2B0      2494            setb    _P3_0
0976 22        2495            ret
0977           2496   ;------------------------------------------------------------
0977           2497   ;Allocation info for local variables in function 'getchar1'
0977           2498   ;------------------------------------------------------------
0977           2499   ;c                         Allocated to registers 
0977           2500   ;------------------------------------------------------------
0977           2501   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:660: char getchar1 (void)
0977           2502   ;        -----------------------------------------
0977           2503   ;         function getchar1
0977           2504   ;        -----------------------------------------
0977           2505   _getchar1:
0977           2506   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:663: SFRPAGE = 0x20;
0977 75A720    2507            mov     _SFRPAGE,#0x20
097A           2508   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:664: while (!RI1);
097A           2509   L031001?:
097A           2510   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:665: RI1=0;
097A 10C8D8    2511            jbc     _RI1,L031008?
097D 8001      2512            sjmp    L031001?
097F           2513   L031008?:
097F           2514   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:667: SCON1&=0b_0011_1111;
097F 53C83F    2515            anl     _SCON1,#0x3F
0982           2516   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:668: c = SBUF1;
0982 859282    2517            mov     dpl,_SBUF1
0985           2518   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:669: SFRPAGE = 0x00;
0985 75A700    2519            mov     _SFRPAGE,#0x00
0988           2520   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:670: return (c);
0988 22        2521            ret
0989           2522   ;------------------------------------------------------------
0989           2523   ;Allocation info for local variables in function 'main'
0989           2524   ;------------------------------------------------------------
0989           2525   ;checkcommand              Allocated to registers 
0989           2526   ;i                         Allocated to registers r4 r5 
0989           2527   ;sig1                      Allocated to registers 
0989           2528   ;sig2                      Allocated to registers 
0989           2529   ;peak                      Allocated to registers 
0989           2530   ;voltspeak                 Allocated to registers 
0989           2531   ;periodpwm                 Allocated to registers 
0989           2532   ;period                    Allocated to registers r4 r5 r6 r7 
0989           2533   ;overflow_count            Allocated to registers r4 r5 
0989           2534   ;pir_voltage               Allocated with name '_main_pir_voltage_1_116'
0989           2535   ;xcoord                    Allocated to registers 
0989           2536   ;ycoord                    Allocated to registers 
0989           2537   ;temp                      Allocated with name '_main_temp_1_116'
0989           2538   ;count                     Allocated to registers r2 r3 
0989           2539   ;getCoord                  Allocated to registers 
0989           2540   ;mode_toggle               Allocated to registers r2 r3 
0989           2541   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0989           2542   ;------------------------------------------------------------
0989           2543   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:673: void main(void)
0989           2544   ;        -----------------------------------------
0989           2545   ;         function main
0989           2546   ;        -----------------------------------------
0989           2547   _main:
0989           2548   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:695: UART1_Init(9600);
0989 902580    2549            mov     dptr,#0x2580
098C E4        2550            clr     a
098D F5F0      2551            mov     b,a
098F 120100    2552            lcall   _UART1_Init
0992           2553   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:697: TL0=0;
0992 758A00    2554            mov     _TL0,#0x00
0995           2555   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:698: TH0=0;
0995 758C00    2556            mov     _TH0,#0x00
0998           2557   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:699: TF0=0;    
0998 C28D      2558            clr     _TF0
099A           2559   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:700: TIMER0_Init();
099A 120100    2560            lcall   _TIMER0_Init
099D           2561   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:702: InitPinADC(1, 6); // Configure P2.5 as analog input
099D 75F006    2562            mov     _InitPinADC_PARM_2,#0x06
09A0 758201    2563            mov     dpl,#0x01
09A3 120100    2564            lcall   _InitPinADC
09A6           2565   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:703: InitPinADC(2, 3); //???   
09A6 75F003    2566            mov     _InitPinADC_PARM_2,#0x03
09A9 758202    2567            mov     dpl,#0x02
09AC 120100    2568            lcall   _InitPinADC
09AF           2569   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:704: InitPinADC(2, 4); //PIR
09AF 75F004    2570            mov     _InitPinADC_PARM_2,#0x04
09B2 758202    2571            mov     dpl,#0x02
09B5 120100    2572            lcall   _InitPinADC
09B8           2573   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:705: InitPinADC(2, 6); //Temp Sensor
09B8 75F006    2574            mov     _InitPinADC_PARM_2,#0x06
09BB 758202    2575            mov     dpl,#0x02
09BE 120100    2576            lcall   _InitPinADC
09C1           2577   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:706: InitADC();
09C1 120100    2578            lcall   _InitADC
09C4           2579   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:708: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
09C4 7418      2580            mov     a,#__str_9
09C6 C0E0      2581            push    acc
09C8 74D5      2582            mov     a,#(__str_9 >> 8)
09CA C0E0      2583            push    acc
09CC 7480      2584            mov     a,#0x80
09CE C0E0      2585            push    acc
09D0 120100    2586            lcall   _printf
09D3 1581      2587            dec     sp
09D5 1581      2588            dec     sp
09D7 1581      2589            dec     sp
09D9           2590   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:710: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
09D9 7458      2591            mov     a,#__str_10
09DB C0E0      2592            push    acc
09DD 74D5      2593            mov     a,#(__str_10 >> 8)
09DF C0E0      2594            push    acc
09E1 7480      2595            mov     a,#0x80
09E3 C0E0      2596            push    acc
09E5 120100    2597            lcall   _printf
09E8 1581      2598            dec     sp
09EA 1581      2599            dec     sp
09EC 1581      2600            dec     sp
09EE           2601   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:712: printf("\n\r");
09EE 7498      2602            mov     a,#__str_11
09F0 C0E0      2603            push    acc
09F2 74D5      2604            mov     a,#(__str_11 >> 8)
09F4 C0E0      2605            push    acc
09F6 7480      2606            mov     a,#0x80
09F8 C0E0      2607            push    acc
09FA 120100    2608            lcall   _printf
09FD 1581      2609            dec     sp
09FF 1581      2610            dec     sp
0A01 1581      2611            dec     sp
0A03           2612   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:714: PWMStop();
0A03 120100    2613            lcall   _PWMStop
0A06           2614   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:716: while (1)
0A06           2615   L032047?:
0A06           2616   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:718: mode_toggle = checkMode();
0A06 120100    2617            lcall   _checkMode
0A09 AA82      2618            mov     r2,dpl
0A0B AB83      2619            mov     r3,dph
0A0D           2620   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:721: if(mode_toggle == 0){
0A0D EA        2621            mov     a,r2
0A0E 4B        2622            orl     a,r3
0A0F 6001      2623            jz      L032080?
0A11 020100    2624            ljmp    L032044?
0A14           2625   L032080?:
0A14           2626   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:722: printf("auto \r\n");
0A14 7498      2627            mov     a,#__str_12
0A16 C0E0      2628            push    acc
0A18 74D6      2629            mov     a,#(__str_12 >> 8)
0A1A C0E0      2630            push    acc
0A1C 7480      2631            mov     a,#0x80
0A1E C0E0      2632            push    acc
0A20 120100    2633            lcall   _printf
0A23 1581      2634            dec     sp
0A25 1581      2635            dec     sp
0A27 1581      2636            dec     sp
0A29           2637   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:724: TL0=0; 
0A29 758A00    2638            mov     _TL0,#0x00
0A2C           2639   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:725: TH0=0;
0A2C 758C00    2640            mov     _TH0,#0x00
0A2F           2641   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:726: TF0=0;
0A2F C28D      2642            clr     _TF0
0A31           2643   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:728: while(P2_1!=0); // Wait for the signal to be zero
0A31           2644   L032001?:
0A31 20A1D8    2645            jb      _P2_1,L032001?
0A34           2646   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:729: while(P2_1!=1); // Wait for the signal to be one
0A34           2647   L032004?:
0A34 30A118    2648            jnb     _P2_1,L032004?
0A37           2649   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:730: TR0=1; // Start the timer
0A37 D28C      2650            setb    _TR0
0A39           2651   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:731: while(P2_1!=0) // Wait for the signal to be zero
0A39 7C00      2652            mov     r4,#0x00
0A3B 7D00      2653            mov     r5,#0x00
0A3D           2654   L032009?:
0A3D 30A198    2655            jnb     _P2_1,L032011?
0A40           2656   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:733: if(TF0==1) // Did the 16-bit timer overflow?
0A40           2657   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:735: TF0=0;
0A40 108DD8    2658            jbc     _TF0,L032084?
0A43 8001      2659            sjmp    L032009?
0A45           2660   L032084?:
0A45           2661   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:736: overflow_count++;
0A45 0C        2662            inc     r4
0A46 BC0058    2663            cjne    r4,#0x00,L032009?
0A49 0D        2664            inc     r5
0A4A 8001      2665            sjmp    L032009?
0A4C           2666   L032011?:
0A4C           2667   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:747: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0A4C C28C      2668            clr     _TR0
0A4E           2669   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:748: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0A4E 8C82      2670            mov     dpl,r4
0A50 8D83      2671            mov     dph,r5
0A52 120100    2672            lcall   ___sint2fs
0A55 AC82      2673            mov     r4,dpl
0A57 AD83      2674            mov     r5,dph
0A59 AEF0      2675            mov     r6,b
0A5B FF        2676            mov     r7,a
0A5C C004      2677            push    ar4
0A5E C005      2678            push    ar5
0A60 C006      2679            push    ar6
0A62 C007      2680            push    ar7
0A64 900000    2681            mov     dptr,#0x0000
0A67 75F080    2682            mov     b,#0x80
0A6A 7447      2683            mov     a,#0x47
0A6C 120100    2684            lcall   ___fsmul
0A6F 8582E8    2685            mov     _main_sloc0_1_0,dpl
0A72 8583E9    2686            mov     (_main_sloc0_1_0 + 1),dph
0A75 85F0EA    2687            mov     (_main_sloc0_1_0 + 2),b
0A78 F5EB      2688            mov     (_main_sloc0_1_0 + 3),a
0A7A E581      2689            mov     a,sp
0A7C 24FC      2690            add     a,#0xfc
0A7E F581      2691            mov     sp,a
0A80 858C82    2692            mov     dpl,_TH0
0A83 120100    2693            lcall   ___uchar2fs
0A86 AC82      2694            mov     r4,dpl
0A88 AD83      2695            mov     r5,dph
0A8A AEF0      2696            mov     r6,b
0A8C FF        2697            mov     r7,a
0A8D C004      2698            push    ar4
0A8F C005      2699            push    ar5
0A91 C006      2700            push    ar6
0A93 C007      2701            push    ar7
0A95 900000    2702            mov     dptr,#0x0000
0A98 75F080    2703            mov     b,#0x80
0A9B 7443      2704            mov     a,#0x43
0A9D 120100    2705            lcall   ___fsmul
0AA0 AC82      2706            mov     r4,dpl
0AA2 AD83      2707            mov     r5,dph
0AA4 AEF0      2708            mov     r6,b
0AA6 FF        2709            mov     r7,a
0AA7 E581      2710            mov     a,sp
0AA9 24FC      2711            add     a,#0xfc
0AAB F581      2712            mov     sp,a
0AAD C004      2713            push    ar4
0AAF C005      2714            push    ar5
0AB1 C006      2715            push    ar6
0AB3 C007      2716            push    ar7
0AB5 85E882    2717            mov     dpl,_main_sloc0_1_0
0AB8 85E983    2718            mov     dph,(_main_sloc0_1_0 + 1)
0ABB 85EAF0    2719            mov     b,(_main_sloc0_1_0 + 2)
0ABE E5EB      2720            mov     a,(_main_sloc0_1_0 + 3)
0AC0 120100    2721            lcall   ___fsadd
0AC3 8582E8    2722            mov     _main_sloc0_1_0,dpl
0AC6 8583E9    2723            mov     (_main_sloc0_1_0 + 1),dph
0AC9 85F0EA    2724            mov     (_main_sloc0_1_0 + 2),b
0ACC F5EB      2725            mov     (_main_sloc0_1_0 + 3),a
0ACE E581      2726            mov     a,sp
0AD0 24FC      2727            add     a,#0xfc
0AD2 F581      2728            mov     sp,a
0AD4 AC8A      2729            mov     r4,_TL0
0AD6 7D00      2730            mov     r5,#0x00
0AD8 8C82      2731            mov     dpl,r4
0ADA 8D83      2732            mov     dph,r5
0ADC 120100    2733            lcall   ___sint2fs
0ADF AC82      2734            mov     r4,dpl
0AE1 AD83      2735            mov     r5,dph
0AE3 AEF0      2736            mov     r6,b
0AE5 FF        2737            mov     r7,a
0AE6 C004      2738            push    ar4
0AE8 C005      2739            push    ar5
0AEA C006      2740            push    ar6
0AEC C007      2741            push    ar7
0AEE 85E882    2742            mov     dpl,_main_sloc0_1_0
0AF1 85E983    2743            mov     dph,(_main_sloc0_1_0 + 1)
0AF4 85EAF0    2744            mov     b,(_main_sloc0_1_0 + 2)
0AF7 E5EB      2745            mov     a,(_main_sloc0_1_0 + 3)
0AF9 120100    2746            lcall   ___fsadd
0AFC AC82      2747            mov     r4,dpl
0AFE AD83      2748            mov     r5,dph
0B00 AEF0      2749            mov     r6,b
0B02 FF        2750            mov     r7,a
0B03 E581      2751            mov     a,sp
0B05 24FC      2752            add     a,#0xfc
0B07 F581      2753            mov     sp,a
0B09 C004      2754            push    ar4
0B0B C005      2755            push    ar5
0B0D C006      2756            push    ar6
0B0F C007      2757            push    ar7
0B11 90F4FC    2758            mov     dptr,#0xF4FC
0B14 75F032    2759            mov     b,#0x32
0B17 7434      2760            mov     a,#0x34
0B19 120100    2761            lcall   ___fsmul
0B1C AC82      2762            mov     r4,dpl
0B1E AD83      2763            mov     r5,dph
0B20 AEF0      2764            mov     r6,b
0B22 FF        2765            mov     r7,a
0B23 E581      2766            mov     a,sp
0B25 24FC      2767            add     a,#0xfc
0B27 F581      2768            mov     sp,a
0B29           2769   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:750: printf( "\rT=%f ms   \n ", period*1000.0);
0B29 C004      2770            push    ar4
0B2B C005      2771            push    ar5
0B2D C006      2772            push    ar6
0B2F C007      2773            push    ar7
0B31 900000    2774            mov     dptr,#0x0000
0B34 75F07A    2775            mov     b,#0x7A
0B37 7444      2776            mov     a,#0x44
0B39 120100    2777            lcall   ___fsmul
0B3C AC82      2778            mov     r4,dpl
0B3E AD83      2779            mov     r5,dph
0B40 AEF0      2780            mov     r6,b
0B42 FF        2781            mov     r7,a
0B43 E581      2782            mov     a,sp
0B45 24FC      2783            add     a,#0xfc
0B47 F581      2784            mov     sp,a
0B49 C004      2785            push    ar4
0B4B C005      2786            push    ar5
0B4D C006      2787            push    ar6
0B4F C007      2788            push    ar7
0B51 C004      2789            push    ar4
0B53 C005      2790            push    ar5
0B55 C006      2791            push    ar6
0B57 C007      2792            push    ar7
0B59 7418      2793            mov     a,#__str_13
0B5B C0E0      2794            push    acc
0B5D 74D8      2795            mov     a,#(__str_13 >> 8)
0B5F C0E0      2796            push    acc
0B61 7480      2797            mov     a,#0x80
0B63 C0E0      2798            push    acc
0B65 120100    2799            lcall   _printf
0B68 E581      2800            mov     a,sp
0B6A 24F9      2801            add     a,#0xf9
0B6C F581      2802            mov     sp,a
0B6E           2803   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:751: waitms(50);
0B6E 900032    2804            mov     dptr,#0x0032
0B71 120100    2805            lcall   _waitms
0B74 D007      2806            pop     ar7
0B76 D006      2807            pop     ar6
0B78 D005      2808            pop     ar5
0B7A D004      2809            pop     ar4
0B7C           2810   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:752: detectobstacle(period*1000.0);
0B7C 8C82      2811            mov     dpl,r4
0B7E 8D83      2812            mov     dph,r5
0B80 8EF0      2813            mov     b,r6
0B82 EF        2814            mov     a,r7
0B83 C004      2815            push    ar4
0B85 C005      2816            push    ar5
0B87 C006      2817            push    ar6
0B89 C007      2818            push    ar7
0B8B 120100    2819            lcall   _detectobstacle
0B8E D007      2820            pop     ar7
0B90 D006      2821            pop     ar6
0B92 D005      2822            pop     ar5
0B94 D004      2823            pop     ar4
0B96           2824   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:753: laserPattern(period*1000);
0B96 8C82      2825            mov     dpl,r4
0B98 8D83      2826            mov     dph,r5
0B9A 8EF0      2827            mov     b,r6
0B9C EF        2828            mov     a,r7
0B9D 120100    2829            lcall   _laserPattern
0BA0           2830   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:762: waitms(50);       
0BA0 900032    2831            mov     dptr,#0x0032
0BA3 120100    2832            lcall   _waitms
0BA6 020100    2833            ljmp    L032047?
0BA9           2834   L032044?:
0BA9           2835   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:766: else if(mode_toggle == 1){
0BA9 BA0158    2836            cjne    r2,#0x01,L032085?
0BAC BB0058    2837            cjne    r3,#0x00,L032085?
0BAF 8001      2838            sjmp    L032086?
0BB1           2839   L032085?:
0BB1 020100    2840            ljmp    L032041?
0BB4           2841   L032086?:
0BB4           2842   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:767: recieveData();    //keep reading data continously 
0BB4 120100    2843            lcall   _recieveData
0BB7           2844   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:768: printf("Command: ");
0BB7 7418      2845            mov     a,#__str_14
0BB9 C0E0      2846            push    acc
0BBB 74D9      2847            mov     a,#(__str_14 >> 8)
0BBD C0E0      2848            push    acc
0BBF 7480      2849            mov     a,#0x80
0BC1 C0E0      2850            push    acc
0BC3 120100    2851            lcall   _printf
0BC6 1581      2852            dec     sp
0BC8 1581      2853            dec     sp
0BCA 1581      2854            dec     sp
0BCC           2855   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:769: for(i=0; i<4; i++)
0BCC 7C00      2856            mov     r4,#0x00
0BCE 7D00      2857            mov     r5,#0x00
0BD0           2858   L032049?:
0BD0 C3        2859            clr     c
0BD1 EC        2860            mov     a,r4
0BD2 9404      2861            subb    a,#0x04
0BD4 ED        2862            mov     a,r5
0BD5 6480      2863            xrl     a,#0x80
0BD7 9480      2864            subb    a,#0x80
0BD9 5001      2865            jnc     L032052?
0BDB           2866   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:770: printf("%d\t", command[i]);
0BDB 8C06      2867            mov     ar6,r4
0BDD ED        2868            mov     a,r5
0BDE CE        2869            xch     a,r6
0BDF 25E0      2870            add     a,acc
0BE1 CE        2871            xch     a,r6
0BE2 33        2872            rlc     a
0BE3 EE        2873            mov     a,r6
0BE4 2488      2874            add     a,#_command
0BE6 F8        2875            mov     r0,a
0BE7 8606      2876            mov     ar6,@r0
0BE9 08        2877            inc     r0
0BEA 8607      2878            mov     ar7,@r0
0BEC 18        2879            dec     r0
0BED C004      2880            push    ar4
0BEF C005      2881            push    ar5
0BF1 C006      2882            push    ar6
0BF3 C007      2883            push    ar7
0BF5 74D8      2884            mov     a,#__str_15
0BF7 C0E0      2885            push    acc
0BF9 74D9      2886            mov     a,#(__str_15 >> 8)
0BFB C0E0      2887            push    acc
0BFD 7480      2888            mov     a,#0x80
0BFF C0E0      2889            push    acc
0C01 120100    2890            lcall   _printf
0C04 E581      2891            mov     a,sp
0C06 24FB      2892            add     a,#0xfb
0C08 F581      2893            mov     sp,a
0C0A D005      2894            pop     ar5
0C0C D004      2895            pop     ar4
0C0E           2896   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:769: for(i=0; i<4; i++)
0C0E 0C        2897            inc     r4
0C0F BC0058    2898            cjne    r4,#0x00,L032049?
0C12 0D        2899            inc     r5
0C13 8001      2900            sjmp    L032049?
0C15           2901   L032052?:
0C15           2902   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:771: printf("\n\r");
0C15 7498      2903            mov     a,#__str_11
0C17 C0E0      2904            push    acc
0C19 74D5      2905            mov     a,#(__str_11 >> 8)
0C1B C0E0      2906            push    acc
0C1D 7480      2907            mov     a,#0x80
0C1F C0E0      2908            push    acc
0C21 120100    2909            lcall   _printf
0C24 1581      2910            dec     sp
0C26 1581      2911            dec     sp
0C28 1581      2912            dec     sp
0C2A           2913   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:772: command[0] = 0;
0C2A 758800    2914            mov     _command,#0x00
0C2D 758900    2915            mov     (_command + 1),#0x00
0C30           2916   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:773: command[1] = 0;
0C30 758A00    2917            mov     (_command + 0x0002),#0x00
0C33 758B00    2918            mov     ((_command + 0x0002) + 1),#0x00
0C36           2919   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:774: command[2] = 0;
0C36 758C00    2920            mov     (_command + 0x0004),#0x00
0C39 758D00    2921            mov     ((_command + 0x0004) + 1),#0x00
0C3C           2922   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:775: command[3] = 0;
0C3C 758E00    2923            mov     (_command + 0x0006),#0x00
0C3F 758F00    2924            mov     ((_command + 0x0006) + 1),#0x00
0C42 020100    2925            ljmp    L032047?
0C45           2926   L032041?:
0C45           2927   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:779: else if( mode_toggle == 3){
0C45 BA0318    2928            cjne    r2,#0x03,L032089?
0C48 BB0018    2929            cjne    r3,#0x00,L032089?
0C4B 8001      2930            sjmp    L032090?
0C4D           2931   L032089?:
0C4D 020100    2932            ljmp    L032038?
0C50           2933   L032090?:
0C50           2934   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:780: pir_voltage = Volts_at_Pin(QFP32_MUX_P2_4);
0C50 758211    2935            mov     dpl,#0x11
0C53 120100    2936            lcall   _Volts_at_Pin
0C56 858258    2937            mov     _main_pir_voltage_1_116,dpl
0C59 858359    2938            mov     (_main_pir_voltage_1_116 + 1),dph
0C5C 85F05A    2939            mov     (_main_pir_voltage_1_116 + 2),b
0C5F F55B      2940            mov     (_main_pir_voltage_1_116 + 3),a
0C61           2941   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:781: if(pir_voltage >= 3.0 && pir_voltage <= 3.4)
0C61 E4        2942            clr     a
0C62 C0E0      2943            push    acc
0C64 C0E0      2944            push    acc
0C66 7440      2945            mov     a,#0x40
0C68 C0E0      2946            push    acc
0C6A C0E0      2947            push    acc
0C6C 855882    2948            mov     dpl,_main_pir_voltage_1_116
0C6F 855983    2949            mov     dph,(_main_pir_voltage_1_116 + 1)
0C72 855AF0    2950            mov     b,(_main_pir_voltage_1_116 + 2)
0C75 E55B      2951            mov     a,(_main_pir_voltage_1_116 + 3)
0C77 120100    2952            lcall   ___fslt
0C7A AC82      2953            mov     r4,dpl
0C7C E581      2954            mov     a,sp
0C7E 24FC      2955            add     a,#0xfc
0C80 F581      2956            mov     sp,a
0C82 EC        2957            mov     a,r4
0C83 7001      2958            jnz     L032013?
0C85 749A      2959            mov     a,#0x9A
0C87 C0E0      2960            push    acc
0C89 7499      2961            mov     a,#0x99
0C8B C0E0      2962            push    acc
0C8D 7459      2963            mov     a,#0x59
0C8F C0E0      2964            push    acc
0C91 7440      2965            mov     a,#0x40
0C93 C0E0      2966            push    acc
0C95 855882    2967            mov     dpl,_main_pir_voltage_1_116
0C98 855983    2968            mov     dph,(_main_pir_voltage_1_116 + 1)
0C9B 855AF0    2969            mov     b,(_main_pir_voltage_1_116 + 2)
0C9E E55B      2970            mov     a,(_main_pir_voltage_1_116 + 3)
0CA0 120100    2971            lcall   ___fsgt
0CA3 AC82      2972            mov     r4,dpl
0CA5 E581      2973            mov     a,sp
0CA7 24FC      2974            add     a,#0xfc
0CA9 F581      2975            mov     sp,a
0CAB EC        2976            mov     a,r4
0CAC 7001      2977            jnz     L032013?
0CAE           2978   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:782: PWMStop();
0CAE 120100    2979            lcall   _PWMStop
0CB1 8001      2980            sjmp    L032014?
0CB3           2981   L032013?:
0CB3           2982   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:784: PWMforward();
0CB3 120100    2983            lcall   _PWMforward
0CB6           2984   L032014?:
0CB6           2985   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:785: waitms(100);
0CB6 900064    2986            mov     dptr,#0x0064
0CB9 120100    2987            lcall   _waitms
0CBC           2988   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:786: printf("pir_voltage: %f \r\n", pir_voltage);
0CBC C058      2989            push    _main_pir_voltage_1_116
0CBE C059      2990            push    (_main_pir_voltage_1_116 + 1)
0CC0 C05A      2991            push    (_main_pir_voltage_1_116 + 2)
0CC2 C05B      2992            push    (_main_pir_voltage_1_116 + 3)
0CC4 7458      2993            mov     a,#__str_16
0CC6 C0E0      2994            push    acc
0CC8 74DB      2995            mov     a,#(__str_16 >> 8)
0CCA C0E0      2996            push    acc
0CCC 7480      2997            mov     a,#0x80
0CCE C0E0      2998            push    acc
0CD0 120100    2999            lcall   _printf
0CD3 E581      3000            mov     a,sp
0CD5 24F9      3001            add     a,#0xf9
0CD7 F581      3002            mov     sp,a
0CD9 020100    3003            ljmp    L032047?
0CDC           3004   L032038?:
0CDC           3005   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:789: else if(mode_toggle == 5){   //Voice control
0CDC BA0598    3006            cjne    r2,#0x05,L032035?
0CDF BB0098    3007            cjne    r3,#0x00,L032035?
0CE2           3008   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:790: while(getCoord == 0) //Just reuse this stuff
0CE2           3009   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:793: while(count<4){
0CE2           3010   L032071?:
0CE2 7A00      3011            mov     r2,#0x00
0CE4 7B00      3012            mov     r3,#0x00
0CE6           3013   L032016?:
0CE6 C3        3014            clr     c
0CE7 EA        3015            mov     a,r2
0CE8 9404      3016            subb    a,#0x04
0CEA EB        3017            mov     a,r3
0CEB 6480      3018            xrl     a,#0x80
0CED 9480      3019            subb    a,#0x80
0CEF 5001      3020            jnc     L032071?
0CF1           3021   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:794: temp[count] = getchar1();
0CF1 EA        3022            mov     a,r2
0CF2 24A8      3023            add     a,#_main_temp_1_116
0CF4 F8        3024            mov     r0,a
0CF5 C002      3025            push    ar2
0CF7 C003      3026            push    ar3
0CF9 C000      3027            push    ar0
0CFB 120100    3028            lcall   _getchar1
0CFE E582      3029            mov     a,dpl
0D00 D000      3030            pop     ar0
0D02 D003      3031            pop     ar3
0D04 D002      3032            pop     ar2
0D06 F6        3033            mov     @r0,a
0D07           3034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:795: count++;
0D07 0A        3035            inc     r2
0D08           3036   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:808: PWMStop();
0D08 BA0018    3037            cjne    r2,#0x00,L032016?
0D0B 0B        3038            inc     r3
0D0C 8001      3039            sjmp    L032016?
0D0E           3040   L032035?:
0D0E           3041   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkTestBonus.c:811: printf("Do nothing\r\n");         
0D0E 7458      3042            mov     a,#__str_17
0D10 C0E0      3043            push    acc
0D12 74DC      3044            mov     a,#(__str_17 >> 8)
0D14 C0E0      3045            push    acc
0D16 7480      3046            mov     a,#0x80
0D18 C0E0      3047            push    acc
0D1A 120100    3048            lcall   _printf
0D1D 1581      3049            dec     sp
0D1F 1581      3050            dec     sp
0D21 1581      3051            dec     sp
0D23 020100    3052            ljmp    L032047?
0D26           3053            rseg R_CSEG
0D26           3054   
0000           3055            rseg R_XINIT
0000           3056   
0000           3057            rseg R_CONST
0000           3058   __str_0:
0000 4261636B  3059            db 'Backward'
     77617264
0008 0A        3060            db 0x0A
0009 0D        3061            db 0x0D
000A 00        3062            db 0x00
000B           3063   __str_1:
000B 466F7277  3064            db 'Forward'
     617264
0012 0A        3065            db 0x0A
0013 0D        3066            db 0x0D
0014 00        3067            db 0x00
0015           3068   __str_2:
0015 52696768  3069            db 'Right'
     74
001A 0A        3070            db 0x0A
001B 0D        3071            db 0x0D
001C 00        3072            db 0x00
001D           3073   __str_3:
001D 4C656674  3074            db 'Left'
0021 0A        3075            db 0x0A
0022 0D        3076            db 0x0D
0023 00        3077            db 0x00
0024           3078   __str_4:
0024 53746F70  3079            db 'Stop'
0028 0A        3080            db 0x0A
0029 0D        3081            db 0x0D
002A 00        3082            db 0x00
002B           3083   __str_5:
002B 2566      3084            db '%f'
002D 0A        3085            db 0x0A
002E 0D        3086            db 0x0D
002F 00        3087            db 0x00
0030           3088   __str_6:
0030 0A        3089            db 0x0A
0031 72656164  3090            db 'read 1:  at pin 2.3: %f'
     20313A20
     20617420
     70696E20
     322E333A
     202566
0048 0D        3091            db 0x0D
0049 00        3092            db 0x00
004A           3093   __str_7:
004A 5475726E  3094            db 'Turn right '
     20726967
     687420
0055 0D        3095            db 0x0D
0056 0A        3096            db 0x0A
0057 00        3097            db 0x00
0058           3098   __str_8:
0058 476F2053  3099            db 'Go Straight '
     74726169
     67687420
0064 0D        3100            db 0x0D
0065 0A        3101            db 0x0A
0066 00        3102            db 0x00
0067           3103   __str_9:
0067 1B        3104            db 0x1B
0068 5B324A    3105            db '[2J'
006B 00        3106            db 0x00
006C           3107   __str_10:
006C 53717561  3108            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0092 0D        3109            db 0x0D
0093 0A        3110            db 0x0A
0094 43686563  3111            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
00A8 50322E31  3112            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00C3 0D        3113            db 0x0D
00C4 0A        3114            db 0x0A
00C5 00        3115            db 0x00
00C6           3116   __str_11:
00C6 0A        3117            db 0x0A
00C7 0D        3118            db 0x0D
00C8 00        3119            db 0x00
00C9           3120   __str_12:
00C9 6175746F  3121            db 'auto '
     20
00CE 0D        3122            db 0x0D
00CF 0A        3123            db 0x0A
00D0 00        3124            db 0x00
00D1           3125   __str_13:
00D1 0D        3126            db 0x0D
00D2 543D2566  3127            db 'T=%f ms   '
     206D7320
     2020
00DC 0A        3128            db 0x0A
00DD 20        3129            db ' '
00DE 00        3130            db 0x00
00DF           3131   __str_14:
00DF 436F6D6D  3132            db 'Command: '
     616E643A
     20
00E8 00        3133            db 0x00
00E9           3134   __str_15:
00E9 2564      3135            db '%d'
00EB 09        3136            db 0x09
00EC 00        3137            db 0x00
00ED           3138   __str_16:
00ED 7069725F  3139            db 'pir_voltage: %f '
     766F6C74
     6167653A
     20256620
00FD 0D        3140            db 0x0D
00FE 0A        3141            db 0x0A
00FF 00        3142            db 0x00
0100           3143   __str_17:
0100 446F206E  3144            db 'Do nothing'
     6F746869
     6E67
010A 0D        3145            db 0x0D
010B 0A        3146            db 0x0A
010C 00        3147            db 0x00
010D           3148   
002E           3149            CSEG
002E           3150   
002E           3151   end
