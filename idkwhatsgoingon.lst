0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 10:49:58 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _laserPattern
0000             32            public _detectobstacle
0000             33            public _checkMode
0000             34            public _recieveData
0000             35            public _waitquarterperiod
0000             36            public _getDigitalSignal
0000             37            public _voltsAtPeak
0000             38            public _checkCommands
0000             39            public _arrayEqual
0000             40            public _zero_time_calc
0000             41            public _PWMStop
0000             42            public _PWMRight
0000             43            public _PWMLeft
0000             44            public _PWMbackward
0000             45            public _PWMforward
0000             46            public _InitPinADC
0000             47            public _Volts_at_Pin
0000             48            public _TIMER0_Init
0000             49            public _InitADC
0000             50            public _Timer2_ISR
0000             51            public _ADC_at_Pin
0000             52            public _waitms
0000             53            public _Timer3us
0000             54            public __c51_external_startup
0000             55            public _x
0000             56            public _command
0000             57            public _right
0000             58            public _left
0000             59            public _backward
0000             60            public _forward
0000             61            public _stop
0000             62            public _claw_flag
0000             63            public _flag
0000             64            public _cartMoveB
0000             65            public _cartMoveF
0000             66            public _pwmSig6
0000             67            public _pwmSig5
0000             68            public _pwmSig4
0000             69            public _pwmSig3
0000             70            public _pwmSig2
0000             71            public _pwmSig1
0000             72            public _pwm_count3
0000             73            public _pwm_count2
0000             74            public _pwm_count1
0000             75            public _pwm_count
0000             76   ;--------------------------------------------------------
0000             77   ; Special Function Registers
0000             78   ;--------------------------------------------------------
0000             79   _ACC            DATA 0xe0
0000             80   _ADC0ASAH       DATA 0xb6
0000             81   _ADC0ASAL       DATA 0xb5
0000             82   _ADC0ASCF       DATA 0xa1
0000             83   _ADC0ASCT       DATA 0xc7
0000             84   _ADC0CF0        DATA 0xbc
0000             85   _ADC0CF1        DATA 0xb9
0000             86   _ADC0CF2        DATA 0xdf
0000             87   _ADC0CN0        DATA 0xe8
0000             88   _ADC0CN1        DATA 0xb2
0000             89   _ADC0CN2        DATA 0xb3
0000             90   _ADC0GTH        DATA 0xc4
0000             91   _ADC0GTL        DATA 0xc3
0000             92   _ADC0H          DATA 0xbe
0000             93   _ADC0L          DATA 0xbd
0000             94   _ADC0LTH        DATA 0xc6
0000             95   _ADC0LTL        DATA 0xc5
0000             96   _ADC0MX         DATA 0xbb
0000             97   _B              DATA 0xf0
0000             98   _CKCON0         DATA 0x8e
0000             99   _CKCON1         DATA 0xa6
0000            100   _CLEN0          DATA 0xc6
0000            101   _CLIE0          DATA 0xc7
0000            102   _CLIF0          DATA 0xe8
0000            103   _CLKSEL         DATA 0xa9
0000            104   _CLOUT0         DATA 0xd1
0000            105   _CLU0CF         DATA 0xb1
0000            106   _CLU0FN         DATA 0xaf
0000            107   _CLU0MX         DATA 0x84
0000            108   _CLU1CF         DATA 0xb3
0000            109   _CLU1FN         DATA 0xb2
0000            110   _CLU1MX         DATA 0x85
0000            111   _CLU2CF         DATA 0xb6
0000            112   _CLU2FN         DATA 0xb5
0000            113   _CLU2MX         DATA 0x91
0000            114   _CLU3CF         DATA 0xbf
0000            115   _CLU3FN         DATA 0xbe
0000            116   _CLU3MX         DATA 0xae
0000            117   _CMP0CN0        DATA 0x9b
0000            118   _CMP0CN1        DATA 0x99
0000            119   _CMP0MD         DATA 0x9d
0000            120   _CMP0MX         DATA 0x9f
0000            121   _CMP1CN0        DATA 0xbf
0000            122   _CMP1CN1        DATA 0xac
0000            123   _CMP1MD         DATA 0xab
0000            124   _CMP1MX         DATA 0xaa
0000            125   _CRC0CN0        DATA 0xce
0000            126   _CRC0CN1        DATA 0x86
0000            127   _CRC0CNT        DATA 0xd3
0000            128   _CRC0DAT        DATA 0xcb
0000            129   _CRC0FLIP       DATA 0xcf
0000            130   _CRC0IN         DATA 0xca
0000            131   _CRC0ST         DATA 0xd2
0000            132   _DAC0CF0        DATA 0x91
0000            133   _DAC0CF1        DATA 0x92
0000            134   _DAC0H          DATA 0x85
0000            135   _DAC0L          DATA 0x84
0000            136   _DAC1CF0        DATA 0x93
0000            137   _DAC1CF1        DATA 0x94
0000            138   _DAC1H          DATA 0x8a
0000            139   _DAC1L          DATA 0x89
0000            140   _DAC2CF0        DATA 0x95
0000            141   _DAC2CF1        DATA 0x96
0000            142   _DAC2H          DATA 0x8c
0000            143   _DAC2L          DATA 0x8b
0000            144   _DAC3CF0        DATA 0x9a
0000            145   _DAC3CF1        DATA 0x9c
0000            146   _DAC3H          DATA 0x8e
0000            147   _DAC3L          DATA 0x8d
0000            148   _DACGCF0        DATA 0x88
0000            149   _DACGCF1        DATA 0x98
0000            150   _DACGCF2        DATA 0xa2
0000            151   _DERIVID        DATA 0xad
0000            152   _DEVICEID       DATA 0xb5
0000            153   _DPH            DATA 0x83
0000            154   _DPL            DATA 0x82
0000            155   _EIE1           DATA 0xe6
0000            156   _EIE2           DATA 0xf3
0000            157   _EIP1           DATA 0xbb
0000            158   _EIP1H          DATA 0xee
0000            159   _EIP2           DATA 0xed
0000            160   _EIP2H          DATA 0xf6
0000            161   _EMI0CN         DATA 0xe7
0000            162   _FLKEY          DATA 0xb7
0000            163   _HFO0CAL        DATA 0xc7
0000            164   _HFO1CAL        DATA 0xd6
0000            165   _HFOCN          DATA 0xef
0000            166   _I2C0ADM        DATA 0xff
0000            167   _I2C0CN0        DATA 0xba
0000            168   _I2C0DIN        DATA 0xbc
0000            169   _I2C0DOUT       DATA 0xbb
0000            170   _I2C0FCN0       DATA 0xad
0000            171   _I2C0FCN1       DATA 0xab
0000            172   _I2C0FCT        DATA 0xf5
0000            173   _I2C0SLAD       DATA 0xbd
0000            174   _I2C0STAT       DATA 0xb9
0000            175   _IE             DATA 0xa8
0000            176   _IP             DATA 0xb8
0000            177   _IPH            DATA 0xf2
0000            178   _IT01CF         DATA 0xe4
0000            179   _LFO0CN         DATA 0xb1
0000            180   _P0             DATA 0x80
0000            181   _P0MASK         DATA 0xfe
0000            182   _P0MAT          DATA 0xfd
0000            183   _P0MDIN         DATA 0xf1
0000            184   _P0MDOUT        DATA 0xa4
0000            185   _P0SKIP         DATA 0xd4
0000            186   _P1             DATA 0x90
0000            187   _P1MASK         DATA 0xee
0000            188   _P1MAT          DATA 0xed
0000            189   _P1MDIN         DATA 0xf2
0000            190   _P1MDOUT        DATA 0xa5
0000            191   _P1SKIP         DATA 0xd5
0000            192   _P2             DATA 0xa0
0000            193   _P2MASK         DATA 0xfc
0000            194   _P2MAT          DATA 0xfb
0000            195   _P2MDIN         DATA 0xf3
0000            196   _P2MDOUT        DATA 0xa6
0000            197   _P2SKIP         DATA 0xcc
0000            198   _P3             DATA 0xb0
0000            199   _P3MDIN         DATA 0xf4
0000            200   _P3MDOUT        DATA 0x9c
0000            201   _PCA0CENT       DATA 0x9e
0000            202   _PCA0CLR        DATA 0x9c
0000            203   _PCA0CN0        DATA 0xd8
0000            204   _PCA0CPH0       DATA 0xfc
0000            205   _PCA0CPH1       DATA 0xea
0000            206   _PCA0CPH2       DATA 0xec
0000            207   _PCA0CPH3       DATA 0xf5
0000            208   _PCA0CPH4       DATA 0x85
0000            209   _PCA0CPH5       DATA 0xde
0000            210   _PCA0CPL0       DATA 0xfb
0000            211   _PCA0CPL1       DATA 0xe9
0000            212   _PCA0CPL2       DATA 0xeb
0000            213   _PCA0CPL3       DATA 0xf4
0000            214   _PCA0CPL4       DATA 0x84
0000            215   _PCA0CPL5       DATA 0xdd
0000            216   _PCA0CPM0       DATA 0xda
0000            217   _PCA0CPM1       DATA 0xdb
0000            218   _PCA0CPM2       DATA 0xdc
0000            219   _PCA0CPM3       DATA 0xae
0000            220   _PCA0CPM4       DATA 0xaf
0000            221   _PCA0CPM5       DATA 0xcc
0000            222   _PCA0H          DATA 0xfa
0000            223   _PCA0L          DATA 0xf9
0000            224   _PCA0MD         DATA 0xd9
0000            225   _PCA0POL        DATA 0x96
0000            226   _PCA0PWM        DATA 0xf7
0000            227   _PCON0          DATA 0x87
0000            228   _PCON1          DATA 0xcd
0000            229   _PFE0CN         DATA 0xc1
0000            230   _PRTDRV         DATA 0xf6
0000            231   _PSCTL          DATA 0x8f
0000            232   _PSTAT0         DATA 0xaa
0000            233   _PSW            DATA 0xd0
0000            234   _REF0CN         DATA 0xd1
0000            235   _REG0CN         DATA 0xc9
0000            236   _REVID          DATA 0xb6
0000            237   _RSTSRC         DATA 0xef
0000            238   _SBCON1         DATA 0x94
0000            239   _SBRLH1         DATA 0x96
0000            240   _SBRLL1         DATA 0x95
0000            241   _SBUF           DATA 0x99
0000            242   _SBUF0          DATA 0x99
0000            243   _SBUF1          DATA 0x92
0000            244   _SCON           DATA 0x98
0000            245   _SCON0          DATA 0x98
0000            246   _SCON1          DATA 0xc8
0000            247   _SFRPAGE        DATA 0xa7
0000            248   _SFRPGCN        DATA 0xbc
0000            249   _SFRSTACK       DATA 0xd7
0000            250   _SMB0ADM        DATA 0xd6
0000            251   _SMB0ADR        DATA 0xd7
0000            252   _SMB0CF         DATA 0xc1
0000            253   _SMB0CN0        DATA 0xc0
0000            254   _SMB0DAT        DATA 0xc2
0000            255   _SMB0FCN0       DATA 0xc3
0000            256   _SMB0FCN1       DATA 0xc4
0000            257   _SMB0FCT        DATA 0xef
0000            258   _SMB0RXLN       DATA 0xc5
0000            259   _SMB0TC         DATA 0xac
0000            260   _SMOD1          DATA 0x93
0000            261   _SP             DATA 0x81
0000            262   _SPI0CFG        DATA 0xa1
0000            263   _SPI0CKR        DATA 0xa2
0000            264   _SPI0CN0        DATA 0xf8
0000            265   _SPI0DAT        DATA 0xa3
0000            266   _SPI0FCN0       DATA 0x9a
0000            267   _SPI0FCN1       DATA 0x9b
0000            268   _SPI0FCT        DATA 0xf7
0000            269   _SPI0PCF        DATA 0xdf
0000            270   _TCON           DATA 0x88
0000            271   _TH0            DATA 0x8c
0000            272   _TH1            DATA 0x8d
0000            273   _TL0            DATA 0x8a
0000            274   _TL1            DATA 0x8b
0000            275   _TMOD           DATA 0x89
0000            276   _TMR2CN0        DATA 0xc8
0000            277   _TMR2CN1        DATA 0xfd
0000            278   _TMR2H          DATA 0xcf
0000            279   _TMR2L          DATA 0xce
0000            280   _TMR2RLH        DATA 0xcb
0000            281   _TMR2RLL        DATA 0xca
0000            282   _TMR3CN0        DATA 0x91
0000            283   _TMR3CN1        DATA 0xfe
0000            284   _TMR3H          DATA 0x95
0000            285   _TMR3L          DATA 0x94
0000            286   _TMR3RLH        DATA 0x93
0000            287   _TMR3RLL        DATA 0x92
0000            288   _TMR4CN0        DATA 0x98
0000            289   _TMR4CN1        DATA 0xff
0000            290   _TMR4H          DATA 0xa5
0000            291   _TMR4L          DATA 0xa4
0000            292   _TMR4RLH        DATA 0xa3
0000            293   _TMR4RLL        DATA 0xa2
0000            294   _TMR5CN0        DATA 0xc0
0000            295   _TMR5CN1        DATA 0xf1
0000            296   _TMR5H          DATA 0xd5
0000            297   _TMR5L          DATA 0xd4
0000            298   _TMR5RLH        DATA 0xd3
0000            299   _TMR5RLL        DATA 0xd2
0000            300   _UART0PCF       DATA 0xd9
0000            301   _UART1FCN0      DATA 0x9d
0000            302   _UART1FCN1      DATA 0xd8
0000            303   _UART1FCT       DATA 0xfa
0000            304   _UART1LIN       DATA 0x9e
0000            305   _UART1PCF       DATA 0xda
0000            306   _VDM0CN         DATA 0xff
0000            307   _WDTCN          DATA 0x97
0000            308   _XBR0           DATA 0xe1
0000            309   _XBR1           DATA 0xe2
0000            310   _XBR2           DATA 0xe3
0000            311   _XOSC0CN        DATA 0x86
0000            312   _DPTR           DATA 0x8382
0000            313   _TMR2RL         DATA 0xcbca
0000            314   _TMR3RL         DATA 0x9392
0000            315   _TMR4RL         DATA 0xa3a2
0000            316   _TMR5RL         DATA 0xd3d2
0000            317   _TMR0           DATA 0x8c8a
0000            318   _TMR1           DATA 0x8d8b
0000            319   _TMR2           DATA 0xcfce
0000            320   _TMR3           DATA 0x9594
0000            321   _TMR4           DATA 0xa5a4
0000            322   _TMR5           DATA 0xd5d4
0000            323   _SBRL1          DATA 0x9695
0000            324   _PCA0           DATA 0xfaf9
0000            325   _PCA0CP0        DATA 0xfcfb
0000            326   _PCA0CP1        DATA 0xeae9
0000            327   _PCA0CP2        DATA 0xeceb
0000            328   _PCA0CP3        DATA 0xf5f4
0000            329   _PCA0CP4        DATA 0x8584
0000            330   _PCA0CP5        DATA 0xdedd
0000            331   _ADC0ASA        DATA 0xb6b5
0000            332   _ADC0GT         DATA 0xc4c3
0000            333   _ADC0           DATA 0xbebd
0000            334   _ADC0LT         DATA 0xc6c5
0000            335   _DAC0           DATA 0x8584
0000            336   _DAC1           DATA 0x8a89
0000            337   _DAC2           DATA 0x8c8b
0000            338   _DAC3           DATA 0x8e8d
0000            339   ;--------------------------------------------------------
0000            340   ; special function bits
0000            341   ;--------------------------------------------------------
0000            342   _ACC_0          BIT 0xe0
0000            343   _ACC_1          BIT 0xe1
0000            344   _ACC_2          BIT 0xe2
0000            345   _ACC_3          BIT 0xe3
0000            346   _ACC_4          BIT 0xe4
0000            347   _ACC_5          BIT 0xe5
0000            348   _ACC_6          BIT 0xe6
0000            349   _ACC_7          BIT 0xe7
0000            350   _TEMPE          BIT 0xe8
0000            351   _ADGN0          BIT 0xe9
0000            352   _ADGN1          BIT 0xea
0000            353   _ADWINT         BIT 0xeb
0000            354   _ADBUSY         BIT 0xec
0000            355   _ADINT          BIT 0xed
0000            356   _IPOEN          BIT 0xee
0000            357   _ADEN           BIT 0xef
0000            358   _B_0            BIT 0xf0
0000            359   _B_1            BIT 0xf1
0000            360   _B_2            BIT 0xf2
0000            361   _B_3            BIT 0xf3
0000            362   _B_4            BIT 0xf4
0000            363   _B_5            BIT 0xf5
0000            364   _B_6            BIT 0xf6
0000            365   _B_7            BIT 0xf7
0000            366   _C0FIF          BIT 0xe8
0000            367   _C0RIF          BIT 0xe9
0000            368   _C1FIF          BIT 0xea
0000            369   _C1RIF          BIT 0xeb
0000            370   _C2FIF          BIT 0xec
0000            371   _C2RIF          BIT 0xed
0000            372   _C3FIF          BIT 0xee
0000            373   _C3RIF          BIT 0xef
0000            374   _D1SRC0         BIT 0x88
0000            375   _D1SRC1         BIT 0x89
0000            376   _D1AMEN         BIT 0x8a
0000            377   _D01REFSL       BIT 0x8b
0000            378   _D3SRC0         BIT 0x8c
0000            379   _D3SRC1         BIT 0x8d
0000            380   _D3AMEN         BIT 0x8e
0000            381   _D23REFSL       BIT 0x8f
0000            382   _D0UDIS         BIT 0x98
0000            383   _D1UDIS         BIT 0x99
0000            384   _D2UDIS         BIT 0x9a
0000            385   _D3UDIS         BIT 0x9b
0000            386   _EX0            BIT 0xa8
0000            387   _ET0            BIT 0xa9
0000            388   _EX1            BIT 0xaa
0000            389   _ET1            BIT 0xab
0000            390   _ES0            BIT 0xac
0000            391   _ET2            BIT 0xad
0000            392   _ESPI0          BIT 0xae
0000            393   _EA             BIT 0xaf
0000            394   _PX0            BIT 0xb8
0000            395   _PT0            BIT 0xb9
0000            396   _PX1            BIT 0xba
0000            397   _PT1            BIT 0xbb
0000            398   _PS0            BIT 0xbc
0000            399   _PT2            BIT 0xbd
0000            400   _PSPI0          BIT 0xbe
0000            401   _P0_0           BIT 0x80
0000            402   _P0_1           BIT 0x81
0000            403   _P0_2           BIT 0x82
0000            404   _P0_3           BIT 0x83
0000            405   _P0_4           BIT 0x84
0000            406   _P0_5           BIT 0x85
0000            407   _P0_6           BIT 0x86
0000            408   _P0_7           BIT 0x87
0000            409   _P1_0           BIT 0x90
0000            410   _P1_1           BIT 0x91
0000            411   _P1_2           BIT 0x92
0000            412   _P1_3           BIT 0x93
0000            413   _P1_4           BIT 0x94
0000            414   _P1_5           BIT 0x95
0000            415   _P1_6           BIT 0x96
0000            416   _P1_7           BIT 0x97
0000            417   _P2_0           BIT 0xa0
0000            418   _P2_1           BIT 0xa1
0000            419   _P2_2           BIT 0xa2
0000            420   _P2_3           BIT 0xa3
0000            421   _P2_4           BIT 0xa4
0000            422   _P2_5           BIT 0xa5
0000            423   _P2_6           BIT 0xa6
0000            424   _P3_0           BIT 0xb0
0000            425   _P3_1           BIT 0xb1
0000            426   _P3_2           BIT 0xb2
0000            427   _P3_3           BIT 0xb3
0000            428   _P3_4           BIT 0xb4
0000            429   _P3_7           BIT 0xb7
0000            430   _CCF0           BIT 0xd8
0000            431   _CCF1           BIT 0xd9
0000            432   _CCF2           BIT 0xda
0000            433   _CCF3           BIT 0xdb
0000            434   _CCF4           BIT 0xdc
0000            435   _CCF5           BIT 0xdd
0000            436   _CR             BIT 0xde
0000            437   _CF             BIT 0xdf
0000            438   _PARITY         BIT 0xd0
0000            439   _F1             BIT 0xd1
0000            440   _OV             BIT 0xd2
0000            441   _RS0            BIT 0xd3
0000            442   _RS1            BIT 0xd4
0000            443   _F0             BIT 0xd5
0000            444   _AC             BIT 0xd6
0000            445   _CY             BIT 0xd7
0000            446   _RI             BIT 0x98
0000            447   _TI             BIT 0x99
0000            448   _RB8            BIT 0x9a
0000            449   _TB8            BIT 0x9b
0000            450   _REN            BIT 0x9c
0000            451   _CE             BIT 0x9d
0000            452   _SMODE          BIT 0x9e
0000            453   _RI1            BIT 0xc8
0000            454   _TI1            BIT 0xc9
0000            455   _RBX1           BIT 0xca
0000            456   _TBX1           BIT 0xcb
0000            457   _REN1           BIT 0xcc
0000            458   _PERR1          BIT 0xcd
0000            459   _OVR1           BIT 0xce
0000            460   _SI             BIT 0xc0
0000            461   _ACK            BIT 0xc1
0000            462   _ARBLOST        BIT 0xc2
0000            463   _ACKRQ          BIT 0xc3
0000            464   _STO            BIT 0xc4
0000            465   _STA            BIT 0xc5
0000            466   _TXMODE         BIT 0xc6
0000            467   _MASTER         BIT 0xc7
0000            468   _SPIEN          BIT 0xf8
0000            469   _TXNF           BIT 0xf9
0000            470   _NSSMD0         BIT 0xfa
0000            471   _NSSMD1         BIT 0xfb
0000            472   _RXOVRN         BIT 0xfc
0000            473   _MODF           BIT 0xfd
0000            474   _WCOL           BIT 0xfe
0000            475   _SPIF           BIT 0xff
0000            476   _IT0            BIT 0x88
0000            477   _IE0            BIT 0x89
0000            478   _IT1            BIT 0x8a
0000            479   _IE1            BIT 0x8b
0000            480   _TR0            BIT 0x8c
0000            481   _TF0            BIT 0x8d
0000            482   _TR1            BIT 0x8e
0000            483   _TF1            BIT 0x8f
0000            484   _T2XCLK0        BIT 0xc8
0000            485   _T2XCLK1        BIT 0xc9
0000            486   _TR2            BIT 0xca
0000            487   _T2SPLIT        BIT 0xcb
0000            488   _TF2CEN         BIT 0xcc
0000            489   _TF2LEN         BIT 0xcd
0000            490   _TF2L           BIT 0xce
0000            491   _TF2H           BIT 0xcf
0000            492   _T4XCLK0        BIT 0x98
0000            493   _T4XCLK1        BIT 0x99
0000            494   _TR4            BIT 0x9a
0000            495   _T4SPLIT        BIT 0x9b
0000            496   _TF4CEN         BIT 0x9c
0000            497   _TF4LEN         BIT 0x9d
0000            498   _TF4L           BIT 0x9e
0000            499   _TF4H           BIT 0x9f
0000            500   _T5XCLK0        BIT 0xc0
0000            501   _T5XCLK1        BIT 0xc1
0000            502   _TR5            BIT 0xc2
0000            503   _T5SPLIT        BIT 0xc3
0000            504   _TF5CEN         BIT 0xc4
0000            505   _TF5LEN         BIT 0xc5
0000            506   _TF5L           BIT 0xc6
0000            507   _TF5H           BIT 0xc7
0000            508   _RIE            BIT 0xd8
0000            509   _RXTO0          BIT 0xd9
0000            510   _RXTO1          BIT 0xda
0000            511   _RFRQ           BIT 0xdb
0000            512   _TIE            BIT 0xdc
0000            513   _TXHOLD         BIT 0xdd
0000            514   _TXNF1          BIT 0xde
0000            515   _TFRQ           BIT 0xdf
0000            516   ;--------------------------------------------------------
0000            517   ; overlayable register banks
0000            518   ;--------------------------------------------------------
0000            519            rbank0 segment data overlay
0000            520   ;--------------------------------------------------------
0000            521   ; internal ram data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_DSEG
0000            524   _pwm_count:
0000            525            ds 1
0001            526   _pwm_count1:
0001            527            ds 1
0002            528   _pwm_count2:
0002            529            ds 1
0003            530   _pwm_count3:
0003            531            ds 1
0004            532   _pwmSig1:
0004            533            ds 2
0006            534   _pwmSig2:
0006            535            ds 2
0008            536   _pwmSig3:
0008            537            ds 2
000A            538   _pwmSig4:
000A            539            ds 2
000C            540   _pwmSig5:
000C            541            ds 2
000E            542   _pwmSig6:
000E            543            ds 2
0010            544   _cartMoveF:
0010            545            ds 2
0012            546   _cartMoveB:
0012            547            ds 2
0014            548   _flag:
0014            549            ds 2
0016            550   _claw_flag:
0016            551            ds 2
0018            552   _stop:
0018            553            ds 8
0020            554   _forward:
0020            555            ds 8
0028            556   _backward:
0028            557            ds 8
0030            558   _left:
0030            559            ds 8
0038            560   _right:
0038            561            ds 8
0040            562   _command:
0040            563            ds 8
0048            564   _x:
0048            565            ds 2
004A            566   _zero_time_calc_overflow_count_1_73:
004A            567            ds 2
004C            568   _main_sloc0_1_0:
004C            569            ds 4
0050            570   ;--------------------------------------------------------
0050            571   ; overlayable items in internal ram 
0050            572   ;--------------------------------------------------------
0000            573            rseg    R_OSEG
0000            574            rseg    R_OSEG
0000            575            rseg    R_OSEG
0000            576   _InitPinADC_PARM_2:
0000            577            ds 1
0001            578            rseg    R_OSEG
0001            579   _arrayEqual_PARM_2:
0001            580            ds 2
0003            581   _arrayEqual_PARM_3:
0003            582            ds 3
0006            583   _arrayEqual_arr1_1_76:
0006            584            ds 3
0009            585   ;--------------------------------------------------------
0009            586   ; indirectly addressable internal ram data
0009            587   ;--------------------------------------------------------
0000            588            rseg R_ISEG
0000            589   ;--------------------------------------------------------
0000            590   ; absolute internal ram data
0000            591   ;--------------------------------------------------------
0000            592            DSEG
0000            593   ;--------------------------------------------------------
0000            594   ; bit data
0000            595   ;--------------------------------------------------------
0000            596            rseg R_BSEG
0000            597   _Timer2_ISR_sloc0_1_0:
0000            598            DBIT    1
0001            599   ;--------------------------------------------------------
0001            600   ; paged external ram data
0001            601   ;--------------------------------------------------------
0000            602            rseg R_PSEG
0000            603   ;--------------------------------------------------------
0000            604   ; external ram data
0000            605   ;--------------------------------------------------------
0000            606            rseg R_XSEG
0000            607   ;--------------------------------------------------------
0000            608   ; absolute external ram data
0000            609   ;--------------------------------------------------------
0000            610            XSEG
0000            611   ;--------------------------------------------------------
0000            612   ; external initialized ram data
0000            613   ;--------------------------------------------------------
0000            614            rseg R_IXSEG
0000            615            rseg R_HOME
0000            616            rseg R_GSINIT
0000            617            rseg R_CSEG
0000            618   ;--------------------------------------------------------
0000            619   ; Reset entry point and interrupt vectors
0000            620   ;--------------------------------------------------------
0000            621            CSEG at 0x0000
0000 020100     622            ljmp    _crt0
002B            623            CSEG at 0x002b
002B 020100     624            ljmp    _Timer2_ISR
002E            625   ;--------------------------------------------------------
002E            626   ; global & static initialisations
002E            627   ;--------------------------------------------------------
0000            628            rseg R_HOME
0000            629            rseg R_GSINIT
0000            630            rseg R_GSINIT
0000            631   ;--------------------------------------------------------
0000            632   ; data variables initialization
0000            633   ;--------------------------------------------------------
0000            634            rseg R_DINIT
0000            635   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:60: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 75E000     636            mov     _pwm_count,#0x00
0003            637   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:61: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75A000     638            mov     _pwm_count1,#0x00
0006            639   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:62: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 756000     640            mov     _pwm_count2,#0x00
0009            641   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:63: volatile unsigned char pwm_count3 = 0; //
0009 752000     642            mov     _pwm_count3,#0x00
000C            643   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:78: volatile int flag = 0;
000C E4         644            clr     a
000D F508       645            mov     _flag,a
000F F509       646            mov     (_flag + 1),a
0011            647   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:79: volatile int claw_flag = 0;
0011 E4         648            clr     a
0012 F5C8       649            mov     _claw_flag,a
0014 F5C9       650            mov     (_claw_flag + 1),a
0016            651   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:80: int stop[]={1,0,0,0};
0016 758801     652            mov     _stop,#0x01
0019 758900     653            mov     (_stop + 1),#0x00
001C 758A00     654            mov     (_stop + 0x0002),#0x00
001F 758B00     655            mov     ((_stop + 0x0002) + 1),#0x00
0022 758C00     656            mov     (_stop + 0x0004),#0x00
0025 758D00     657            mov     ((_stop + 0x0004) + 1),#0x00
0028 758E00     658            mov     (_stop + 0x0006),#0x00
002B 758F00     659            mov     ((_stop + 0x0006) + 1),#0x00
002E            660   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:81: int forward[]={1,1,1,1};
002E 754801     661            mov     _forward,#0x01
0031 754900     662            mov     (_forward + 1),#0x00
0034 754A01     663            mov     (_forward + 0x0002),#0x01
0037 754B00     664            mov     ((_forward + 0x0002) + 1),#0x00
003A 754C01     665            mov     (_forward + 0x0004),#0x01
003D 754D00     666            mov     ((_forward + 0x0004) + 1),#0x00
0040 754E01     667            mov     (_forward + 0x0006),#0x01
0043 754F00     668            mov     ((_forward + 0x0006) + 1),#0x00
0046            669   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:82: int backward[]={1,0,0,0};
0046 750801     670            mov     _backward,#0x01
0049 750900     671            mov     (_backward + 1),#0x00
004C 750A00     672            mov     (_backward + 0x0002),#0x00
004F 750B00     673            mov     ((_backward + 0x0002) + 1),#0x00
0052 750C00     674            mov     (_backward + 0x0004),#0x00
0055 750D00     675            mov     ((_backward + 0x0004) + 1),#0x00
0058 750E00     676            mov     (_backward + 0x0006),#0x00
005B 750F00     677            mov     ((_backward + 0x0006) + 1),#0x00
005E            678   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:83: int left[]={1,0,1,0};
005E 75C801     679            mov     _left,#0x01
0061 75C900     680            mov     (_left + 1),#0x00
0064 75CA00     681            mov     (_left + 0x0002),#0x00
0067 75CB00     682            mov     ((_left + 0x0002) + 1),#0x00
006A 75CC01     683            mov     (_left + 0x0004),#0x01
006D 75CD00     684            mov     ((_left + 0x0004) + 1),#0x00
0070 75CE00     685            mov     (_left + 0x0006),#0x00
0073 75CF00     686            mov     ((_left + 0x0006) + 1),#0x00
0076            687   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:84: int right[]={1,1,0,1};
0076 758801     688            mov     _right,#0x01
0079 758900     689            mov     (_right + 1),#0x00
007C 758A01     690            mov     (_right + 0x0002),#0x01
007F 758B00     691            mov     ((_right + 0x0002) + 1),#0x00
0082 758C00     692            mov     (_right + 0x0004),#0x00
0085 758D00     693            mov     ((_right + 0x0004) + 1),#0x00
0088 758E01     694            mov     (_right + 0x0006),#0x01
008B 758F00     695            mov     ((_right + 0x0006) + 1),#0x00
008E            696   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:86: int command[4] = {0,0,0,0};
008E 754800     697            mov     _command,#0x00
0091 754900     698            mov     (_command + 1),#0x00
0094 754A00     699            mov     (_command + 0x0002),#0x00
0097 754B00     700            mov     ((_command + 0x0002) + 1),#0x00
009A 754C00     701            mov     (_command + 0x0004),#0x00
009D 754D00     702            mov     ((_command + 0x0004) + 1),#0x00
00A0 754E00     703            mov     (_command + 0x0006),#0x00
00A3 754F00     704            mov     ((_command + 0x0006) + 1),#0x00
00A6            705   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:88: volatile unsigned int x = 2;
00A6 750802     706            mov     _x,#0x02
00A9 E4         707            clr     a
00AA F509       708            mov     (_x + 1),a
00AC            709            ; The linker places a 'ret' at the end of segment R_DINIT.
00AC            710   ;--------------------------------------------------------
00AC            711   ; code
00AC            712   ;--------------------------------------------------------
0000            713            rseg R_CSEG
0000            714   ;------------------------------------------------------------
0000            715   ;Allocation info for local variables in function '_c51_external_startup'
0000            716   ;------------------------------------------------------------
0000            717   ;------------------------------------------------------------
0000            718   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:90: char _c51_external_startup(void)
0000            719   ;        -----------------------------------------
0000            720   ;         function _c51_external_startup
0000            721   ;        -----------------------------------------
0000            722   __c51_external_startup:
0000            723            using   0
0000            724   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:93: SFRPAGE = 0x00;
0000 75A700     725            mov     _SFRPAGE,#0x00
0003            726   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:94: WDTCN = 0xDE; //First key
0003 7597DE     727            mov     _WDTCN,#0xDE
0006            728   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:95: WDTCN = 0xAD; //Second key
0006 7597AD     729            mov     _WDTCN,#0xAD
0009            730   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:97: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     731            mov     _VDM0CN,#0x80
000C            732   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:98: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     733            mov     _RSTSRC,#0x06
000F            734   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:105: SFRPAGE = 0x10;
000F 75A710     735            mov     _SFRPAGE,#0x10
0012            736   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:106: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     737            mov     _PFE0CN,#0x20
0015            738   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:107: SFRPAGE = 0x00;
0015 75A700     739            mov     _SFRPAGE,#0x00
0018            740   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:128: CLKSEL = 0x00;
0018 75A900     741            mov     _CLKSEL,#0x00
001B            742   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:129: CLKSEL = 0x00;
001B 75A900     743            mov     _CLKSEL,#0x00
001E            744   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:130: while ((CLKSEL & 0x80) == 0);
001E            745   L002001?:
001E E5A9       746            mov     a,_CLKSEL
0020 30E768     747            jnb     acc.7,L002001?
0023            748   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:131: CLKSEL = 0x03;
0023 75A903     749            mov     _CLKSEL,#0x03
0026            750   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:132: CLKSEL = 0x03;
0026 75A903     751            mov     _CLKSEL,#0x03
0029            752   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:133: while ((CLKSEL & 0x80) == 0);
0029            753   L002004?:
0029 E5A9       754            mov     a,_CLKSEL
002B 30E7E8     755            jnb     acc.7,L002004?
002E            756   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:138: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     757            orl     _P0MDOUT,#0x10
0031            758   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:139: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     759            mov     _XBR0,#0x01
0034            760   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:140: XBR1 = 0X00;
0034 75E200     761            mov     _XBR1,#0x00
0037            762   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:141: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     763            mov     _XBR2,#0x40
003A            764   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:147: SCON0 = 0x10;
003A 759810     765            mov     _SCON0,#0x10
003D            766   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:148: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     767            mov     _TH1,#0xE6
0040            768   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:149: TL1 = TH1;      // Init Timer1
0040 858D8B     769            mov     _TL1,_TH1
0043            770   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:150: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     771            anl     _TMOD,#0x0F
0046            772   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:151: TMOD |= 0x20;
0046 438920     773            orl     _TMOD,#0x20
0049            774   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:152: TR1 = 1; // START Timer1
0049 D28E       775            setb    _TR1
004B            776   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:153: TI = 1;  // Indicate TX0 ready
004B D299       777            setb    _TI
004D            778   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:156: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     779            mov     _TMR2CN0,#0x00
0050            780   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:157: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     781            orl     _CKCON0,#0x10
0053            782   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:158: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     783            mov     _TMR2RL,#0xE0
0056 75CBE3     784            mov     (_TMR2RL >> 8),#0xE3
0059            785   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:159: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     786            mov     _TMR2,#0xFF
005C 75CFFF     787            mov     (_TMR2 >> 8),#0xFF
005F            788   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:160: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       789            setb    _ET2
0061            790   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:161: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       791            setb    _TR2
0063            792   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:179: EA = 1; // Enable interrupts
0063 D2AF       793            setb    _EA
0065            794   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:182: return 0;
0065 758200     795            mov     dpl,#0x00
0068 22         796            ret
0069            797   ;------------------------------------------------------------
0069            798   ;Allocation info for local variables in function 'Timer3us'
0069            799   ;------------------------------------------------------------
0069            800   ;us                        Allocated to registers r2 r3 
0069            801   ;i                         Allocated to registers r4 r5 
0069            802   ;------------------------------------------------------------
0069            803   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:184: void Timer3us(unsigned int us)
0069            804   ;        -----------------------------------------
0069            805   ;         function Timer3us
0069            806   ;        -----------------------------------------
0069            807   _Timer3us:
0069 AA82       808            mov     r2,dpl
006B AB83       809            mov     r3,dph
006D            810   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:189: CKCON0|=0b_0100_0000;
006D 438E40     811            orl     _CKCON0,#0x40
0070            812   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:191: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     813            mov     _TMR3RL,#0xB8
0073 7593FF     814            mov     (_TMR3RL >> 8),#0xFF
0076            815   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:192: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     816            mov     _TMR3,_TMR3RL
0079 859395     817            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            818   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:194: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     819            mov     _TMR3CN0,#0x04
007F            820   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:195: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       821            mov     r4,#0x00
0081 7D00       822            mov     r5,#0x00
0083            823   L003004?:
0083 C3         824            clr     c
0084 EC         825            mov     a,r4
0085 9A         826            subb    a,r2
0086 ED         827            mov     a,r5
0087 9B         828            subb    a,r3
0088 5001       829            jnc     L003007?
008A            830   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:197: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            831   L003001?:
008A E591       832            mov     a,_TMR3CN0
008C 30E728     833            jnb     acc.7,L003001?
008F            834   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:198: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     835            anl     _TMR3CN0,#0x7F
0092            836   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:195: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         837            inc     r4
0093 BC00A8     838            cjne    r4,#0x00,L003004?
0096 0D         839            inc     r5
0097 8001       840            sjmp    L003004?
0099            841   L003007?:
0099            842   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:200: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     843            mov     _TMR3CN0,#0x00
009C 22         844            ret
009D            845   ;------------------------------------------------------------
009D            846   ;Allocation info for local variables in function 'waitms'
009D            847   ;------------------------------------------------------------
009D            848   ;ms                        Allocated to registers r2 r3 
009D            849   ;j                         Allocated to registers r4 r5 
009D            850   ;k                         Allocated to registers r6 
009D            851   ;------------------------------------------------------------
009D            852   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:202: void waitms (unsigned int ms)
009D            853   ;        -----------------------------------------
009D            854   ;         function waitms
009D            855   ;        -----------------------------------------
009D            856   _waitms:
009D AA82       857            mov     r2,dpl
009F AB83       858            mov     r3,dph
00A1            859   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:206: for(j=0; j<ms; j++)
00A1 7C00       860            mov     r4,#0x00
00A3 7D00       861            mov     r5,#0x00
00A5            862   L004005?:
00A5 C3         863            clr     c
00A6 EC         864            mov     a,r4
00A7 9A         865            subb    a,r2
00A8 ED         866            mov     a,r5
00A9 9B         867            subb    a,r3
00AA 5001       868            jnc     L004009?
00AC            869   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:207: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       870            mov     r6,#0x00
00AE            871   L004001?:
00AE BE0428     872            cjne    r6,#0x04,L004018?
00B1            873   L004018?:
00B1 5001       874            jnc     L004007?
00B3 9000FA     875            mov     dptr,#0x00FA
00B6 C002       876            push    ar2
00B8 C003       877            push    ar3
00BA C004       878            push    ar4
00BC C005       879            push    ar5
00BE C006       880            push    ar6
00C0 120100     881            lcall   _Timer3us
00C3 D006       882            pop     ar6
00C5 D005       883            pop     ar5
00C7 D004       884            pop     ar4
00C9 D003       885            pop     ar3
00CB D002       886            pop     ar2
00CD 0E         887            inc     r6
00CE 8001       888            sjmp    L004001?
00D0            889   L004007?:
00D0            890   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:206: for(j=0; j<ms; j++)
00D0 0C         891            inc     r4
00D1 BC0068     892            cjne    r4,#0x00,L004005?
00D4 0D         893            inc     r5
00D5 8001       894            sjmp    L004005?
00D7            895   L004009?:
00D7 22         896            ret
00D8            897   ;------------------------------------------------------------
00D8            898   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            899   ;------------------------------------------------------------
00D8            900   ;pin                       Allocated to registers 
00D8            901   ;------------------------------------------------------------
00D8            902   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:239: unsigned int ADC_at_Pin(unsigned char pin)
00D8            903   ;        -----------------------------------------
00D8            904   ;         function ADC_at_Pin
00D8            905   ;        -----------------------------------------
00D8            906   _ADC_at_Pin:
00D8 8582BB     907            mov     _ADC0MX,dpl
00DB            908   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:242: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       909            setb    _ADBUSY
00DD            910   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:243: while (ADBUSY); // Wait for dummy conversion to finish
00DD            911   L005001?:
00DD 20ECA8     912            jb      _ADBUSY,L005001?
00E0            913   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:244: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       914            setb    _ADBUSY
00E2            915   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:245: while (ADBUSY); // Wait for conversion to complete
00E2            916   L005004?:
00E2 20ECE8     917            jb      _ADBUSY,L005004?
00E5            918   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:246: return (ADC0);
00E5 85BD82     919            mov     dpl,_ADC0
00E8 85BE83     920            mov     dph,(_ADC0 >> 8)
00EB 22         921            ret
00EC            922   ;------------------------------------------------------------
00EC            923   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            924   ;------------------------------------------------------------
00EC            925   ;------------------------------------------------------------
00EC            926   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:250: void Timer2_ISR(void) interrupt 5
00EC            927   ;        -----------------------------------------
00EC            928   ;         function Timer2_ISR
00EC            929   ;        -----------------------------------------
00EC            930   _Timer2_ISR:
00EC C0E0       931            push    acc
00EE C002       932            push    ar2
00F0 C003       933            push    ar3
00F2 C0D0       934            push    psw
00F4 75D000     935            mov     psw,#0x00
00F7            936   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:252: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       937            clr     _TF2H
00F9            938   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:254: pwm_count++;
00F9 05E0       939            inc     _pwm_count
00FB            940   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:255: if (pwm_count>100)
00FB E5E0       941            mov     a,_pwm_count
00FD 249B       942            add     a,#0xff - 0x64
00FF 5001       943            jnc     L006002?
0101            944   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:256: pwm_count = 0;
0101 75E000     945            mov     _pwm_count,#0x00
0104            946   L006002?:
0104            947   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:259: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AAE0       948            mov     r2,_pwm_count
0106 7B00       949            mov     r3,#0x00
0108 C3         950            clr     c
0109 E5E0       951            mov     a,_pwmSig1
010B 9A         952            subb    a,r2
010C E5E1       953            mov     a,(_pwmSig1 + 1)
010E 9B         954            subb    a,r3
010F 92E8       955            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         956            cpl     c
0112 9294       957            mov     _P1_4,c
0114            958   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:260: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AAE0       959            mov     r2,_pwm_count
0116 7B00       960            mov     r3,#0x00
0118 C3         961            clr     c
0119 E5A0       962            mov     a,_pwmSig2
011B 9A         963            subb    a,r2
011C E5A1       964            mov     a,(_pwmSig2 + 1)
011E 9B         965            subb    a,r3
011F 92E8       966            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         967            cpl     c
0122 9295       968            mov     _P1_5,c
0124            969   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:262: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AAE0       970            mov     r2,_pwm_count
0126 7B00       971            mov     r3,#0x00
0128 C3         972            clr     c
0129 E560       973            mov     a,_pwmSig3
012B 9A         974            subb    a,r2
012C E561       975            mov     a,(_pwmSig3 + 1)
012E 9B         976            subb    a,r3
012F 92E8       977            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         978            cpl     c
0132 9292       979            mov     _P1_2,c
0134            980   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:263: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AAE0       981            mov     r2,_pwm_count
0136 7B00       982            mov     r3,#0x00
0138 C3         983            clr     c
0139 E520       984            mov     a,_pwmSig4
013B 9A         985            subb    a,r2
013C E521       986            mov     a,(_pwmSig4 + 1)
013E 9B         987            subb    a,r3
013F 92E8       988            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         989            cpl     c
0142 9293       990            mov     _P1_3,c
0144            991   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:265: OUT0=pwm_count>80?0:1;
0144 E5E0       992            mov     a,_pwm_count
0146 24AF       993            add     a,#0xff - 0x50
0148 92E8       994            mov  _Timer2_ISR_sloc0_1_0,c
014A B3         995            cpl     c
014B 92A0       996            mov     _P2_0,c
014D D0D0       997            pop     psw
014F D003       998            pop     ar3
0151 D002       999            pop     ar2
0153 D0E0      1000            pop     acc
0155 32        1001            reti
0156           1002   ;        eliminated unneeded push/pop dpl
0156           1003   ;        eliminated unneeded push/pop dph
0156           1004   ;        eliminated unneeded push/pop b
0156           1005   ;------------------------------------------------------------
0156           1006   ;Allocation info for local variables in function 'InitADC'
0156           1007   ;------------------------------------------------------------
0156           1008   ;------------------------------------------------------------
0156           1009   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:295: void InitADC(void)
0156           1010   ;        -----------------------------------------
0156           1011   ;         function InitADC
0156           1012   ;        -----------------------------------------
0156           1013   _InitADC:
0156           1014   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:297: SFRPAGE = 0x00;
0156 75A700    1015            mov     _SFRPAGE,#0x00
0159           1016   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:298: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0159 75B280    1017            mov     _ADC0CN1,#0x80
015C           1018   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:299: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
015C 75BCF8    1019            mov     _ADC0CF0,#0xF8
015F           1020   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:300: ADC0CF1 = 0b_0_0_011110; // Same as default for now
015F 75B91E    1021            mov     _ADC0CF1,#0x1E
0162           1022   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:301: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0162 75E800    1023            mov     _ADC0CN0,#0x00
0165           1024   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:302: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
0165 75DF3F    1025            mov     _ADC0CF2,#0x3F
0168           1026   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:303: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0168 75B300    1027            mov     _ADC0CN2,#0x00
016B           1028   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:304: ADEN = 1; // Enable ADC
016B D2EF      1029            setb    _ADEN
016D 22        1030            ret
016E           1031   ;------------------------------------------------------------
016E           1032   ;Allocation info for local variables in function 'TIMER0_Init'
016E           1033   ;------------------------------------------------------------
016E           1034   ;------------------------------------------------------------
016E           1035   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:306: void TIMER0_Init(void)
016E           1036   ;        -----------------------------------------
016E           1037   ;         function TIMER0_Init
016E           1038   ;        -----------------------------------------
016E           1039   _TIMER0_Init:
016E           1040   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:308: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
016E 5389F0    1041            anl     _TMOD,#0xF0
0171           1042   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:309: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0171 438901    1043            orl     _TMOD,#0x01
0174           1044   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:310: TR0 = 0; // Stop Timer/Counter 0
0174 C28C      1045            clr     _TR0
0176 22        1046            ret
0177           1047   ;------------------------------------------------------------
0177           1048   ;Allocation info for local variables in function 'Volts_at_Pin'
0177           1049   ;------------------------------------------------------------
0177           1050   ;pin                       Allocated to registers r2 
0177           1051   ;------------------------------------------------------------
0177           1052   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:315: float Volts_at_Pin(unsigned char pin)
0177           1053   ;        -----------------------------------------
0177           1054   ;         function Volts_at_Pin
0177           1055   ;        -----------------------------------------
0177           1056   _Volts_at_Pin:
0177           1057   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:317: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
0177 120100    1058            lcall   _ADC_at_Pin
017A 120100    1059            lcall   ___uint2fs
017D AA82      1060            mov     r2,dpl
017F AB83      1061            mov     r3,dph
0181 ACF0      1062            mov     r4,b
0183 FD        1063            mov     r5,a
0184 C002      1064            push    ar2
0186 C003      1065            push    ar3
0188 C004      1066            push    ar4
018A C005      1067            push    ar5
018C 906C8B    1068            mov     dptr,#0x6C8B
018F 75F053    1069            mov     b,#0x53
0192 7440      1070            mov     a,#0x40
0194 120100    1071            lcall   ___fsmul
0197 AA82      1072            mov     r2,dpl
0199 AB83      1073            mov     r3,dph
019B ACF0      1074            mov     r4,b
019D FD        1075            mov     r5,a
019E E581      1076            mov     a,sp
01A0 24FC      1077            add     a,#0xfc
01A2 F581      1078            mov     sp,a
01A4 E4        1079            clr     a
01A5 C0E0      1080            push    acc
01A7 74FC      1081            mov     a,#0xFC
01A9 C0E0      1082            push    acc
01AB 747F      1083            mov     a,#0x7F
01AD C0E0      1084            push    acc
01AF 7446      1085            mov     a,#0x46
01B1 C0E0      1086            push    acc
01B3 8A82      1087            mov     dpl,r2
01B5 8B83      1088            mov     dph,r3
01B7 8CF0      1089            mov     b,r4
01B9 ED        1090            mov     a,r5
01BA 120100    1091            lcall   ___fsdiv
01BD AA82      1092            mov     r2,dpl
01BF AB83      1093            mov     r3,dph
01C1 ACF0      1094            mov     r4,b
01C3 FD        1095            mov     r5,a
01C4 E581      1096            mov     a,sp
01C6 24FC      1097            add     a,#0xfc
01C8 F581      1098            mov     sp,a
01CA 8A82      1099            mov     dpl,r2
01CC 8B83      1100            mov     dph,r3
01CE 8CF0      1101            mov     b,r4
01D0 ED        1102            mov     a,r5
01D1 22        1103            ret
01D2           1104   ;------------------------------------------------------------
01D2           1105   ;Allocation info for local variables in function 'InitPinADC'
01D2           1106   ;------------------------------------------------------------
01D2           1107   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01D2           1108   ;portno                    Allocated to registers r2 
01D2           1109   ;mask                      Allocated to registers r3 
01D2           1110   ;------------------------------------------------------------
01D2           1111   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:319: void InitPinADC(unsigned char portno, unsigned char pinno)
01D2           1112   ;        -----------------------------------------
01D2           1113   ;         function InitPinADC
01D2           1114   ;        -----------------------------------------
01D2           1115   _InitPinADC:
01D2 AA82      1116            mov     r2,dpl
01D4           1117   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:323: mask = 1 << pinno;
01D4 8558F0    1118            mov     b,_InitPinADC_PARM_2
01D7 05F0      1119            inc     b
01D9 7401      1120            mov     a,#0x01
01DB 8001      1121            sjmp    L010013?
01DD           1122   L010011?:
01DD 25E0      1123            add     a,acc
01DF           1124   L010013?:
01DF D5F028    1125            djnz    b,L010011?
01E2 FB        1126            mov     r3,a
01E3           1127   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:325: SFRPAGE = 0x20;
01E3 75A720    1128            mov     _SFRPAGE,#0x20
01E6           1129   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:326: switch (portno)
01E6 BA0068    1130            cjne    r2,#0x00,L010014?
01E9 8001      1131            sjmp    L010001?
01EB           1132   L010014?:
01EB BA01E8    1133            cjne    r2,#0x01,L010015?
01EE 8001      1134            sjmp    L010002?
01F0           1135   L010015?:
01F0           1136   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:328: case 0:
01F0 BA0268    1137            cjne    r2,#0x02,L010005?
01F3 8001      1138            sjmp    L010003?
01F5           1139   L010001?:
01F5           1140   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:329: P0MDIN &= (~mask); // Set pin as analog input
01F5 EB        1141            mov     a,r3
01F6 F4        1142            cpl     a
01F7 FA        1143            mov     r2,a
01F8 52F1      1144            anl     _P0MDIN,a
01FA           1145   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:330: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01FA EB        1146            mov     a,r3
01FB 42D4      1147            orl     _P0SKIP,a
01FD           1148   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:331: break;
01FD           1149   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:332: case 1:
01FD 8001      1150            sjmp    L010005?
01FF           1151   L010002?:
01FF           1152   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:333: P1MDIN &= (~mask); // Set pin as analog input
01FF EB        1153            mov     a,r3
0200 F4        1154            cpl     a
0201 FA        1155            mov     r2,a
0202 52F2      1156            anl     _P1MDIN,a
0204           1157   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:334: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0204 EB        1158            mov     a,r3
0205 42D5      1159            orl     _P1SKIP,a
0207           1160   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:335: break;
0207           1161   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:336: case 2:
0207 8001      1162            sjmp    L010005?
0209           1163   L010003?:
0209           1164   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:337: P2MDIN &= (~mask); // Set pin as analog input
0209 EB        1165            mov     a,r3
020A F4        1166            cpl     a
020B FA        1167            mov     r2,a
020C 52F3      1168            anl     _P2MDIN,a
020E           1169   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:338: P2SKIP |= mask; // Skip Crossbar decoding for this pin
020E EB        1170            mov     a,r3
020F 42CC      1171            orl     _P2SKIP,a
0211           1172   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:342: }
0211           1173   L010005?:
0211           1174   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:343: SFRPAGE = 0x00;
0211 75A700    1175            mov     _SFRPAGE,#0x00
0214 22        1176            ret
0215           1177   ;------------------------------------------------------------
0215           1178   ;Allocation info for local variables in function 'PWMforward'
0215           1179   ;------------------------------------------------------------
0215           1180   ;------------------------------------------------------------
0215           1181   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:352: void PWMforward(void) {
0215           1182   ;        -----------------------------------------
0215           1183   ;         function PWMforward
0215           1184   ;        -----------------------------------------
0215           1185   _PWMforward:
0215           1186   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:353: pwmSig1 = 99;
0215 75E063    1187            mov     _pwmSig1,#0x63
0218 E4        1188            clr     a
0219 F5E1      1189            mov     (_pwmSig1 + 1),a
021B           1190   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:354: pwmSig2 = 0;
021B           1191   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:356: pwmSig3 = 0;
021B E4        1192            clr     a
021C F5A0      1193            mov     _pwmSig2,a
021E F5A1      1194            mov     (_pwmSig2 + 1),a
0220 F560      1195            mov     _pwmSig3,a
0222 F561      1196            mov     (_pwmSig3 + 1),a
0224           1197   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:357: pwmSig4 =99;
0224 752063    1198            mov     _pwmSig4,#0x63
0227 E4        1199            clr     a
0228 F521      1200            mov     (_pwmSig4 + 1),a
022A           1201   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:359: LEDRED = 1;
022A D287      1202            setb    _P0_7
022C           1203   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:360: LEDGREEN = 1;
022C D286      1204            setb    _P0_6
022E           1205   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:361: LEDWHITE = 1;
022E D290      1206            setb    _P1_0
0230           1207   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:362: SPEAKER = 0;
0230 C2A5      1208            clr     _P2_5
0232 22        1209            ret
0233           1210   ;------------------------------------------------------------
0233           1211   ;Allocation info for local variables in function 'PWMbackward'
0233           1212   ;------------------------------------------------------------
0233           1213   ;------------------------------------------------------------
0233           1214   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:365: void PWMbackward(void) {
0233           1215   ;        -----------------------------------------
0233           1216   ;         function PWMbackward
0233           1217   ;        -----------------------------------------
0233           1218   _PWMbackward:
0233           1219   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:366: pwmSig1 = 0;
0233 E4        1220            clr     a
0234 F5E0      1221            mov     _pwmSig1,a
0236 F5E1      1222            mov     (_pwmSig1 + 1),a
0238           1223   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:367: pwmSig2 = 99;
0238 75A063    1224            mov     _pwmSig2,#0x63
023B E4        1225            clr     a
023C F5A1      1226            mov     (_pwmSig2 + 1),a
023E           1227   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:369: pwmSig3 = 99;
023E 756063    1228            mov     _pwmSig3,#0x63
0241 E4        1229            clr     a
0242 F561      1230            mov     (_pwmSig3 + 1),a
0244           1231   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:370: pwmSig4 = 0;
0244 E4        1232            clr     a
0245 F520      1233            mov     _pwmSig4,a
0247 F521      1234            mov     (_pwmSig4 + 1),a
0249           1235   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:372: LEDRED = 1;
0249 D287      1236            setb    _P0_7
024B           1237   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:373: LEDGREEN = 1;
024B D286      1238            setb    _P0_6
024D           1239   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:374: LEDWHITE = 0;
024D C290      1240            clr     _P1_0
024F           1241   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:375: SPEAKER = 1;
024F D2A5      1242            setb    _P2_5
0251 22        1243            ret
0252           1244   ;------------------------------------------------------------
0252           1245   ;Allocation info for local variables in function 'PWMLeft'
0252           1246   ;------------------------------------------------------------
0252           1247   ;------------------------------------------------------------
0252           1248   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:378: void PWMLeft(void) {
0252           1249   ;        -----------------------------------------
0252           1250   ;         function PWMLeft
0252           1251   ;        -----------------------------------------
0252           1252   _PWMLeft:
0252           1253   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:379: pwmSig1 = 0;
0252 E4        1254            clr     a
0253 F5E0      1255            mov     _pwmSig1,a
0255 F5E1      1256            mov     (_pwmSig1 + 1),a
0257           1257   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:380: pwmSig2 = 99;
0257 75A063    1258            mov     _pwmSig2,#0x63
025A E4        1259            clr     a
025B F5A1      1260            mov     (_pwmSig2 + 1),a
025D           1261   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:382: pwmSig3 = 0;
025D E4        1262            clr     a
025E F560      1263            mov     _pwmSig3,a
0260 F561      1264            mov     (_pwmSig3 + 1),a
0262           1265   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:383: pwmSig4 = 99;
0262 752063    1266            mov     _pwmSig4,#0x63
0265 E4        1267            clr     a
0266 F521      1268            mov     (_pwmSig4 + 1),a
0268           1269   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:385: LEDRED = 1;
0268 D287      1270            setb    _P0_7
026A           1271   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:386: LEDGREEN = 0;
026A C286      1272            clr     _P0_6
026C           1273   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:387: LEDWHITE = 1;
026C D290      1274            setb    _P1_0
026E           1275   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:388: SPEAKER = 0;
026E C2A5      1276            clr     _P2_5
0270 22        1277            ret
0271           1278   ;------------------------------------------------------------
0271           1279   ;Allocation info for local variables in function 'PWMRight'
0271           1280   ;------------------------------------------------------------
0271           1281   ;------------------------------------------------------------
0271           1282   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:392: void PWMRight(void) {
0271           1283   ;        -----------------------------------------
0271           1284   ;         function PWMRight
0271           1285   ;        -----------------------------------------
0271           1286   _PWMRight:
0271           1287   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:393: pwmSig1 = 99;
0271 75E063    1288            mov     _pwmSig1,#0x63
0274 E4        1289            clr     a
0275 F5E1      1290            mov     (_pwmSig1 + 1),a
0277           1291   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:394: pwmSig2 = 0;
0277 E4        1292            clr     a
0278 F5A0      1293            mov     _pwmSig2,a
027A F5A1      1294            mov     (_pwmSig2 + 1),a
027C           1295   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:396: pwmSig3 = 99;
027C 756063    1296            mov     _pwmSig3,#0x63
027F E4        1297            clr     a
0280 F561      1298            mov     (_pwmSig3 + 1),a
0282           1299   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:397: pwmSig4 = 0;
0282 E4        1300            clr     a
0283 F520      1301            mov     _pwmSig4,a
0285 F521      1302            mov     (_pwmSig4 + 1),a
0287           1303   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:399: LEDRED = 1;
0287 D287      1304            setb    _P0_7
0289           1305   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:400: LEDGREEN = 0;
0289 C286      1306            clr     _P0_6
028B           1307   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:401: LEDWHITE = 1;
028B D290      1308            setb    _P1_0
028D           1309   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:402: SPEAKER = 0;   
028D C2A5      1310            clr     _P2_5
028F 22        1311            ret
0290           1312   ;------------------------------------------------------------
0290           1313   ;Allocation info for local variables in function 'PWMStop'
0290           1314   ;------------------------------------------------------------
0290           1315   ;------------------------------------------------------------
0290           1316   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:407: void PWMStop(void) {
0290           1317   ;        -----------------------------------------
0290           1318   ;         function PWMStop
0290           1319   ;        -----------------------------------------
0290           1320   _PWMStop:
0290           1321   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:408: pwmSig1 = 0;
0290           1322   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:409: pwmSig2 = 0;
0290           1323   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:411: pwmSig3 = 0;
0290           1324   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:412: pwmSig4 = 0;
0290 E4        1325            clr     a
0291 F5E0      1326            mov     _pwmSig1,a
0293 F5E1      1327            mov     (_pwmSig1 + 1),a
0295 F5A0      1328            mov     _pwmSig2,a
0297 F5A1      1329            mov     (_pwmSig2 + 1),a
0299 F560      1330            mov     _pwmSig3,a
029B F561      1331            mov     (_pwmSig3 + 1),a
029D F520      1332            mov     _pwmSig4,a
029F F521      1333            mov     (_pwmSig4 + 1),a
02A1           1334   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:415: LEDRED = 0;
02A1 C287      1335            clr     _P0_7
02A3           1336   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:416: LEDGREEN = 1;
02A3 D286      1337            setb    _P0_6
02A5           1338   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:417: LEDWHITE = 1;
02A5 D290      1339            setb    _P1_0
02A7           1340   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:418: SPEAKER = 0;
02A7 C2A5      1341            clr     _P2_5
02A9 22        1342            ret
02AA           1343   ;------------------------------------------------------------
02AA           1344   ;Allocation info for local variables in function 'zero_time_calc'
02AA           1345   ;------------------------------------------------------------
02AA           1346   ;period1                   Allocated to registers r2 r3 r4 r5 
02AA           1347   ;overflow_count            Allocated with name '_zero_time_calc_overflow_count_1_73'
02AA           1348   ;------------------------------------------------------------
02AA           1349   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:421: float zero_time_calc(void) {
02AA           1350   ;        -----------------------------------------
02AA           1351   ;         function zero_time_calc
02AA           1352   ;        -----------------------------------------
02AA           1353   _zero_time_calc:
02AA           1354   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:425: TL0=0; 
02AA 758A00    1355            mov     _TL0,#0x00
02AD           1356   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:426: TH0=0;
02AD 758C00    1357            mov     _TH0,#0x00
02B0           1358   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:427: TF0=0;
02B0 C28D      1359            clr     _TF0
02B2           1360   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:428: overflow_count=0;
02B2 7A00      1361            mov     r2,#0x00
02B4 7B00      1362            mov     r3,#0x00
02B6           1363   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:429: TR0=0;
02B6 C28C      1364            clr     _TR0
02B8           1365   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:434: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt);
02B8           1366   L016001?:
02B8 75820C    1367            mov     dpl,#0x0C
02BB C002      1368            push    ar2
02BD C003      1369            push    ar3
02BF 120100    1370            lcall   _Volts_at_Pin
02C2 AC82      1371            mov     r4,dpl
02C4 AD83      1372            mov     r5,dph
02C6 AEF0      1373            mov     r6,b
02C8 FF        1374            mov     r7,a
02C9 74CD      1375            mov     a,#0xCD
02CB C0E0      1376            push    acc
02CD 74CC      1377            mov     a,#0xCC
02CF C0E0      1378            push    acc
02D1 744C      1379            mov     a,#0x4C
02D3 C0E0      1380            push    acc
02D5 743D      1381            mov     a,#0x3D
02D7 C0E0      1382            push    acc
02D9 8C82      1383            mov     dpl,r4
02DB 8D83      1384            mov     dph,r5
02DD 8EF0      1385            mov     b,r6
02DF EF        1386            mov     a,r7
02E0 120100    1387            lcall   ___fslt
02E3 AC82      1388            mov     r4,dpl
02E5 E581      1389            mov     a,sp
02E7 24FC      1390            add     a,#0xfc
02E9 F581      1391            mov     sp,a
02EB D003      1392            pop     ar3
02ED D002      1393            pop     ar2
02EF EC        1394            mov     a,r4
02F0 7001      1395            jnz     L016001?
02F2           1396   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:436: while(Volts_at_Pin(QFP32_MUX_P1_6)>=thresholdVolt);
02F2           1397   L016004?:
02F2 75820C    1398            mov     dpl,#0x0C
02F5 C002      1399            push    ar2
02F7 C003      1400            push    ar3
02F9 120100    1401            lcall   _Volts_at_Pin
02FC AC82      1402            mov     r4,dpl
02FE AD83      1403            mov     r5,dph
0300 AEF0      1404            mov     r6,b
0302 FF        1405            mov     r7,a
0303 74CD      1406            mov     a,#0xCD
0305 C0E0      1407            push    acc
0307 74CC      1408            mov     a,#0xCC
0309 C0E0      1409            push    acc
030B 744C      1410            mov     a,#0x4C
030D C0E0      1411            push    acc
030F 743D      1412            mov     a,#0x3D
0311 C0E0      1413            push    acc
0313 8C82      1414            mov     dpl,r4
0315 8D83      1415            mov     dph,r5
0317 8EF0      1416            mov     b,r6
0319 EF        1417            mov     a,r7
031A 120100    1418            lcall   ___fslt
031D AC82      1419            mov     r4,dpl
031F E581      1420            mov     a,sp
0321 24FC      1421            add     a,#0xfc
0323 F581      1422            mov     sp,a
0325 D003      1423            pop     ar3
0327 D002      1424            pop     ar2
0329 EC        1425            mov     a,r4
032A 6001      1426            jz      L016004?
032C           1427   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:438: TR0=1; // Start the timer
032C D28C      1428            setb    _TR0
032E           1429   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:439: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt) // (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000<1000) // Wait for the signal to be zero
032E E4        1430            clr     a
032F F508      1431            mov     _zero_time_calc_overflow_count_1_73,a
0331 F509      1432            mov     (_zero_time_calc_overflow_count_1_73 + 1),a
0333           1433   L016011?:
0333 75820C    1434            mov     dpl,#0x0C
0336 C002      1435            push    ar2
0338 C003      1436            push    ar3
033A 120100    1437            lcall   _Volts_at_Pin
033D AE82      1438            mov     r6,dpl
033F AF83      1439            mov     r7,dph
0341 A8F0      1440            mov     r0,b
0343 F9        1441            mov     r1,a
0344 74CD      1442            mov     a,#0xCD
0346 C0E0      1443            push    acc
0348 74CC      1444            mov     a,#0xCC
034A C0E0      1445            push    acc
034C 744C      1446            mov     a,#0x4C
034E C0E0      1447            push    acc
0350 743D      1448            mov     a,#0x3D
0352 C0E0      1449            push    acc
0354 8E82      1450            mov     dpl,r6
0356 8F83      1451            mov     dph,r7
0358 88F0      1452            mov     b,r0
035A E9        1453            mov     a,r1
035B 120100    1454            lcall   ___fslt
035E AE82      1455            mov     r6,dpl
0360 E581      1456            mov     a,sp
0362 24FC      1457            add     a,#0xfc
0364 F581      1458            mov     sp,a
0366 D003      1459            pop     ar3
0368 D002      1460            pop     ar2
036A EE        1461            mov     a,r6
036B 7001      1462            jnz     L016025?
036D 020100    1463            ljmp    L016013?
0370           1464   L016025?:
0370           1465   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:441: if(TF0==1) // Did the 16-bit timer overflow?
0370           1466   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:443: TF0=0;
0370 108D68    1467            jbc     _TF0,L016026?
0373 8001      1468            sjmp    L016008?
0375           1469   L016026?:
0375           1470   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:444: overflow_count++;
0375 0508      1471            inc     _zero_time_calc_overflow_count_1_73
0377 E4        1472            clr     a
0378 B508E8    1473            cjne    a,_zero_time_calc_overflow_count_1_73,L016027?
037B 0509      1474            inc     (_zero_time_calc_overflow_count_1_73 + 1)
037D           1475   L016027?:
037D AA08      1476            mov     r2,_zero_time_calc_overflow_count_1_73
037F AB09      1477            mov     r3,(_zero_time_calc_overflow_count_1_73 + 1)
0381           1478   L016008?:
0381           1479   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:446: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >1800) 
0381 C002      1480            push    ar2
0383 C003      1481            push    ar3
0385 850882    1482            mov     dpl,_zero_time_calc_overflow_count_1_73
0388 850983    1483            mov     dph,(_zero_time_calc_overflow_count_1_73 + 1)
038B C002      1484            push    ar2
038D C003      1485            push    ar3
038F 120100    1486            lcall   ___sint2fs
0392 AE82      1487            mov     r6,dpl
0394 AF83      1488            mov     r7,dph
0396 A8F0      1489            mov     r0,b
0398 F9        1490            mov     r1,a
0399 C006      1491            push    ar6
039B C007      1492            push    ar7
039D C000      1493            push    ar0
039F C001      1494            push    ar1
03A1 900000    1495            mov     dptr,#0x0000
03A4 75F080    1496            mov     b,#0x80
03A7 7447      1497            mov     a,#0x47
03A9 120100    1498            lcall   ___fsmul
03AC AE82      1499            mov     r6,dpl
03AE AF83      1500            mov     r7,dph
03B0 A8F0      1501            mov     r0,b
03B2 F9        1502            mov     r1,a
03B3 E581      1503            mov     a,sp
03B5 24FC      1504            add     a,#0xfc
03B7 F581      1505            mov     sp,a
03B9 D003      1506            pop     ar3
03BB D002      1507            pop     ar2
03BD 858C82    1508            mov     dpl,_TH0
03C0 C006      1509            push    ar6
03C2 C007      1510            push    ar7
03C4 C000      1511            push    ar0
03C6 C001      1512            push    ar1
03C8 120100    1513            lcall   ___uchar2fs
03CB AC82      1514            mov     r4,dpl
03CD AD83      1515            mov     r5,dph
03CF AAF0      1516            mov     r2,b
03D1 FB        1517            mov     r3,a
03D2 C004      1518            push    ar4
03D4 C005      1519            push    ar5
03D6 C002      1520            push    ar2
03D8 C003      1521            push    ar3
03DA 900000    1522            mov     dptr,#0x0000
03DD 75F080    1523            mov     b,#0x80
03E0 7443      1524            mov     a,#0x43
03E2 120100    1525            lcall   ___fsmul
03E5 AA82      1526            mov     r2,dpl
03E7 AB83      1527            mov     r3,dph
03E9 ACF0      1528            mov     r4,b
03EB FD        1529            mov     r5,a
03EC E581      1530            mov     a,sp
03EE 24FC      1531            add     a,#0xfc
03F0 F581      1532            mov     sp,a
03F2 D001      1533            pop     ar1
03F4 D000      1534            pop     ar0
03F6 D007      1535            pop     ar7
03F8 D006      1536            pop     ar6
03FA C002      1537            push    ar2
03FC C003      1538            push    ar3
03FE C004      1539            push    ar4
0400 C005      1540            push    ar5
0402 8E82      1541            mov     dpl,r6
0404 8F83      1542            mov     dph,r7
0406 88F0      1543            mov     b,r0
0408 E9        1544            mov     a,r1
0409 120100    1545            lcall   ___fsadd
040C AA82      1546            mov     r2,dpl
040E AB83      1547            mov     r3,dph
0410 ACF0      1548            mov     r4,b
0412 FD        1549            mov     r5,a
0413 E581      1550            mov     a,sp
0415 24FC      1551            add     a,#0xfc
0417 F581      1552            mov     sp,a
0419 AE8A      1553            mov     r6,_TL0
041B 7F00      1554            mov     r7,#0x00
041D 8E82      1555            mov     dpl,r6
041F 8F83      1556            mov     dph,r7
0421 C002      1557            push    ar2
0423 C003      1558            push    ar3
0425 C004      1559            push    ar4
0427 C005      1560            push    ar5
0429 120100    1561            lcall   ___sint2fs
042C AE82      1562            mov     r6,dpl
042E AF83      1563            mov     r7,dph
0430 A8F0      1564            mov     r0,b
0432 F9        1565            mov     r1,a
0433 D005      1566            pop     ar5
0435 D004      1567            pop     ar4
0437 D003      1568            pop     ar3
0439 D002      1569            pop     ar2
043B C006      1570            push    ar6
043D C007      1571            push    ar7
043F C000      1572            push    ar0
0441 C001      1573            push    ar1
0443 8A82      1574            mov     dpl,r2
0445 8B83      1575            mov     dph,r3
0447 8CF0      1576            mov     b,r4
0449 ED        1577            mov     a,r5
044A 120100    1578            lcall   ___fsadd
044D AA82      1579            mov     r2,dpl
044F AB83      1580            mov     r3,dph
0451 ACF0      1581            mov     r4,b
0453 FD        1582            mov     r5,a
0454 E581      1583            mov     a,sp
0456 24FC      1584            add     a,#0xfc
0458 F581      1585            mov     sp,a
045A C002      1586            push    ar2
045C C003      1587            push    ar3
045E C004      1588            push    ar4
0460 C005      1589            push    ar5
0462 90C33E    1590            mov     dptr,#0xC33E
0465 75F02E    1591            mov     b,#0x2E
0468 7439      1592            mov     a,#0x39
046A 120100    1593            lcall   ___fsmul
046D AA82      1594            mov     r2,dpl
046F AB83      1595            mov     r3,dph
0471 ACF0      1596            mov     r4,b
0473 FD        1597            mov     r5,a
0474 E581      1598            mov     a,sp
0476 24FC      1599            add     a,#0xfc
0478 F581      1600            mov     sp,a
047A C003      1601            push    ar3
047C E4        1602            clr     a
047D C0E0      1603            push    acc
047F C0E0      1604            push    acc
0481 74E1      1605            mov     a,#0xE1
0483 C0E0      1606            push    acc
0485 7444      1607            mov     a,#0x44
0487 C0E0      1608            push    acc
0489 8A82      1609            mov     dpl,r2
048B 8B83      1610            mov     dph,r3
048D 8CF0      1611            mov     b,r4
048F ED        1612            mov     a,r5
0490 120100    1613            lcall   ___fsgt
0493 AA82      1614            mov     r2,dpl
0495 E581      1615            mov     a,sp
0497 24FC      1616            add     a,#0xfc
0499 F581      1617            mov     sp,a
049B D003      1618            pop     ar3
049D EA        1619            mov     a,r2
049E D003      1620            pop     ar3
04A0 D002      1621            pop     ar2
04A2 7001      1622            jnz     L016028?
04A4 020100    1623            ljmp    L016011?
04A7           1624   L016028?:
04A7           1625   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:447: return 1800;
04A7 900000    1626            mov     dptr,#0x0000
04AA 75F0E1    1627            mov     b,#0xE1
04AD 7444      1628            mov     a,#0x44
04AF 22        1629            ret
04B0           1630   L016013?:
04B0           1631   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:450: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
04B0 C28C      1632            clr     _TR0
04B2           1633   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:451: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000;
04B2 8A82      1634            mov     dpl,r2
04B4 8B83      1635            mov     dph,r3
04B6 120100    1636            lcall   ___sint2fs
04B9 AA82      1637            mov     r2,dpl
04BB AB83      1638            mov     r3,dph
04BD ACF0      1639            mov     r4,b
04BF FD        1640            mov     r5,a
04C0 C002      1641            push    ar2
04C2 C003      1642            push    ar3
04C4 C004      1643            push    ar4
04C6 C005      1644            push    ar5
04C8 900000    1645            mov     dptr,#0x0000
04CB 75F080    1646            mov     b,#0x80
04CE 7447      1647            mov     a,#0x47
04D0 120100    1648            lcall   ___fsmul
04D3 AA82      1649            mov     r2,dpl
04D5 AB83      1650            mov     r3,dph
04D7 ACF0      1651            mov     r4,b
04D9 FD        1652            mov     r5,a
04DA E581      1653            mov     a,sp
04DC 24FC      1654            add     a,#0xfc
04DE F581      1655            mov     sp,a
04E0 858C82    1656            mov     dpl,_TH0
04E3 C002      1657            push    ar2
04E5 C003      1658            push    ar3
04E7 C004      1659            push    ar4
04E9 C005      1660            push    ar5
04EB 120100    1661            lcall   ___uchar2fs
04EE AE82      1662            mov     r6,dpl
04F0 AF83      1663            mov     r7,dph
04F2 A8F0      1664            mov     r0,b
04F4 F9        1665            mov     r1,a
04F5 C006      1666            push    ar6
04F7 C007      1667            push    ar7
04F9 C000      1668            push    ar0
04FB C001      1669            push    ar1
04FD 900000    1670            mov     dptr,#0x0000
0500 75F080    1671            mov     b,#0x80
0503 7443      1672            mov     a,#0x43
0505 120100    1673            lcall   ___fsmul
0508 AE82      1674            mov     r6,dpl
050A AF83      1675            mov     r7,dph
050C A8F0      1676            mov     r0,b
050E F9        1677            mov     r1,a
050F E581      1678            mov     a,sp
0511 24FC      1679            add     a,#0xfc
0513 F581      1680            mov     sp,a
0515 D005      1681            pop     ar5
0517 D004      1682            pop     ar4
0519 D003      1683            pop     ar3
051B D002      1684            pop     ar2
051D C006      1685            push    ar6
051F C007      1686            push    ar7
0521 C000      1687            push    ar0
0523 C001      1688            push    ar1
0525 8A82      1689            mov     dpl,r2
0527 8B83      1690            mov     dph,r3
0529 8CF0      1691            mov     b,r4
052B ED        1692            mov     a,r5
052C 120100    1693            lcall   ___fsadd
052F AA82      1694            mov     r2,dpl
0531 AB83      1695            mov     r3,dph
0533 ACF0      1696            mov     r4,b
0535 FD        1697            mov     r5,a
0536 E581      1698            mov     a,sp
0538 24FC      1699            add     a,#0xfc
053A F581      1700            mov     sp,a
053C AE8A      1701            mov     r6,_TL0
053E 7F00      1702            mov     r7,#0x00
0540 8E82      1703            mov     dpl,r6
0542 8F83      1704            mov     dph,r7
0544 C002      1705            push    ar2
0546 C003      1706            push    ar3
0548 C004      1707            push    ar4
054A C005      1708            push    ar5
054C 120100    1709            lcall   ___sint2fs
054F AE82      1710            mov     r6,dpl
0551 AF83      1711            mov     r7,dph
0553 A8F0      1712            mov     r0,b
0555 F9        1713            mov     r1,a
0556 D005      1714            pop     ar5
0558 D004      1715            pop     ar4
055A D003      1716            pop     ar3
055C D002      1717            pop     ar2
055E C006      1718            push    ar6
0560 C007      1719            push    ar7
0562 C000      1720            push    ar0
0564 C001      1721            push    ar1
0566 8A82      1722            mov     dpl,r2
0568 8B83      1723            mov     dph,r3
056A 8CF0      1724            mov     b,r4
056C ED        1725            mov     a,r5
056D 120100    1726            lcall   ___fsadd
0570 AA82      1727            mov     r2,dpl
0572 AB83      1728            mov     r3,dph
0574 ACF0      1729            mov     r4,b
0576 FD        1730            mov     r5,a
0577 E581      1731            mov     a,sp
0579 24FC      1732            add     a,#0xfc
057B F581      1733            mov     sp,a
057D C002      1734            push    ar2
057F C003      1735            push    ar3
0581 C004      1736            push    ar4
0583 C005      1737            push    ar5
0585 90C33E    1738            mov     dptr,#0xC33E
0588 75F02E    1739            mov     b,#0x2E
058B 7439      1740            mov     a,#0x39
058D 120100    1741            lcall   ___fsmul
0590 AA82      1742            mov     r2,dpl
0592 AB83      1743            mov     r3,dph
0594 ACF0      1744            mov     r4,b
0596 FD        1745            mov     r5,a
0597 E581      1746            mov     a,sp
0599 24FC      1747            add     a,#0xfc
059B F581      1748            mov     sp,a
059D           1749   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:454: return period1; //return period of high pulse in seconds
059D 8A82      1750            mov     dpl,r2
059F 8B83      1751            mov     dph,r3
05A1 8CF0      1752            mov     b,r4
05A3 ED        1753            mov     a,r5
05A4 22        1754            ret
05A5           1755   ;------------------------------------------------------------
05A5           1756   ;Allocation info for local variables in function 'arrayEqual'
05A5           1757   ;------------------------------------------------------------
05A5           1758   ;size                      Allocated with name '_arrayEqual_PARM_2'
05A5           1759   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
05A5           1760   ;arr1                      Allocated with name '_arrayEqual_arr1_1_76'
05A5           1761   ;i                         Allocated to registers r5 r6 
05A5           1762   ;------------------------------------------------------------
05A5           1763   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:458: int arrayEqual (int arr1[], int size, int arr2[]){
05A5           1764   ;        -----------------------------------------
05A5           1765   ;         function arrayEqual
05A5           1766   ;        -----------------------------------------
05A5           1767   _arrayEqual:
05A5 858298    1768            mov     _arrayEqual_arr1_1_76,dpl
05A8 858399    1769            mov     (_arrayEqual_arr1_1_76 + 1),dph
05AB 85F09A    1770            mov     (_arrayEqual_arr1_1_76 + 2),b
05AE           1771   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:460: for(i=0; i<size; i++){
05AE 7D00      1772            mov     r5,#0x00
05B0 7E00      1773            mov     r6,#0x00
05B2           1774   L017003?:
05B2 C3        1775            clr     c
05B3 ED        1776            mov     a,r5
05B4 9508      1777            subb    a,_arrayEqual_PARM_2
05B6 EE        1778            mov     a,r6
05B7 6480      1779            xrl     a,#0x80
05B9 8509F0    1780            mov     b,(_arrayEqual_PARM_2 + 1)
05BC 63F080    1781            xrl     b,#0x80
05BF 95F0      1782            subb    a,b
05C1 5001      1783            jnc     L017006?
05C3           1784   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:461: if(arr1[i]!=arr2[i])
05C3 8D07      1785            mov     ar7,r5
05C5 EE        1786            mov     a,r6
05C6 CF        1787            xch     a,r7
05C7 25E0      1788            add     a,acc
05C9 CF        1789            xch     a,r7
05CA 33        1790            rlc     a
05CB F8        1791            mov     r0,a
05CC EF        1792            mov     a,r7
05CD 2598      1793            add     a,_arrayEqual_arr1_1_76
05CF F9        1794            mov     r1,a
05D0 E8        1795            mov     a,r0
05D1 3599      1796            addc    a,(_arrayEqual_arr1_1_76 + 1)
05D3 FA        1797            mov     r2,a
05D4 AB9A      1798            mov     r3,(_arrayEqual_arr1_1_76 + 2)
05D6 8982      1799            mov     dpl,r1
05D8 8A83      1800            mov     dph,r2
05DA 8BF0      1801            mov     b,r3
05DC 120100    1802            lcall   __gptrget
05DF F9        1803            mov     r1,a
05E0 A3        1804            inc     dptr
05E1 120100    1805            lcall   __gptrget
05E4 FA        1806            mov     r2,a
05E5 EF        1807            mov     a,r7
05E6 25B8      1808            add     a,_arrayEqual_PARM_3
05E8 FF        1809            mov     r7,a
05E9 E8        1810            mov     a,r0
05EA 35B9      1811            addc    a,(_arrayEqual_PARM_3 + 1)
05EC F8        1812            mov     r0,a
05ED ABBA      1813            mov     r3,(_arrayEqual_PARM_3 + 2)
05EF 8F82      1814            mov     dpl,r7
05F1 8883      1815            mov     dph,r0
05F3 8BF0      1816            mov     b,r3
05F5 120100    1817            lcall   __gptrget
05F8 FF        1818            mov     r7,a
05F9 A3        1819            inc     dptr
05FA 120100    1820            lcall   __gptrget
05FD F8        1821            mov     r0,a
05FE E9        1822            mov     a,r1
05FF B50728    1823            cjne    a,ar7,L017013?
0602 EA        1824            mov     a,r2
0603 B50028    1825            cjne    a,ar0,L017013?
0606 8001      1826            sjmp    L017005?
0608           1827   L017013?:
0608           1828   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:462: return 0; 
0608 900000    1829            mov     dptr,#0x0000
060B 22        1830            ret
060C           1831   L017005?:
060C           1832   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:460: for(i=0; i<size; i++){
060C 0D        1833            inc     r5
060D BD0068    1834            cjne    r5,#0x00,L017003?
0610 0E        1835            inc     r6
0611 8001      1836            sjmp    L017003?
0613           1837   L017006?:
0613           1838   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:464: return 1; 
0613 900001    1839            mov     dptr,#0x0001
0616 22        1840            ret
0617           1841   ;------------------------------------------------------------
0617           1842   ;Allocation info for local variables in function 'checkCommands'
0617           1843   ;------------------------------------------------------------
0617           1844   ;------------------------------------------------------------
0617           1845   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:470: void checkCommands (void){
0617           1846   ;        -----------------------------------------
0617           1847   ;         function checkCommands
0617           1848   ;        -----------------------------------------
0617           1849   _checkCommands:
0617           1850   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:471: if(arrayEqual(command, 4, stop)) PWMStop();
0617 75B888    1851            mov     _arrayEqual_PARM_3,#_stop
061A 75B900    1852            mov     (_arrayEqual_PARM_3 + 1),#0x00
061D 75BA40    1853            mov     (_arrayEqual_PARM_3 + 2),#0x40
0620 750804    1854            mov     _arrayEqual_PARM_2,#0x04
0623 E4        1855            clr     a
0624 F509      1856            mov     (_arrayEqual_PARM_2 + 1),a
0626 901948    1857            mov     dptr,#_command
0629 75F040    1858            mov     b,#0x40
062C 120100    1859            lcall   _arrayEqual
062F E582      1860            mov     a,dpl
0631 8583F0    1861            mov     b,dph
0634 45F0      1862            orl     a,b
0636 6001      1863            jz      L018014?
0638 020100    1864            ljmp    _PWMStop
063B           1865   L018014?:
063B           1866   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:472: else if (arrayEqual(command,4,forward)) PWMforward(); 
063B 75B848    1867            mov     _arrayEqual_PARM_3,#_forward
063E 75B900    1868            mov     (_arrayEqual_PARM_3 + 1),#0x00
0641 75BA40    1869            mov     (_arrayEqual_PARM_3 + 2),#0x40
0644 750804    1870            mov     _arrayEqual_PARM_2,#0x04
0647 E4        1871            clr     a
0648 F509      1872            mov     (_arrayEqual_PARM_2 + 1),a
064A 901948    1873            mov     dptr,#_command
064D 75F040    1874            mov     b,#0x40
0650 120100    1875            lcall   _arrayEqual
0653 E582      1876            mov     a,dpl
0655 8583F0    1877            mov     b,dph
0658 45F0      1878            orl     a,b
065A 6001      1879            jz      L018011?
065C 020100    1880            ljmp    _PWMforward
065F           1881   L018011?:
065F           1882   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:473: else if (arrayEqual(command,4,backward)) PWMbackward(); 
065F 75B808    1883            mov     _arrayEqual_PARM_3,#_backward
0662 75B900    1884            mov     (_arrayEqual_PARM_3 + 1),#0x00
0665 75BA40    1885            mov     (_arrayEqual_PARM_3 + 2),#0x40
0668 750804    1886            mov     _arrayEqual_PARM_2,#0x04
066B E4        1887            clr     a
066C F509      1888            mov     (_arrayEqual_PARM_2 + 1),a
066E 901948    1889            mov     dptr,#_command
0671 75F040    1890            mov     b,#0x40
0674 120100    1891            lcall   _arrayEqual
0677 E582      1892            mov     a,dpl
0679 8583F0    1893            mov     b,dph
067C 45F0      1894            orl     a,b
067E 6001      1895            jz      L018008?
0680 020100    1896            ljmp    _PWMbackward
0683           1897   L018008?:
0683           1898   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:474: else if (arrayEqual(command,4, left)) PWMLeft(); 
0683 75B8C8    1899            mov     _arrayEqual_PARM_3,#_left
0686 75B900    1900            mov     (_arrayEqual_PARM_3 + 1),#0x00
0689 75BA40    1901            mov     (_arrayEqual_PARM_3 + 2),#0x40
068C 750804    1902            mov     _arrayEqual_PARM_2,#0x04
068F E4        1903            clr     a
0690 F509      1904            mov     (_arrayEqual_PARM_2 + 1),a
0692 901948    1905            mov     dptr,#_command
0695 75F040    1906            mov     b,#0x40
0698 120100    1907            lcall   _arrayEqual
069B E582      1908            mov     a,dpl
069D 8583F0    1909            mov     b,dph
06A0 45F0      1910            orl     a,b
06A2 6001      1911            jz      L018005?
06A4 020100    1912            ljmp    _PWMLeft
06A7           1913   L018005?:
06A7           1914   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:475: else if (arrayEqual(command,4, right)) PWMRight(); 
06A7 75B888    1915            mov     _arrayEqual_PARM_3,#_right
06AA 75B900    1916            mov     (_arrayEqual_PARM_3 + 1),#0x00
06AD 75BA40    1917            mov     (_arrayEqual_PARM_3 + 2),#0x40
06B0 750804    1918            mov     _arrayEqual_PARM_2,#0x04
06B3 E4        1919            clr     a
06B4 F509      1920            mov     (_arrayEqual_PARM_2 + 1),a
06B6 901948    1921            mov     dptr,#_command
06B9 75F040    1922            mov     b,#0x40
06BC 120100    1923            lcall   _arrayEqual
06BF E582      1924            mov     a,dpl
06C1 8583F0    1925            mov     b,dph
06C4 45F0      1926            orl     a,b
06C6 6001      1927            jz      L018002?
06C8 020100    1928            ljmp    _PWMRight
06CB           1929   L018002?:
06CB           1930   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:476: else PWMStop(); //defaults to a halt (redundant)
06CB 020100    1931            ljmp    _PWMStop
06CE           1932   ;------------------------------------------------------------
06CE           1933   ;Allocation info for local variables in function 'voltsAtPeak'
06CE           1934   ;------------------------------------------------------------
06CE           1935   ;------------------------------------------------------------
06CE           1936   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:482: float voltsAtPeak(void) {
06CE           1937   ;        -----------------------------------------
06CE           1938   ;         function voltsAtPeak
06CE           1939   ;        -----------------------------------------
06CE           1940   _voltsAtPeak:
06CE           1941   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:484: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
06CE           1942   L019001?:
06CE 75820C    1943            mov     dpl,#0x0C
06D1 120100    1944            lcall   _ADC_at_Pin
06D4 E582      1945            mov     a,dpl
06D6 8583F0    1946            mov     b,dph
06D9 45F0      1947            orl     a,b
06DB 6001      1948            jz      L019001?
06DD           1949   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:485: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
06DD 900000    1950            mov     dptr,#0x0000
06E0 120100    1951            lcall   _Timer3us
06E3           1952   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:486: return(Volts_at_Pin(QFP32_MUX_P1_6));
06E3 75820C    1953            mov     dpl,#0x0C
06E6 020100    1954            ljmp    _Volts_at_Pin
06E9           1955   ;------------------------------------------------------------
06E9           1956   ;Allocation info for local variables in function 'getDigitalSignal'
06E9           1957   ;------------------------------------------------------------
06E9           1958   ;------------------------------------------------------------
06E9           1959   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:499: int getDigitalSignal (void){
06E9           1960   ;        -----------------------------------------
06E9           1961   ;         function getDigitalSignal
06E9           1962   ;        -----------------------------------------
06E9           1963   _getDigitalSignal:
06E9           1964   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:501: if (voltsAtPeak()>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
06E9 120100    1965            lcall   _voltsAtPeak
06EC AA82      1966            mov     r2,dpl
06EE AB83      1967            mov     r3,dph
06F0 ACF0      1968            mov     r4,b
06F2 FD        1969            mov     r5,a
06F3 74CD      1970            mov     a,#0xCD
06F5 C0E0      1971            push    acc
06F7 74CC      1972            mov     a,#0xCC
06F9 C0E0      1973            push    acc
06FB 744C      1974            mov     a,#0x4C
06FD C0E0      1975            push    acc
06FF 743D      1976            mov     a,#0x3D
0701 C0E0      1977            push    acc
0703 8A82      1978            mov     dpl,r2
0705 8B83      1979            mov     dph,r3
0707 8CF0      1980            mov     b,r4
0709 ED        1981            mov     a,r5
070A 120100    1982            lcall   ___fslt
070D AA82      1983            mov     r2,dpl
070F E581      1984            mov     a,sp
0711 24FC      1985            add     a,#0xfc
0713 F581      1986            mov     sp,a
0715 EA        1987            mov     a,r2
0716 7001      1988            jnz     L020002?
0718           1989   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:503: printf("\nread 1:  at pin 1.6: %f\r", voltsAtPeak());
0718 120100    1990            lcall   _voltsAtPeak
071B AA82      1991            mov     r2,dpl
071D AB83      1992            mov     r3,dph
071F ACF0      1993            mov     r4,b
0721 FD        1994            mov     r5,a
0722 C002      1995            push    ar2
0724 C003      1996            push    ar3
0726 C004      1997            push    ar4
0728 C005      1998            push    ar5
072A 7468      1999            mov     a,#__str_0
072C C0E0      2000            push    acc
072E 74CE      2001            mov     a,#(__str_0 >> 8)
0730 C0E0      2002            push    acc
0732 7480      2003            mov     a,#0x80
0734 C0E0      2004            push    acc
0736 120100    2005            lcall   _printf
0739 E581      2006            mov     a,sp
073B 24F9      2007            add     a,#0xf9
073D F581      2008            mov     sp,a
073F           2009   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:504: return 1;
073F 900001    2010            mov     dptr,#0x0001
0742 22        2011            ret
0743           2012   L020002?:
0743           2013   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:507: printf("\nread 0: Volt at pin 1.6: %f\r", voltsAtPeak());
0743 120100    2014            lcall   _voltsAtPeak
0746 AA82      2015            mov     r2,dpl
0748 AB83      2016            mov     r3,dph
074A ACF0      2017            mov     r4,b
074C FD        2018            mov     r5,a
074D C002      2019            push    ar2
074F C003      2020            push    ar3
0751 C004      2021            push    ar4
0753 C005      2022            push    ar5
0755 74E8      2023            mov     a,#__str_1
0757 C0E0      2024            push    acc
0759 74CE      2025            mov     a,#(__str_1 >> 8)
075B C0E0      2026            push    acc
075D 7480      2027            mov     a,#0x80
075F C0E0      2028            push    acc
0761 120100    2029            lcall   _printf
0764 E581      2030            mov     a,sp
0766 24F9      2031            add     a,#0xf9
0768 F581      2032            mov     sp,a
076A           2033   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:508: return 0; 
076A 900000    2034            mov     dptr,#0x0000
076D 22        2035            ret
076E           2036   ;------------------------------------------------------------
076E           2037   ;Allocation info for local variables in function 'waitquarterperiod'
076E           2038   ;------------------------------------------------------------
076E           2039   ;------------------------------------------------------------
076E           2040   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:516: void waitquarterperiod(void){
076E           2041   ;        -----------------------------------------
076E           2042   ;         function waitquarterperiod
076E           2043   ;        -----------------------------------------
076E           2044   _waitquarterperiod:
076E           2045   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:517: waitms(constant_delay_time);
076E 90000A    2046            mov     dptr,#0x000A
0771 020100    2047            ljmp    _waitms
0774           2048   ;------------------------------------------------------------
0774           2049   ;Allocation info for local variables in function 'recieveData'
0774           2050   ;------------------------------------------------------------
0774           2051   ;checkcomm                 Allocated to registers 
0774           2052   ;i                         Allocated to registers r2 r3 
0774           2053   ;------------------------------------------------------------
0774           2054   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:523: void recieveData (){
0774           2055   ;        -----------------------------------------
0774           2056   ;         function recieveData
0774           2057   ;        -----------------------------------------
0774           2058   _recieveData:
0774           2059   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:527: while(getDigitalSignal()==0);          //wait for the signal to be 1 
0774           2060   L022001?:
0774 120100    2061            lcall   _getDigitalSignal
0777 E582      2062            mov     a,dpl
0779 8583F0    2063            mov     b,dph
077C 45F0      2064            orl     a,b
077E 6001      2065            jz      L022001?
0780           2066   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:528: if (getDigitalSignal()==1){    //gets the first 1 that identifies a command 
0780 120100    2067            lcall   _getDigitalSignal
0783 AA82      2068            mov     r2,dpl
0785 AB83      2069            mov     r3,dph
0787 BA0168    2070            cjne    r2,#0x01,L022010?
078A BB0068    2071            cjne    r3,#0x00,L022010?
078D           2072   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:529: command[0]=1;
078D 754801    2073            mov     _command,#0x01
0790 754900    2074            mov     (_command + 1),#0x00
0793           2075   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:530: for( i=1; i<4; i++){
0793 7A01      2076            mov     r2,#0x01
0795 7B00      2077            mov     r3,#0x00
0797           2078   L022006?:
0797 C3        2079            clr     c
0798 EA        2080            mov     a,r2
0799 9404      2081            subb    a,#0x04
079B EB        2082            mov     a,r3
079C 6480      2083            xrl     a,#0x80
079E 9480      2084            subb    a,#0x80
07A0 5001      2085            jnc     L022009?
07A2           2086   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:531: waitms(constant_delay_time);
07A2 90000A    2087            mov     dptr,#0x000A
07A5 C002      2088            push    ar2
07A7 C003      2089            push    ar3
07A9 120100    2090            lcall   _waitms
07AC D003      2091            pop     ar3
07AE D002      2092            pop     ar2
07B0           2093   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:532: command[i]=getDigitalSignal();         
07B0 8A04      2094            mov     ar4,r2
07B2 EB        2095            mov     a,r3
07B3 CC        2096            xch     a,r4
07B4 25E0      2097            add     a,acc
07B6 CC        2098            xch     a,r4
07B7 33        2099            rlc     a
07B8 EC        2100            mov     a,r4
07B9 2448      2101            add     a,#_command
07BB F8        2102            mov     r0,a
07BC C002      2103            push    ar2
07BE C003      2104            push    ar3
07C0 C000      2105            push    ar0
07C2 120100    2106            lcall   _getDigitalSignal
07C5 E582      2107            mov     a,dpl
07C7 8583F0    2108            mov     b,dph
07CA D000      2109            pop     ar0
07CC D003      2110            pop     ar3
07CE D002      2111            pop     ar2
07D0 F6        2112            mov     @r0,a
07D1 08        2113            inc     r0
07D2 A6F0      2114            mov     @r0,b
07D4 18        2115            dec     r0
07D5           2116   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:530: for( i=1; i<4; i++){
07D5 0A        2117            inc     r2
07D6 BA00A8    2118            cjne    r2,#0x00,L022006?
07D9 0B        2119            inc     r3
07DA 8001      2120            sjmp    L022006?
07DC           2121   L022009?:
07DC           2122   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:535: checkCommands();                               //does activity depending on the command given 
07DC 020100    2123            ljmp    _checkCommands
07DF           2124   L022010?:
07DF 22        2125            ret
07E0           2126   ;------------------------------------------------------------
07E0           2127   ;Allocation info for local variables in function 'checkMode'
07E0           2128   ;------------------------------------------------------------
07E0           2129   ;------------------------------------------------------------
07E0           2130   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:541: int checkMode(){
07E0           2131   ;        -----------------------------------------
07E0           2132   ;         function checkMode
07E0           2133   ;        -----------------------------------------
07E0           2134   _checkMode:
07E0           2135   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:542: if(!BUTTON1 || x == 0){
07E0 30B128    2136            jnb     _P3_1,L023001?
07E3 E508      2137            mov     a,_x
07E5 4509      2138            orl     a,(_x + 1)
07E7 7001      2139            jnz     L023019?
07E9           2140   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:543: while(!BUTTON1);
07E9           2141   L023001?:
07E9 30B128    2142            jnb     _P3_1,L023001?
07EC           2143   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:544: x= 0;
07EC           2144   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:545: return 0;
07EC E4        2145            clr     a
07ED F508      2146            mov     _x,a
07EF F509      2147            mov     (_x + 1),a
07F1 F582      2148            mov     dpl,a
07F3 F583      2149            mov     dph,a
07F5 22        2150            ret
07F6           2151   L023019?:
07F6           2152   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:547: else if(!BUTTON2 || x == 1){
07F6 30B3A8    2153            jnb     _P3_3,L023004?
07F9 7401      2154            mov     a,#0x01
07FB B508E8    2155            cjne    a,_x,L023037?
07FE E4        2156            clr     a
07FF B509E8    2157            cjne    a,(_x + 1),L023037?
0802 8001      2158            sjmp    L023038?
0804           2159   L023037?:
0804 8001      2160            sjmp    L023015?
0806           2161   L023038?:
0806           2162   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:548: while(!BUTTON2);
0806           2163   L023004?:
0806 30B3A8    2164            jnb     _P3_3,L023004?
0809           2165   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:549: x = 1;
0809 750801    2166            mov     _x,#0x01
080C E4        2167            clr     a
080D F509      2168            mov     (_x + 1),a
080F           2169   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:550: return 1;
080F 900001    2170            mov     dptr,#0x0001
0812 22        2171            ret
0813           2172   L023015?:
0813           2173   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:552: else if(!BUTTON3 || x == 3){
0813 30B7A8    2174            jnb     _P3_7,L023007?
0816 7403      2175            mov     a,#0x03
0818 B508E8    2176            cjne    a,_x,L023041?
081B E4        2177            clr     a
081C B509E8    2178            cjne    a,(_x + 1),L023041?
081F 8001      2179            sjmp    L023042?
0821           2180   L023041?:
0821 8001      2181            sjmp    L023011?
0823           2182   L023042?:
0823           2183   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:553: while(!BUTTON3);
0823           2184   L023007?:
0823 30B7A8    2185            jnb     _P3_7,L023007?
0826           2186   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:554: x = 3;
0826 750803    2187            mov     _x,#0x03
0829 E4        2188            clr     a
082A F509      2189            mov     (_x + 1),a
082C           2190   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:555: return 3;
082C 900003    2191            mov     dptr,#0x0003
082F 22        2192            ret
0830           2193   L023011?:
0830           2194   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:558: x = 2;
0830 750802    2195            mov     _x,#0x02
0833 E4        2196            clr     a
0834 F509      2197            mov     (_x + 1),a
0836           2198   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:559: return 2;
0836 900002    2199            mov     dptr,#0x0002
0839 22        2200            ret
083A           2201   ;------------------------------------------------------------
083A           2202   ;Allocation info for local variables in function 'detectobstacle'
083A           2203   ;------------------------------------------------------------
083A           2204   ;threshold                 Allocated to registers r2 r3 r4 r5 
083A           2205   ;------------------------------------------------------------
083A           2206   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:564: void detectobstacle(float threshold){
083A           2207   ;        -----------------------------------------
083A           2208   ;         function detectobstacle
083A           2209   ;        -----------------------------------------
083A           2210   _detectobstacle:
083A AA82      2211            mov     r2,dpl
083C AB83      2212            mov     r3,dph
083E ACF0      2213            mov     r4,b
0840 FD        2214            mov     r5,a
0841           2215   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:575: if(threshold <= 0.6 ){
0841 749A      2216            mov     a,#0x9A
0843 C0E0      2217            push    acc
0845 7499      2218            mov     a,#0x99
0847 C0E0      2219            push    acc
0849 7419      2220            mov     a,#0x19
084B C0E0      2221            push    acc
084D 743F      2222            mov     a,#0x3F
084F C0E0      2223            push    acc
0851 8A82      2224            mov     dpl,r2
0853 8B83      2225            mov     dph,r3
0855 8CF0      2226            mov     b,r4
0857 ED        2227            mov     a,r5
0858 120100    2228            lcall   ___fsgt
085B AA82      2229            mov     r2,dpl
085D E581      2230            mov     a,sp
085F 24FC      2231            add     a,#0xfc
0861 F581      2232            mov     sp,a
0863 EA        2233            mov     a,r2
0864 7001      2234            jnz     L024002?
0866           2235   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:577: printf("Turn right \r\n");
0866 74E8      2236            mov     a,#__str_2
0868 C0E0      2237            push    acc
086A 74D2      2238            mov     a,#(__str_2 >> 8)
086C C0E0      2239            push    acc
086E 7480      2240            mov     a,#0x80
0870 C0E0      2241            push    acc
0872 120100    2242            lcall   _printf
0875 1581      2243            dec     sp
0877 1581      2244            dec     sp
0879 1581      2245            dec     sp
087B           2246   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:578: PWMRight();
087B 120100    2247            lcall   _PWMRight
087E           2248   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:579: waitms(500); //Make waits longer
087E 9001F4    2249            mov     dptr,#0x01F4
0881 120100    2250            lcall   _waitms
0884           2251   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:580: waitms(500); 
0884 9001F4    2252            mov     dptr,#0x01F4
0887 120100    2253            lcall   _waitms
088A           2254   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:581: waitms(300); 
088A 90012C    2255            mov     dptr,#0x012C
088D 120100    2256            lcall   _waitms
0890           2257   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:583: PWMStop();
0890 120100    2258            lcall   _PWMStop
0893           2259   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:584: waitms(500);
0893 9001F4    2260            mov     dptr,#0x01F4
0896 120100    2261            lcall   _waitms
0899           2262   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:585: waitms(250);
0899 9000FA    2263            mov     dptr,#0x00FA
089C 020100    2264            ljmp    _waitms
089F           2265   L024002?:
089F           2266   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:590: printf("Go Straight \r\n");
089F 7428      2267            mov     a,#__str_3
08A1 C0E0      2268            push    acc
08A3 74D3      2269            mov     a,#(__str_3 >> 8)
08A5 C0E0      2270            push    acc
08A7 7480      2271            mov     a,#0x80
08A9 C0E0      2272            push    acc
08AB 120100    2273            lcall   _printf
08AE 1581      2274            dec     sp
08B0 1581      2275            dec     sp
08B2 1581      2276            dec     sp
08B4           2277   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:592: PWMforward();
08B4 020100    2278            ljmp    _PWMforward
08B7           2279   ;------------------------------------------------------------
08B7           2280   ;Allocation info for local variables in function 'laserPattern'
08B7           2281   ;------------------------------------------------------------
08B7           2282   ;rate                      Allocated to registers r2 r3 r4 r5 
08B7           2283   ;------------------------------------------------------------
08B7           2284   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:599: void laserPattern(float rate){
08B7           2285   ;        -----------------------------------------
08B7           2286   ;         function laserPattern
08B7           2287   ;        -----------------------------------------
08B7           2288   _laserPattern:
08B7 AA82      2289            mov     r2,dpl
08B9 AB83      2290            mov     r3,dph
08BB ACF0      2291            mov     r4,b
08BD FD        2292            mov     r5,a
08BE           2293   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:600: LASER = 0;
08BE C2B0      2294            clr     _P3_0
08C0           2295   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:601: if(rate<0.8)
08C0 C002      2296            push    ar2
08C2 C003      2297            push    ar3
08C4 C004      2298            push    ar4
08C6 C005      2299            push    ar5
08C8 74CD      2300            mov     a,#0xCD
08CA C0E0      2301            push    acc
08CC 74CC      2302            mov     a,#0xCC
08CE C0E0      2303            push    acc
08D0 744C      2304            mov     a,#0x4C
08D2 C0E0      2305            push    acc
08D4 743F      2306            mov     a,#0x3F
08D6 C0E0      2307            push    acc
08D8 8A82      2308            mov     dpl,r2
08DA 8B83      2309            mov     dph,r3
08DC 8CF0      2310            mov     b,r4
08DE ED        2311            mov     a,r5
08DF 120100    2312            lcall   ___fslt
08E2 AE82      2313            mov     r6,dpl
08E4 E581      2314            mov     a,sp
08E6 24FC      2315            add     a,#0xfc
08E8 F581      2316            mov     sp,a
08EA D005      2317            pop     ar5
08EC D004      2318            pop     ar4
08EE D003      2319            pop     ar3
08F0 D002      2320            pop     ar2
08F2 EE        2321            mov     a,r6
08F3 6001      2322            jz      L025010?
08F5           2323   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:602: waitms(200);
08F5 9000C8    2324            mov     dptr,#0x00C8
08F8 120100    2325            lcall   _waitms
08FB 020100    2326            ljmp    L025011?
08FE           2327   L025010?:
08FE           2328   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:603: else if(rate>=0.8 && rate<2.0)
08FE EE        2329            mov     a,r6
08FF 7001      2330            jnz     L025006?
0901 C002      2331            push    ar2
0903 C003      2332            push    ar3
0905 C004      2333            push    ar4
0907 C005      2334            push    ar5
0909 E4        2335            clr     a
090A C0E0      2336            push    acc
090C C0E0      2337            push    acc
090E C0E0      2338            push    acc
0910 7440      2339            mov     a,#0x40
0912 C0E0      2340            push    acc
0914 8A82      2341            mov     dpl,r2
0916 8B83      2342            mov     dph,r3
0918 8CF0      2343            mov     b,r4
091A ED        2344            mov     a,r5
091B 120100    2345            lcall   ___fslt
091E AE82      2346            mov     r6,dpl
0920 E581      2347            mov     a,sp
0922 24FC      2348            add     a,#0xfc
0924 F581      2349            mov     sp,a
0926 D005      2350            pop     ar5
0928 D004      2351            pop     ar4
092A D003      2352            pop     ar3
092C D002      2353            pop     ar2
092E EE        2354            mov     a,r6
092F 6001      2355            jz      L025006?
0931           2356   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:604: waitms(500);
0931 9001F4    2357            mov     dptr,#0x01F4
0934 120100    2358            lcall   _waitms
0937 8001      2359            sjmp    L025011?
0939           2360   L025006?:
0939           2361   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:605: else if(rate>=2.0 && rate<2.8)
0939 C002      2362            push    ar2
093B C003      2363            push    ar3
093D C004      2364            push    ar4
093F C005      2365            push    ar5
0941 E4        2366            clr     a
0942 C0E0      2367            push    acc
0944 C0E0      2368            push    acc
0946 C0E0      2369            push    acc
0948 7440      2370            mov     a,#0x40
094A C0E0      2371            push    acc
094C 8A82      2372            mov     dpl,r2
094E 8B83      2373            mov     dph,r3
0950 8CF0      2374            mov     b,r4
0952 ED        2375            mov     a,r5
0953 120100    2376            lcall   ___fslt
0956 AE82      2377            mov     r6,dpl
0958 E581      2378            mov     a,sp
095A 24FC      2379            add     a,#0xfc
095C F581      2380            mov     sp,a
095E D005      2381            pop     ar5
0960 D004      2382            pop     ar4
0962 D003      2383            pop     ar3
0964 D002      2384            pop     ar2
0966 EE        2385            mov     a,r6
0967 7001      2386            jnz     L025002?
0969 7433      2387            mov     a,#0x33
096B C0E0      2388            push    acc
096D C0E0      2389            push    acc
096F C0E0      2390            push    acc
0971 7440      2391            mov     a,#0x40
0973 C0E0      2392            push    acc
0975 8A82      2393            mov     dpl,r2
0977 8B83      2394            mov     dph,r3
0979 8CF0      2395            mov     b,r4
097B ED        2396            mov     a,r5
097C 120100    2397            lcall   ___fslt
097F AA82      2398            mov     r2,dpl
0981 E581      2399            mov     a,sp
0983 24FC      2400            add     a,#0xfc
0985 F581      2401            mov     sp,a
0987 EA        2402            mov     a,r2
0988 6001      2403            jz      L025002?
098A           2404   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:606: waitms(800);
098A 900320    2405            mov     dptr,#0x0320
098D 120100    2406            lcall   _waitms
0990 8001      2407            sjmp    L025011?
0992           2408   L025002?:
0992           2409   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:608: waitms(1000);
0992 9003E8    2410            mov     dptr,#0x03E8
0995 120100    2411            lcall   _waitms
0998           2412   L025011?:
0998           2413   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:609: LASER = 1;
0998 D2B0      2414            setb    _P3_0
099A 22        2415            ret
099B           2416   ;------------------------------------------------------------
099B           2417   ;Allocation info for local variables in function 'main'
099B           2418   ;------------------------------------------------------------
099B           2419   ;checkcommand              Allocated to registers 
099B           2420   ;sig1                      Allocated to registers 
099B           2421   ;sig2                      Allocated to registers 
099B           2422   ;peak                      Allocated to registers 
099B           2423   ;voltspeak                 Allocated to registers 
099B           2424   ;periodpwm                 Allocated to registers 
099B           2425   ;time                      Allocated to registers r4 r5 r6 r7 
099B           2426   ;period                    Allocated to registers r4 r5 r6 r7 
099B           2427   ;overflow_count            Allocated to registers r4 r5 
099B           2428   ;pir_voltage               Allocated to registers r2 r3 r4 r5 
099B           2429   ;mode_toggle               Allocated to registers r2 r3 
099B           2430   ;sloc0                     Allocated with name '_main_sloc0_1_0'
099B           2431   ;------------------------------------------------------------
099B           2432   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:612: void main(void)
099B           2433   ;        -----------------------------------------
099B           2434   ;         function main
099B           2435   ;        -----------------------------------------
099B           2436   _main:
099B           2437   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:628: TL0=0;
099B 758A00    2438            mov     _TL0,#0x00
099E           2439   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:629: TH0=0;
099E 758C00    2440            mov     _TH0,#0x00
09A1           2441   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:630: TF0=0;         
09A1 C28D      2442            clr     _TF0
09A3           2443   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:631: TIMER0_Init();
09A3 120100    2444            lcall   _TIMER0_Init
09A6           2445   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:633: InitPinADC(1, 6); // Configure P2.5 as analog input
09A6 755806    2446            mov     _InitPinADC_PARM_2,#0x06
09A9 758201    2447            mov     dpl,#0x01
09AC 120100    2448            lcall   _InitPinADC
09AF           2449   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:634: InitPinADC(2, 4);
09AF 755804    2450            mov     _InitPinADC_PARM_2,#0x04
09B2 758202    2451            mov     dpl,#0x02
09B5 120100    2452            lcall   _InitPinADC
09B8           2453   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:635: InitPinADC(2, 5);
09B8 755805    2454            mov     _InitPinADC_PARM_2,#0x05
09BB 758202    2455            mov     dpl,#0x02
09BE 120100    2456            lcall   _InitPinADC
09C1           2457   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:636: InitPinADC(2, 6);
09C1 755806    2458            mov     _InitPinADC_PARM_2,#0x06
09C4 758202    2459            mov     dpl,#0x02
09C7 120100    2460            lcall   _InitPinADC
09CA           2461   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:637: InitADC();
09CA 120100    2462            lcall   _InitADC
09CD           2463   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:639: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
09CD 7468      2464            mov     a,#__str_4
09CF C0E0      2465            push    acc
09D1 74D4      2466            mov     a,#(__str_4 >> 8)
09D3 C0E0      2467            push    acc
09D5 7480      2468            mov     a,#0x80
09D7 C0E0      2469            push    acc
09D9 120100    2470            lcall   _printf
09DC 1581      2471            dec     sp
09DE 1581      2472            dec     sp
09E0 1581      2473            dec     sp
09E2           2474   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:641: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
09E2 74A8      2475            mov     a,#__str_5
09E4 C0E0      2476            push    acc
09E6 74D4      2477            mov     a,#(__str_5 >> 8)
09E8 C0E0      2478            push    acc
09EA 7480      2479            mov     a,#0x80
09EC C0E0      2480            push    acc
09EE 120100    2481            lcall   _printf
09F1 1581      2482            dec     sp
09F3 1581      2483            dec     sp
09F5 1581      2484            dec     sp
09F7           2485   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:643: printf("\n\r");
09F7 74E8      2486            mov     a,#__str_6
09F9 C0E0      2487            push    acc
09FB 74D4      2488            mov     a,#(__str_6 >> 8)
09FD C0E0      2489            push    acc
09FF 7480      2490            mov     a,#0x80
0A01 C0E0      2491            push    acc
0A03 120100    2492            lcall   _printf
0A06 1581      2493            dec     sp
0A08 1581      2494            dec     sp
0A0A 1581      2495            dec     sp
0A0C           2496   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:645: PWMStop();
0A0C 120100    2497            lcall   _PWMStop
0A0F           2498   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:646: SPEAKER = 0;
0A0F C2A5      2499            clr     _P2_5
0A11           2500   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:647: while (1)
0A11           2501   L026052?:
0A11           2502   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:649: mode_toggle = checkMode();
0A11 120100    2503            lcall   _checkMode
0A14 AA82      2504            mov     r2,dpl
0A16 AB83      2505            mov     r3,dph
0A18           2506   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:652: if(mode_toggle == 0){
0A18 EA        2507            mov     a,r2
0A19 4B        2508            orl     a,r3
0A1A 6001      2509            jz      L026082?
0A1C 020100    2510            ljmp    L026049?
0A1F           2511   L026082?:
0A1F           2512   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:653: printf("auto \r\n");
0A1F 74E8      2513            mov     a,#__str_7
0A21 C0E0      2514            push    acc
0A23 74D5      2515            mov     a,#(__str_7 >> 8)
0A25 C0E0      2516            push    acc
0A27 7480      2517            mov     a,#0x80
0A29 C0E0      2518            push    acc
0A2B 120100    2519            lcall   _printf
0A2E 1581      2520            dec     sp
0A30 1581      2521            dec     sp
0A32 1581      2522            dec     sp
0A34           2523   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:655: TL0=0; 
0A34 758A00    2524            mov     _TL0,#0x00
0A37           2525   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:656: TH0=0;
0A37 758C00    2526            mov     _TH0,#0x00
0A3A           2527   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:657: TF0=0;
0A3A C28D      2528            clr     _TF0
0A3C           2529   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:659: while(P2_1!=0); // Wait for the signal to be zero
0A3C           2530   L026001?:
0A3C 20A128    2531            jb      _P2_1,L026001?
0A3F           2532   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:660: while(P2_1!=1); // Wait for the signal to be one
0A3F           2533   L026004?:
0A3F 30A168    2534            jnb     _P2_1,L026004?
0A42           2535   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:661: TR0=1; // Start the timer
0A42 D28C      2536            setb    _TR0
0A44           2537   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:662: while(P2_1!=0) // Wait for the signal to be zero
0A44 7C00      2538            mov     r4,#0x00
0A46 7D00      2539            mov     r5,#0x00
0A48           2540   L026009?:
0A48 30A1E8    2541            jnb     _P2_1,L026011?
0A4B           2542   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:664: if(TF0==1) // Did the 16-bit timer overflow?
0A4B           2543   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:666: TF0=0;
0A4B 108D28    2544            jbc     _TF0,L026086?
0A4E 8001      2545            sjmp    L026009?
0A50           2546   L026086?:
0A50           2547   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:667: overflow_count++;
0A50 0C        2548            inc     r4
0A51 BC00A8    2549            cjne    r4,#0x00,L026009?
0A54 0D        2550            inc     r5
0A55 8001      2551            sjmp    L026009?
0A57           2552   L026011?:
0A57           2553   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:678: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0A57 C28C      2554            clr     _TR0
0A59           2555   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:679: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0A59 8C82      2556            mov     dpl,r4
0A5B 8D83      2557            mov     dph,r5
0A5D 120100    2558            lcall   ___sint2fs
0A60 AC82      2559            mov     r4,dpl
0A62 AD83      2560            mov     r5,dph
0A64 AEF0      2561            mov     r6,b
0A66 FF        2562            mov     r7,a
0A67 C004      2563            push    ar4
0A69 C005      2564            push    ar5
0A6B C006      2565            push    ar6
0A6D C007      2566            push    ar7
0A6F 900000    2567            mov     dptr,#0x0000
0A72 75F080    2568            mov     b,#0x80
0A75 7447      2569            mov     a,#0x47
0A77 120100    2570            lcall   ___fsmul
0A7A 858248    2571            mov     _main_sloc0_1_0,dpl
0A7D 858349    2572            mov     (_main_sloc0_1_0 + 1),dph
0A80 85F04A    2573            mov     (_main_sloc0_1_0 + 2),b
0A83 F54B      2574            mov     (_main_sloc0_1_0 + 3),a
0A85 E581      2575            mov     a,sp
0A87 24FC      2576            add     a,#0xfc
0A89 F581      2577            mov     sp,a
0A8B 858C82    2578            mov     dpl,_TH0
0A8E 120100    2579            lcall   ___uchar2fs
0A91 A882      2580            mov     r0,dpl
0A93 A983      2581            mov     r1,dph
0A95 ACF0      2582            mov     r4,b
0A97 FD        2583            mov     r5,a
0A98 C000      2584            push    ar0
0A9A C001      2585            push    ar1
0A9C C004      2586            push    ar4
0A9E C005      2587            push    ar5
0AA0 900000    2588            mov     dptr,#0x0000
0AA3 75F080    2589            mov     b,#0x80
0AA6 7443      2590            mov     a,#0x43
0AA8 120100    2591            lcall   ___fsmul
0AAB AC82      2592            mov     r4,dpl
0AAD AD83      2593            mov     r5,dph
0AAF AEF0      2594            mov     r6,b
0AB1 FF        2595            mov     r7,a
0AB2 E581      2596            mov     a,sp
0AB4 24FC      2597            add     a,#0xfc
0AB6 F581      2598            mov     sp,a
0AB8 C004      2599            push    ar4
0ABA C005      2600            push    ar5
0ABC C006      2601            push    ar6
0ABE C007      2602            push    ar7
0AC0 854882    2603            mov     dpl,_main_sloc0_1_0
0AC3 854983    2604            mov     dph,(_main_sloc0_1_0 + 1)
0AC6 854AF0    2605            mov     b,(_main_sloc0_1_0 + 2)
0AC9 E54B      2606            mov     a,(_main_sloc0_1_0 + 3)
0ACB 120100    2607            lcall   ___fsadd
0ACE 858248    2608            mov     _main_sloc0_1_0,dpl
0AD1 858349    2609            mov     (_main_sloc0_1_0 + 1),dph
0AD4 85F04A    2610            mov     (_main_sloc0_1_0 + 2),b
0AD7 F54B      2611            mov     (_main_sloc0_1_0 + 3),a
0AD9 E581      2612            mov     a,sp
0ADB 24FC      2613            add     a,#0xfc
0ADD F581      2614            mov     sp,a
0ADF A88A      2615            mov     r0,_TL0
0AE1 7900      2616            mov     r1,#0x00
0AE3 8882      2617            mov     dpl,r0
0AE5 8983      2618            mov     dph,r1
0AE7 120100    2619            lcall   ___sint2fs
0AEA A882      2620            mov     r0,dpl
0AEC A983      2621            mov     r1,dph
0AEE ACF0      2622            mov     r4,b
0AF0 FD        2623            mov     r5,a
0AF1 C000      2624            push    ar0
0AF3 C001      2625            push    ar1
0AF5 C004      2626            push    ar4
0AF7 C005      2627            push    ar5
0AF9 854882    2628            mov     dpl,_main_sloc0_1_0
0AFC 854983    2629            mov     dph,(_main_sloc0_1_0 + 1)
0AFF 854AF0    2630            mov     b,(_main_sloc0_1_0 + 2)
0B02 E54B      2631            mov     a,(_main_sloc0_1_0 + 3)
0B04 120100    2632            lcall   ___fsadd
0B07 AC82      2633            mov     r4,dpl
0B09 AD83      2634            mov     r5,dph
0B0B AEF0      2635            mov     r6,b
0B0D FF        2636            mov     r7,a
0B0E E581      2637            mov     a,sp
0B10 24FC      2638            add     a,#0xfc
0B12 F581      2639            mov     sp,a
0B14 C004      2640            push    ar4
0B16 C005      2641            push    ar5
0B18 C006      2642            push    ar6
0B1A C007      2643            push    ar7
0B1C 90F4FC    2644            mov     dptr,#0xF4FC
0B1F 75F032    2645            mov     b,#0x32
0B22 7434      2646            mov     a,#0x34
0B24 120100    2647            lcall   ___fsmul
0B27 AC82      2648            mov     r4,dpl
0B29 AD83      2649            mov     r5,dph
0B2B AEF0      2650            mov     r6,b
0B2D FF        2651            mov     r7,a
0B2E E581      2652            mov     a,sp
0B30 24FC      2653            add     a,#0xfc
0B32 F581      2654            mov     sp,a
0B34           2655   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:681: printf( "\rT=%f ms   \n ", period*1000.0);
0B34 C004      2656            push    ar4
0B36 C005      2657            push    ar5
0B38 C006      2658            push    ar6
0B3A C007      2659            push    ar7
0B3C 900000    2660            mov     dptr,#0x0000
0B3F 75F07A    2661            mov     b,#0x7A
0B42 7444      2662            mov     a,#0x44
0B44 120100    2663            lcall   ___fsmul
0B47 AC82      2664            mov     r4,dpl
0B49 AD83      2665            mov     r5,dph
0B4B AEF0      2666            mov     r6,b
0B4D FF        2667            mov     r7,a
0B4E E581      2668            mov     a,sp
0B50 24FC      2669            add     a,#0xfc
0B52 F581      2670            mov     sp,a
0B54 C004      2671            push    ar4
0B56 C005      2672            push    ar5
0B58 C006      2673            push    ar6
0B5A C007      2674            push    ar7
0B5C C004      2675            push    ar4
0B5E C005      2676            push    ar5
0B60 C006      2677            push    ar6
0B62 C007      2678            push    ar7
0B64 7468      2679            mov     a,#__str_8
0B66 C0E0      2680            push    acc
0B68 74D7      2681            mov     a,#(__str_8 >> 8)
0B6A C0E0      2682            push    acc
0B6C 7480      2683            mov     a,#0x80
0B6E C0E0      2684            push    acc
0B70 120100    2685            lcall   _printf
0B73 E581      2686            mov     a,sp
0B75 24F9      2687            add     a,#0xf9
0B77 F581      2688            mov     sp,a
0B79           2689   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:682: waitms(50);
0B79 900032    2690            mov     dptr,#0x0032
0B7C 120100    2691            lcall   _waitms
0B7F D007      2692            pop     ar7
0B81 D006      2693            pop     ar6
0B83 D005      2694            pop     ar5
0B85 D004      2695            pop     ar4
0B87           2696   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:683: detectobstacle(period*1000.0);
0B87 8C82      2697            mov     dpl,r4
0B89 8D83      2698            mov     dph,r5
0B8B 8EF0      2699            mov     b,r6
0B8D EF        2700            mov     a,r7
0B8E C004      2701            push    ar4
0B90 C005      2702            push    ar5
0B92 C006      2703            push    ar6
0B94 C007      2704            push    ar7
0B96 120100    2705            lcall   _detectobstacle
0B99 D007      2706            pop     ar7
0B9B D006      2707            pop     ar6
0B9D D005      2708            pop     ar5
0B9F D004      2709            pop     ar4
0BA1           2710   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:684: laserPattern(period*1000);
0BA1 8C82      2711            mov     dpl,r4
0BA3 8D83      2712            mov     dph,r5
0BA5 8EF0      2713            mov     b,r6
0BA7 EF        2714            mov     a,r7
0BA8 120100    2715            lcall   _laserPattern
0BAB           2716   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:693: waitms(50);    
0BAB 900032    2717            mov     dptr,#0x0032
0BAE 120100    2718            lcall   _waitms
0BB1 020100    2719            ljmp    L026052?
0BB4           2720   L026049?:
0BB4           2721   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:697: else if(mode_toggle == 1){
0BB4 BA01A8    2722            cjne    r2,#0x01,L026087?
0BB7 BB00A8    2723            cjne    r3,#0x00,L026087?
0BBA 8001      2724            sjmp    L026088?
0BBC           2725   L026087?:
0BBC 020100    2726            ljmp    L026046?
0BBF           2727   L026088?:
0BBF           2728   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:698: printf("manual \r\n");
0BBF 7468      2729            mov     a,#__str_9
0BC1 C0E0      2730            push    acc
0BC3 74D8      2731            mov     a,#(__str_9 >> 8)
0BC5 C0E0      2732            push    acc
0BC7 7480      2733            mov     a,#0x80
0BC9 C0E0      2734            push    acc
0BCB 120100    2735            lcall   _printf
0BCE 1581      2736            dec     sp
0BD0 1581      2737            dec     sp
0BD2 1581      2738            dec     sp
0BD4           2739   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:705: time=zero_time_calc(); 
0BD4 120100    2740            lcall   _zero_time_calc
0BD7 AC82      2741            mov     r4,dpl
0BD9 AD83      2742            mov     r5,dph
0BDB AEF0      2743            mov     r6,b
0BDD FF        2744            mov     r7,a
0BDE           2745   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:706: printf("Time: %f\n\t\r", time);
0BDE C004      2746            push    ar4
0BE0 C005      2747            push    ar5
0BE2 C006      2748            push    ar6
0BE4 C007      2749            push    ar7
0BE6 C004      2750            push    ar4
0BE8 C005      2751            push    ar5
0BEA C006      2752            push    ar6
0BEC C007      2753            push    ar7
0BEE 74A8      2754            mov     a,#__str_10
0BF0 C0E0      2755            push    acc
0BF2 74D8      2756            mov     a,#(__str_10 >> 8)
0BF4 C0E0      2757            push    acc
0BF6 7480      2758            mov     a,#0x80
0BF8 C0E0      2759            push    acc
0BFA 120100    2760            lcall   _printf
0BFD E581      2761            mov     a,sp
0BFF 24F9      2762            add     a,#0xf9
0C01 F581      2763            mov     sp,a
0C03 D007      2764            pop     ar7
0C05 D006      2765            pop     ar6
0C07 D005      2766            pop     ar5
0C09 D004      2767            pop     ar4
0C0B           2768   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:709: if((time>=300 && time<=450)||(time>=1400 && time<=1500)||
0C0B C004      2769            push    ar4
0C0D C005      2770            push    ar5
0C0F C006      2771            push    ar6
0C11 C007      2772            push    ar7
0C13 E4        2773            clr     a
0C14 C0E0      2774            push    acc
0C16 C0E0      2775            push    acc
0C18 7496      2776            mov     a,#0x96
0C1A C0E0      2777            push    acc
0C1C 7443      2778            mov     a,#0x43
0C1E C0E0      2779            push    acc
0C20 8C82      2780            mov     dpl,r4
0C22 8D83      2781            mov     dph,r5
0C24 8EF0      2782            mov     b,r6
0C26 EF        2783            mov     a,r7
0C27 120100    2784            lcall   ___fslt
0C2A A882      2785            mov     r0,dpl
0C2C E581      2786            mov     a,sp
0C2E 24FC      2787            add     a,#0xfc
0C30 F581      2788            mov     sp,a
0C32 D007      2789            pop     ar7
0C34 D006      2790            pop     ar6
0C36 D005      2791            pop     ar5
0C38 D004      2792            pop     ar4
0C3A E8        2793            mov     a,r0
0C3B 7001      2794            jnz     L026032?
0C3D C004      2795            push    ar4
0C3F C005      2796            push    ar5
0C41 C006      2797            push    ar6
0C43 C007      2798            push    ar7
0C45 C000      2799            push    ar0
0C47 E4        2800            clr     a
0C48 C0E0      2801            push    acc
0C4A C0E0      2802            push    acc
0C4C 74E1      2803            mov     a,#0xE1
0C4E C0E0      2804            push    acc
0C50 7443      2805            mov     a,#0x43
0C52 C0E0      2806            push    acc
0C54 8C82      2807            mov     dpl,r4
0C56 8D83      2808            mov     dph,r5
0C58 8EF0      2809            mov     b,r6
0C5A EF        2810            mov     a,r7
0C5B 120100    2811            lcall   ___fsgt
0C5E A982      2812            mov     r1,dpl
0C60 E581      2813            mov     a,sp
0C62 24FC      2814            add     a,#0xfc
0C64 F581      2815            mov     sp,a
0C66 D000      2816            pop     ar0
0C68 D007      2817            pop     ar7
0C6A D006      2818            pop     ar6
0C6C D005      2819            pop     ar5
0C6E D004      2820            pop     ar4
0C70 E9        2821            mov     a,r1
0C71 7001      2822            jnz     L026090?
0C73 020100    2823            ljmp    L026028?
0C76           2824   L026090?:
0C76           2825   L026032?:
0C76 C004      2826            push    ar4
0C78 C005      2827            push    ar5
0C7A C006      2828            push    ar6
0C7C C007      2829            push    ar7
0C7E C000      2830            push    ar0
0C80 E4        2831            clr     a
0C81 C0E0      2832            push    acc
0C83 C0E0      2833            push    acc
0C85 74AF      2834            mov     a,#0xAF
0C87 C0E0      2835            push    acc
0C89 7444      2836            mov     a,#0x44
0C8B C0E0      2837            push    acc
0C8D 8C82      2838            mov     dpl,r4
0C8F 8D83      2839            mov     dph,r5
0C91 8EF0      2840            mov     b,r6
0C93 EF        2841            mov     a,r7
0C94 120100    2842            lcall   ___fslt
0C97 A982      2843            mov     r1,dpl
0C99 E581      2844            mov     a,sp
0C9B 24FC      2845            add     a,#0xfc
0C9D F581      2846            mov     sp,a
0C9F D000      2847            pop     ar0
0CA1 D007      2848            pop     ar7
0CA3 D006      2849            pop     ar6
0CA5 D005      2850            pop     ar5
0CA7 D004      2851            pop     ar4
0CA9 E9        2852            mov     a,r1
0CAA 7001      2853            jnz     L026034?
0CAC C004      2854            push    ar4
0CAE C005      2855            push    ar5
0CB0 C006      2856            push    ar6
0CB2 C007      2857            push    ar7
0CB4 C000      2858            push    ar0
0CB6 E4        2859            clr     a
0CB7 C0E0      2860            push    acc
0CB9 7480      2861            mov     a,#0x80
0CBB C0E0      2862            push    acc
0CBD 74BB      2863            mov     a,#0xBB
0CBF C0E0      2864            push    acc
0CC1 7444      2865            mov     a,#0x44
0CC3 C0E0      2866            push    acc
0CC5 8C82      2867            mov     dpl,r4
0CC7 8D83      2868            mov     dph,r5
0CC9 8EF0      2869            mov     b,r6
0CCB EF        2870            mov     a,r7
0CCC 120100    2871            lcall   ___fsgt
0CCF A982      2872            mov     r1,dpl
0CD1 E581      2873            mov     a,sp
0CD3 24FC      2874            add     a,#0xfc
0CD5 F581      2875            mov     sp,a
0CD7 D000      2876            pop     ar0
0CD9 D007      2877            pop     ar7
0CDB D006      2878            pop     ar6
0CDD D005      2879            pop     ar5
0CDF D004      2880            pop     ar4
0CE1 E9        2881            mov     a,r1
0CE2 7001      2882            jnz     L026092?
0CE4 020100    2883            ljmp    L026028?
0CE7           2884   L026092?:
0CE7           2885   L026034?:
0CE7           2886   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:710: (time>=1060 && time<=1090)||(time>=1780) || (time>=600 && time<=750) ){
0CE7 C004      2887            push    ar4
0CE9 C005      2888            push    ar5
0CEB C006      2889            push    ar6
0CED C007      2890            push    ar7
0CEF C000      2891            push    ar0
0CF1 E4        2892            clr     a
0CF2 C0E0      2893            push    acc
0CF4 7480      2894            mov     a,#0x80
0CF6 C0E0      2895            push    acc
0CF8 7484      2896            mov     a,#0x84
0CFA C0E0      2897            push    acc
0CFC 7444      2898            mov     a,#0x44
0CFE C0E0      2899            push    acc
0D00 8C82      2900            mov     dpl,r4
0D02 8D83      2901            mov     dph,r5
0D04 8EF0      2902            mov     b,r6
0D06 EF        2903            mov     a,r7
0D07 120100    2904            lcall   ___fslt
0D0A A982      2905            mov     r1,dpl
0D0C E581      2906            mov     a,sp
0D0E 24FC      2907            add     a,#0xfc
0D10 F581      2908            mov     sp,a
0D12 D000      2909            pop     ar0
0D14 D007      2910            pop     ar7
0D16 D006      2911            pop     ar6
0D18 D005      2912            pop     ar5
0D1A D004      2913            pop     ar4
0D1C E9        2914            mov     a,r1
0D1D 7001      2915            jnz     L026035?
0D1F C004      2916            push    ar4
0D21 C005      2917            push    ar5
0D23 C006      2918            push    ar6
0D25 C007      2919            push    ar7
0D27 C000      2920            push    ar0
0D29 E4        2921            clr     a
0D2A C0E0      2922            push    acc
0D2C 7440      2923            mov     a,#0x40
0D2E C0E0      2924            push    acc
0D30 7488      2925            mov     a,#0x88
0D32 C0E0      2926            push    acc
0D34 7444      2927            mov     a,#0x44
0D36 C0E0      2928            push    acc
0D38 8C82      2929            mov     dpl,r4
0D3A 8D83      2930            mov     dph,r5
0D3C 8EF0      2931            mov     b,r6
0D3E EF        2932            mov     a,r7
0D3F 120100    2933            lcall   ___fsgt
0D42 A982      2934            mov     r1,dpl
0D44 E581      2935            mov     a,sp
0D46 24FC      2936            add     a,#0xfc
0D48 F581      2937            mov     sp,a
0D4A D000      2938            pop     ar0
0D4C D007      2939            pop     ar7
0D4E D006      2940            pop     ar6
0D50 D005      2941            pop     ar5
0D52 D004      2942            pop     ar4
0D54 E9        2943            mov     a,r1
0D55 7001      2944            jnz     L026094?
0D57 020100    2945            ljmp    L026028?
0D5A           2946   L026094?:
0D5A           2947   L026035?:
0D5A C004      2948            push    ar4
0D5C C005      2949            push    ar5
0D5E C006      2950            push    ar6
0D60 C007      2951            push    ar7
0D62 C000      2952            push    ar0
0D64 E4        2953            clr     a
0D65 C0E0      2954            push    acc
0D67 7480      2955            mov     a,#0x80
0D69 C0E0      2956            push    acc
0D6B 74DE      2957            mov     a,#0xDE
0D6D C0E0      2958            push    acc
0D6F 7444      2959            mov     a,#0x44
0D71 C0E0      2960            push    acc
0D73 8C82      2961            mov     dpl,r4
0D75 8D83      2962            mov     dph,r5
0D77 8EF0      2963            mov     b,r6
0D79 EF        2964            mov     a,r7
0D7A 120100    2965            lcall   ___fslt
0D7D A982      2966            mov     r1,dpl
0D7F E581      2967            mov     a,sp
0D81 24FC      2968            add     a,#0xfc
0D83 F581      2969            mov     sp,a
0D85 D000      2970            pop     ar0
0D87 D007      2971            pop     ar7
0D89 D006      2972            pop     ar6
0D8B D005      2973            pop     ar5
0D8D D004      2974            pop     ar4
0D8F E9        2975            mov     a,r1
0D90 6001      2976            jz      L026028?
0D92 C004      2977            push    ar4
0D94 C005      2978            push    ar5
0D96 C006      2979            push    ar6
0D98 C007      2980            push    ar7
0D9A C000      2981            push    ar0
0D9C E4        2982            clr     a
0D9D C0E0      2983            push    acc
0D9F C0E0      2984            push    acc
0DA1 7416      2985            mov     a,#0x16
0DA3 C0E0      2986            push    acc
0DA5 7444      2987            mov     a,#0x44
0DA7 C0E0      2988            push    acc
0DA9 8C82      2989            mov     dpl,r4
0DAB 8D83      2990            mov     dph,r5
0DAD 8EF0      2991            mov     b,r6
0DAF EF        2992            mov     a,r7
0DB0 120100    2993            lcall   ___fslt
0DB3 A982      2994            mov     r1,dpl
0DB5 E581      2995            mov     a,sp
0DB7 24FC      2996            add     a,#0xfc
0DB9 F581      2997            mov     sp,a
0DBB D000      2998            pop     ar0
0DBD D007      2999            pop     ar7
0DBF D006      3000            pop     ar6
0DC1 D005      3001            pop     ar5
0DC3 D004      3002            pop     ar4
0DC5 E9        3003            mov     a,r1
0DC6 6001      3004            jz      L026096?
0DC8 020100    3005            ljmp    L026052?
0DCB           3006   L026096?:
0DCB C004      3007            push    ar4
0DCD C005      3008            push    ar5
0DCF C006      3009            push    ar6
0DD1 C007      3010            push    ar7
0DD3 C000      3011            push    ar0
0DD5 E4        3012            clr     a
0DD6 C0E0      3013            push    acc
0DD8 7480      3014            mov     a,#0x80
0DDA C0E0      3015            push    acc
0DDC 743B      3016            mov     a,#0x3B
0DDE C0E0      3017            push    acc
0DE0 7444      3018            mov     a,#0x44
0DE2 C0E0      3019            push    acc
0DE4 8C82      3020            mov     dpl,r4
0DE6 8D83      3021            mov     dph,r5
0DE8 8EF0      3022            mov     b,r6
0DEA EF        3023            mov     a,r7
0DEB 120100    3024            lcall   ___fsgt
0DEE A982      3025            mov     r1,dpl
0DF0 E581      3026            mov     a,sp
0DF2 24FC      3027            add     a,#0xfc
0DF4 F581      3028            mov     sp,a
0DF6 D000      3029            pop     ar0
0DF8 D007      3030            pop     ar7
0DFA D006      3031            pop     ar6
0DFC D005      3032            pop     ar5
0DFE D004      3033            pop     ar4
0E00 E9        3034            mov     a,r1
0E01 6001      3035            jz      L026097?
0E03 020100    3036            ljmp    L026052?
0E06           3037   L026097?:
0E06           3038   L026028?:
0E06           3039   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:711: if(time>=1400 && time<=1500){
0E06 C004      3040            push    ar4
0E08 C005      3041            push    ar5
0E0A C006      3042            push    ar6
0E0C C007      3043            push    ar7
0E0E C000      3044            push    ar0
0E10 E4        3045            clr     a
0E11 C0E0      3046            push    acc
0E13 C0E0      3047            push    acc
0E15 74AF      3048            mov     a,#0xAF
0E17 C0E0      3049            push    acc
0E19 7444      3050            mov     a,#0x44
0E1B C0E0      3051            push    acc
0E1D 8C82      3052            mov     dpl,r4
0E1F 8D83      3053            mov     dph,r5
0E21 8EF0      3054            mov     b,r6
0E23 EF        3055            mov     a,r7
0E24 120100    3056            lcall   ___fslt
0E27 A982      3057            mov     r1,dpl
0E29 E581      3058            mov     a,sp
0E2B 24FC      3059            add     a,#0xfc
0E2D F581      3060            mov     sp,a
0E2F D000      3061            pop     ar0
0E31 D007      3062            pop     ar7
0E33 D006      3063            pop     ar6
0E35 D005      3064            pop     ar5
0E37 D004      3065            pop     ar4
0E39 E9        3066            mov     a,r1
0E3A 7001      3067            jnz     L026025?
0E3C C004      3068            push    ar4
0E3E C005      3069            push    ar5
0E40 C006      3070            push    ar6
0E42 C007      3071            push    ar7
0E44 C000      3072            push    ar0
0E46 E4        3073            clr     a
0E47 C0E0      3074            push    acc
0E49 7480      3075            mov     a,#0x80
0E4B C0E0      3076            push    acc
0E4D 74BB      3077            mov     a,#0xBB
0E4F C0E0      3078            push    acc
0E51 7444      3079            mov     a,#0x44
0E53 C0E0      3080            push    acc
0E55 8C82      3081            mov     dpl,r4
0E57 8D83      3082            mov     dph,r5
0E59 8EF0      3083            mov     b,r6
0E5B EF        3084            mov     a,r7
0E5C 120100    3085            lcall   ___fsgt
0E5F A982      3086            mov     r1,dpl
0E61 E581      3087            mov     a,sp
0E63 24FC      3088            add     a,#0xfc
0E65 F581      3089            mov     sp,a
0E67 D000      3090            pop     ar0
0E69 D007      3091            pop     ar7
0E6B D006      3092            pop     ar6
0E6D D005      3093            pop     ar5
0E6F D004      3094            pop     ar4
0E71 E9        3095            mov     a,r1
0E72 7001      3096            jnz     L026025?
0E74           3097   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:712: printf("RIGHT\n\r");
0E74 7468      3098            mov     a,#__str_11
0E76 C0E0      3099            push    acc
0E78 74DB      3100            mov     a,#(__str_11 >> 8)
0E7A C0E0      3101            push    acc
0E7C 7480      3102            mov     a,#0x80
0E7E C0E0      3103            push    acc
0E80 120100    3104            lcall   _printf
0E83 1581      3105            dec     sp
0E85 1581      3106            dec     sp
0E87 1581      3107            dec     sp
0E89           3108   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:713: PWMRight();
0E89 120100    3109            lcall   _PWMRight
0E8C 020100    3110            ljmp    L026052?
0E8F           3111   L026025?:
0E8F           3112   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:715: else if(time>=300 && time<=450){
0E8F E8        3113            mov     a,r0
0E90 7001      3114            jnz     L026021?
0E92 C004      3115            push    ar4
0E94 C005      3116            push    ar5
0E96 C006      3117            push    ar6
0E98 C007      3118            push    ar7
0E9A E4        3119            clr     a
0E9B C0E0      3120            push    acc
0E9D C0E0      3121            push    acc
0E9F 74E1      3122            mov     a,#0xE1
0EA1 C0E0      3123            push    acc
0EA3 7443      3124            mov     a,#0x43
0EA5 C0E0      3125            push    acc
0EA7 8C82      3126            mov     dpl,r4
0EA9 8D83      3127            mov     dph,r5
0EAB 8EF0      3128            mov     b,r6
0EAD EF        3129            mov     a,r7
0EAE 120100    3130            lcall   ___fsgt
0EB1 A882      3131            mov     r0,dpl
0EB3 E581      3132            mov     a,sp
0EB5 24FC      3133            add     a,#0xfc
0EB7 F581      3134            mov     sp,a
0EB9 D007      3135            pop     ar7
0EBB D006      3136            pop     ar6
0EBD D005      3137            pop     ar5
0EBF D004      3138            pop     ar4
0EC1 E8        3139            mov     a,r0
0EC2 7001      3140            jnz     L026021?
0EC4           3141   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:716: printf("FORWARD\n\r");
0EC4 74E8      3142            mov     a,#__str_12
0EC6 C0E0      3143            push    acc
0EC8 74DB      3144            mov     a,#(__str_12 >> 8)
0ECA C0E0      3145            push    acc
0ECC 7480      3146            mov     a,#0x80
0ECE C0E0      3147            push    acc
0ED0 120100    3148            lcall   _printf
0ED3 1581      3149            dec     sp
0ED5 1581      3150            dec     sp
0ED7 1581      3151            dec     sp
0ED9           3152   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:717: PWMforward();
0ED9 120100    3153            lcall   _PWMforward
0EDC 020100    3154            ljmp    L026052?
0EDF           3155   L026021?:
0EDF           3156   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:719: else if(time>=600 && time<=750){
0EDF C004      3157            push    ar4
0EE1 C005      3158            push    ar5
0EE3 C006      3159            push    ar6
0EE5 C007      3160            push    ar7
0EE7 E4        3161            clr     a
0EE8 C0E0      3162            push    acc
0EEA C0E0      3163            push    acc
0EEC 7416      3164            mov     a,#0x16
0EEE C0E0      3165            push    acc
0EF0 7444      3166            mov     a,#0x44
0EF2 C0E0      3167            push    acc
0EF4 8C82      3168            mov     dpl,r4
0EF6 8D83      3169            mov     dph,r5
0EF8 8EF0      3170            mov     b,r6
0EFA EF        3171            mov     a,r7
0EFB 120100    3172            lcall   ___fslt
0EFE A882      3173            mov     r0,dpl
0F00 E581      3174            mov     a,sp
0F02 24FC      3175            add     a,#0xfc
0F04 F581      3176            mov     sp,a
0F06 D007      3177            pop     ar7
0F08 D006      3178            pop     ar6
0F0A D005      3179            pop     ar5
0F0C D004      3180            pop     ar4
0F0E E8        3181            mov     a,r0
0F0F 7001      3182            jnz     L026017?
0F11 C004      3183            push    ar4
0F13 C005      3184            push    ar5
0F15 C006      3185            push    ar6
0F17 C007      3186            push    ar7
0F19 E4        3187            clr     a
0F1A C0E0      3188            push    acc
0F1C 7480      3189            mov     a,#0x80
0F1E C0E0      3190            push    acc
0F20 743B      3191            mov     a,#0x3B
0F22 C0E0      3192            push    acc
0F24 7444      3193            mov     a,#0x44
0F26 C0E0      3194            push    acc
0F28 8C82      3195            mov     dpl,r4
0F2A 8D83      3196            mov     dph,r5
0F2C 8EF0      3197            mov     b,r6
0F2E EF        3198            mov     a,r7
0F2F 120100    3199            lcall   ___fsgt
0F32 A882      3200            mov     r0,dpl
0F34 E581      3201            mov     a,sp
0F36 24FC      3202            add     a,#0xfc
0F38 F581      3203            mov     sp,a
0F3A D007      3204            pop     ar7
0F3C D006      3205            pop     ar6
0F3E D005      3206            pop     ar5
0F40 D004      3207            pop     ar4
0F42 E8        3208            mov     a,r0
0F43 7001      3209            jnz     L026017?
0F45           3210   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:720: printf("BACKWARD\n\r");
0F45 7468      3211            mov     a,#__str_13
0F47 C0E0      3212            push    acc
0F49 74DC      3213            mov     a,#(__str_13 >> 8)
0F4B C0E0      3214            push    acc
0F4D 7480      3215            mov     a,#0x80
0F4F C0E0      3216            push    acc
0F51 120100    3217            lcall   _printf
0F54 1581      3218            dec     sp
0F56 1581      3219            dec     sp
0F58 1581      3220            dec     sp
0F5A           3221   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:721: PWMbackward();
0F5A 120100    3222            lcall   _PWMbackward
0F5D 020100    3223            ljmp    L026052?
0F60           3224   L026017?:
0F60           3225   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:723: else if(time>=1060 && time<=1090){
0F60 C004      3226            push    ar4
0F62 C005      3227            push    ar5
0F64 C006      3228            push    ar6
0F66 C007      3229            push    ar7
0F68 E4        3230            clr     a
0F69 C0E0      3231            push    acc
0F6B 7480      3232            mov     a,#0x80
0F6D C0E0      3233            push    acc
0F6F 7484      3234            mov     a,#0x84
0F71 C0E0      3235            push    acc
0F73 7444      3236            mov     a,#0x44
0F75 C0E0      3237            push    acc
0F77 8C82      3238            mov     dpl,r4
0F79 8D83      3239            mov     dph,r5
0F7B 8EF0      3240            mov     b,r6
0F7D EF        3241            mov     a,r7
0F7E 120100    3242            lcall   ___fslt
0F81 A882      3243            mov     r0,dpl
0F83 E581      3244            mov     a,sp
0F85 24FC      3245            add     a,#0xfc
0F87 F581      3246            mov     sp,a
0F89 D007      3247            pop     ar7
0F8B D006      3248            pop     ar6
0F8D D005      3249            pop     ar5
0F8F D004      3250            pop     ar4
0F91 E8        3251            mov     a,r0
0F92 7001      3252            jnz     L026013?
0F94 C0E0      3253            push    acc
0F96 7440      3254            mov     a,#0x40
0F98 C0E0      3255            push    acc
0F9A 7488      3256            mov     a,#0x88
0F9C C0E0      3257            push    acc
0F9E 7444      3258            mov     a,#0x44
0FA0 C0E0      3259            push    acc
0FA2 8C82      3260            mov     dpl,r4
0FA4 8D83      3261            mov     dph,r5
0FA6 8EF0      3262            mov     b,r6
0FA8 EF        3263            mov     a,r7
0FA9 120100    3264            lcall   ___fsgt
0FAC AC82      3265            mov     r4,dpl
0FAE E581      3266            mov     a,sp
0FB0 24FC      3267            add     a,#0xfc
0FB2 F581      3268            mov     sp,a
0FB4 EC        3269            mov     a,r4
0FB5 7001      3270            jnz     L026013?
0FB7           3271   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:724: printf("LEFT\n\r");
0FB7 74E8      3272            mov     a,#__str_14
0FB9 C0E0      3273            push    acc
0FBB 74DC      3274            mov     a,#(__str_14 >> 8)
0FBD C0E0      3275            push    acc
0FBF 7480      3276            mov     a,#0x80
0FC1 C0E0      3277            push    acc
0FC3 120100    3278            lcall   _printf
0FC6 1581      3279            dec     sp
0FC8 1581      3280            dec     sp
0FCA 1581      3281            dec     sp
0FCC           3282   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:725: PWMLeft();
0FCC 120100    3283            lcall   _PWMLeft
0FCF 020100    3284            ljmp    L026052?
0FD2           3285   L026013?:
0FD2           3286   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:728: {      printf("STOP\n\r");
0FD2 7428      3287            mov     a,#__str_15
0FD4 C0E0      3288            push    acc
0FD6 74DD      3289            mov     a,#(__str_15 >> 8)
0FD8 C0E0      3290            push    acc
0FDA 7480      3291            mov     a,#0x80
0FDC C0E0      3292            push    acc
0FDE 120100    3293            lcall   _printf
0FE1 1581      3294            dec     sp
0FE3 1581      3295            dec     sp
0FE5 1581      3296            dec     sp
0FE7           3297   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:729: PWMStop();
0FE7 120100    3298            lcall   _PWMStop
0FEA 020100    3299            ljmp    L026052?
0FED           3300   L026046?:
0FED           3301   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:733: else if( mode_toggle == 3){
0FED BA0368    3302            cjne    r2,#0x03,L026106?
0FF0 BB0068    3303            cjne    r3,#0x00,L026106?
0FF3 8001      3304            sjmp    L026107?
0FF5           3305   L026106?:
0FF5 020100    3306            ljmp    L026043?
0FF8           3307   L026107?:
0FF8           3308   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:734: pir_voltage = Volts_at_Pin(QFP32_MUX_P2_4);
0FF8 758211    3309            mov     dpl,#0x11
0FFB 120100    3310            lcall   _Volts_at_Pin
0FFE AA82      3311            mov     r2,dpl
1000 AB83      3312            mov     r3,dph
1002 ACF0      3313            mov     r4,b
1004 FD        3314            mov     r5,a
1005           3315   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:735: if(pir_voltage >= 3.0 && pir_voltage <= 3.4)
1005 C002      3316            push    ar2
1007 C003      3317            push    ar3
1009 C004      3318            push    ar4
100B C005      3319            push    ar5
100D E4        3320            clr     a
100E C0E0      3321            push    acc
1010 C0E0      3322            push    acc
1012 7440      3323            mov     a,#0x40
1014 C0E0      3324            push    acc
1016 C0E0      3325            push    acc
1018 8A82      3326            mov     dpl,r2
101A 8B83      3327            mov     dph,r3
101C 8CF0      3328            mov     b,r4
101E ED        3329            mov     a,r5
101F 120100    3330            lcall   ___fslt
1022 AE82      3331            mov     r6,dpl
1024 E581      3332            mov     a,sp
1026 24FC      3333            add     a,#0xfc
1028 F581      3334            mov     sp,a
102A D005      3335            pop     ar5
102C D004      3336            pop     ar4
102E D003      3337            pop     ar3
1030 D002      3338            pop     ar2
1032 EE        3339            mov     a,r6
1033 7001      3340            jnz     L026039?
1035 C002      3341            push    ar2
1037 C003      3342            push    ar3
1039 C004      3343            push    ar4
103B C005      3344            push    ar5
103D 749A      3345            mov     a,#0x9A
103F C0E0      3346            push    acc
1041 7499      3347            mov     a,#0x99
1043 C0E0      3348            push    acc
1045 7459      3349            mov     a,#0x59
1047 C0E0      3350            push    acc
1049 7440      3351            mov     a,#0x40
104B C0E0      3352            push    acc
104D 8A82      3353            mov     dpl,r2
104F 8B83      3354            mov     dph,r3
1051 8CF0      3355            mov     b,r4
1053 ED        3356            mov     a,r5
1054 120100    3357            lcall   ___fsgt
1057 AE82      3358            mov     r6,dpl
1059 E581      3359            mov     a,sp
105B 24FC      3360            add     a,#0xfc
105D F581      3361            mov     sp,a
105F D005      3362            pop     ar5
1061 D004      3363            pop     ar4
1063 D003      3364            pop     ar3
1065 D002      3365            pop     ar2
1067 EE        3366            mov     a,r6
1068 7001      3367            jnz     L026039?
106A           3368   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:736: PWMStop();
106A C002      3369            push    ar2
106C C003      3370            push    ar3
106E C004      3371            push    ar4
1070 C005      3372            push    ar5
1072 120100    3373            lcall   _PWMStop
1075 D005      3374            pop     ar5
1077 D004      3375            pop     ar4
1079 D003      3376            pop     ar3
107B D002      3377            pop     ar2
107D 8001      3378            sjmp    L026040?
107F           3379   L026039?:
107F           3380   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:738: PWMforward();
107F C002      3381            push    ar2
1081 C003      3382            push    ar3
1083 C004      3383            push    ar4
1085 C005      3384            push    ar5
1087 120100    3385            lcall   _PWMforward
108A D005      3386            pop     ar5
108C D004      3387            pop     ar4
108E D003      3388            pop     ar3
1090 D002      3389            pop     ar2
1092           3390   L026040?:
1092           3391   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:739: waitms(100);
1092 900064    3392            mov     dptr,#0x0064
1095 C002      3393            push    ar2
1097 C003      3394            push    ar3
1099 C004      3395            push    ar4
109B C005      3396            push    ar5
109D 120100    3397            lcall   _waitms
10A0           3398   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:740: printf("pir_voltage: %f \r\n", pir_voltage);
10A0 74A8      3399            mov     a,#__str_16
10A2 C0E0      3400            push    acc
10A4 74DE      3401            mov     a,#(__str_16 >> 8)
10A6 C0E0      3402            push    acc
10A8 7480      3403            mov     a,#0x80
10AA C0E0      3404            push    acc
10AC 120100    3405            lcall   _printf
10AF E581      3406            mov     a,sp
10B1 24F9      3407            add     a,#0xf9
10B3 F581      3408            mov     sp,a
10B5 020100    3409            ljmp    L026052?
10B8           3410   L026043?:
10B8           3411   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:744: printf("Do nothing\r\n");      
10B8 74E8      3412            mov     a,#__str_17
10BA C0E0      3413            push    acc
10BC 74DE      3414            mov     a,#(__str_17 >> 8)
10BE C0E0      3415            push    acc
10C0 7480      3416            mov     a,#0x80
10C2 C0E0      3417            push    acc
10C4 120100    3418            lcall   _printf
10C7 1581      3419            dec     sp
10C9 1581      3420            dec     sp
10CB 1581      3421            dec     sp
10CD 020100    3422            ljmp    L026052?
10D0           3423            rseg R_CSEG
10D0           3424   
0000           3425            rseg R_XINIT
0000           3426   
0000           3427            rseg R_CONST
0000           3428   __str_0:
0000 0A        3429            db 0x0A
0001 72656164  3430            db 'read 1:  at pin 1.6: %f'
     20313A20
     20617420
     70696E20
     312E363A
     202566
0018 0D        3431            db 0x0D
0019 00        3432            db 0x00
001A           3433   __str_1:
001A 0A        3434            db 0x0A
001B 72656164  3435            db 'read 0: Volt at pin 1.6: %f'
     20303A20
     566F6C74
     20617420
     70696E20
     312E363A
     202566
0036 0D        3436            db 0x0D
0037 00        3437            db 0x00
0038           3438   __str_2:
0038 5475726E  3439            db 'Turn right '
     20726967
     687420
0043 0D        3440            db 0x0D
0044 0A        3441            db 0x0A
0045 00        3442            db 0x00
0046           3443   __str_3:
0046 476F2053  3444            db 'Go Straight '
     74726169
     67687420
0052 0D        3445            db 0x0D
0053 0A        3446            db 0x0A
0054 00        3447            db 0x00
0055           3448   __str_4:
0055 1B        3449            db 0x1B
0056 5B324A    3450            db '[2J'
0059 00        3451            db 0x00
005A           3452   __str_5:
005A 53717561  3453            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0080 0D        3454            db 0x0D
0081 0A        3455            db 0x0A
0082 43686563  3456            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0096 50322E31  3457            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00B1 0D        3458            db 0x0D
00B2 0A        3459            db 0x0A
00B3 00        3460            db 0x00
00B4           3461   __str_6:
00B4 0A        3462            db 0x0A
00B5 0D        3463            db 0x0D
00B6 00        3464            db 0x00
00B7           3465   __str_7:
00B7 6175746F  3466            db 'auto '
     20
00BC 0D        3467            db 0x0D
00BD 0A        3468            db 0x0A
00BE 00        3469            db 0x00
00BF           3470   __str_8:
00BF 0D        3471            db 0x0D
00C0 543D2566  3472            db 'T=%f ms   '
     206D7320
     2020
00CA 0A        3473            db 0x0A
00CB 20        3474            db ' '
00CC 00        3475            db 0x00
00CD           3476   __str_9:
00CD 6D616E75  3477            db 'manual '
     616C20
00D4 0D        3478            db 0x0D
00D5 0A        3479            db 0x0A
00D6 00        3480            db 0x00
00D7           3481   __str_10:
00D7 54696D65  3482            db 'Time: %f'
     3A202566
00DF 0A        3483            db 0x0A
00E0 09        3484            db 0x09
00E1 0D        3485            db 0x0D
00E2 00        3486            db 0x00
00E3           3487   __str_11:
00E3 52494748  3488            db 'RIGHT'
     54
00E8 0A        3489            db 0x0A
00E9 0D        3490            db 0x0D
00EA 00        3491            db 0x00
00EB           3492   __str_12:
00EB 464F5257  3493            db 'FORWARD'
     415244
00F2 0A        3494            db 0x0A
00F3 0D        3495            db 0x0D
00F4 00        3496            db 0x00
00F5           3497   __str_13:
00F5 4241434B  3498            db 'BACKWARD'
     57415244
00FD 0A        3499            db 0x0A
00FE 0D        3500            db 0x0D
00FF 00        3501            db 0x00
0100           3502   __str_14:
0100 4C454654  3503            db 'LEFT'
0104 0A        3504            db 0x0A
0105 0D        3505            db 0x0D
0106 00        3506            db 0x00
0107           3507   __str_15:
0107 53544F50  3508            db 'STOP'
010B 0A        3509            db 0x0A
010C 0D        3510            db 0x0D
010D 00        3511            db 0x00
010E           3512   __str_16:
010E 7069725F  3513            db 'pir_voltage: %f '
     766F6C74
     6167653A
     20256620
011E 0D        3514            db 0x0D
011F 0A        3515            db 0x0A
0120 00        3516            db 0x00
0121           3517   __str_17:
0121 446F206E  3518            db 'Do nothing'
     6F746869
     6E67
012B 0D        3519            db 0x0D
012C 0A        3520            db 0x0A
012D 00        3521            db 0x00
012E           3522   
002E           3523            CSEG
002E           3524   
002E           3525   end
