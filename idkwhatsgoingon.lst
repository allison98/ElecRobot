0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 14:36:24 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _laserPattern
0000             32            public _detectobstacle
0000             33            public _checkMode
0000             34            public _recieveData
0000             35            public _waitquarterperiod
0000             36            public _getDigitalSignal
0000             37            public _voltsAtPeak
0000             38            public _checkCommands
0000             39            public _arrayEqual
0000             40            public _periodcalc
0000             41            public _PWMStop
0000             42            public _PWMRight
0000             43            public _PWMLeft
0000             44            public _PWMbackward
0000             45            public _PWMforward
0000             46            public _InitPinADC
0000             47            public _Volts_at_Pin
0000             48            public _TIMER0_Init
0000             49            public _InitADC
0000             50            public _Timer2_ISR
0000             51            public _ADC_at_Pin
0000             52            public _waitms
0000             53            public _Timer3us
0000             54            public __c51_external_startup
0000             55            public _x
0000             56            public _command
0000             57            public _right
0000             58            public _left
0000             59            public _backward
0000             60            public _forward
0000             61            public _stop
0000             62            public _claw_flag
0000             63            public _flag
0000             64            public _cartMoveB
0000             65            public _cartMoveF
0000             66            public _pwmSig6
0000             67            public _pwmSig5
0000             68            public _pwmSig4
0000             69            public _pwmSig3
0000             70            public _pwmSig2
0000             71            public _pwmSig1
0000             72            public _pwm_count3
0000             73            public _pwm_count2
0000             74            public _pwm_count1
0000             75            public _pwm_count
0000             76   ;--------------------------------------------------------
0000             77   ; Special Function Registers
0000             78   ;--------------------------------------------------------
0000             79   _ACC            DATA 0xe0
0000             80   _ADC0ASAH       DATA 0xb6
0000             81   _ADC0ASAL       DATA 0xb5
0000             82   _ADC0ASCF       DATA 0xa1
0000             83   _ADC0ASCT       DATA 0xc7
0000             84   _ADC0CF0        DATA 0xbc
0000             85   _ADC0CF1        DATA 0xb9
0000             86   _ADC0CF2        DATA 0xdf
0000             87   _ADC0CN0        DATA 0xe8
0000             88   _ADC0CN1        DATA 0xb2
0000             89   _ADC0CN2        DATA 0xb3
0000             90   _ADC0GTH        DATA 0xc4
0000             91   _ADC0GTL        DATA 0xc3
0000             92   _ADC0H          DATA 0xbe
0000             93   _ADC0L          DATA 0xbd
0000             94   _ADC0LTH        DATA 0xc6
0000             95   _ADC0LTL        DATA 0xc5
0000             96   _ADC0MX         DATA 0xbb
0000             97   _B              DATA 0xf0
0000             98   _CKCON0         DATA 0x8e
0000             99   _CKCON1         DATA 0xa6
0000            100   _CLEN0          DATA 0xc6
0000            101   _CLIE0          DATA 0xc7
0000            102   _CLIF0          DATA 0xe8
0000            103   _CLKSEL         DATA 0xa9
0000            104   _CLOUT0         DATA 0xd1
0000            105   _CLU0CF         DATA 0xb1
0000            106   _CLU0FN         DATA 0xaf
0000            107   _CLU0MX         DATA 0x84
0000            108   _CLU1CF         DATA 0xb3
0000            109   _CLU1FN         DATA 0xb2
0000            110   _CLU1MX         DATA 0x85
0000            111   _CLU2CF         DATA 0xb6
0000            112   _CLU2FN         DATA 0xb5
0000            113   _CLU2MX         DATA 0x91
0000            114   _CLU3CF         DATA 0xbf
0000            115   _CLU3FN         DATA 0xbe
0000            116   _CLU3MX         DATA 0xae
0000            117   _CMP0CN0        DATA 0x9b
0000            118   _CMP0CN1        DATA 0x99
0000            119   _CMP0MD         DATA 0x9d
0000            120   _CMP0MX         DATA 0x9f
0000            121   _CMP1CN0        DATA 0xbf
0000            122   _CMP1CN1        DATA 0xac
0000            123   _CMP1MD         DATA 0xab
0000            124   _CMP1MX         DATA 0xaa
0000            125   _CRC0CN0        DATA 0xce
0000            126   _CRC0CN1        DATA 0x86
0000            127   _CRC0CNT        DATA 0xd3
0000            128   _CRC0DAT        DATA 0xcb
0000            129   _CRC0FLIP       DATA 0xcf
0000            130   _CRC0IN         DATA 0xca
0000            131   _CRC0ST         DATA 0xd2
0000            132   _DAC0CF0        DATA 0x91
0000            133   _DAC0CF1        DATA 0x92
0000            134   _DAC0H          DATA 0x85
0000            135   _DAC0L          DATA 0x84
0000            136   _DAC1CF0        DATA 0x93
0000            137   _DAC1CF1        DATA 0x94
0000            138   _DAC1H          DATA 0x8a
0000            139   _DAC1L          DATA 0x89
0000            140   _DAC2CF0        DATA 0x95
0000            141   _DAC2CF1        DATA 0x96
0000            142   _DAC2H          DATA 0x8c
0000            143   _DAC2L          DATA 0x8b
0000            144   _DAC3CF0        DATA 0x9a
0000            145   _DAC3CF1        DATA 0x9c
0000            146   _DAC3H          DATA 0x8e
0000            147   _DAC3L          DATA 0x8d
0000            148   _DACGCF0        DATA 0x88
0000            149   _DACGCF1        DATA 0x98
0000            150   _DACGCF2        DATA 0xa2
0000            151   _DERIVID        DATA 0xad
0000            152   _DEVICEID       DATA 0xb5
0000            153   _DPH            DATA 0x83
0000            154   _DPL            DATA 0x82
0000            155   _EIE1           DATA 0xe6
0000            156   _EIE2           DATA 0xf3
0000            157   _EIP1           DATA 0xbb
0000            158   _EIP1H          DATA 0xee
0000            159   _EIP2           DATA 0xed
0000            160   _EIP2H          DATA 0xf6
0000            161   _EMI0CN         DATA 0xe7
0000            162   _FLKEY          DATA 0xb7
0000            163   _HFO0CAL        DATA 0xc7
0000            164   _HFO1CAL        DATA 0xd6
0000            165   _HFOCN          DATA 0xef
0000            166   _I2C0ADM        DATA 0xff
0000            167   _I2C0CN0        DATA 0xba
0000            168   _I2C0DIN        DATA 0xbc
0000            169   _I2C0DOUT       DATA 0xbb
0000            170   _I2C0FCN0       DATA 0xad
0000            171   _I2C0FCN1       DATA 0xab
0000            172   _I2C0FCT        DATA 0xf5
0000            173   _I2C0SLAD       DATA 0xbd
0000            174   _I2C0STAT       DATA 0xb9
0000            175   _IE             DATA 0xa8
0000            176   _IP             DATA 0xb8
0000            177   _IPH            DATA 0xf2
0000            178   _IT01CF         DATA 0xe4
0000            179   _LFO0CN         DATA 0xb1
0000            180   _P0             DATA 0x80
0000            181   _P0MASK         DATA 0xfe
0000            182   _P0MAT          DATA 0xfd
0000            183   _P0MDIN         DATA 0xf1
0000            184   _P0MDOUT        DATA 0xa4
0000            185   _P0SKIP         DATA 0xd4
0000            186   _P1             DATA 0x90
0000            187   _P1MASK         DATA 0xee
0000            188   _P1MAT          DATA 0xed
0000            189   _P1MDIN         DATA 0xf2
0000            190   _P1MDOUT        DATA 0xa5
0000            191   _P1SKIP         DATA 0xd5
0000            192   _P2             DATA 0xa0
0000            193   _P2MASK         DATA 0xfc
0000            194   _P2MAT          DATA 0xfb
0000            195   _P2MDIN         DATA 0xf3
0000            196   _P2MDOUT        DATA 0xa6
0000            197   _P2SKIP         DATA 0xcc
0000            198   _P3             DATA 0xb0
0000            199   _P3MDIN         DATA 0xf4
0000            200   _P3MDOUT        DATA 0x9c
0000            201   _PCA0CENT       DATA 0x9e
0000            202   _PCA0CLR        DATA 0x9c
0000            203   _PCA0CN0        DATA 0xd8
0000            204   _PCA0CPH0       DATA 0xfc
0000            205   _PCA0CPH1       DATA 0xea
0000            206   _PCA0CPH2       DATA 0xec
0000            207   _PCA0CPH3       DATA 0xf5
0000            208   _PCA0CPH4       DATA 0x85
0000            209   _PCA0CPH5       DATA 0xde
0000            210   _PCA0CPL0       DATA 0xfb
0000            211   _PCA0CPL1       DATA 0xe9
0000            212   _PCA0CPL2       DATA 0xeb
0000            213   _PCA0CPL3       DATA 0xf4
0000            214   _PCA0CPL4       DATA 0x84
0000            215   _PCA0CPL5       DATA 0xdd
0000            216   _PCA0CPM0       DATA 0xda
0000            217   _PCA0CPM1       DATA 0xdb
0000            218   _PCA0CPM2       DATA 0xdc
0000            219   _PCA0CPM3       DATA 0xae
0000            220   _PCA0CPM4       DATA 0xaf
0000            221   _PCA0CPM5       DATA 0xcc
0000            222   _PCA0H          DATA 0xfa
0000            223   _PCA0L          DATA 0xf9
0000            224   _PCA0MD         DATA 0xd9
0000            225   _PCA0POL        DATA 0x96
0000            226   _PCA0PWM        DATA 0xf7
0000            227   _PCON0          DATA 0x87
0000            228   _PCON1          DATA 0xcd
0000            229   _PFE0CN         DATA 0xc1
0000            230   _PRTDRV         DATA 0xf6
0000            231   _PSCTL          DATA 0x8f
0000            232   _PSTAT0         DATA 0xaa
0000            233   _PSW            DATA 0xd0
0000            234   _REF0CN         DATA 0xd1
0000            235   _REG0CN         DATA 0xc9
0000            236   _REVID          DATA 0xb6
0000            237   _RSTSRC         DATA 0xef
0000            238   _SBCON1         DATA 0x94
0000            239   _SBRLH1         DATA 0x96
0000            240   _SBRLL1         DATA 0x95
0000            241   _SBUF           DATA 0x99
0000            242   _SBUF0          DATA 0x99
0000            243   _SBUF1          DATA 0x92
0000            244   _SCON           DATA 0x98
0000            245   _SCON0          DATA 0x98
0000            246   _SCON1          DATA 0xc8
0000            247   _SFRPAGE        DATA 0xa7
0000            248   _SFRPGCN        DATA 0xbc
0000            249   _SFRSTACK       DATA 0xd7
0000            250   _SMB0ADM        DATA 0xd6
0000            251   _SMB0ADR        DATA 0xd7
0000            252   _SMB0CF         DATA 0xc1
0000            253   _SMB0CN0        DATA 0xc0
0000            254   _SMB0DAT        DATA 0xc2
0000            255   _SMB0FCN0       DATA 0xc3
0000            256   _SMB0FCN1       DATA 0xc4
0000            257   _SMB0FCT        DATA 0xef
0000            258   _SMB0RXLN       DATA 0xc5
0000            259   _SMB0TC         DATA 0xac
0000            260   _SMOD1          DATA 0x93
0000            261   _SP             DATA 0x81
0000            262   _SPI0CFG        DATA 0xa1
0000            263   _SPI0CKR        DATA 0xa2
0000            264   _SPI0CN0        DATA 0xf8
0000            265   _SPI0DAT        DATA 0xa3
0000            266   _SPI0FCN0       DATA 0x9a
0000            267   _SPI0FCN1       DATA 0x9b
0000            268   _SPI0FCT        DATA 0xf7
0000            269   _SPI0PCF        DATA 0xdf
0000            270   _TCON           DATA 0x88
0000            271   _TH0            DATA 0x8c
0000            272   _TH1            DATA 0x8d
0000            273   _TL0            DATA 0x8a
0000            274   _TL1            DATA 0x8b
0000            275   _TMOD           DATA 0x89
0000            276   _TMR2CN0        DATA 0xc8
0000            277   _TMR2CN1        DATA 0xfd
0000            278   _TMR2H          DATA 0xcf
0000            279   _TMR2L          DATA 0xce
0000            280   _TMR2RLH        DATA 0xcb
0000            281   _TMR2RLL        DATA 0xca
0000            282   _TMR3CN0        DATA 0x91
0000            283   _TMR3CN1        DATA 0xfe
0000            284   _TMR3H          DATA 0x95
0000            285   _TMR3L          DATA 0x94
0000            286   _TMR3RLH        DATA 0x93
0000            287   _TMR3RLL        DATA 0x92
0000            288   _TMR4CN0        DATA 0x98
0000            289   _TMR4CN1        DATA 0xff
0000            290   _TMR4H          DATA 0xa5
0000            291   _TMR4L          DATA 0xa4
0000            292   _TMR4RLH        DATA 0xa3
0000            293   _TMR4RLL        DATA 0xa2
0000            294   _TMR5CN0        DATA 0xc0
0000            295   _TMR5CN1        DATA 0xf1
0000            296   _TMR5H          DATA 0xd5
0000            297   _TMR5L          DATA 0xd4
0000            298   _TMR5RLH        DATA 0xd3
0000            299   _TMR5RLL        DATA 0xd2
0000            300   _UART0PCF       DATA 0xd9
0000            301   _UART1FCN0      DATA 0x9d
0000            302   _UART1FCN1      DATA 0xd8
0000            303   _UART1FCT       DATA 0xfa
0000            304   _UART1LIN       DATA 0x9e
0000            305   _UART1PCF       DATA 0xda
0000            306   _VDM0CN         DATA 0xff
0000            307   _WDTCN          DATA 0x97
0000            308   _XBR0           DATA 0xe1
0000            309   _XBR1           DATA 0xe2
0000            310   _XBR2           DATA 0xe3
0000            311   _XOSC0CN        DATA 0x86
0000            312   _DPTR           DATA 0x8382
0000            313   _TMR2RL         DATA 0xcbca
0000            314   _TMR3RL         DATA 0x9392
0000            315   _TMR4RL         DATA 0xa3a2
0000            316   _TMR5RL         DATA 0xd3d2
0000            317   _TMR0           DATA 0x8c8a
0000            318   _TMR1           DATA 0x8d8b
0000            319   _TMR2           DATA 0xcfce
0000            320   _TMR3           DATA 0x9594
0000            321   _TMR4           DATA 0xa5a4
0000            322   _TMR5           DATA 0xd5d4
0000            323   _SBRL1          DATA 0x9695
0000            324   _PCA0           DATA 0xfaf9
0000            325   _PCA0CP0        DATA 0xfcfb
0000            326   _PCA0CP1        DATA 0xeae9
0000            327   _PCA0CP2        DATA 0xeceb
0000            328   _PCA0CP3        DATA 0xf5f4
0000            329   _PCA0CP4        DATA 0x8584
0000            330   _PCA0CP5        DATA 0xdedd
0000            331   _ADC0ASA        DATA 0xb6b5
0000            332   _ADC0GT         DATA 0xc4c3
0000            333   _ADC0           DATA 0xbebd
0000            334   _ADC0LT         DATA 0xc6c5
0000            335   _DAC0           DATA 0x8584
0000            336   _DAC1           DATA 0x8a89
0000            337   _DAC2           DATA 0x8c8b
0000            338   _DAC3           DATA 0x8e8d
0000            339   ;--------------------------------------------------------
0000            340   ; special function bits
0000            341   ;--------------------------------------------------------
0000            342   _ACC_0          BIT 0xe0
0000            343   _ACC_1          BIT 0xe1
0000            344   _ACC_2          BIT 0xe2
0000            345   _ACC_3          BIT 0xe3
0000            346   _ACC_4          BIT 0xe4
0000            347   _ACC_5          BIT 0xe5
0000            348   _ACC_6          BIT 0xe6
0000            349   _ACC_7          BIT 0xe7
0000            350   _TEMPE          BIT 0xe8
0000            351   _ADGN0          BIT 0xe9
0000            352   _ADGN1          BIT 0xea
0000            353   _ADWINT         BIT 0xeb
0000            354   _ADBUSY         BIT 0xec
0000            355   _ADINT          BIT 0xed
0000            356   _IPOEN          BIT 0xee
0000            357   _ADEN           BIT 0xef
0000            358   _B_0            BIT 0xf0
0000            359   _B_1            BIT 0xf1
0000            360   _B_2            BIT 0xf2
0000            361   _B_3            BIT 0xf3
0000            362   _B_4            BIT 0xf4
0000            363   _B_5            BIT 0xf5
0000            364   _B_6            BIT 0xf6
0000            365   _B_7            BIT 0xf7
0000            366   _C0FIF          BIT 0xe8
0000            367   _C0RIF          BIT 0xe9
0000            368   _C1FIF          BIT 0xea
0000            369   _C1RIF          BIT 0xeb
0000            370   _C2FIF          BIT 0xec
0000            371   _C2RIF          BIT 0xed
0000            372   _C3FIF          BIT 0xee
0000            373   _C3RIF          BIT 0xef
0000            374   _D1SRC0         BIT 0x88
0000            375   _D1SRC1         BIT 0x89
0000            376   _D1AMEN         BIT 0x8a
0000            377   _D01REFSL       BIT 0x8b
0000            378   _D3SRC0         BIT 0x8c
0000            379   _D3SRC1         BIT 0x8d
0000            380   _D3AMEN         BIT 0x8e
0000            381   _D23REFSL       BIT 0x8f
0000            382   _D0UDIS         BIT 0x98
0000            383   _D1UDIS         BIT 0x99
0000            384   _D2UDIS         BIT 0x9a
0000            385   _D3UDIS         BIT 0x9b
0000            386   _EX0            BIT 0xa8
0000            387   _ET0            BIT 0xa9
0000            388   _EX1            BIT 0xaa
0000            389   _ET1            BIT 0xab
0000            390   _ES0            BIT 0xac
0000            391   _ET2            BIT 0xad
0000            392   _ESPI0          BIT 0xae
0000            393   _EA             BIT 0xaf
0000            394   _PX0            BIT 0xb8
0000            395   _PT0            BIT 0xb9
0000            396   _PX1            BIT 0xba
0000            397   _PT1            BIT 0xbb
0000            398   _PS0            BIT 0xbc
0000            399   _PT2            BIT 0xbd
0000            400   _PSPI0          BIT 0xbe
0000            401   _P0_0           BIT 0x80
0000            402   _P0_1           BIT 0x81
0000            403   _P0_2           BIT 0x82
0000            404   _P0_3           BIT 0x83
0000            405   _P0_4           BIT 0x84
0000            406   _P0_5           BIT 0x85
0000            407   _P0_6           BIT 0x86
0000            408   _P0_7           BIT 0x87
0000            409   _P1_0           BIT 0x90
0000            410   _P1_1           BIT 0x91
0000            411   _P1_2           BIT 0x92
0000            412   _P1_3           BIT 0x93
0000            413   _P1_4           BIT 0x94
0000            414   _P1_5           BIT 0x95
0000            415   _P1_6           BIT 0x96
0000            416   _P1_7           BIT 0x97
0000            417   _P2_0           BIT 0xa0
0000            418   _P2_1           BIT 0xa1
0000            419   _P2_2           BIT 0xa2
0000            420   _P2_3           BIT 0xa3
0000            421   _P2_4           BIT 0xa4
0000            422   _P2_5           BIT 0xa5
0000            423   _P2_6           BIT 0xa6
0000            424   _P3_0           BIT 0xb0
0000            425   _P3_1           BIT 0xb1
0000            426   _P3_2           BIT 0xb2
0000            427   _P3_3           BIT 0xb3
0000            428   _P3_4           BIT 0xb4
0000            429   _P3_7           BIT 0xb7
0000            430   _CCF0           BIT 0xd8
0000            431   _CCF1           BIT 0xd9
0000            432   _CCF2           BIT 0xda
0000            433   _CCF3           BIT 0xdb
0000            434   _CCF4           BIT 0xdc
0000            435   _CCF5           BIT 0xdd
0000            436   _CR             BIT 0xde
0000            437   _CF             BIT 0xdf
0000            438   _PARITY         BIT 0xd0
0000            439   _F1             BIT 0xd1
0000            440   _OV             BIT 0xd2
0000            441   _RS0            BIT 0xd3
0000            442   _RS1            BIT 0xd4
0000            443   _F0             BIT 0xd5
0000            444   _AC             BIT 0xd6
0000            445   _CY             BIT 0xd7
0000            446   _RI             BIT 0x98
0000            447   _TI             BIT 0x99
0000            448   _RB8            BIT 0x9a
0000            449   _TB8            BIT 0x9b
0000            450   _REN            BIT 0x9c
0000            451   _CE             BIT 0x9d
0000            452   _SMODE          BIT 0x9e
0000            453   _RI1            BIT 0xc8
0000            454   _TI1            BIT 0xc9
0000            455   _RBX1           BIT 0xca
0000            456   _TBX1           BIT 0xcb
0000            457   _REN1           BIT 0xcc
0000            458   _PERR1          BIT 0xcd
0000            459   _OVR1           BIT 0xce
0000            460   _SI             BIT 0xc0
0000            461   _ACK            BIT 0xc1
0000            462   _ARBLOST        BIT 0xc2
0000            463   _ACKRQ          BIT 0xc3
0000            464   _STO            BIT 0xc4
0000            465   _STA            BIT 0xc5
0000            466   _TXMODE         BIT 0xc6
0000            467   _MASTER         BIT 0xc7
0000            468   _SPIEN          BIT 0xf8
0000            469   _TXNF           BIT 0xf9
0000            470   _NSSMD0         BIT 0xfa
0000            471   _NSSMD1         BIT 0xfb
0000            472   _RXOVRN         BIT 0xfc
0000            473   _MODF           BIT 0xfd
0000            474   _WCOL           BIT 0xfe
0000            475   _SPIF           BIT 0xff
0000            476   _IT0            BIT 0x88
0000            477   _IE0            BIT 0x89
0000            478   _IT1            BIT 0x8a
0000            479   _IE1            BIT 0x8b
0000            480   _TR0            BIT 0x8c
0000            481   _TF0            BIT 0x8d
0000            482   _TR1            BIT 0x8e
0000            483   _TF1            BIT 0x8f
0000            484   _T2XCLK0        BIT 0xc8
0000            485   _T2XCLK1        BIT 0xc9
0000            486   _TR2            BIT 0xca
0000            487   _T2SPLIT        BIT 0xcb
0000            488   _TF2CEN         BIT 0xcc
0000            489   _TF2LEN         BIT 0xcd
0000            490   _TF2L           BIT 0xce
0000            491   _TF2H           BIT 0xcf
0000            492   _T4XCLK0        BIT 0x98
0000            493   _T4XCLK1        BIT 0x99
0000            494   _TR4            BIT 0x9a
0000            495   _T4SPLIT        BIT 0x9b
0000            496   _TF4CEN         BIT 0x9c
0000            497   _TF4LEN         BIT 0x9d
0000            498   _TF4L           BIT 0x9e
0000            499   _TF4H           BIT 0x9f
0000            500   _T5XCLK0        BIT 0xc0
0000            501   _T5XCLK1        BIT 0xc1
0000            502   _TR5            BIT 0xc2
0000            503   _T5SPLIT        BIT 0xc3
0000            504   _TF5CEN         BIT 0xc4
0000            505   _TF5LEN         BIT 0xc5
0000            506   _TF5L           BIT 0xc6
0000            507   _TF5H           BIT 0xc7
0000            508   _RIE            BIT 0xd8
0000            509   _RXTO0          BIT 0xd9
0000            510   _RXTO1          BIT 0xda
0000            511   _RFRQ           BIT 0xdb
0000            512   _TIE            BIT 0xdc
0000            513   _TXHOLD         BIT 0xdd
0000            514   _TXNF1          BIT 0xde
0000            515   _TFRQ           BIT 0xdf
0000            516   ;--------------------------------------------------------
0000            517   ; overlayable register banks
0000            518   ;--------------------------------------------------------
0000            519            rbank0 segment data overlay
0000            520   ;--------------------------------------------------------
0000            521   ; internal ram data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_DSEG
0000            524   _pwm_count:
0000            525            ds 1
0001            526   _pwm_count1:
0001            527            ds 1
0002            528   _pwm_count2:
0002            529            ds 1
0003            530   _pwm_count3:
0003            531            ds 1
0004            532   _pwmSig1:
0004            533            ds 2
0006            534   _pwmSig2:
0006            535            ds 2
0008            536   _pwmSig3:
0008            537            ds 2
000A            538   _pwmSig4:
000A            539            ds 2
000C            540   _pwmSig5:
000C            541            ds 2
000E            542   _pwmSig6:
000E            543            ds 2
0010            544   _cartMoveF:
0010            545            ds 2
0012            546   _cartMoveB:
0012            547            ds 2
0014            548   _flag:
0014            549            ds 2
0016            550   _claw_flag:
0016            551            ds 2
0018            552   _stop:
0018            553            ds 8
0020            554   _forward:
0020            555            ds 8
0028            556   _backward:
0028            557            ds 8
0030            558   _left:
0030            559            ds 8
0038            560   _right:
0038            561            ds 8
0040            562   _command:
0040            563            ds 8
0048            564   _x:
0048            565            ds 2
004A            566   _main_sloc0_1_0:
004A            567            ds 4
004E            568   ;--------------------------------------------------------
004E            569   ; overlayable items in internal ram 
004E            570   ;--------------------------------------------------------
0000            571            rseg    R_OSEG
0000            572            rseg    R_OSEG
0000            573            rseg    R_OSEG
0000            574   _InitPinADC_PARM_2:
0000            575            ds 1
0001            576            rseg    R_OSEG
0001            577   _arrayEqual_PARM_2:
0001            578            ds 2
0003            579   _arrayEqual_PARM_3:
0003            580            ds 3
0006            581   _arrayEqual_arr1_1_78:
0006            582            ds 3
0009            583   ;--------------------------------------------------------
0009            584   ; indirectly addressable internal ram data
0009            585   ;--------------------------------------------------------
0000            586            rseg R_ISEG
0000            587   ;--------------------------------------------------------
0000            588   ; absolute internal ram data
0000            589   ;--------------------------------------------------------
0000            590            DSEG
0000            591   ;--------------------------------------------------------
0000            592   ; bit data
0000            593   ;--------------------------------------------------------
0000            594            rseg R_BSEG
0000            595   _Timer2_ISR_sloc0_1_0:
0000            596            DBIT    1
0001            597   ;--------------------------------------------------------
0001            598   ; paged external ram data
0001            599   ;--------------------------------------------------------
0000            600            rseg R_PSEG
0000            601   ;--------------------------------------------------------
0000            602   ; external ram data
0000            603   ;--------------------------------------------------------
0000            604            rseg R_XSEG
0000            605   ;--------------------------------------------------------
0000            606   ; absolute external ram data
0000            607   ;--------------------------------------------------------
0000            608            XSEG
0000            609   ;--------------------------------------------------------
0000            610   ; external initialized ram data
0000            611   ;--------------------------------------------------------
0000            612            rseg R_IXSEG
0000            613            rseg R_HOME
0000            614            rseg R_GSINIT
0000            615            rseg R_CSEG
0000            616   ;--------------------------------------------------------
0000            617   ; Reset entry point and interrupt vectors
0000            618   ;--------------------------------------------------------
0000            619            CSEG at 0x0000
0000 020100     620            ljmp    _crt0
002B            621            CSEG at 0x002b
002B 020100     622            ljmp    _Timer2_ISR
002E            623   ;--------------------------------------------------------
002E            624   ; global & static initialisations
002E            625   ;--------------------------------------------------------
0000            626            rseg R_HOME
0000            627            rseg R_GSINIT
0000            628            rseg R_GSINIT
0000            629   ;--------------------------------------------------------
0000            630   ; data variables initialization
0000            631   ;--------------------------------------------------------
0000            632            rseg R_DINIT
0000            633   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:60: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 75E000     634            mov     _pwm_count,#0x00
0003            635   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:61: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75A000     636            mov     _pwm_count1,#0x00
0006            637   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:62: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 756000     638            mov     _pwm_count2,#0x00
0009            639   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:63: volatile unsigned char pwm_count3 = 0; //
0009 752000     640            mov     _pwm_count3,#0x00
000C            641   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:78: volatile int flag = 0;
000C E4         642            clr     a
000D F508       643            mov     _flag,a
000F F509       644            mov     (_flag + 1),a
0011            645   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:79: volatile int claw_flag = 0;
0011 E4         646            clr     a
0012 F5C8       647            mov     _claw_flag,a
0014 F5C9       648            mov     (_claw_flag + 1),a
0016            649   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:80: int stop[]={0,0,0,0};
0016 758800     650            mov     _stop,#0x00
0019 758900     651            mov     (_stop + 1),#0x00
001C 758A00     652            mov     (_stop + 0x0002),#0x00
001F 758B00     653            mov     ((_stop + 0x0002) + 1),#0x00
0022 758C00     654            mov     (_stop + 0x0004),#0x00
0025 758D00     655            mov     ((_stop + 0x0004) + 1),#0x00
0028 758E00     656            mov     (_stop + 0x0006),#0x00
002B 758F00     657            mov     ((_stop + 0x0006) + 1),#0x00
002E            658   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:81: int forward[]={1,1,1,1};
002E 754801     659            mov     _forward,#0x01
0031 754900     660            mov     (_forward + 1),#0x00
0034 754A01     661            mov     (_forward + 0x0002),#0x01
0037 754B00     662            mov     ((_forward + 0x0002) + 1),#0x00
003A 754C01     663            mov     (_forward + 0x0004),#0x01
003D 754D00     664            mov     ((_forward + 0x0004) + 1),#0x00
0040 754E01     665            mov     (_forward + 0x0006),#0x01
0043 754F00     666            mov     ((_forward + 0x0006) + 1),#0x00
0046            667   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:82: int backward[]={1,0,1,1};
0046 750801     668            mov     _backward,#0x01
0049 750900     669            mov     (_backward + 1),#0x00
004C 750A00     670            mov     (_backward + 0x0002),#0x00
004F 750B00     671            mov     ((_backward + 0x0002) + 1),#0x00
0052 750C01     672            mov     (_backward + 0x0004),#0x01
0055 750D00     673            mov     ((_backward + 0x0004) + 1),#0x00
0058 750E01     674            mov     (_backward + 0x0006),#0x01
005B 750F00     675            mov     ((_backward + 0x0006) + 1),#0x00
005E            676   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:83: int left[]={1,0,0,1};
005E 75C801     677            mov     _left,#0x01
0061 75C900     678            mov     (_left + 1),#0x00
0064 75CA00     679            mov     (_left + 0x0002),#0x00
0067 75CB00     680            mov     ((_left + 0x0002) + 1),#0x00
006A 75CC00     681            mov     (_left + 0x0004),#0x00
006D 75CD00     682            mov     ((_left + 0x0004) + 1),#0x00
0070 75CE01     683            mov     (_left + 0x0006),#0x01
0073 75CF00     684            mov     ((_left + 0x0006) + 1),#0x00
0076            685   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:84: int right[]={1,0,0,0};
0076 758801     686            mov     _right,#0x01
0079 758900     687            mov     (_right + 1),#0x00
007C 758A00     688            mov     (_right + 0x0002),#0x00
007F 758B00     689            mov     ((_right + 0x0002) + 1),#0x00
0082 758C00     690            mov     (_right + 0x0004),#0x00
0085 758D00     691            mov     ((_right + 0x0004) + 1),#0x00
0088 758E00     692            mov     (_right + 0x0006),#0x00
008B 758F00     693            mov     ((_right + 0x0006) + 1),#0x00
008E            694   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:86: int command[4] = {0,0,0,0};
008E 754800     695            mov     _command,#0x00
0091 754900     696            mov     (_command + 1),#0x00
0094 754A00     697            mov     (_command + 0x0002),#0x00
0097 754B00     698            mov     ((_command + 0x0002) + 1),#0x00
009A 754C00     699            mov     (_command + 0x0004),#0x00
009D 754D00     700            mov     ((_command + 0x0004) + 1),#0x00
00A0 754E00     701            mov     (_command + 0x0006),#0x00
00A3 754F00     702            mov     ((_command + 0x0006) + 1),#0x00
00A6            703   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:88: volatile unsigned int x = 2;
00A6 750802     704            mov     _x,#0x02
00A9 E4         705            clr     a
00AA F509       706            mov     (_x + 1),a
00AC            707            ; The linker places a 'ret' at the end of segment R_DINIT.
00AC            708   ;--------------------------------------------------------
00AC            709   ; code
00AC            710   ;--------------------------------------------------------
0000            711            rseg R_CSEG
0000            712   ;------------------------------------------------------------
0000            713   ;Allocation info for local variables in function '_c51_external_startup'
0000            714   ;------------------------------------------------------------
0000            715   ;------------------------------------------------------------
0000            716   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:90: char _c51_external_startup(void)
0000            717   ;        -----------------------------------------
0000            718   ;         function _c51_external_startup
0000            719   ;        -----------------------------------------
0000            720   __c51_external_startup:
0000            721            using   0
0000            722   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:93: SFRPAGE = 0x00;
0000 75A700     723            mov     _SFRPAGE,#0x00
0003            724   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:94: WDTCN = 0xDE; //First key
0003 7597DE     725            mov     _WDTCN,#0xDE
0006            726   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:95: WDTCN = 0xAD; //Second key
0006 7597AD     727            mov     _WDTCN,#0xAD
0009            728   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:97: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     729            mov     _VDM0CN,#0x80
000C            730   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:98: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     731            mov     _RSTSRC,#0x06
000F            732   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:105: SFRPAGE = 0x10;
000F 75A710     733            mov     _SFRPAGE,#0x10
0012            734   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:106: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     735            mov     _PFE0CN,#0x20
0015            736   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:107: SFRPAGE = 0x00;
0015 75A700     737            mov     _SFRPAGE,#0x00
0018            738   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:128: CLKSEL = 0x00;
0018 75A900     739            mov     _CLKSEL,#0x00
001B            740   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:129: CLKSEL = 0x00;
001B 75A900     741            mov     _CLKSEL,#0x00
001E            742   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:130: while ((CLKSEL & 0x80) == 0);
001E            743   L002001?:
001E E5A9       744            mov     a,_CLKSEL
0020 30E708     745            jnb     acc.7,L002001?
0023            746   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:131: CLKSEL = 0x03;
0023 75A903     747            mov     _CLKSEL,#0x03
0026            748   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:132: CLKSEL = 0x03;
0026 75A903     749            mov     _CLKSEL,#0x03
0029            750   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:133: while ((CLKSEL & 0x80) == 0);
0029            751   L002004?:
0029 E5A9       752            mov     a,_CLKSEL
002B 30E788     753            jnb     acc.7,L002004?
002E            754   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:138: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     755            orl     _P0MDOUT,#0x10
0031            756   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:139: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     757            mov     _XBR0,#0x01
0034            758   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:140: XBR1 = 0X00;
0034 75E200     759            mov     _XBR1,#0x00
0037            760   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:141: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     761            mov     _XBR2,#0x40
003A            762   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:147: SCON0 = 0x10;
003A 759810     763            mov     _SCON0,#0x10
003D            764   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:148: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     765            mov     _TH1,#0xE6
0040            766   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:149: TL1 = TH1;      // Init Timer1
0040 858D8B     767            mov     _TL1,_TH1
0043            768   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:150: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     769            anl     _TMOD,#0x0F
0046            770   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:151: TMOD |= 0x20;
0046 438920     771            orl     _TMOD,#0x20
0049            772   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:152: TR1 = 1; // START Timer1
0049 D28E       773            setb    _TR1
004B            774   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:153: TI = 1;  // Indicate TX0 ready
004B D299       775            setb    _TI
004D            776   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:156: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     777            mov     _TMR2CN0,#0x00
0050            778   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:157: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     779            orl     _CKCON0,#0x10
0053            780   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:158: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     781            mov     _TMR2RL,#0xE0
0056 75CBE3     782            mov     (_TMR2RL >> 8),#0xE3
0059            783   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:159: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     784            mov     _TMR2,#0xFF
005C 75CFFF     785            mov     (_TMR2 >> 8),#0xFF
005F            786   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:160: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       787            setb    _ET2
0061            788   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:161: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       789            setb    _TR2
0063            790   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:179: EA = 1; // Enable interrupts
0063 D2AF       791            setb    _EA
0065            792   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:182: return 0;
0065 758200     793            mov     dpl,#0x00
0068 22         794            ret
0069            795   ;------------------------------------------------------------
0069            796   ;Allocation info for local variables in function 'Timer3us'
0069            797   ;------------------------------------------------------------
0069            798   ;us                        Allocated to registers r2 r3 
0069            799   ;i                         Allocated to registers r4 r5 
0069            800   ;------------------------------------------------------------
0069            801   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:184: void Timer3us(unsigned int us)
0069            802   ;        -----------------------------------------
0069            803   ;         function Timer3us
0069            804   ;        -----------------------------------------
0069            805   _Timer3us:
0069 AA82       806            mov     r2,dpl
006B AB83       807            mov     r3,dph
006D            808   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:189: CKCON0|=0b_0100_0000;
006D 438E40     809            orl     _CKCON0,#0x40
0070            810   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:191: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     811            mov     _TMR3RL,#0xB8
0073 7593FF     812            mov     (_TMR3RL >> 8),#0xFF
0076            813   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:192: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     814            mov     _TMR3,_TMR3RL
0079 859395     815            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            816   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:194: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     817            mov     _TMR3CN0,#0x04
007F            818   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:195: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       819            mov     r4,#0x00
0081 7D00       820            mov     r5,#0x00
0083            821   L003004?:
0083 C3         822            clr     c
0084 EC         823            mov     a,r4
0085 9A         824            subb    a,r2
0086 ED         825            mov     a,r5
0087 9B         826            subb    a,r3
0088 5001       827            jnc     L003007?
008A            828   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:197: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            829   L003001?:
008A E591       830            mov     a,_TMR3CN0
008C 30E7C8     831            jnb     acc.7,L003001?
008F            832   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:198: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     833            anl     _TMR3CN0,#0x7F
0092            834   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:195: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         835            inc     r4
0093 BC0048     836            cjne    r4,#0x00,L003004?
0096 0D         837            inc     r5
0097 8001       838            sjmp    L003004?
0099            839   L003007?:
0099            840   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:200: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     841            mov     _TMR3CN0,#0x00
009C 22         842            ret
009D            843   ;------------------------------------------------------------
009D            844   ;Allocation info for local variables in function 'waitms'
009D            845   ;------------------------------------------------------------
009D            846   ;ms                        Allocated to registers r2 r3 
009D            847   ;j                         Allocated to registers r4 r5 
009D            848   ;k                         Allocated to registers r6 
009D            849   ;------------------------------------------------------------
009D            850   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:202: void waitms (unsigned int ms)
009D            851   ;        -----------------------------------------
009D            852   ;         function waitms
009D            853   ;        -----------------------------------------
009D            854   _waitms:
009D AA82       855            mov     r2,dpl
009F AB83       856            mov     r3,dph
00A1            857   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:206: for(j=0; j<ms; j++)
00A1 7C00       858            mov     r4,#0x00
00A3 7D00       859            mov     r5,#0x00
00A5            860   L004005?:
00A5 C3         861            clr     c
00A6 EC         862            mov     a,r4
00A7 9A         863            subb    a,r2
00A8 ED         864            mov     a,r5
00A9 9B         865            subb    a,r3
00AA 5001       866            jnc     L004009?
00AC            867   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:207: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       868            mov     r6,#0x00
00AE            869   L004001?:
00AE BE04C8     870            cjne    r6,#0x04,L004018?
00B1            871   L004018?:
00B1 5001       872            jnc     L004007?
00B3 9000FA     873            mov     dptr,#0x00FA
00B6 C002       874            push    ar2
00B8 C003       875            push    ar3
00BA C004       876            push    ar4
00BC C005       877            push    ar5
00BE C006       878            push    ar6
00C0 120100     879            lcall   _Timer3us
00C3 D006       880            pop     ar6
00C5 D005       881            pop     ar5
00C7 D004       882            pop     ar4
00C9 D003       883            pop     ar3
00CB D002       884            pop     ar2
00CD 0E         885            inc     r6
00CE 8001       886            sjmp    L004001?
00D0            887   L004007?:
00D0            888   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:206: for(j=0; j<ms; j++)
00D0 0C         889            inc     r4
00D1 BC0008     890            cjne    r4,#0x00,L004005?
00D4 0D         891            inc     r5
00D5 8001       892            sjmp    L004005?
00D7            893   L004009?:
00D7 22         894            ret
00D8            895   ;------------------------------------------------------------
00D8            896   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            897   ;------------------------------------------------------------
00D8            898   ;pin                       Allocated to registers 
00D8            899   ;------------------------------------------------------------
00D8            900   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:211: unsigned int ADC_at_Pin(unsigned char pin)
00D8            901   ;        -----------------------------------------
00D8            902   ;         function ADC_at_Pin
00D8            903   ;        -----------------------------------------
00D8            904   _ADC_at_Pin:
00D8 8582BB     905            mov     _ADC0MX,dpl
00DB            906   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:214: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       907            setb    _ADBUSY
00DD            908   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:215: while (ADBUSY); // Wait for dummy conversion to finish
00DD            909   L005001?:
00DD 20EC48     910            jb      _ADBUSY,L005001?
00E0            911   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:216: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       912            setb    _ADBUSY
00E2            913   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:217: while (ADBUSY); // Wait for conversion to complete
00E2            914   L005004?:
00E2 20EC88     915            jb      _ADBUSY,L005004?
00E5            916   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:218: return (ADC0);
00E5 85BD82     917            mov     dpl,_ADC0
00E8 85BE83     918            mov     dph,(_ADC0 >> 8)
00EB 22         919            ret
00EC            920   ;------------------------------------------------------------
00EC            921   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            922   ;------------------------------------------------------------
00EC            923   ;------------------------------------------------------------
00EC            924   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:222: void Timer2_ISR(void) interrupt 5
00EC            925   ;        -----------------------------------------
00EC            926   ;         function Timer2_ISR
00EC            927   ;        -----------------------------------------
00EC            928   _Timer2_ISR:
00EC C0E0       929            push    acc
00EE C002       930            push    ar2
00F0 C003       931            push    ar3
00F2 C0D0       932            push    psw
00F4 75D000     933            mov     psw,#0x00
00F7            934   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:224: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       935            clr     _TF2H
00F9            936   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:226: pwm_count++;
00F9 05E0       937            inc     _pwm_count
00FB            938   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:227: if (pwm_count>100)
00FB E5E0       939            mov     a,_pwm_count
00FD 249B       940            add     a,#0xff - 0x64
00FF 5001       941            jnc     L006002?
0101            942   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:228: pwm_count = 0;
0101 75E000     943            mov     _pwm_count,#0x00
0104            944   L006002?:
0104            945   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:231: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AAE0       946            mov     r2,_pwm_count
0106 7B00       947            mov     r3,#0x00
0108 C3         948            clr     c
0109 E5E0       949            mov     a,_pwmSig1
010B 9A         950            subb    a,r2
010C E5E1       951            mov     a,(_pwmSig1 + 1)
010E 9B         952            subb    a,r3
010F 9288       953            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         954            cpl     c
0112 9294       955            mov     _P1_4,c
0114            956   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:232: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AAE0       957            mov     r2,_pwm_count
0116 7B00       958            mov     r3,#0x00
0118 C3         959            clr     c
0119 E5A0       960            mov     a,_pwmSig2
011B 9A         961            subb    a,r2
011C E5A1       962            mov     a,(_pwmSig2 + 1)
011E 9B         963            subb    a,r3
011F 9288       964            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         965            cpl     c
0122 9295       966            mov     _P1_5,c
0124            967   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:234: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AAE0       968            mov     r2,_pwm_count
0126 7B00       969            mov     r3,#0x00
0128 C3         970            clr     c
0129 E560       971            mov     a,_pwmSig3
012B 9A         972            subb    a,r2
012C E561       973            mov     a,(_pwmSig3 + 1)
012E 9B         974            subb    a,r3
012F 9288       975            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         976            cpl     c
0132 9292       977            mov     _P1_2,c
0134            978   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:235: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AAE0       979            mov     r2,_pwm_count
0136 7B00       980            mov     r3,#0x00
0138 C3         981            clr     c
0139 E520       982            mov     a,_pwmSig4
013B 9A         983            subb    a,r2
013C E521       984            mov     a,(_pwmSig4 + 1)
013E 9B         985            subb    a,r3
013F 9288       986            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         987            cpl     c
0142 9293       988            mov     _P1_3,c
0144            989   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:237: OUT0=pwm_count>80?0:1;
0144 E5E0       990            mov     a,_pwm_count
0146 24AF       991            add     a,#0xff - 0x50
0148 9288       992            mov  _Timer2_ISR_sloc0_1_0,c
014A B3         993            cpl     c
014B 92A0       994            mov     _P2_0,c
014D D0D0       995            pop     psw
014F D003       996            pop     ar3
0151 D002       997            pop     ar2
0153 D0E0       998            pop     acc
0155 32         999            reti
0156           1000   ;        eliminated unneeded push/pop dpl
0156           1001   ;        eliminated unneeded push/pop dph
0156           1002   ;        eliminated unneeded push/pop b
0156           1003   ;------------------------------------------------------------
0156           1004   ;Allocation info for local variables in function 'InitADC'
0156           1005   ;------------------------------------------------------------
0156           1006   ;------------------------------------------------------------
0156           1007   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:267: void InitADC(void)
0156           1008   ;        -----------------------------------------
0156           1009   ;         function InitADC
0156           1010   ;        -----------------------------------------
0156           1011   _InitADC:
0156           1012   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:269: SFRPAGE = 0x00;
0156 75A700    1013            mov     _SFRPAGE,#0x00
0159           1014   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:270: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0159 75B280    1015            mov     _ADC0CN1,#0x80
015C           1016   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:271: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
015C 75BCF8    1017            mov     _ADC0CF0,#0xF8
015F           1018   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:272: ADC0CF1 = 0b_0_0_011110; // Same as default for now
015F 75B91E    1019            mov     _ADC0CF1,#0x1E
0162           1020   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:273: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0162 75E800    1021            mov     _ADC0CN0,#0x00
0165           1022   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:274: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
0165 75DF3F    1023            mov     _ADC0CF2,#0x3F
0168           1024   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:275: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0168 75B300    1025            mov     _ADC0CN2,#0x00
016B           1026   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:276: ADEN = 1; // Enable ADC
016B D2EF      1027            setb    _ADEN
016D 22        1028            ret
016E           1029   ;------------------------------------------------------------
016E           1030   ;Allocation info for local variables in function 'TIMER0_Init'
016E           1031   ;------------------------------------------------------------
016E           1032   ;------------------------------------------------------------
016E           1033   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:278: void TIMER0_Init(void)
016E           1034   ;        -----------------------------------------
016E           1035   ;         function TIMER0_Init
016E           1036   ;        -----------------------------------------
016E           1037   _TIMER0_Init:
016E           1038   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:280: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
016E 5389F0    1039            anl     _TMOD,#0xF0
0171           1040   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:281: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0171 438901    1041            orl     _TMOD,#0x01
0174           1042   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:282: TR0 = 0; // Stop Timer/Counter 0
0174 C28C      1043            clr     _TR0
0176 22        1044            ret
0177           1045   ;------------------------------------------------------------
0177           1046   ;Allocation info for local variables in function 'Volts_at_Pin'
0177           1047   ;------------------------------------------------------------
0177           1048   ;pin                       Allocated to registers r2 
0177           1049   ;------------------------------------------------------------
0177           1050   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:287: float Volts_at_Pin(unsigned char pin)
0177           1051   ;        -----------------------------------------
0177           1052   ;         function Volts_at_Pin
0177           1053   ;        -----------------------------------------
0177           1054   _Volts_at_Pin:
0177           1055   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:289: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
0177 120100    1056            lcall   _ADC_at_Pin
017A 120100    1057            lcall   ___uint2fs
017D AA82      1058            mov     r2,dpl
017F AB83      1059            mov     r3,dph
0181 ACF0      1060            mov     r4,b
0183 FD        1061            mov     r5,a
0184 C002      1062            push    ar2
0186 C003      1063            push    ar3
0188 C004      1064            push    ar4
018A C005      1065            push    ar5
018C 906C8B    1066            mov     dptr,#0x6C8B
018F 75F053    1067            mov     b,#0x53
0192 7440      1068            mov     a,#0x40
0194 120100    1069            lcall   ___fsmul
0197 AA82      1070            mov     r2,dpl
0199 AB83      1071            mov     r3,dph
019B ACF0      1072            mov     r4,b
019D FD        1073            mov     r5,a
019E E581      1074            mov     a,sp
01A0 24FC      1075            add     a,#0xfc
01A2 F581      1076            mov     sp,a
01A4 E4        1077            clr     a
01A5 C0E0      1078            push    acc
01A7 74FC      1079            mov     a,#0xFC
01A9 C0E0      1080            push    acc
01AB 747F      1081            mov     a,#0x7F
01AD C0E0      1082            push    acc
01AF 7446      1083            mov     a,#0x46
01B1 C0E0      1084            push    acc
01B3 8A82      1085            mov     dpl,r2
01B5 8B83      1086            mov     dph,r3
01B7 8CF0      1087            mov     b,r4
01B9 ED        1088            mov     a,r5
01BA 120100    1089            lcall   ___fsdiv
01BD AA82      1090            mov     r2,dpl
01BF AB83      1091            mov     r3,dph
01C1 ACF0      1092            mov     r4,b
01C3 FD        1093            mov     r5,a
01C4 E581      1094            mov     a,sp
01C6 24FC      1095            add     a,#0xfc
01C8 F581      1096            mov     sp,a
01CA 8A82      1097            mov     dpl,r2
01CC 8B83      1098            mov     dph,r3
01CE 8CF0      1099            mov     b,r4
01D0 ED        1100            mov     a,r5
01D1 22        1101            ret
01D2           1102   ;------------------------------------------------------------
01D2           1103   ;Allocation info for local variables in function 'InitPinADC'
01D2           1104   ;------------------------------------------------------------
01D2           1105   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01D2           1106   ;portno                    Allocated to registers r2 
01D2           1107   ;mask                      Allocated to registers r3 
01D2           1108   ;------------------------------------------------------------
01D2           1109   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:291: void InitPinADC(unsigned char portno, unsigned char pinno)
01D2           1110   ;        -----------------------------------------
01D2           1111   ;         function InitPinADC
01D2           1112   ;        -----------------------------------------
01D2           1113   _InitPinADC:
01D2 AA82      1114            mov     r2,dpl
01D4           1115   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:295: mask = 1 << pinno;
01D4 8558F0    1116            mov     b,_InitPinADC_PARM_2
01D7 05F0      1117            inc     b
01D9 7401      1118            mov     a,#0x01
01DB 8001      1119            sjmp    L010013?
01DD           1120   L010011?:
01DD 25E0      1121            add     a,acc
01DF           1122   L010013?:
01DF D5F0C8    1123            djnz    b,L010011?
01E2 FB        1124            mov     r3,a
01E3           1125   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:297: SFRPAGE = 0x20;
01E3 75A720    1126            mov     _SFRPAGE,#0x20
01E6           1127   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:298: switch (portno)
01E6 BA0008    1128            cjne    r2,#0x00,L010014?
01E9 8001      1129            sjmp    L010001?
01EB           1130   L010014?:
01EB BA0188    1131            cjne    r2,#0x01,L010015?
01EE 8001      1132            sjmp    L010002?
01F0           1133   L010015?:
01F0           1134   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:300: case 0:
01F0 BA0208    1135            cjne    r2,#0x02,L010005?
01F3 8001      1136            sjmp    L010003?
01F5           1137   L010001?:
01F5           1138   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:301: P0MDIN &= (~mask); // Set pin as analog input
01F5 EB        1139            mov     a,r3
01F6 F4        1140            cpl     a
01F7 FA        1141            mov     r2,a
01F8 52F1      1142            anl     _P0MDIN,a
01FA           1143   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:302: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01FA EB        1144            mov     a,r3
01FB 42D4      1145            orl     _P0SKIP,a
01FD           1146   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:303: break;
01FD           1147   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:304: case 1:
01FD 8001      1148            sjmp    L010005?
01FF           1149   L010002?:
01FF           1150   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:305: P1MDIN &= (~mask); // Set pin as analog input
01FF EB        1151            mov     a,r3
0200 F4        1152            cpl     a
0201 FA        1153            mov     r2,a
0202 52F2      1154            anl     _P1MDIN,a
0204           1155   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:306: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0204 EB        1156            mov     a,r3
0205 42D5      1157            orl     _P1SKIP,a
0207           1158   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:307: break;
0207           1159   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:308: case 2:
0207 8001      1160            sjmp    L010005?
0209           1161   L010003?:
0209           1162   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:309: P2MDIN &= (~mask); // Set pin as analog input
0209 EB        1163            mov     a,r3
020A F4        1164            cpl     a
020B FA        1165            mov     r2,a
020C 52F3      1166            anl     _P2MDIN,a
020E           1167   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:310: P2SKIP |= mask; // Skip Crossbar decoding for this pin
020E EB        1168            mov     a,r3
020F 42CC      1169            orl     _P2SKIP,a
0211           1170   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:314: }
0211           1171   L010005?:
0211           1172   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:315: SFRPAGE = 0x00;
0211 75A700    1173            mov     _SFRPAGE,#0x00
0214 22        1174            ret
0215           1175   ;------------------------------------------------------------
0215           1176   ;Allocation info for local variables in function 'PWMforward'
0215           1177   ;------------------------------------------------------------
0215           1178   ;------------------------------------------------------------
0215           1179   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:324: void PWMforward(void) {
0215           1180   ;        -----------------------------------------
0215           1181   ;         function PWMforward
0215           1182   ;        -----------------------------------------
0215           1183   _PWMforward:
0215           1184   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:325: pwmSig1 = 99;
0215 75E063    1185            mov     _pwmSig1,#0x63
0218 E4        1186            clr     a
0219 F5E1      1187            mov     (_pwmSig1 + 1),a
021B           1188   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:326: pwmSig2 = 0;
021B           1189   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:328: pwmSig3 = 0;
021B E4        1190            clr     a
021C F5A0      1191            mov     _pwmSig2,a
021E F5A1      1192            mov     (_pwmSig2 + 1),a
0220 F560      1193            mov     _pwmSig3,a
0222 F561      1194            mov     (_pwmSig3 + 1),a
0224           1195   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:329: pwmSig4 =99;
0224 752063    1196            mov     _pwmSig4,#0x63
0227 E4        1197            clr     a
0228 F521      1198            mov     (_pwmSig4 + 1),a
022A           1199   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:331: LEDRED = 1;
022A D287      1200            setb    _P0_7
022C           1201   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:332: LEDGREEN = 1;
022C D286      1202            setb    _P0_6
022E           1203   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:333: LEDWHITE = 1;
022E D290      1204            setb    _P1_0
0230           1205   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:334: SPEAKER = 0;
0230 C2A5      1206            clr     _P2_5
0232           1207   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:335: printf("Forward\n\r");
0232 7488      1208            mov     a,#__str_0
0234 C0E0      1209            push    acc
0236 74C7      1210            mov     a,#(__str_0 >> 8)
0238 C0E0      1211            push    acc
023A 7480      1212            mov     a,#0x80
023C C0E0      1213            push    acc
023E 120100    1214            lcall   _printf
0241 1581      1215            dec     sp
0243 1581      1216            dec     sp
0245 1581      1217            dec     sp
0247 22        1218            ret
0248           1219   ;------------------------------------------------------------
0248           1220   ;Allocation info for local variables in function 'PWMbackward'
0248           1221   ;------------------------------------------------------------
0248           1222   ;------------------------------------------------------------
0248           1223   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:338: void PWMbackward(void) {
0248           1224   ;        -----------------------------------------
0248           1225   ;         function PWMbackward
0248           1226   ;        -----------------------------------------
0248           1227   _PWMbackward:
0248           1228   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:339: pwmSig1 = 0;
0248 E4        1229            clr     a
0249 F5E0      1230            mov     _pwmSig1,a
024B F5E1      1231            mov     (_pwmSig1 + 1),a
024D           1232   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:340: pwmSig2 = 99;
024D 75A063    1233            mov     _pwmSig2,#0x63
0250 E4        1234            clr     a
0251 F5A1      1235            mov     (_pwmSig2 + 1),a
0253           1236   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:342: pwmSig3 = 99;
0253 756063    1237            mov     _pwmSig3,#0x63
0256 E4        1238            clr     a
0257 F561      1239            mov     (_pwmSig3 + 1),a
0259           1240   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:343: pwmSig4 = 0;
0259 E4        1241            clr     a
025A F520      1242            mov     _pwmSig4,a
025C F521      1243            mov     (_pwmSig4 + 1),a
025E           1244   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:345: LEDRED = 1;
025E D287      1245            setb    _P0_7
0260           1246   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:346: LEDGREEN = 1;
0260 D286      1247            setb    _P0_6
0262           1248   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:347: LEDWHITE = 0;
0262 C290      1249            clr     _P1_0
0264           1250   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:348: SPEAKER = 1;
0264 D2A5      1251            setb    _P2_5
0266           1252   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:349: printf("Backward\n\r");
0266 7408      1253            mov     a,#__str_1
0268 C0E0      1254            push    acc
026A 74C8      1255            mov     a,#(__str_1 >> 8)
026C C0E0      1256            push    acc
026E 7480      1257            mov     a,#0x80
0270 C0E0      1258            push    acc
0272 120100    1259            lcall   _printf
0275 1581      1260            dec     sp
0277 1581      1261            dec     sp
0279 1581      1262            dec     sp
027B 22        1263            ret
027C           1264   ;------------------------------------------------------------
027C           1265   ;Allocation info for local variables in function 'PWMLeft'
027C           1266   ;------------------------------------------------------------
027C           1267   ;------------------------------------------------------------
027C           1268   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:352: void PWMLeft(void) {
027C           1269   ;        -----------------------------------------
027C           1270   ;         function PWMLeft
027C           1271   ;        -----------------------------------------
027C           1272   _PWMLeft:
027C           1273   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:353: pwmSig1 = 0;
027C E4        1274            clr     a
027D F5E0      1275            mov     _pwmSig1,a
027F F5E1      1276            mov     (_pwmSig1 + 1),a
0281           1277   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:354: pwmSig2 = 99;
0281 75A063    1278            mov     _pwmSig2,#0x63
0284 E4        1279            clr     a
0285 F5A1      1280            mov     (_pwmSig2 + 1),a
0287           1281   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:356: pwmSig3 = 0;
0287 E4        1282            clr     a
0288 F560      1283            mov     _pwmSig3,a
028A F561      1284            mov     (_pwmSig3 + 1),a
028C           1285   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:357: pwmSig4 = 99;
028C 752063    1286            mov     _pwmSig4,#0x63
028F E4        1287            clr     a
0290 F521      1288            mov     (_pwmSig4 + 1),a
0292           1289   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:359: LEDRED = 1;
0292 D287      1290            setb    _P0_7
0294           1291   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:360: LEDGREEN = 0;
0294 C286      1292            clr     _P0_6
0296           1293   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:361: LEDWHITE = 1;
0296 D290      1294            setb    _P1_0
0298           1295   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:362: SPEAKER = 0;
0298 C2A5      1296            clr     _P2_5
029A           1297   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:364: printf("Left\n\r");
029A 7448      1298            mov     a,#__str_2
029C C0E0      1299            push    acc
029E 74C8      1300            mov     a,#(__str_2 >> 8)
02A0 C0E0      1301            push    acc
02A2 7480      1302            mov     a,#0x80
02A4 C0E0      1303            push    acc
02A6 120100    1304            lcall   _printf
02A9 1581      1305            dec     sp
02AB 1581      1306            dec     sp
02AD 1581      1307            dec     sp
02AF 22        1308            ret
02B0           1309   ;------------------------------------------------------------
02B0           1310   ;Allocation info for local variables in function 'PWMRight'
02B0           1311   ;------------------------------------------------------------
02B0           1312   ;------------------------------------------------------------
02B0           1313   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:367: void PWMRight(void) {
02B0           1314   ;        -----------------------------------------
02B0           1315   ;         function PWMRight
02B0           1316   ;        -----------------------------------------
02B0           1317   _PWMRight:
02B0           1318   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:368: pwmSig1 = 99;
02B0 75E063    1319            mov     _pwmSig1,#0x63
02B3 E4        1320            clr     a
02B4 F5E1      1321            mov     (_pwmSig1 + 1),a
02B6           1322   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:369: pwmSig2 = 0;
02B6 E4        1323            clr     a
02B7 F5A0      1324            mov     _pwmSig2,a
02B9 F5A1      1325            mov     (_pwmSig2 + 1),a
02BB           1326   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:371: pwmSig3 = 99;
02BB 756063    1327            mov     _pwmSig3,#0x63
02BE E4        1328            clr     a
02BF F561      1329            mov     (_pwmSig3 + 1),a
02C1           1330   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:372: pwmSig4 = 0;
02C1 E4        1331            clr     a
02C2 F520      1332            mov     _pwmSig4,a
02C4 F521      1333            mov     (_pwmSig4 + 1),a
02C6           1334   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:374: LEDRED = 1;
02C6 D287      1335            setb    _P0_7
02C8           1336   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:375: LEDGREEN = 0;
02C8 C286      1337            clr     _P0_6
02CA           1338   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:376: LEDWHITE = 1;
02CA D290      1339            setb    _P1_0
02CC           1340   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:377: SPEAKER = 0;   
02CC C2A5      1341            clr     _P2_5
02CE           1342   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:379: printf("Right\n\r");
02CE 7488      1343            mov     a,#__str_3
02D0 C0E0      1344            push    acc
02D2 74C8      1345            mov     a,#(__str_3 >> 8)
02D4 C0E0      1346            push    acc
02D6 7480      1347            mov     a,#0x80
02D8 C0E0      1348            push    acc
02DA 120100    1349            lcall   _printf
02DD 1581      1350            dec     sp
02DF 1581      1351            dec     sp
02E1 1581      1352            dec     sp
02E3 22        1353            ret
02E4           1354   ;------------------------------------------------------------
02E4           1355   ;Allocation info for local variables in function 'PWMStop'
02E4           1356   ;------------------------------------------------------------
02E4           1357   ;------------------------------------------------------------
02E4           1358   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:382: void PWMStop(void) {
02E4           1359   ;        -----------------------------------------
02E4           1360   ;         function PWMStop
02E4           1361   ;        -----------------------------------------
02E4           1362   _PWMStop:
02E4           1363   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:383: pwmSig1 = 0;
02E4           1364   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:384: pwmSig2 = 0;
02E4           1365   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:386: pwmSig3 = 0;
02E4           1366   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:387: pwmSig4 = 0;
02E4 E4        1367            clr     a
02E5 F5E0      1368            mov     _pwmSig1,a
02E7 F5E1      1369            mov     (_pwmSig1 + 1),a
02E9 F5A0      1370            mov     _pwmSig2,a
02EB F5A1      1371            mov     (_pwmSig2 + 1),a
02ED F560      1372            mov     _pwmSig3,a
02EF F561      1373            mov     (_pwmSig3 + 1),a
02F1 F520      1374            mov     _pwmSig4,a
02F3 F521      1375            mov     (_pwmSig4 + 1),a
02F5           1376   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:389: LEDRED = 0;
02F5 C287      1377            clr     _P0_7
02F7           1378   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:390: LEDGREEN = 1;
02F7 D286      1379            setb    _P0_6
02F9           1380   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:391: LEDWHITE = 1;
02F9 D290      1381            setb    _P1_0
02FB           1382   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:392: SPEAKER = 0;
02FB C2A5      1383            clr     _P2_5
02FD           1384   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:394: printf("Stop\n\r");
02FD 74C8      1385            mov     a,#__str_4
02FF C0E0      1386            push    acc
0301 74C8      1387            mov     a,#(__str_4 >> 8)
0303 C0E0      1388            push    acc
0305 7480      1389            mov     a,#0x80
0307 C0E0      1390            push    acc
0309 120100    1391            lcall   _printf
030C 1581      1392            dec     sp
030E 1581      1393            dec     sp
0310 1581      1394            dec     sp
0312 22        1395            ret
0313           1396   ;------------------------------------------------------------
0313           1397   ;Allocation info for local variables in function 'periodcalc'
0313           1398   ;------------------------------------------------------------
0313           1399   ;period1                   Allocated to registers r2 r3 r4 r5 
0313           1400   ;overflow_count            Allocated to registers r2 r3 
0313           1401   ;------------------------------------------------------------
0313           1402   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:397: float periodcalc(void) {
0313           1403   ;        -----------------------------------------
0313           1404   ;         function periodcalc
0313           1405   ;        -----------------------------------------
0313           1406   _periodcalc:
0313           1407   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:401: TL0=0; 
0313 758A00    1408            mov     _TL0,#0x00
0316           1409   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:402: TH0=0;
0316 758C00    1410            mov     _TH0,#0x00
0319           1411   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:403: TF0=0;
0319 C28D      1412            clr     _TF0
031B           1413   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:405: TR0=0;
031B C28C      1414            clr     _TR0
031D           1415   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:407: while(P1_6!=0); // Wait for the signal to be zero
031D           1416   L016001?:
031D 209608    1417            jb      _P1_6,L016001?
0320           1418   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:408: while(P1_6!=1); // Wait for the signal to be one
0320           1419   L016004?:
0320 309648    1420            jnb     _P1_6,L016004?
0323           1421   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:409: TR0=1; // Start the timer
0323 D28C      1422            setb    _TR0
0325           1423   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:410: while(P1_6!=0) // Wait for the signal to be zero
0325 7A00      1424            mov     r2,#0x00
0327 7B00      1425            mov     r3,#0x00
0329           1426   L016009?:
0329 3096C8    1427            jnb     _P1_6,L016026?
032C           1428   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:412: if(TF0==1) // Did the 16-bit timer overflow?
032C           1429   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:414: TF0=0;
032C 108D08    1430            jbc     _TF0,L016033?
032F 8001      1431            sjmp    L016009?
0331           1432   L016033?:
0331           1433   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:415: overflow_count++;
0331 0A        1434            inc     r2
0332 BA0088    1435            cjne    r2,#0x00,L016009?
0335 0B        1436            inc     r3
0336           1437   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:419: while(P1_6!=1) // Wait for the signal to be zero
0336 8001      1438            sjmp    L016009?
0338           1439   L016026?:
0338           1440   L016014?:
0338 209688    1441            jb      _P1_6,L016016?
033B           1442   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:421: if(TF0==1) // Did the 16-bit timer overflow?
033B           1443   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:423: TF0=0;
033B 108DC8    1444            jbc     _TF0,L016035?
033E 8001      1445            sjmp    L016014?
0340           1446   L016035?:
0340           1447   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:424: overflow_count++;
0340 0A        1448            inc     r2
0341 BA0048    1449            cjne    r2,#0x00,L016014?
0344 0B        1450            inc     r3
0345 8001      1451            sjmp    L016014?
0347           1452   L016016?:
0347           1453   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:429: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0347 C28C      1454            clr     _TR0
0349           1455   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:430: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0349 8A82      1456            mov     dpl,r2
034B 8B83      1457            mov     dph,r3
034D 120100    1458            lcall   ___sint2fs
0350 AA82      1459            mov     r2,dpl
0352 AB83      1460            mov     r3,dph
0354 ACF0      1461            mov     r4,b
0356 FD        1462            mov     r5,a
0357 C002      1463            push    ar2
0359 C003      1464            push    ar3
035B C004      1465            push    ar4
035D C005      1466            push    ar5
035F 900000    1467            mov     dptr,#0x0000
0362 75F080    1468            mov     b,#0x80
0365 7447      1469            mov     a,#0x47
0367 120100    1470            lcall   ___fsmul
036A AA82      1471            mov     r2,dpl
036C AB83      1472            mov     r3,dph
036E ACF0      1473            mov     r4,b
0370 FD        1474            mov     r5,a
0371 E581      1475            mov     a,sp
0373 24FC      1476            add     a,#0xfc
0375 F581      1477            mov     sp,a
0377 858C82    1478            mov     dpl,_TH0
037A C002      1479            push    ar2
037C C003      1480            push    ar3
037E C004      1481            push    ar4
0380 C005      1482            push    ar5
0382 120100    1483            lcall   ___uchar2fs
0385 AE82      1484            mov     r6,dpl
0387 AF83      1485            mov     r7,dph
0389 A8F0      1486            mov     r0,b
038B F9        1487            mov     r1,a
038C C006      1488            push    ar6
038E C007      1489            push    ar7
0390 C000      1490            push    ar0
0392 C001      1491            push    ar1
0394 900000    1492            mov     dptr,#0x0000
0397 75F080    1493            mov     b,#0x80
039A 7443      1494            mov     a,#0x43
039C 120100    1495            lcall   ___fsmul
039F AE82      1496            mov     r6,dpl
03A1 AF83      1497            mov     r7,dph
03A3 A8F0      1498            mov     r0,b
03A5 F9        1499            mov     r1,a
03A6 E581      1500            mov     a,sp
03A8 24FC      1501            add     a,#0xfc
03AA F581      1502            mov     sp,a
03AC D005      1503            pop     ar5
03AE D004      1504            pop     ar4
03B0 D003      1505            pop     ar3
03B2 D002      1506            pop     ar2
03B4 C006      1507            push    ar6
03B6 C007      1508            push    ar7
03B8 C000      1509            push    ar0
03BA C001      1510            push    ar1
03BC 8A82      1511            mov     dpl,r2
03BE 8B83      1512            mov     dph,r3
03C0 8CF0      1513            mov     b,r4
03C2 ED        1514            mov     a,r5
03C3 120100    1515            lcall   ___fsadd
03C6 AA82      1516            mov     r2,dpl
03C8 AB83      1517            mov     r3,dph
03CA ACF0      1518            mov     r4,b
03CC FD        1519            mov     r5,a
03CD E581      1520            mov     a,sp
03CF 24FC      1521            add     a,#0xfc
03D1 F581      1522            mov     sp,a
03D3 AE8A      1523            mov     r6,_TL0
03D5 7F00      1524            mov     r7,#0x00
03D7 8E82      1525            mov     dpl,r6
03D9 8F83      1526            mov     dph,r7
03DB C002      1527            push    ar2
03DD C003      1528            push    ar3
03DF C004      1529            push    ar4
03E1 C005      1530            push    ar5
03E3 120100    1531            lcall   ___sint2fs
03E6 AE82      1532            mov     r6,dpl
03E8 AF83      1533            mov     r7,dph
03EA A8F0      1534            mov     r0,b
03EC F9        1535            mov     r1,a
03ED D005      1536            pop     ar5
03EF D004      1537            pop     ar4
03F1 D003      1538            pop     ar3
03F3 D002      1539            pop     ar2
03F5 C006      1540            push    ar6
03F7 C007      1541            push    ar7
03F9 C000      1542            push    ar0
03FB C001      1543            push    ar1
03FD 8A82      1544            mov     dpl,r2
03FF 8B83      1545            mov     dph,r3
0401 8CF0      1546            mov     b,r4
0403 ED        1547            mov     a,r5
0404 120100    1548            lcall   ___fsadd
0407 AA82      1549            mov     r2,dpl
0409 AB83      1550            mov     r3,dph
040B ACF0      1551            mov     r4,b
040D FD        1552            mov     r5,a
040E E581      1553            mov     a,sp
0410 24FC      1554            add     a,#0xfc
0412 F581      1555            mov     sp,a
0414 C002      1556            push    ar2
0416 C003      1557            push    ar3
0418 C004      1558            push    ar4
041A C005      1559            push    ar5
041C 90F4FC    1560            mov     dptr,#0xF4FC
041F 75F032    1561            mov     b,#0x32
0422 7434      1562            mov     a,#0x34
0424 120100    1563            lcall   ___fsmul
0427 AA82      1564            mov     r2,dpl
0429 AB83      1565            mov     r3,dph
042B ACF0      1566            mov     r4,b
042D FD        1567            mov     r5,a
042E E581      1568            mov     a,sp
0430 24FC      1569            add     a,#0xfc
0432 F581      1570            mov     sp,a
0434           1571   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:431: printf("%f\n\r", period1);
0434 C002      1572            push    ar2
0436 C003      1573            push    ar3
0438 C004      1574            push    ar4
043A C005      1575            push    ar5
043C C002      1576            push    ar2
043E C003      1577            push    ar3
0440 C004      1578            push    ar4
0442 C005      1579            push    ar5
0444 74C8      1580            mov     a,#__str_5
0446 C0E0      1581            push    acc
0448 74CB      1582            mov     a,#(__str_5 >> 8)
044A C0E0      1583            push    acc
044C 7480      1584            mov     a,#0x80
044E C0E0      1585            push    acc
0450 120100    1586            lcall   _printf
0453 E581      1587            mov     a,sp
0455 24F9      1588            add     a,#0xf9
0457 F581      1589            mov     sp,a
0459           1590   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:432: return period1*1000; //return period of high pulse in seconds
0459 900000    1591            mov     dptr,#0x0000
045C 75F07A    1592            mov     b,#0x7A
045F 7444      1593            mov     a,#0x44
0461 120100    1594            lcall   ___fsmul
0464 AA82      1595            mov     r2,dpl
0466 AB83      1596            mov     r3,dph
0468 ACF0      1597            mov     r4,b
046A FD        1598            mov     r5,a
046B E581      1599            mov     a,sp
046D 24FC      1600            add     a,#0xfc
046F F581      1601            mov     sp,a
0471 8A82      1602            mov     dpl,r2
0473 8B83      1603            mov     dph,r3
0475 8CF0      1604            mov     b,r4
0477 ED        1605            mov     a,r5
0478 22        1606            ret
0479           1607   ;------------------------------------------------------------
0479           1608   ;Allocation info for local variables in function 'arrayEqual'
0479           1609   ;------------------------------------------------------------
0479           1610   ;size                      Allocated with name '_arrayEqual_PARM_2'
0479           1611   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
0479           1612   ;arr1                      Allocated with name '_arrayEqual_arr1_1_78'
0479           1613   ;i                         Allocated to registers r5 r6 
0479           1614   ;------------------------------------------------------------
0479           1615   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:437: int arrayEqual (int arr1[], int size, int arr2[]){
0479           1616   ;        -----------------------------------------
0479           1617   ;         function arrayEqual
0479           1618   ;        -----------------------------------------
0479           1619   _arrayEqual:
0479 858238    1620            mov     _arrayEqual_arr1_1_78,dpl
047C 858339    1621            mov     (_arrayEqual_arr1_1_78 + 1),dph
047F 85F03A    1622            mov     (_arrayEqual_arr1_1_78 + 2),b
0482           1623   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:439: for(i=0; i<size; i++){
0482 7D00      1624            mov     r5,#0x00
0484 7E00      1625            mov     r6,#0x00
0486           1626   L017003?:
0486 C3        1627            clr     c
0487 ED        1628            mov     a,r5
0488 9508      1629            subb    a,_arrayEqual_PARM_2
048A EE        1630            mov     a,r6
048B 6480      1631            xrl     a,#0x80
048D 8509F0    1632            mov     b,(_arrayEqual_PARM_2 + 1)
0490 63F080    1633            xrl     b,#0x80
0493 95F0      1634            subb    a,b
0495 5001      1635            jnc     L017006?
0497           1636   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:440: if(arr1[i]!=arr2[i])
0497 8D07      1637            mov     ar7,r5
0499 EE        1638            mov     a,r6
049A CF        1639            xch     a,r7
049B 25E0      1640            add     a,acc
049D CF        1641            xch     a,r7
049E 33        1642            rlc     a
049F F8        1643            mov     r0,a
04A0 EF        1644            mov     a,r7
04A1 2538      1645            add     a,_arrayEqual_arr1_1_78
04A3 F9        1646            mov     r1,a
04A4 E8        1647            mov     a,r0
04A5 3539      1648            addc    a,(_arrayEqual_arr1_1_78 + 1)
04A7 FA        1649            mov     r2,a
04A8 AB3A      1650            mov     r3,(_arrayEqual_arr1_1_78 + 2)
04AA 8982      1651            mov     dpl,r1
04AC 8A83      1652            mov     dph,r2
04AE 8BF0      1653            mov     b,r3
04B0 120100    1654            lcall   __gptrget
04B3 F9        1655            mov     r1,a
04B4 A3        1656            inc     dptr
04B5 120100    1657            lcall   __gptrget
04B8 FA        1658            mov     r2,a
04B9 EF        1659            mov     a,r7
04BA 25B8      1660            add     a,_arrayEqual_PARM_3
04BC FF        1661            mov     r7,a
04BD E8        1662            mov     a,r0
04BE 35B9      1663            addc    a,(_arrayEqual_PARM_3 + 1)
04C0 F8        1664            mov     r0,a
04C1 ABBA      1665            mov     r3,(_arrayEqual_PARM_3 + 2)
04C3 8F82      1666            mov     dpl,r7
04C5 8883      1667            mov     dph,r0
04C7 8BF0      1668            mov     b,r3
04C9 120100    1669            lcall   __gptrget
04CC FF        1670            mov     r7,a
04CD A3        1671            inc     dptr
04CE 120100    1672            lcall   __gptrget
04D1 F8        1673            mov     r0,a
04D2 E9        1674            mov     a,r1
04D3 B507C8    1675            cjne    a,ar7,L017013?
04D6 EA        1676            mov     a,r2
04D7 B500C8    1677            cjne    a,ar0,L017013?
04DA 8001      1678            sjmp    L017005?
04DC           1679   L017013?:
04DC           1680   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:441: return 0; 
04DC 900000    1681            mov     dptr,#0x0000
04DF 22        1682            ret
04E0           1683   L017005?:
04E0           1684   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:439: for(i=0; i<size; i++){
04E0 0D        1685            inc     r5
04E1 BD0008    1686            cjne    r5,#0x00,L017003?
04E4 0E        1687            inc     r6
04E5 8001      1688            sjmp    L017003?
04E7           1689   L017006?:
04E7           1690   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:443: return 1; 
04E7 900001    1691            mov     dptr,#0x0001
04EA 22        1692            ret
04EB           1693   ;------------------------------------------------------------
04EB           1694   ;Allocation info for local variables in function 'checkCommands'
04EB           1695   ;------------------------------------------------------------
04EB           1696   ;------------------------------------------------------------
04EB           1697   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:449: void checkCommands (void){
04EB           1698   ;        -----------------------------------------
04EB           1699   ;         function checkCommands
04EB           1700   ;        -----------------------------------------
04EB           1701   _checkCommands:
04EB           1702   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:450: if(arrayEqual(command, 4, stop)) PWMStop();
04EB 75B888    1703            mov     _arrayEqual_PARM_3,#_stop
04EE 75B900    1704            mov     (_arrayEqual_PARM_3 + 1),#0x00
04F1 75BA40    1705            mov     (_arrayEqual_PARM_3 + 2),#0x40
04F4 750804    1706            mov     _arrayEqual_PARM_2,#0x04
04F7 E4        1707            clr     a
04F8 F509      1708            mov     (_arrayEqual_PARM_2 + 1),a
04FA 901948    1709            mov     dptr,#_command
04FD 75F040    1710            mov     b,#0x40
0500 120100    1711            lcall   _arrayEqual
0503 E582      1712            mov     a,dpl
0505 8583F0    1713            mov     b,dph
0508 45F0      1714            orl     a,b
050A 6001      1715            jz      L018014?
050C 120100    1716            lcall   _PWMStop
050F 020100    1717            ljmp    L018015?
0512           1718   L018014?:
0512           1719   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:451: else if (arrayEqual(command,4,forward)) PWMforward(); 
0512 75B848    1720            mov     _arrayEqual_PARM_3,#_forward
0515 75B900    1721            mov     (_arrayEqual_PARM_3 + 1),#0x00
0518 75BA40    1722            mov     (_arrayEqual_PARM_3 + 2),#0x40
051B 750804    1723            mov     _arrayEqual_PARM_2,#0x04
051E E4        1724            clr     a
051F F509      1725            mov     (_arrayEqual_PARM_2 + 1),a
0521 901948    1726            mov     dptr,#_command
0524 75F040    1727            mov     b,#0x40
0527 120100    1728            lcall   _arrayEqual
052A E582      1729            mov     a,dpl
052C 8583F0    1730            mov     b,dph
052F 45F0      1731            orl     a,b
0531 6001      1732            jz      L018011?
0533 120100    1733            lcall   _PWMforward
0536 020100    1734            ljmp    L018015?
0539           1735   L018011?:
0539           1736   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:452: else if (arrayEqual(command,4,backward)) PWMbackward(); 
0539 75B808    1737            mov     _arrayEqual_PARM_3,#_backward
053C 75B900    1738            mov     (_arrayEqual_PARM_3 + 1),#0x00
053F 75BA40    1739            mov     (_arrayEqual_PARM_3 + 2),#0x40
0542 750804    1740            mov     _arrayEqual_PARM_2,#0x04
0545 E4        1741            clr     a
0546 F509      1742            mov     (_arrayEqual_PARM_2 + 1),a
0548 901948    1743            mov     dptr,#_command
054B 75F040    1744            mov     b,#0x40
054E 120100    1745            lcall   _arrayEqual
0551 E582      1746            mov     a,dpl
0553 8583F0    1747            mov     b,dph
0556 45F0      1748            orl     a,b
0558 6001      1749            jz      L018008?
055A 120100    1750            lcall   _PWMbackward
055D 8001      1751            sjmp    L018015?
055F           1752   L018008?:
055F           1753   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:453: else if (arrayEqual(command,4, left)) PWMLeft(); 
055F 75B8C8    1754            mov     _arrayEqual_PARM_3,#_left
0562 75B900    1755            mov     (_arrayEqual_PARM_3 + 1),#0x00
0565 75BA40    1756            mov     (_arrayEqual_PARM_3 + 2),#0x40
0568 750804    1757            mov     _arrayEqual_PARM_2,#0x04
056B E4        1758            clr     a
056C F509      1759            mov     (_arrayEqual_PARM_2 + 1),a
056E 901948    1760            mov     dptr,#_command
0571 75F040    1761            mov     b,#0x40
0574 120100    1762            lcall   _arrayEqual
0577 E582      1763            mov     a,dpl
0579 8583F0    1764            mov     b,dph
057C 45F0      1765            orl     a,b
057E 6001      1766            jz      L018005?
0580 120100    1767            lcall   _PWMLeft
0583 8001      1768            sjmp    L018015?
0585           1769   L018005?:
0585           1770   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:454: else if (arrayEqual(command,4, right)) PWMRight(); 
0585 75B888    1771            mov     _arrayEqual_PARM_3,#_right
0588 75B900    1772            mov     (_arrayEqual_PARM_3 + 1),#0x00
058B 75BA40    1773            mov     (_arrayEqual_PARM_3 + 2),#0x40
058E 750804    1774            mov     _arrayEqual_PARM_2,#0x04
0591 E4        1775            clr     a
0592 F509      1776            mov     (_arrayEqual_PARM_2 + 1),a
0594 901948    1777            mov     dptr,#_command
0597 75F040    1778            mov     b,#0x40
059A 120100    1779            lcall   _arrayEqual
059D E582      1780            mov     a,dpl
059F 8583F0    1781            mov     b,dph
05A2 45F0      1782            orl     a,b
05A4 6001      1783            jz      L018002?
05A6 120100    1784            lcall   _PWMRight
05A9 8001      1785            sjmp    L018015?
05AB           1786   L018002?:
05AB           1787   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:455: else PWMStop(); //defaults to a halt (redundant)
05AB 120100    1788            lcall   _PWMStop
05AE           1789   L018015?:
05AE           1790   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:456: waitms(358);
05AE 900166    1791            mov     dptr,#0x0166
05B1 020100    1792            ljmp    _waitms
05B4           1793   ;------------------------------------------------------------
05B4           1794   ;Allocation info for local variables in function 'voltsAtPeak'
05B4           1795   ;------------------------------------------------------------
05B4           1796   ;------------------------------------------------------------
05B4           1797   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:463: float voltsAtPeak(void) {
05B4           1798   ;        -----------------------------------------
05B4           1799   ;         function voltsAtPeak
05B4           1800   ;        -----------------------------------------
05B4           1801   _voltsAtPeak:
05B4           1802   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:465: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
05B4           1803   L019001?:
05B4 75820C    1804            mov     dpl,#0x0C
05B7 120100    1805            lcall   _ADC_at_Pin
05BA E582      1806            mov     a,dpl
05BC 8583F0    1807            mov     b,dph
05BF 45F0      1808            orl     a,b
05C1 6001      1809            jz      L019001?
05C3           1810   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:466: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
05C3 900000    1811            mov     dptr,#0x0000
05C6 120100    1812            lcall   _Timer3us
05C9           1813   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:467: return(Volts_at_Pin(QFP32_MUX_P1_6));
05C9 75820C    1814            mov     dpl,#0x0C
05CC 020100    1815            ljmp    _Volts_at_Pin
05CF           1816   ;------------------------------------------------------------
05CF           1817   ;Allocation info for local variables in function 'getDigitalSignal'
05CF           1818   ;------------------------------------------------------------
05CF           1819   ;------------------------------------------------------------
05CF           1820   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:480: int getDigitalSignal (void){
05CF           1821   ;        -----------------------------------------
05CF           1822   ;         function getDigitalSignal
05CF           1823   ;        -----------------------------------------
05CF           1824   _getDigitalSignal:
05CF           1825   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:482: if (Volts_at_Pin(QFP32_MUX_P2_3)>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
05CF 758210    1826            mov     dpl,#0x10
05D2 120100    1827            lcall   _Volts_at_Pin
05D5 AA82      1828            mov     r2,dpl
05D7 AB83      1829            mov     r3,dph
05D9 ACF0      1830            mov     r4,b
05DB FD        1831            mov     r5,a
05DC E4        1832            clr     a
05DD C0E0      1833            push    acc
05DF C0E0      1834            push    acc
05E1 C0E0      1835            push    acc
05E3 743F      1836            mov     a,#0x3F
05E5 C0E0      1837            push    acc
05E7 8A82      1838            mov     dpl,r2
05E9 8B83      1839            mov     dph,r3
05EB 8CF0      1840            mov     b,r4
05ED ED        1841            mov     a,r5
05EE 120100    1842            lcall   ___fslt
05F1 AA82      1843            mov     r2,dpl
05F3 E581      1844            mov     a,sp
05F5 24FC      1845            add     a,#0xfc
05F7 F581      1846            mov     sp,a
05F9 EA        1847            mov     a,r2
05FA 7001      1848            jnz     L020002?
05FC           1849   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:484: printf("\nread 1:  at pin 2.3: %f\r", Volts_at_Pin(QFP32_MUX_P2_3));
05FC 758210    1850            mov     dpl,#0x10
05FF 120100    1851            lcall   _Volts_at_Pin
0602 AA82      1852            mov     r2,dpl
0604 AB83      1853            mov     r3,dph
0606 ACF0      1854            mov     r4,b
0608 FD        1855            mov     r5,a
0609 C002      1856            push    ar2
060B C003      1857            push    ar3
060D C004      1858            push    ar4
060F C005      1859            push    ar5
0611 7488      1860            mov     a,#__str_6
0613 C0E0      1861            push    acc
0615 74CF      1862            mov     a,#(__str_6 >> 8)
0617 C0E0      1863            push    acc
0619 7480      1864            mov     a,#0x80
061B C0E0      1865            push    acc
061D 120100    1866            lcall   _printf
0620 E581      1867            mov     a,sp
0622 24F9      1868            add     a,#0xf9
0624 F581      1869            mov     sp,a
0626           1870   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:485: return 1;
0626 900001    1871            mov     dptr,#0x0001
0629           1872   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:489: return 0; 
0629 22        1873            ret
062A           1874   L020002?:
062A 900000    1875            mov     dptr,#0x0000
062D 22        1876            ret
062E           1877   ;------------------------------------------------------------
062E           1878   ;Allocation info for local variables in function 'waitquarterperiod'
062E           1879   ;------------------------------------------------------------
062E           1880   ;------------------------------------------------------------
062E           1881   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:496: void waitquarterperiod(void){
062E           1882   ;        -----------------------------------------
062E           1883   ;         function waitquarterperiod
062E           1884   ;        -----------------------------------------
062E           1885   _waitquarterperiod:
062E           1886   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:497: waitms(constant_delay_time);
062E 900014    1887            mov     dptr,#0x0014
0631 020100    1888            ljmp    _waitms
0634           1889   ;------------------------------------------------------------
0634           1890   ;Allocation info for local variables in function 'recieveData'
0634           1891   ;------------------------------------------------------------
0634           1892   ;checkcomm                 Allocated to registers 
0634           1893   ;i                         Allocated to registers r2 r3 
0634           1894   ;------------------------------------------------------------
0634           1895   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:503: void recieveData (){
0634           1896   ;        -----------------------------------------
0634           1897   ;         function recieveData
0634           1898   ;        -----------------------------------------
0634           1899   _recieveData:
0634           1900   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:507: while(getDigitalSignal()==0);          //wait for the signal to be 1 
0634           1901   L022001?:
0634 120100    1902            lcall   _getDigitalSignal
0637 E582      1903            mov     a,dpl
0639 8583F0    1904            mov     b,dph
063C 45F0      1905            orl     a,b
063E 6001      1906            jz      L022001?
0640           1907   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:511: waitms(175);   //wait 
0640 9000AF    1908            mov     dptr,#0x00AF
0643 120100    1909            lcall   _waitms
0646           1910   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:512: command[0] = 1;
0646 754801    1911            mov     _command,#0x01
0649 754900    1912            mov     (_command + 1),#0x00
064C           1913   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:514: for( i=1; i<4; i++){
064C 7A01      1914            mov     r2,#0x01
064E 7B00      1915            mov     r3,#0x00
0650           1916   L022004?:
0650 C3        1917            clr     c
0651 EA        1918            mov     a,r2
0652 9404      1919            subb    a,#0x04
0654 EB        1920            mov     a,r3
0655 6480      1921            xrl     a,#0x80
0657 9480      1922            subb    a,#0x80
0659 5001      1923            jnc     L022007?
065B           1924   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:515: waitms(358); //wait for a period
065B 900166    1925            mov     dptr,#0x0166
065E C002      1926            push    ar2
0660 C003      1927            push    ar3
0662 120100    1928            lcall   _waitms
0665 D003      1929            pop     ar3
0667 D002      1930            pop     ar2
0669           1931   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:516: command[i]=getDigitalSignal();         
0669 8A04      1932            mov     ar4,r2
066B EB        1933            mov     a,r3
066C CC        1934            xch     a,r4
066D 25E0      1935            add     a,acc
066F CC        1936            xch     a,r4
0670 33        1937            rlc     a
0671 EC        1938            mov     a,r4
0672 2448      1939            add     a,#_command
0674 F8        1940            mov     r0,a
0675 C002      1941            push    ar2
0677 C003      1942            push    ar3
0679 C000      1943            push    ar0
067B 120100    1944            lcall   _getDigitalSignal
067E E582      1945            mov     a,dpl
0680 8583F0    1946            mov     b,dph
0683 D000      1947            pop     ar0
0685 D003      1948            pop     ar3
0687 D002      1949            pop     ar2
0689 F6        1950            mov     @r0,a
068A 08        1951            inc     r0
068B A6F0      1952            mov     @r0,b
068D 18        1953            dec     r0
068E           1954   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:514: for( i=1; i<4; i++){
068E 0A        1955            inc     r2
068F BA0008    1956            cjne    r2,#0x00,L022004?
0692 0B        1957            inc     r3
0693 8001      1958            sjmp    L022004?
0695           1959   L022007?:
0695           1960   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:519: checkCommands();
0695 020100    1961            ljmp    _checkCommands
0698           1962   ;------------------------------------------------------------
0698           1963   ;Allocation info for local variables in function 'checkMode'
0698           1964   ;------------------------------------------------------------
0698           1965   ;------------------------------------------------------------
0698           1966   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:529: int checkMode(){
0698           1967   ;        -----------------------------------------
0698           1968   ;         function checkMode
0698           1969   ;        -----------------------------------------
0698           1970   _checkMode:
0698           1971   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:530: if(!BUTTON1 || x == 0){
0698 30B188    1972            jnb     _P3_1,L023001?
069B E508      1973            mov     a,_x
069D 4509      1974            orl     a,(_x + 1)
069F 7001      1975            jnz     L023019?
06A1           1976   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:531: while(!BUTTON1);
06A1           1977   L023001?:
06A1 30B188    1978            jnb     _P3_1,L023001?
06A4           1979   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:532: x= 0;
06A4           1980   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:533: return 0;
06A4 E4        1981            clr     a
06A5 F508      1982            mov     _x,a
06A7 F509      1983            mov     (_x + 1),a
06A9 F582      1984            mov     dpl,a
06AB F583      1985            mov     dph,a
06AD 22        1986            ret
06AE           1987   L023019?:
06AE           1988   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:535: else if(!BUTTON2 || x == 1){
06AE 30B308    1989            jnb     _P3_3,L023004?
06B1 7401      1990            mov     a,#0x01
06B3 B50848    1991            cjne    a,_x,L023037?
06B6 E4        1992            clr     a
06B7 B50948    1993            cjne    a,(_x + 1),L023037?
06BA 8001      1994            sjmp    L023038?
06BC           1995   L023037?:
06BC 8001      1996            sjmp    L023015?
06BE           1997   L023038?:
06BE           1998   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:536: while(!BUTTON2);
06BE           1999   L023004?:
06BE 30B308    2000            jnb     _P3_3,L023004?
06C1           2001   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:537: x = 1;
06C1 750801    2002            mov     _x,#0x01
06C4 E4        2003            clr     a
06C5 F509      2004            mov     (_x + 1),a
06C7           2005   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:538: return 1;
06C7 900001    2006            mov     dptr,#0x0001
06CA 22        2007            ret
06CB           2008   L023015?:
06CB           2009   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:540: else if(!BUTTON3 || x == 3){
06CB 30B708    2010            jnb     _P3_7,L023007?
06CE 7403      2011            mov     a,#0x03
06D0 B50848    2012            cjne    a,_x,L023041?
06D3 E4        2013            clr     a
06D4 B50948    2014            cjne    a,(_x + 1),L023041?
06D7 8001      2015            sjmp    L023042?
06D9           2016   L023041?:
06D9 8001      2017            sjmp    L023011?
06DB           2018   L023042?:
06DB           2019   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:541: while(!BUTTON3);
06DB           2020   L023007?:
06DB 30B708    2021            jnb     _P3_7,L023007?
06DE           2022   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:542: x = 3;
06DE 750803    2023            mov     _x,#0x03
06E1 E4        2024            clr     a
06E2 F509      2025            mov     (_x + 1),a
06E4           2026   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:543: return 3;
06E4 900003    2027            mov     dptr,#0x0003
06E7 22        2028            ret
06E8           2029   L023011?:
06E8           2030   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:546: x = 2;
06E8 750802    2031            mov     _x,#0x02
06EB E4        2032            clr     a
06EC F509      2033            mov     (_x + 1),a
06EE           2034   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:547: return 2;
06EE 900002    2035            mov     dptr,#0x0002
06F1 22        2036            ret
06F2           2037   ;------------------------------------------------------------
06F2           2038   ;Allocation info for local variables in function 'detectobstacle'
06F2           2039   ;------------------------------------------------------------
06F2           2040   ;threshold                 Allocated to registers r2 r3 r4 r5 
06F2           2041   ;------------------------------------------------------------
06F2           2042   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:552: void detectobstacle(float threshold){
06F2           2043   ;        -----------------------------------------
06F2           2044   ;         function detectobstacle
06F2           2045   ;        -----------------------------------------
06F2           2046   _detectobstacle:
06F2 AA82      2047            mov     r2,dpl
06F4 AB83      2048            mov     r3,dph
06F6 ACF0      2049            mov     r4,b
06F8 FD        2050            mov     r5,a
06F9           2051   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:563: if(threshold <= 0.6 ){
06F9 749A      2052            mov     a,#0x9A
06FB C0E0      2053            push    acc
06FD 7499      2054            mov     a,#0x99
06FF C0E0      2055            push    acc
0701 7419      2056            mov     a,#0x19
0703 C0E0      2057            push    acc
0705 743F      2058            mov     a,#0x3F
0707 C0E0      2059            push    acc
0709 8A82      2060            mov     dpl,r2
070B 8B83      2061            mov     dph,r3
070D 8CF0      2062            mov     b,r4
070F ED        2063            mov     a,r5
0710 120100    2064            lcall   ___fsgt
0713 AA82      2065            mov     r2,dpl
0715 E581      2066            mov     a,sp
0717 24FC      2067            add     a,#0xfc
0719 F581      2068            mov     sp,a
071B EA        2069            mov     a,r2
071C 7001      2070            jnz     L024002?
071E           2071   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:565: printf("Turn right \r\n");
071E 7488      2072            mov     a,#__str_7
0720 C0E0      2073            push    acc
0722 74D3      2074            mov     a,#(__str_7 >> 8)
0724 C0E0      2075            push    acc
0726 7480      2076            mov     a,#0x80
0728 C0E0      2077            push    acc
072A 120100    2078            lcall   _printf
072D 1581      2079            dec     sp
072F 1581      2080            dec     sp
0731 1581      2081            dec     sp
0733           2082   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:566: PWMRight();
0733 120100    2083            lcall   _PWMRight
0736           2084   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:567: waitms(500); //Make waits longer
0736 9001F4    2085            mov     dptr,#0x01F4
0739 120100    2086            lcall   _waitms
073C           2087   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:568: waitms(500); 
073C 9001F4    2088            mov     dptr,#0x01F4
073F 120100    2089            lcall   _waitms
0742           2090   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:569: waitms(300); 
0742 90012C    2091            mov     dptr,#0x012C
0745 120100    2092            lcall   _waitms
0748           2093   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:571: PWMStop();
0748 120100    2094            lcall   _PWMStop
074B           2095   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:572: waitms(500);
074B 9001F4    2096            mov     dptr,#0x01F4
074E 120100    2097            lcall   _waitms
0751           2098   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:573: waitms(250);
0751 9000FA    2099            mov     dptr,#0x00FA
0754 020100    2100            ljmp    _waitms
0757           2101   L024002?:
0757           2102   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:578: printf("Go Straight \r\n");
0757 74C8      2103            mov     a,#__str_8
0759 C0E0      2104            push    acc
075B 74D3      2105            mov     a,#(__str_8 >> 8)
075D C0E0      2106            push    acc
075F 7480      2107            mov     a,#0x80
0761 C0E0      2108            push    acc
0763 120100    2109            lcall   _printf
0766 1581      2110            dec     sp
0768 1581      2111            dec     sp
076A 1581      2112            dec     sp
076C           2113   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:580: PWMforward();
076C 020100    2114            ljmp    _PWMforward
076F           2115   ;------------------------------------------------------------
076F           2116   ;Allocation info for local variables in function 'laserPattern'
076F           2117   ;------------------------------------------------------------
076F           2118   ;rate                      Allocated to registers r2 r3 r4 r5 
076F           2119   ;------------------------------------------------------------
076F           2120   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:587: void laserPattern(float rate){
076F           2121   ;        -----------------------------------------
076F           2122   ;         function laserPattern
076F           2123   ;        -----------------------------------------
076F           2124   _laserPattern:
076F AA82      2125            mov     r2,dpl
0771 AB83      2126            mov     r3,dph
0773 ACF0      2127            mov     r4,b
0775 FD        2128            mov     r5,a
0776           2129   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:588: LASER = 0;
0776 C2B0      2130            clr     _P3_0
0778           2131   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:589: if(rate<0.8)
0778 C002      2132            push    ar2
077A C003      2133            push    ar3
077C C004      2134            push    ar4
077E C005      2135            push    ar5
0780 74CD      2136            mov     a,#0xCD
0782 C0E0      2137            push    acc
0784 74CC      2138            mov     a,#0xCC
0786 C0E0      2139            push    acc
0788 744C      2140            mov     a,#0x4C
078A C0E0      2141            push    acc
078C 743F      2142            mov     a,#0x3F
078E C0E0      2143            push    acc
0790 8A82      2144            mov     dpl,r2
0792 8B83      2145            mov     dph,r3
0794 8CF0      2146            mov     b,r4
0796 ED        2147            mov     a,r5
0797 120100    2148            lcall   ___fslt
079A AE82      2149            mov     r6,dpl
079C E581      2150            mov     a,sp
079E 24FC      2151            add     a,#0xfc
07A0 F581      2152            mov     sp,a
07A2 D005      2153            pop     ar5
07A4 D004      2154            pop     ar4
07A6 D003      2155            pop     ar3
07A8 D002      2156            pop     ar2
07AA EE        2157            mov     a,r6
07AB 6001      2158            jz      L025010?
07AD           2159   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:590: waitms(200);
07AD 9000C8    2160            mov     dptr,#0x00C8
07B0 120100    2161            lcall   _waitms
07B3 020100    2162            ljmp    L025011?
07B6           2163   L025010?:
07B6           2164   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:591: else if(rate>=0.8 && rate<2.0)
07B6 EE        2165            mov     a,r6
07B7 7001      2166            jnz     L025006?
07B9 C002      2167            push    ar2
07BB C003      2168            push    ar3
07BD C004      2169            push    ar4
07BF C005      2170            push    ar5
07C1 E4        2171            clr     a
07C2 C0E0      2172            push    acc
07C4 C0E0      2173            push    acc
07C6 C0E0      2174            push    acc
07C8 7440      2175            mov     a,#0x40
07CA C0E0      2176            push    acc
07CC 8A82      2177            mov     dpl,r2
07CE 8B83      2178            mov     dph,r3
07D0 8CF0      2179            mov     b,r4
07D2 ED        2180            mov     a,r5
07D3 120100    2181            lcall   ___fslt
07D6 AE82      2182            mov     r6,dpl
07D8 E581      2183            mov     a,sp
07DA 24FC      2184            add     a,#0xfc
07DC F581      2185            mov     sp,a
07DE D005      2186            pop     ar5
07E0 D004      2187            pop     ar4
07E2 D003      2188            pop     ar3
07E4 D002      2189            pop     ar2
07E6 EE        2190            mov     a,r6
07E7 6001      2191            jz      L025006?
07E9           2192   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:592: waitms(500);
07E9 9001F4    2193            mov     dptr,#0x01F4
07EC 120100    2194            lcall   _waitms
07EF 8001      2195            sjmp    L025011?
07F1           2196   L025006?:
07F1           2197   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:593: else if(rate>=2.0 && rate<2.8)
07F1 C002      2198            push    ar2
07F3 C003      2199            push    ar3
07F5 C004      2200            push    ar4
07F7 C005      2201            push    ar5
07F9 E4        2202            clr     a
07FA C0E0      2203            push    acc
07FC C0E0      2204            push    acc
07FE C0E0      2205            push    acc
0800 7440      2206            mov     a,#0x40
0802 C0E0      2207            push    acc
0804 8A82      2208            mov     dpl,r2
0806 8B83      2209            mov     dph,r3
0808 8CF0      2210            mov     b,r4
080A ED        2211            mov     a,r5
080B 120100    2212            lcall   ___fslt
080E AE82      2213            mov     r6,dpl
0810 E581      2214            mov     a,sp
0812 24FC      2215            add     a,#0xfc
0814 F581      2216            mov     sp,a
0816 D005      2217            pop     ar5
0818 D004      2218            pop     ar4
081A D003      2219            pop     ar3
081C D002      2220            pop     ar2
081E EE        2221            mov     a,r6
081F 7001      2222            jnz     L025002?
0821 7433      2223            mov     a,#0x33
0823 C0E0      2224            push    acc
0825 C0E0      2225            push    acc
0827 C0E0      2226            push    acc
0829 7440      2227            mov     a,#0x40
082B C0E0      2228            push    acc
082D 8A82      2229            mov     dpl,r2
082F 8B83      2230            mov     dph,r3
0831 8CF0      2231            mov     b,r4
0833 ED        2232            mov     a,r5
0834 120100    2233            lcall   ___fslt
0837 AA82      2234            mov     r2,dpl
0839 E581      2235            mov     a,sp
083B 24FC      2236            add     a,#0xfc
083D F581      2237            mov     sp,a
083F EA        2238            mov     a,r2
0840 6001      2239            jz      L025002?
0842           2240   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:594: waitms(800);
0842 900320    2241            mov     dptr,#0x0320
0845 120100    2242            lcall   _waitms
0848 8001      2243            sjmp    L025011?
084A           2244   L025002?:
084A           2245   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:596: waitms(1000);
084A 9003E8    2246            mov     dptr,#0x03E8
084D 120100    2247            lcall   _waitms
0850           2248   L025011?:
0850           2249   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:597: LASER = 1;
0850 D2B0      2250            setb    _P3_0
0852 22        2251            ret
0853           2252   ;------------------------------------------------------------
0853           2253   ;Allocation info for local variables in function 'main'
0853           2254   ;------------------------------------------------------------
0853           2255   ;checkcommand              Allocated to registers 
0853           2256   ;i                         Allocated to registers r4 r5 
0853           2257   ;sig1                      Allocated to registers 
0853           2258   ;sig2                      Allocated to registers 
0853           2259   ;peak                      Allocated to registers 
0853           2260   ;voltspeak                 Allocated to registers 
0853           2261   ;periodpwm                 Allocated to registers 
0853           2262   ;period                    Allocated to registers r4 r5 r6 r7 
0853           2263   ;overflow_count            Allocated to registers r4 r5 
0853           2264   ;pir_voltage               Allocated to registers r2 r3 r4 r5 
0853           2265   ;mode_toggle               Allocated to registers r2 r3 
0853           2266   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0853           2267   ;------------------------------------------------------------
0853           2268   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:600: void main(void)
0853           2269   ;        -----------------------------------------
0853           2270   ;         function main
0853           2271   ;        -----------------------------------------
0853           2272   _main:
0853           2273   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:615: TL0=0;
0853 758A00    2274            mov     _TL0,#0x00
0856           2275   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:616: TH0=0;
0856 758C00    2276            mov     _TH0,#0x00
0859           2277   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:617: TF0=0;         
0859 C28D      2278            clr     _TF0
085B           2279   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:618: TIMER0_Init();
085B 120100    2280            lcall   _TIMER0_Init
085E           2281   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:620: InitPinADC(1, 6); // Configure P2.5 as analog input
085E 755806    2282            mov     _InitPinADC_PARM_2,#0x06
0861 758201    2283            mov     dpl,#0x01
0864 120100    2284            lcall   _InitPinADC
0867           2285   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:621: InitPinADC(2, 3); //???        
0867 755803    2286            mov     _InitPinADC_PARM_2,#0x03
086A 758202    2287            mov     dpl,#0x02
086D 120100    2288            lcall   _InitPinADC
0870           2289   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:622: InitPinADC(2, 4); //PIR
0870 755804    2290            mov     _InitPinADC_PARM_2,#0x04
0873 758202    2291            mov     dpl,#0x02
0876 120100    2292            lcall   _InitPinADC
0879           2293   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:623: InitPinADC(2, 6); //Temp Sensor
0879 755806    2294            mov     _InitPinADC_PARM_2,#0x06
087C 758202    2295            mov     dpl,#0x02
087F 120100    2296            lcall   _InitPinADC
0882           2297   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:624: InitADC();
0882 120100    2298            lcall   _InitADC
0885           2299   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:626: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0885 7408      2300            mov     a,#__str_9
0887 C0E0      2301            push    acc
0889 74D5      2302            mov     a,#(__str_9 >> 8)
088B C0E0      2303            push    acc
088D 7480      2304            mov     a,#0x80
088F C0E0      2305            push    acc
0891 120100    2306            lcall   _printf
0894 1581      2307            dec     sp
0896 1581      2308            dec     sp
0898 1581      2309            dec     sp
089A           2310   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:628: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
089A 7448      2311            mov     a,#__str_10
089C C0E0      2312            push    acc
089E 74D5      2313            mov     a,#(__str_10 >> 8)
08A0 C0E0      2314            push    acc
08A2 7480      2315            mov     a,#0x80
08A4 C0E0      2316            push    acc
08A6 120100    2317            lcall   _printf
08A9 1581      2318            dec     sp
08AB 1581      2319            dec     sp
08AD 1581      2320            dec     sp
08AF           2321   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:630: printf("\n\r");
08AF 7488      2322            mov     a,#__str_11
08B1 C0E0      2323            push    acc
08B3 74D5      2324            mov     a,#(__str_11 >> 8)
08B5 C0E0      2325            push    acc
08B7 7480      2326            mov     a,#0x80
08B9 C0E0      2327            push    acc
08BB 120100    2328            lcall   _printf
08BE 1581      2329            dec     sp
08C0 1581      2330            dec     sp
08C2 1581      2331            dec     sp
08C4           2332   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:634: while (1)
08C4           2333   L026026?:
08C4           2334   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:636: mode_toggle = checkMode();
08C4 120100    2335            lcall   _checkMode
08C7 AA82      2336            mov     r2,dpl
08C9 AB83      2337            mov     r3,dph
08CB           2338   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:639: if(mode_toggle == 0){
08CB EA        2339            mov     a,r2
08CC 4B        2340            orl     a,r3
08CD 6001      2341            jz      L026050?
08CF 020100    2342            ljmp    L026023?
08D2           2343   L026050?:
08D2           2344   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:640: printf("auto \r\n");
08D2 7488      2345            mov     a,#__str_12
08D4 C0E0      2346            push    acc
08D6 74D6      2347            mov     a,#(__str_12 >> 8)
08D8 C0E0      2348            push    acc
08DA 7480      2349            mov     a,#0x80
08DC C0E0      2350            push    acc
08DE 120100    2351            lcall   _printf
08E1 1581      2352            dec     sp
08E3 1581      2353            dec     sp
08E5 1581      2354            dec     sp
08E7           2355   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:642: TL0=0; 
08E7 758A00    2356            mov     _TL0,#0x00
08EA           2357   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:643: TH0=0;
08EA 758C00    2358            mov     _TH0,#0x00
08ED           2359   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:644: TF0=0;
08ED C28D      2360            clr     _TF0
08EF           2361   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:646: while(P2_1!=0); // Wait for the signal to be zero
08EF           2362   L026001?:
08EF 20A1C8    2363            jb      _P2_1,L026001?
08F2           2364   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:647: while(P2_1!=1); // Wait for the signal to be one
08F2           2365   L026004?:
08F2 30A108    2366            jnb     _P2_1,L026004?
08F5           2367   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:648: TR0=1; // Start the timer
08F5 D28C      2368            setb    _TR0
08F7           2369   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:649: while(P2_1!=0) // Wait for the signal to be zero
08F7 7C00      2370            mov     r4,#0x00
08F9 7D00      2371            mov     r5,#0x00
08FB           2372   L026009?:
08FB 30A188    2373            jnb     _P2_1,L026011?
08FE           2374   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:651: if(TF0==1) // Did the 16-bit timer overflow?
08FE           2375   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:653: TF0=0;
08FE 108DC8    2376            jbc     _TF0,L026054?
0901 8001      2377            sjmp    L026009?
0903           2378   L026054?:
0903           2379   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:654: overflow_count++;
0903 0C        2380            inc     r4
0904 BC0048    2381            cjne    r4,#0x00,L026009?
0907 0D        2382            inc     r5
0908 8001      2383            sjmp    L026009?
090A           2384   L026011?:
090A           2385   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:665: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
090A C28C      2386            clr     _TR0
090C           2387   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:666: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
090C 8C82      2388            mov     dpl,r4
090E 8D83      2389            mov     dph,r5
0910 120100    2390            lcall   ___sint2fs
0913 AC82      2391            mov     r4,dpl
0915 AD83      2392            mov     r5,dph
0917 AEF0      2393            mov     r6,b
0919 FF        2394            mov     r7,a
091A C004      2395            push    ar4
091C C005      2396            push    ar5
091E C006      2397            push    ar6
0920 C007      2398            push    ar7
0922 900000    2399            mov     dptr,#0x0000
0925 75F080    2400            mov     b,#0x80
0928 7447      2401            mov     a,#0x47
092A 120100    2402            lcall   ___fsmul
092D 8582E8    2403            mov     _main_sloc0_1_0,dpl
0930 8583E9    2404            mov     (_main_sloc0_1_0 + 1),dph
0933 85F0EA    2405            mov     (_main_sloc0_1_0 + 2),b
0936 F5EB      2406            mov     (_main_sloc0_1_0 + 3),a
0938 E581      2407            mov     a,sp
093A 24FC      2408            add     a,#0xfc
093C F581      2409            mov     sp,a
093E 858C82    2410            mov     dpl,_TH0
0941 120100    2411            lcall   ___uchar2fs
0944 AC82      2412            mov     r4,dpl
0946 AD83      2413            mov     r5,dph
0948 AEF0      2414            mov     r6,b
094A FF        2415            mov     r7,a
094B C004      2416            push    ar4
094D C005      2417            push    ar5
094F C006      2418            push    ar6
0951 C007      2419            push    ar7
0953 900000    2420            mov     dptr,#0x0000
0956 75F080    2421            mov     b,#0x80
0959 7443      2422            mov     a,#0x43
095B 120100    2423            lcall   ___fsmul
095E AC82      2424            mov     r4,dpl
0960 AD83      2425            mov     r5,dph
0962 AEF0      2426            mov     r6,b
0964 FF        2427            mov     r7,a
0965 E581      2428            mov     a,sp
0967 24FC      2429            add     a,#0xfc
0969 F581      2430            mov     sp,a
096B C004      2431            push    ar4
096D C005      2432            push    ar5
096F C006      2433            push    ar6
0971 C007      2434            push    ar7
0973 85E882    2435            mov     dpl,_main_sloc0_1_0
0976 85E983    2436            mov     dph,(_main_sloc0_1_0 + 1)
0979 85EAF0    2437            mov     b,(_main_sloc0_1_0 + 2)
097C E5EB      2438            mov     a,(_main_sloc0_1_0 + 3)
097E 120100    2439            lcall   ___fsadd
0981 8582E8    2440            mov     _main_sloc0_1_0,dpl
0984 8583E9    2441            mov     (_main_sloc0_1_0 + 1),dph
0987 85F0EA    2442            mov     (_main_sloc0_1_0 + 2),b
098A F5EB      2443            mov     (_main_sloc0_1_0 + 3),a
098C E581      2444            mov     a,sp
098E 24FC      2445            add     a,#0xfc
0990 F581      2446            mov     sp,a
0992 AC8A      2447            mov     r4,_TL0
0994 7D00      2448            mov     r5,#0x00
0996 8C82      2449            mov     dpl,r4
0998 8D83      2450            mov     dph,r5
099A 120100    2451            lcall   ___sint2fs
099D AC82      2452            mov     r4,dpl
099F AD83      2453            mov     r5,dph
09A1 AEF0      2454            mov     r6,b
09A3 FF        2455            mov     r7,a
09A4 C004      2456            push    ar4
09A6 C005      2457            push    ar5
09A8 C006      2458            push    ar6
09AA C007      2459            push    ar7
09AC 85E882    2460            mov     dpl,_main_sloc0_1_0
09AF 85E983    2461            mov     dph,(_main_sloc0_1_0 + 1)
09B2 85EAF0    2462            mov     b,(_main_sloc0_1_0 + 2)
09B5 E5EB      2463            mov     a,(_main_sloc0_1_0 + 3)
09B7 120100    2464            lcall   ___fsadd
09BA AC82      2465            mov     r4,dpl
09BC AD83      2466            mov     r5,dph
09BE AEF0      2467            mov     r6,b
09C0 FF        2468            mov     r7,a
09C1 E581      2469            mov     a,sp
09C3 24FC      2470            add     a,#0xfc
09C5 F581      2471            mov     sp,a
09C7 C004      2472            push    ar4
09C9 C005      2473            push    ar5
09CB C006      2474            push    ar6
09CD C007      2475            push    ar7
09CF 90F4FC    2476            mov     dptr,#0xF4FC
09D2 75F032    2477            mov     b,#0x32
09D5 7434      2478            mov     a,#0x34
09D7 120100    2479            lcall   ___fsmul
09DA AC82      2480            mov     r4,dpl
09DC AD83      2481            mov     r5,dph
09DE AEF0      2482            mov     r6,b
09E0 FF        2483            mov     r7,a
09E1 E581      2484            mov     a,sp
09E3 24FC      2485            add     a,#0xfc
09E5 F581      2486            mov     sp,a
09E7           2487   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:668: printf( "\rT=%f ms   \n ", period*1000.0);
09E7 C004      2488            push    ar4
09E9 C005      2489            push    ar5
09EB C006      2490            push    ar6
09ED C007      2491            push    ar7
09EF 900000    2492            mov     dptr,#0x0000
09F2 75F07A    2493            mov     b,#0x7A
09F5 7444      2494            mov     a,#0x44
09F7 120100    2495            lcall   ___fsmul
09FA AC82      2496            mov     r4,dpl
09FC AD83      2497            mov     r5,dph
09FE AEF0      2498            mov     r6,b
0A00 FF        2499            mov     r7,a
0A01 E581      2500            mov     a,sp
0A03 24FC      2501            add     a,#0xfc
0A05 F581      2502            mov     sp,a
0A07 C004      2503            push    ar4
0A09 C005      2504            push    ar5
0A0B C006      2505            push    ar6
0A0D C007      2506            push    ar7
0A0F C004      2507            push    ar4
0A11 C005      2508            push    ar5
0A13 C006      2509            push    ar6
0A15 C007      2510            push    ar7
0A17 7408      2511            mov     a,#__str_13
0A19 C0E0      2512            push    acc
0A1B 74D8      2513            mov     a,#(__str_13 >> 8)
0A1D C0E0      2514            push    acc
0A1F 7480      2515            mov     a,#0x80
0A21 C0E0      2516            push    acc
0A23 120100    2517            lcall   _printf
0A26 E581      2518            mov     a,sp
0A28 24F9      2519            add     a,#0xf9
0A2A F581      2520            mov     sp,a
0A2C           2521   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:669: waitms(50);
0A2C 900032    2522            mov     dptr,#0x0032
0A2F 120100    2523            lcall   _waitms
0A32 D007      2524            pop     ar7
0A34 D006      2525            pop     ar6
0A36 D005      2526            pop     ar5
0A38 D004      2527            pop     ar4
0A3A           2528   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:670: detectobstacle(period*1000.0);
0A3A 8C82      2529            mov     dpl,r4
0A3C 8D83      2530            mov     dph,r5
0A3E 8EF0      2531            mov     b,r6
0A40 EF        2532            mov     a,r7
0A41 C004      2533            push    ar4
0A43 C005      2534            push    ar5
0A45 C006      2535            push    ar6
0A47 C007      2536            push    ar7
0A49 120100    2537            lcall   _detectobstacle
0A4C D007      2538            pop     ar7
0A4E D006      2539            pop     ar6
0A50 D005      2540            pop     ar5
0A52 D004      2541            pop     ar4
0A54           2542   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:671: laserPattern(period*1000);
0A54 8C82      2543            mov     dpl,r4
0A56 8D83      2544            mov     dph,r5
0A58 8EF0      2545            mov     b,r6
0A5A EF        2546            mov     a,r7
0A5B 120100    2547            lcall   _laserPattern
0A5E           2548   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:680: waitms(50);    
0A5E 900032    2549            mov     dptr,#0x0032
0A61 120100    2550            lcall   _waitms
0A64 020100    2551            ljmp    L026026?
0A67           2552   L026023?:
0A67           2553   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:684: else if(mode_toggle == 1){
0A67 BA0148    2554            cjne    r2,#0x01,L026055?
0A6A BB0048    2555            cjne    r3,#0x00,L026055?
0A6D 8001      2556            sjmp    L026056?
0A6F           2557   L026055?:
0A6F 020100    2558            ljmp    L026020?
0A72           2559   L026056?:
0A72           2560   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:685: recieveData();         //keep reading data continously 
0A72 120100    2561            lcall   _recieveData
0A75           2562   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:686: printf("Command: ");
0A75 7408      2563            mov     a,#__str_14
0A77 C0E0      2564            push    acc
0A79 74D9      2565            mov     a,#(__str_14 >> 8)
0A7B C0E0      2566            push    acc
0A7D 7480      2567            mov     a,#0x80
0A7F C0E0      2568            push    acc
0A81 120100    2569            lcall   _printf
0A84 1581      2570            dec     sp
0A86 1581      2571            dec     sp
0A88 1581      2572            dec     sp
0A8A           2573   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:687: for(i=0; i<4; i++)
0A8A 7C00      2574            mov     r4,#0x00
0A8C 7D00      2575            mov     r5,#0x00
0A8E           2576   L026028?:
0A8E C3        2577            clr     c
0A8F EC        2578            mov     a,r4
0A90 9404      2579            subb    a,#0x04
0A92 ED        2580            mov     a,r5
0A93 6480      2581            xrl     a,#0x80
0A95 9480      2582            subb    a,#0x80
0A97 5001      2583            jnc     L026031?
0A99           2584   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:688: printf("%d\t", command[i]);
0A99 8C06      2585            mov     ar6,r4
0A9B ED        2586            mov     a,r5
0A9C CE        2587            xch     a,r6
0A9D 25E0      2588            add     a,acc
0A9F CE        2589            xch     a,r6
0AA0 33        2590            rlc     a
0AA1 EE        2591            mov     a,r6
0AA2 2448      2592            add     a,#_command
0AA4 F8        2593            mov     r0,a
0AA5 8606      2594            mov     ar6,@r0
0AA7 08        2595            inc     r0
0AA8 8607      2596            mov     ar7,@r0
0AAA 18        2597            dec     r0
0AAB C004      2598            push    ar4
0AAD C005      2599            push    ar5
0AAF C006      2600            push    ar6
0AB1 C007      2601            push    ar7
0AB3 74C8      2602            mov     a,#__str_15
0AB5 C0E0      2603            push    acc
0AB7 74D9      2604            mov     a,#(__str_15 >> 8)
0AB9 C0E0      2605            push    acc
0ABB 7480      2606            mov     a,#0x80
0ABD C0E0      2607            push    acc
0ABF 120100    2608            lcall   _printf
0AC2 E581      2609            mov     a,sp
0AC4 24FB      2610            add     a,#0xfb
0AC6 F581      2611            mov     sp,a
0AC8 D005      2612            pop     ar5
0ACA D004      2613            pop     ar4
0ACC           2614   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:687: for(i=0; i<4; i++)
0ACC 0C        2615            inc     r4
0ACD BC0048    2616            cjne    r4,#0x00,L026028?
0AD0 0D        2617            inc     r5
0AD1 8001      2618            sjmp    L026028?
0AD3           2619   L026031?:
0AD3           2620   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:689: printf("\n\r");
0AD3 7488      2621            mov     a,#__str_11
0AD5 C0E0      2622            push    acc
0AD7 74D5      2623            mov     a,#(__str_11 >> 8)
0AD9 C0E0      2624            push    acc
0ADB 7480      2625            mov     a,#0x80
0ADD C0E0      2626            push    acc
0ADF 120100    2627            lcall   _printf
0AE2 1581      2628            dec     sp
0AE4 1581      2629            dec     sp
0AE6 1581      2630            dec     sp
0AE8           2631   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:690: command[0] = 0;
0AE8 754800    2632            mov     _command,#0x00
0AEB 754900    2633            mov     (_command + 1),#0x00
0AEE           2634   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:691: command[1] = 0;
0AEE 754A00    2635            mov     (_command + 0x0002),#0x00
0AF1 754B00    2636            mov     ((_command + 0x0002) + 1),#0x00
0AF4           2637   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:692: command[2] = 0;
0AF4 754C00    2638            mov     (_command + 0x0004),#0x00
0AF7 754D00    2639            mov     ((_command + 0x0004) + 1),#0x00
0AFA           2640   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:693: command[3] = 0;
0AFA 754E00    2641            mov     (_command + 0x0006),#0x00
0AFD 754F00    2642            mov     ((_command + 0x0006) + 1),#0x00
0B00 020100    2643            ljmp    L026026?
0B03           2644   L026020?:
0B03           2645   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:697: else if( mode_toggle == 3){
0B03 BA0308    2646            cjne    r2,#0x03,L026059?
0B06 BB0008    2647            cjne    r3,#0x00,L026059?
0B09 8001      2648            sjmp    L026060?
0B0B           2649   L026059?:
0B0B 020100    2650            ljmp    L026017?
0B0E           2651   L026060?:
0B0E           2652   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:698: pir_voltage = Volts_at_Pin(QFP32_MUX_P2_4);
0B0E 758211    2653            mov     dpl,#0x11
0B11 120100    2654            lcall   _Volts_at_Pin
0B14 AA82      2655            mov     r2,dpl
0B16 AB83      2656            mov     r3,dph
0B18 ACF0      2657            mov     r4,b
0B1A FD        2658            mov     r5,a
0B1B           2659   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:699: if(pir_voltage >= 3.0 && pir_voltage <= 3.4)
0B1B C002      2660            push    ar2
0B1D C003      2661            push    ar3
0B1F C004      2662            push    ar4
0B21 C005      2663            push    ar5
0B23 E4        2664            clr     a
0B24 C0E0      2665            push    acc
0B26 C0E0      2666            push    acc
0B28 7440      2667            mov     a,#0x40
0B2A C0E0      2668            push    acc
0B2C C0E0      2669            push    acc
0B2E 8A82      2670            mov     dpl,r2
0B30 8B83      2671            mov     dph,r3
0B32 8CF0      2672            mov     b,r4
0B34 ED        2673            mov     a,r5
0B35 120100    2674            lcall   ___fslt
0B38 AE82      2675            mov     r6,dpl
0B3A E581      2676            mov     a,sp
0B3C 24FC      2677            add     a,#0xfc
0B3E F581      2678            mov     sp,a
0B40 D005      2679            pop     ar5
0B42 D004      2680            pop     ar4
0B44 D003      2681            pop     ar3
0B46 D002      2682            pop     ar2
0B48 EE        2683            mov     a,r6
0B49 7001      2684            jnz     L026013?
0B4B C002      2685            push    ar2
0B4D C003      2686            push    ar3
0B4F C004      2687            push    ar4
0B51 C005      2688            push    ar5
0B53 749A      2689            mov     a,#0x9A
0B55 C0E0      2690            push    acc
0B57 7499      2691            mov     a,#0x99
0B59 C0E0      2692            push    acc
0B5B 7459      2693            mov     a,#0x59
0B5D C0E0      2694            push    acc
0B5F 7440      2695            mov     a,#0x40
0B61 C0E0      2696            push    acc
0B63 8A82      2697            mov     dpl,r2
0B65 8B83      2698            mov     dph,r3
0B67 8CF0      2699            mov     b,r4
0B69 ED        2700            mov     a,r5
0B6A 120100    2701            lcall   ___fsgt
0B6D AE82      2702            mov     r6,dpl
0B6F E581      2703            mov     a,sp
0B71 24FC      2704            add     a,#0xfc
0B73 F581      2705            mov     sp,a
0B75 D005      2706            pop     ar5
0B77 D004      2707            pop     ar4
0B79 D003      2708            pop     ar3
0B7B D002      2709            pop     ar2
0B7D EE        2710            mov     a,r6
0B7E 7001      2711            jnz     L026013?
0B80           2712   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:700: PWMStop();
0B80 C002      2713            push    ar2
0B82 C003      2714            push    ar3
0B84 C004      2715            push    ar4
0B86 C005      2716            push    ar5
0B88 120100    2717            lcall   _PWMStop
0B8B D005      2718            pop     ar5
0B8D D004      2719            pop     ar4
0B8F D003      2720            pop     ar3
0B91 D002      2721            pop     ar2
0B93 8001      2722            sjmp    L026014?
0B95           2723   L026013?:
0B95           2724   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:702: PWMforward();
0B95 C002      2725            push    ar2
0B97 C003      2726            push    ar3
0B99 C004      2727            push    ar4
0B9B C005      2728            push    ar5
0B9D 120100    2729            lcall   _PWMforward
0BA0 D005      2730            pop     ar5
0BA2 D004      2731            pop     ar4
0BA4 D003      2732            pop     ar3
0BA6 D002      2733            pop     ar2
0BA8           2734   L026014?:
0BA8           2735   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:703: waitms(100);
0BA8 900064    2736            mov     dptr,#0x0064
0BAB C002      2737            push    ar2
0BAD C003      2738            push    ar3
0BAF C004      2739            push    ar4
0BB1 C005      2740            push    ar5
0BB3 120100    2741            lcall   _waitms
0BB6           2742   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:704: printf("pir_voltage: %f \r\n", pir_voltage);
0BB6 7448      2743            mov     a,#__str_16
0BB8 C0E0      2744            push    acc
0BBA 74DB      2745            mov     a,#(__str_16 >> 8)
0BBC C0E0      2746            push    acc
0BBE 7480      2747            mov     a,#0x80
0BC0 C0E0      2748            push    acc
0BC2 120100    2749            lcall   _printf
0BC5 E581      2750            mov     a,sp
0BC7 24F9      2751            add     a,#0xf9
0BC9 F581      2752            mov     sp,a
0BCB 020100    2753            ljmp    L026026?
0BCE           2754   L026017?:
0BCE           2755   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:708: printf("Do nothing\r\n");      
0BCE 7488      2756            mov     a,#__str_17
0BD0 C0E0      2757            push    acc
0BD2 74DB      2758            mov     a,#(__str_17 >> 8)
0BD4 C0E0      2759            push    acc
0BD6 7480      2760            mov     a,#0x80
0BD8 C0E0      2761            push    acc
0BDA 120100    2762            lcall   _printf
0BDD 1581      2763            dec     sp
0BDF 1581      2764            dec     sp
0BE1 1581      2765            dec     sp
0BE3 020100    2766            ljmp    L026026?
0BE6           2767            rseg R_CSEG
0BE6           2768   
0000           2769            rseg R_XINIT
0000           2770   
0000           2771            rseg R_CONST
0000           2772   __str_0:
0000 466F7277  2773            db 'Forward'
     617264
0007 0A        2774            db 0x0A
0008 0D        2775            db 0x0D
0009 00        2776            db 0x00
000A           2777   __str_1:
000A 4261636B  2778            db 'Backward'
     77617264
0012 0A        2779            db 0x0A
0013 0D        2780            db 0x0D
0014 00        2781            db 0x00
0015           2782   __str_2:
0015 4C656674  2783            db 'Left'
0019 0A        2784            db 0x0A
001A 0D        2785            db 0x0D
001B 00        2786            db 0x00
001C           2787   __str_3:
001C 52696768  2788            db 'Right'
     74
0021 0A        2789            db 0x0A
0022 0D        2790            db 0x0D
0023 00        2791            db 0x00
0024           2792   __str_4:
0024 53746F70  2793            db 'Stop'
0028 0A        2794            db 0x0A
0029 0D        2795            db 0x0D
002A 00        2796            db 0x00
002B           2797   __str_5:
002B 2566      2798            db '%f'
002D 0A        2799            db 0x0A
002E 0D        2800            db 0x0D
002F 00        2801            db 0x00
0030           2802   __str_6:
0030 0A        2803            db 0x0A
0031 72656164  2804            db 'read 1:  at pin 2.3: %f'
     20313A20
     20617420
     70696E20
     322E333A
     202566
0048 0D        2805            db 0x0D
0049 00        2806            db 0x00
004A           2807   __str_7:
004A 5475726E  2808            db 'Turn right '
     20726967
     687420
0055 0D        2809            db 0x0D
0056 0A        2810            db 0x0A
0057 00        2811            db 0x00
0058           2812   __str_8:
0058 476F2053  2813            db 'Go Straight '
     74726169
     67687420
0064 0D        2814            db 0x0D
0065 0A        2815            db 0x0A
0066 00        2816            db 0x00
0067           2817   __str_9:
0067 1B        2818            db 0x1B
0068 5B324A    2819            db '[2J'
006B 00        2820            db 0x00
006C           2821   __str_10:
006C 53717561  2822            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0092 0D        2823            db 0x0D
0093 0A        2824            db 0x0A
0094 43686563  2825            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
00A8 50322E31  2826            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00C3 0D        2827            db 0x0D
00C4 0A        2828            db 0x0A
00C5 00        2829            db 0x00
00C6           2830   __str_11:
00C6 0A        2831            db 0x0A
00C7 0D        2832            db 0x0D
00C8 00        2833            db 0x00
00C9           2834   __str_12:
00C9 6175746F  2835            db 'auto '
     20
00CE 0D        2836            db 0x0D
00CF 0A        2837            db 0x0A
00D0 00        2838            db 0x00
00D1           2839   __str_13:
00D1 0D        2840            db 0x0D
00D2 543D2566  2841            db 'T=%f ms   '
     206D7320
     2020
00DC 0A        2842            db 0x0A
00DD 20        2843            db ' '
00DE 00        2844            db 0x00
00DF           2845   __str_14:
00DF 436F6D6D  2846            db 'Command: '
     616E643A
     20
00E8 00        2847            db 0x00
00E9           2848   __str_15:
00E9 2564      2849            db '%d'
00EB 09        2850            db 0x09
00EC 00        2851            db 0x00
00ED           2852   __str_16:
00ED 7069725F  2853            db 'pir_voltage: %f '
     766F6C74
     6167653A
     20256620
00FD 0D        2854            db 0x0D
00FE 0A        2855            db 0x0A
00FF 00        2856            db 0x00
0100           2857   __str_17:
0100 446F206E  2858            db 'Do nothing'
     6F746869
     6E67
010A 0D        2859            db 0x0D
010B 0A        2860            db 0x0A
010C 00        2861            db 0x00
010D           2862   
002E           2863            CSEG
002E           2864   
002E           2865   end
