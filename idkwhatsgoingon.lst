0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Wed Apr 04 15:42:48 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _laserPattern
0000             32            public _detectobstacle
0000             33            public _checkMode
0000             34            public _recieveData
0000             35            public _waitquarterperiod
0000             36            public _getDigitalSignal
0000             37            public _voltsAtPeak
0000             38            public _checkCommands
0000             39            public _arrayEqual
0000             40            public _periodcalc
0000             41            public _PWMStop
0000             42            public _PWMLeftM
0000             43            public _PWMRightM
0000             44            public _PWMforwardM
0000             45            public _PWMbackwardM
0000             46            public _PWMLeft
0000             47            public _PWMRight
0000             48            public _PWMforward
0000             49            public _PWMbackward
0000             50            public _InitPinADC
0000             51            public _Volts_at_Pin
0000             52            public _TIMER0_Init
0000             53            public _InitADC
0000             54            public _Timer2_ISR
0000             55            public _ADC_at_Pin
0000             56            public _waitms
0000             57            public _Timer3us
0000             58            public __c51_external_startup
0000             59            public _x
0000             60            public _command
0000             61            public _right
0000             62            public _left
0000             63            public _backward
0000             64            public _forward
0000             65            public _stop
0000             66            public _claw_flag
0000             67            public _flag
0000             68            public _cartMoveB
0000             69            public _cartMoveF
0000             70            public _pwmSig6
0000             71            public _pwmSig5
0000             72            public _pwmSig4
0000             73            public _pwmSig3
0000             74            public _pwmSig2
0000             75            public _pwmSig1
0000             76            public _pwm_count3
0000             77            public _pwm_count2
0000             78            public _pwm_count1
0000             79            public _pwm_count
0000             80   ;--------------------------------------------------------
0000             81   ; Special Function Registers
0000             82   ;--------------------------------------------------------
0000             83   _ACC            DATA 0xe0
0000             84   _ADC0ASAH       DATA 0xb6
0000             85   _ADC0ASAL       DATA 0xb5
0000             86   _ADC0ASCF       DATA 0xa1
0000             87   _ADC0ASCT       DATA 0xc7
0000             88   _ADC0CF0        DATA 0xbc
0000             89   _ADC0CF1        DATA 0xb9
0000             90   _ADC0CF2        DATA 0xdf
0000             91   _ADC0CN0        DATA 0xe8
0000             92   _ADC0CN1        DATA 0xb2
0000             93   _ADC0CN2        DATA 0xb3
0000             94   _ADC0GTH        DATA 0xc4
0000             95   _ADC0GTL        DATA 0xc3
0000             96   _ADC0H          DATA 0xbe
0000             97   _ADC0L          DATA 0xbd
0000             98   _ADC0LTH        DATA 0xc6
0000             99   _ADC0LTL        DATA 0xc5
0000            100   _ADC0MX         DATA 0xbb
0000            101   _B              DATA 0xf0
0000            102   _CKCON0         DATA 0x8e
0000            103   _CKCON1         DATA 0xa6
0000            104   _CLEN0          DATA 0xc6
0000            105   _CLIE0          DATA 0xc7
0000            106   _CLIF0          DATA 0xe8
0000            107   _CLKSEL         DATA 0xa9
0000            108   _CLOUT0         DATA 0xd1
0000            109   _CLU0CF         DATA 0xb1
0000            110   _CLU0FN         DATA 0xaf
0000            111   _CLU0MX         DATA 0x84
0000            112   _CLU1CF         DATA 0xb3
0000            113   _CLU1FN         DATA 0xb2
0000            114   _CLU1MX         DATA 0x85
0000            115   _CLU2CF         DATA 0xb6
0000            116   _CLU2FN         DATA 0xb5
0000            117   _CLU2MX         DATA 0x91
0000            118   _CLU3CF         DATA 0xbf
0000            119   _CLU3FN         DATA 0xbe
0000            120   _CLU3MX         DATA 0xae
0000            121   _CMP0CN0        DATA 0x9b
0000            122   _CMP0CN1        DATA 0x99
0000            123   _CMP0MD         DATA 0x9d
0000            124   _CMP0MX         DATA 0x9f
0000            125   _CMP1CN0        DATA 0xbf
0000            126   _CMP1CN1        DATA 0xac
0000            127   _CMP1MD         DATA 0xab
0000            128   _CMP1MX         DATA 0xaa
0000            129   _CRC0CN0        DATA 0xce
0000            130   _CRC0CN1        DATA 0x86
0000            131   _CRC0CNT        DATA 0xd3
0000            132   _CRC0DAT        DATA 0xcb
0000            133   _CRC0FLIP       DATA 0xcf
0000            134   _CRC0IN         DATA 0xca
0000            135   _CRC0ST         DATA 0xd2
0000            136   _DAC0CF0        DATA 0x91
0000            137   _DAC0CF1        DATA 0x92
0000            138   _DAC0H          DATA 0x85
0000            139   _DAC0L          DATA 0x84
0000            140   _DAC1CF0        DATA 0x93
0000            141   _DAC1CF1        DATA 0x94
0000            142   _DAC1H          DATA 0x8a
0000            143   _DAC1L          DATA 0x89
0000            144   _DAC2CF0        DATA 0x95
0000            145   _DAC2CF1        DATA 0x96
0000            146   _DAC2H          DATA 0x8c
0000            147   _DAC2L          DATA 0x8b
0000            148   _DAC3CF0        DATA 0x9a
0000            149   _DAC3CF1        DATA 0x9c
0000            150   _DAC3H          DATA 0x8e
0000            151   _DAC3L          DATA 0x8d
0000            152   _DACGCF0        DATA 0x88
0000            153   _DACGCF1        DATA 0x98
0000            154   _DACGCF2        DATA 0xa2
0000            155   _DERIVID        DATA 0xad
0000            156   _DEVICEID       DATA 0xb5
0000            157   _DPH            DATA 0x83
0000            158   _DPL            DATA 0x82
0000            159   _EIE1           DATA 0xe6
0000            160   _EIE2           DATA 0xf3
0000            161   _EIP1           DATA 0xbb
0000            162   _EIP1H          DATA 0xee
0000            163   _EIP2           DATA 0xed
0000            164   _EIP2H          DATA 0xf6
0000            165   _EMI0CN         DATA 0xe7
0000            166   _FLKEY          DATA 0xb7
0000            167   _HFO0CAL        DATA 0xc7
0000            168   _HFO1CAL        DATA 0xd6
0000            169   _HFOCN          DATA 0xef
0000            170   _I2C0ADM        DATA 0xff
0000            171   _I2C0CN0        DATA 0xba
0000            172   _I2C0DIN        DATA 0xbc
0000            173   _I2C0DOUT       DATA 0xbb
0000            174   _I2C0FCN0       DATA 0xad
0000            175   _I2C0FCN1       DATA 0xab
0000            176   _I2C0FCT        DATA 0xf5
0000            177   _I2C0SLAD       DATA 0xbd
0000            178   _I2C0STAT       DATA 0xb9
0000            179   _IE             DATA 0xa8
0000            180   _IP             DATA 0xb8
0000            181   _IPH            DATA 0xf2
0000            182   _IT01CF         DATA 0xe4
0000            183   _LFO0CN         DATA 0xb1
0000            184   _P0             DATA 0x80
0000            185   _P0MASK         DATA 0xfe
0000            186   _P0MAT          DATA 0xfd
0000            187   _P0MDIN         DATA 0xf1
0000            188   _P0MDOUT        DATA 0xa4
0000            189   _P0SKIP         DATA 0xd4
0000            190   _P1             DATA 0x90
0000            191   _P1MASK         DATA 0xee
0000            192   _P1MAT          DATA 0xed
0000            193   _P1MDIN         DATA 0xf2
0000            194   _P1MDOUT        DATA 0xa5
0000            195   _P1SKIP         DATA 0xd5
0000            196   _P2             DATA 0xa0
0000            197   _P2MASK         DATA 0xfc
0000            198   _P2MAT          DATA 0xfb
0000            199   _P2MDIN         DATA 0xf3
0000            200   _P2MDOUT        DATA 0xa6
0000            201   _P2SKIP         DATA 0xcc
0000            202   _P3             DATA 0xb0
0000            203   _P3MDIN         DATA 0xf4
0000            204   _P3MDOUT        DATA 0x9c
0000            205   _PCA0CENT       DATA 0x9e
0000            206   _PCA0CLR        DATA 0x9c
0000            207   _PCA0CN0        DATA 0xd8
0000            208   _PCA0CPH0       DATA 0xfc
0000            209   _PCA0CPH1       DATA 0xea
0000            210   _PCA0CPH2       DATA 0xec
0000            211   _PCA0CPH3       DATA 0xf5
0000            212   _PCA0CPH4       DATA 0x85
0000            213   _PCA0CPH5       DATA 0xde
0000            214   _PCA0CPL0       DATA 0xfb
0000            215   _PCA0CPL1       DATA 0xe9
0000            216   _PCA0CPL2       DATA 0xeb
0000            217   _PCA0CPL3       DATA 0xf4
0000            218   _PCA0CPL4       DATA 0x84
0000            219   _PCA0CPL5       DATA 0xdd
0000            220   _PCA0CPM0       DATA 0xda
0000            221   _PCA0CPM1       DATA 0xdb
0000            222   _PCA0CPM2       DATA 0xdc
0000            223   _PCA0CPM3       DATA 0xae
0000            224   _PCA0CPM4       DATA 0xaf
0000            225   _PCA0CPM5       DATA 0xcc
0000            226   _PCA0H          DATA 0xfa
0000            227   _PCA0L          DATA 0xf9
0000            228   _PCA0MD         DATA 0xd9
0000            229   _PCA0POL        DATA 0x96
0000            230   _PCA0PWM        DATA 0xf7
0000            231   _PCON0          DATA 0x87
0000            232   _PCON1          DATA 0xcd
0000            233   _PFE0CN         DATA 0xc1
0000            234   _PRTDRV         DATA 0xf6
0000            235   _PSCTL          DATA 0x8f
0000            236   _PSTAT0         DATA 0xaa
0000            237   _PSW            DATA 0xd0
0000            238   _REF0CN         DATA 0xd1
0000            239   _REG0CN         DATA 0xc9
0000            240   _REVID          DATA 0xb6
0000            241   _RSTSRC         DATA 0xef
0000            242   _SBCON1         DATA 0x94
0000            243   _SBRLH1         DATA 0x96
0000            244   _SBRLL1         DATA 0x95
0000            245   _SBUF           DATA 0x99
0000            246   _SBUF0          DATA 0x99
0000            247   _SBUF1          DATA 0x92
0000            248   _SCON           DATA 0x98
0000            249   _SCON0          DATA 0x98
0000            250   _SCON1          DATA 0xc8
0000            251   _SFRPAGE        DATA 0xa7
0000            252   _SFRPGCN        DATA 0xbc
0000            253   _SFRSTACK       DATA 0xd7
0000            254   _SMB0ADM        DATA 0xd6
0000            255   _SMB0ADR        DATA 0xd7
0000            256   _SMB0CF         DATA 0xc1
0000            257   _SMB0CN0        DATA 0xc0
0000            258   _SMB0DAT        DATA 0xc2
0000            259   _SMB0FCN0       DATA 0xc3
0000            260   _SMB0FCN1       DATA 0xc4
0000            261   _SMB0FCT        DATA 0xef
0000            262   _SMB0RXLN       DATA 0xc5
0000            263   _SMB0TC         DATA 0xac
0000            264   _SMOD1          DATA 0x93
0000            265   _SP             DATA 0x81
0000            266   _SPI0CFG        DATA 0xa1
0000            267   _SPI0CKR        DATA 0xa2
0000            268   _SPI0CN0        DATA 0xf8
0000            269   _SPI0DAT        DATA 0xa3
0000            270   _SPI0FCN0       DATA 0x9a
0000            271   _SPI0FCN1       DATA 0x9b
0000            272   _SPI0FCT        DATA 0xf7
0000            273   _SPI0PCF        DATA 0xdf
0000            274   _TCON           DATA 0x88
0000            275   _TH0            DATA 0x8c
0000            276   _TH1            DATA 0x8d
0000            277   _TL0            DATA 0x8a
0000            278   _TL1            DATA 0x8b
0000            279   _TMOD           DATA 0x89
0000            280   _TMR2CN0        DATA 0xc8
0000            281   _TMR2CN1        DATA 0xfd
0000            282   _TMR2H          DATA 0xcf
0000            283   _TMR2L          DATA 0xce
0000            284   _TMR2RLH        DATA 0xcb
0000            285   _TMR2RLL        DATA 0xca
0000            286   _TMR3CN0        DATA 0x91
0000            287   _TMR3CN1        DATA 0xfe
0000            288   _TMR3H          DATA 0x95
0000            289   _TMR3L          DATA 0x94
0000            290   _TMR3RLH        DATA 0x93
0000            291   _TMR3RLL        DATA 0x92
0000            292   _TMR4CN0        DATA 0x98
0000            293   _TMR4CN1        DATA 0xff
0000            294   _TMR4H          DATA 0xa5
0000            295   _TMR4L          DATA 0xa4
0000            296   _TMR4RLH        DATA 0xa3
0000            297   _TMR4RLL        DATA 0xa2
0000            298   _TMR5CN0        DATA 0xc0
0000            299   _TMR5CN1        DATA 0xf1
0000            300   _TMR5H          DATA 0xd5
0000            301   _TMR5L          DATA 0xd4
0000            302   _TMR5RLH        DATA 0xd3
0000            303   _TMR5RLL        DATA 0xd2
0000            304   _UART0PCF       DATA 0xd9
0000            305   _UART1FCN0      DATA 0x9d
0000            306   _UART1FCN1      DATA 0xd8
0000            307   _UART1FCT       DATA 0xfa
0000            308   _UART1LIN       DATA 0x9e
0000            309   _UART1PCF       DATA 0xda
0000            310   _VDM0CN         DATA 0xff
0000            311   _WDTCN          DATA 0x97
0000            312   _XBR0           DATA 0xe1
0000            313   _XBR1           DATA 0xe2
0000            314   _XBR2           DATA 0xe3
0000            315   _XOSC0CN        DATA 0x86
0000            316   _DPTR           DATA 0x8382
0000            317   _TMR2RL         DATA 0xcbca
0000            318   _TMR3RL         DATA 0x9392
0000            319   _TMR4RL         DATA 0xa3a2
0000            320   _TMR5RL         DATA 0xd3d2
0000            321   _TMR0           DATA 0x8c8a
0000            322   _TMR1           DATA 0x8d8b
0000            323   _TMR2           DATA 0xcfce
0000            324   _TMR3           DATA 0x9594
0000            325   _TMR4           DATA 0xa5a4
0000            326   _TMR5           DATA 0xd5d4
0000            327   _SBRL1          DATA 0x9695
0000            328   _PCA0           DATA 0xfaf9
0000            329   _PCA0CP0        DATA 0xfcfb
0000            330   _PCA0CP1        DATA 0xeae9
0000            331   _PCA0CP2        DATA 0xeceb
0000            332   _PCA0CP3        DATA 0xf5f4
0000            333   _PCA0CP4        DATA 0x8584
0000            334   _PCA0CP5        DATA 0xdedd
0000            335   _ADC0ASA        DATA 0xb6b5
0000            336   _ADC0GT         DATA 0xc4c3
0000            337   _ADC0           DATA 0xbebd
0000            338   _ADC0LT         DATA 0xc6c5
0000            339   _DAC0           DATA 0x8584
0000            340   _DAC1           DATA 0x8a89
0000            341   _DAC2           DATA 0x8c8b
0000            342   _DAC3           DATA 0x8e8d
0000            343   ;--------------------------------------------------------
0000            344   ; special function bits
0000            345   ;--------------------------------------------------------
0000            346   _ACC_0          BIT 0xe0
0000            347   _ACC_1          BIT 0xe1
0000            348   _ACC_2          BIT 0xe2
0000            349   _ACC_3          BIT 0xe3
0000            350   _ACC_4          BIT 0xe4
0000            351   _ACC_5          BIT 0xe5
0000            352   _ACC_6          BIT 0xe6
0000            353   _ACC_7          BIT 0xe7
0000            354   _TEMPE          BIT 0xe8
0000            355   _ADGN0          BIT 0xe9
0000            356   _ADGN1          BIT 0xea
0000            357   _ADWINT         BIT 0xeb
0000            358   _ADBUSY         BIT 0xec
0000            359   _ADINT          BIT 0xed
0000            360   _IPOEN          BIT 0xee
0000            361   _ADEN           BIT 0xef
0000            362   _B_0            BIT 0xf0
0000            363   _B_1            BIT 0xf1
0000            364   _B_2            BIT 0xf2
0000            365   _B_3            BIT 0xf3
0000            366   _B_4            BIT 0xf4
0000            367   _B_5            BIT 0xf5
0000            368   _B_6            BIT 0xf6
0000            369   _B_7            BIT 0xf7
0000            370   _C0FIF          BIT 0xe8
0000            371   _C0RIF          BIT 0xe9
0000            372   _C1FIF          BIT 0xea
0000            373   _C1RIF          BIT 0xeb
0000            374   _C2FIF          BIT 0xec
0000            375   _C2RIF          BIT 0xed
0000            376   _C3FIF          BIT 0xee
0000            377   _C3RIF          BIT 0xef
0000            378   _D1SRC0         BIT 0x88
0000            379   _D1SRC1         BIT 0x89
0000            380   _D1AMEN         BIT 0x8a
0000            381   _D01REFSL       BIT 0x8b
0000            382   _D3SRC0         BIT 0x8c
0000            383   _D3SRC1         BIT 0x8d
0000            384   _D3AMEN         BIT 0x8e
0000            385   _D23REFSL       BIT 0x8f
0000            386   _D0UDIS         BIT 0x98
0000            387   _D1UDIS         BIT 0x99
0000            388   _D2UDIS         BIT 0x9a
0000            389   _D3UDIS         BIT 0x9b
0000            390   _EX0            BIT 0xa8
0000            391   _ET0            BIT 0xa9
0000            392   _EX1            BIT 0xaa
0000            393   _ET1            BIT 0xab
0000            394   _ES0            BIT 0xac
0000            395   _ET2            BIT 0xad
0000            396   _ESPI0          BIT 0xae
0000            397   _EA             BIT 0xaf
0000            398   _PX0            BIT 0xb8
0000            399   _PT0            BIT 0xb9
0000            400   _PX1            BIT 0xba
0000            401   _PT1            BIT 0xbb
0000            402   _PS0            BIT 0xbc
0000            403   _PT2            BIT 0xbd
0000            404   _PSPI0          BIT 0xbe
0000            405   _P0_0           BIT 0x80
0000            406   _P0_1           BIT 0x81
0000            407   _P0_2           BIT 0x82
0000            408   _P0_3           BIT 0x83
0000            409   _P0_4           BIT 0x84
0000            410   _P0_5           BIT 0x85
0000            411   _P0_6           BIT 0x86
0000            412   _P0_7           BIT 0x87
0000            413   _P1_0           BIT 0x90
0000            414   _P1_1           BIT 0x91
0000            415   _P1_2           BIT 0x92
0000            416   _P1_3           BIT 0x93
0000            417   _P1_4           BIT 0x94
0000            418   _P1_5           BIT 0x95
0000            419   _P1_6           BIT 0x96
0000            420   _P1_7           BIT 0x97
0000            421   _P2_0           BIT 0xa0
0000            422   _P2_1           BIT 0xa1
0000            423   _P2_2           BIT 0xa2
0000            424   _P2_3           BIT 0xa3
0000            425   _P2_4           BIT 0xa4
0000            426   _P2_5           BIT 0xa5
0000            427   _P2_6           BIT 0xa6
0000            428   _P3_0           BIT 0xb0
0000            429   _P3_1           BIT 0xb1
0000            430   _P3_2           BIT 0xb2
0000            431   _P3_3           BIT 0xb3
0000            432   _P3_4           BIT 0xb4
0000            433   _P3_7           BIT 0xb7
0000            434   _CCF0           BIT 0xd8
0000            435   _CCF1           BIT 0xd9
0000            436   _CCF2           BIT 0xda
0000            437   _CCF3           BIT 0xdb
0000            438   _CCF4           BIT 0xdc
0000            439   _CCF5           BIT 0xdd
0000            440   _CR             BIT 0xde
0000            441   _CF             BIT 0xdf
0000            442   _PARITY         BIT 0xd0
0000            443   _F1             BIT 0xd1
0000            444   _OV             BIT 0xd2
0000            445   _RS0            BIT 0xd3
0000            446   _RS1            BIT 0xd4
0000            447   _F0             BIT 0xd5
0000            448   _AC             BIT 0xd6
0000            449   _CY             BIT 0xd7
0000            450   _RI             BIT 0x98
0000            451   _TI             BIT 0x99
0000            452   _RB8            BIT 0x9a
0000            453   _TB8            BIT 0x9b
0000            454   _REN            BIT 0x9c
0000            455   _CE             BIT 0x9d
0000            456   _SMODE          BIT 0x9e
0000            457   _RI1            BIT 0xc8
0000            458   _TI1            BIT 0xc9
0000            459   _RBX1           BIT 0xca
0000            460   _TBX1           BIT 0xcb
0000            461   _REN1           BIT 0xcc
0000            462   _PERR1          BIT 0xcd
0000            463   _OVR1           BIT 0xce
0000            464   _SI             BIT 0xc0
0000            465   _ACK            BIT 0xc1
0000            466   _ARBLOST        BIT 0xc2
0000            467   _ACKRQ          BIT 0xc3
0000            468   _STO            BIT 0xc4
0000            469   _STA            BIT 0xc5
0000            470   _TXMODE         BIT 0xc6
0000            471   _MASTER         BIT 0xc7
0000            472   _SPIEN          BIT 0xf8
0000            473   _TXNF           BIT 0xf9
0000            474   _NSSMD0         BIT 0xfa
0000            475   _NSSMD1         BIT 0xfb
0000            476   _RXOVRN         BIT 0xfc
0000            477   _MODF           BIT 0xfd
0000            478   _WCOL           BIT 0xfe
0000            479   _SPIF           BIT 0xff
0000            480   _IT0            BIT 0x88
0000            481   _IE0            BIT 0x89
0000            482   _IT1            BIT 0x8a
0000            483   _IE1            BIT 0x8b
0000            484   _TR0            BIT 0x8c
0000            485   _TF0            BIT 0x8d
0000            486   _TR1            BIT 0x8e
0000            487   _TF1            BIT 0x8f
0000            488   _T2XCLK0        BIT 0xc8
0000            489   _T2XCLK1        BIT 0xc9
0000            490   _TR2            BIT 0xca
0000            491   _T2SPLIT        BIT 0xcb
0000            492   _TF2CEN         BIT 0xcc
0000            493   _TF2LEN         BIT 0xcd
0000            494   _TF2L           BIT 0xce
0000            495   _TF2H           BIT 0xcf
0000            496   _T4XCLK0        BIT 0x98
0000            497   _T4XCLK1        BIT 0x99
0000            498   _TR4            BIT 0x9a
0000            499   _T4SPLIT        BIT 0x9b
0000            500   _TF4CEN         BIT 0x9c
0000            501   _TF4LEN         BIT 0x9d
0000            502   _TF4L           BIT 0x9e
0000            503   _TF4H           BIT 0x9f
0000            504   _T5XCLK0        BIT 0xc0
0000            505   _T5XCLK1        BIT 0xc1
0000            506   _TR5            BIT 0xc2
0000            507   _T5SPLIT        BIT 0xc3
0000            508   _TF5CEN         BIT 0xc4
0000            509   _TF5LEN         BIT 0xc5
0000            510   _TF5L           BIT 0xc6
0000            511   _TF5H           BIT 0xc7
0000            512   _RIE            BIT 0xd8
0000            513   _RXTO0          BIT 0xd9
0000            514   _RXTO1          BIT 0xda
0000            515   _RFRQ           BIT 0xdb
0000            516   _TIE            BIT 0xdc
0000            517   _TXHOLD         BIT 0xdd
0000            518   _TXNF1          BIT 0xde
0000            519   _TFRQ           BIT 0xdf
0000            520   ;--------------------------------------------------------
0000            521   ; overlayable register banks
0000            522   ;--------------------------------------------------------
0000            523            rbank0 segment data overlay
0000            524   ;--------------------------------------------------------
0000            525   ; internal ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_DSEG
0000            528   _pwm_count:
0000            529            ds 1
0001            530   _pwm_count1:
0001            531            ds 1
0002            532   _pwm_count2:
0002            533            ds 1
0003            534   _pwm_count3:
0003            535            ds 1
0004            536   _pwmSig1:
0004            537            ds 2
0006            538   _pwmSig2:
0006            539            ds 2
0008            540   _pwmSig3:
0008            541            ds 2
000A            542   _pwmSig4:
000A            543            ds 2
000C            544   _pwmSig5:
000C            545            ds 2
000E            546   _pwmSig6:
000E            547            ds 2
0010            548   _cartMoveF:
0010            549            ds 2
0012            550   _cartMoveB:
0012            551            ds 2
0014            552   _flag:
0014            553            ds 2
0016            554   _claw_flag:
0016            555            ds 2
0018            556   _stop:
0018            557            ds 8
0020            558   _forward:
0020            559            ds 8
0028            560   _backward:
0028            561            ds 8
0030            562   _left:
0030            563            ds 8
0038            564   _right:
0038            565            ds 8
0040            566   _command:
0040            567            ds 8
0048            568   _x:
0048            569            ds 2
004A            570   _main_sloc0_1_0:
004A            571            ds 4
004E            572   ;--------------------------------------------------------
004E            573   ; overlayable items in internal ram 
004E            574   ;--------------------------------------------------------
0000            575            rseg    R_OSEG
0000            576            rseg    R_OSEG
0000            577            rseg    R_OSEG
0000            578   _InitPinADC_PARM_2:
0000            579            ds 1
0001            580            rseg    R_OSEG
0001            581   _arrayEqual_PARM_2:
0001            582            ds 2
0003            583   _arrayEqual_PARM_3:
0003            584            ds 3
0006            585   _arrayEqual_arr1_1_86:
0006            586            ds 3
0009            587   ;--------------------------------------------------------
0009            588   ; indirectly addressable internal ram data
0009            589   ;--------------------------------------------------------
0000            590            rseg R_ISEG
0000            591   ;--------------------------------------------------------
0000            592   ; absolute internal ram data
0000            593   ;--------------------------------------------------------
0000            594            DSEG
0000            595   ;--------------------------------------------------------
0000            596   ; bit data
0000            597   ;--------------------------------------------------------
0000            598            rseg R_BSEG
0000            599   _Timer2_ISR_sloc0_1_0:
0000            600            DBIT    1
0001            601   ;--------------------------------------------------------
0001            602   ; paged external ram data
0001            603   ;--------------------------------------------------------
0000            604            rseg R_PSEG
0000            605   ;--------------------------------------------------------
0000            606   ; external ram data
0000            607   ;--------------------------------------------------------
0000            608            rseg R_XSEG
0000            609   ;--------------------------------------------------------
0000            610   ; absolute external ram data
0000            611   ;--------------------------------------------------------
0000            612            XSEG
0000            613   ;--------------------------------------------------------
0000            614   ; external initialized ram data
0000            615   ;--------------------------------------------------------
0000            616            rseg R_IXSEG
0000            617            rseg R_HOME
0000            618            rseg R_GSINIT
0000            619            rseg R_CSEG
0000            620   ;--------------------------------------------------------
0000            621   ; Reset entry point and interrupt vectors
0000            622   ;--------------------------------------------------------
0000            623            CSEG at 0x0000
0000 020100     624            ljmp    _crt0
002B            625            CSEG at 0x002b
002B 020100     626            ljmp    _Timer2_ISR
002E            627   ;--------------------------------------------------------
002E            628   ; global & static initialisations
002E            629   ;--------------------------------------------------------
0000            630            rseg R_HOME
0000            631            rseg R_GSINIT
0000            632            rseg R_GSINIT
0000            633   ;--------------------------------------------------------
0000            634   ; data variables initialization
0000            635   ;--------------------------------------------------------
0000            636            rseg R_DINIT
0000            637   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:60: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 75C800     638            mov     _pwm_count,#0x00
0003            639   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:61: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 758800     640            mov     _pwm_count1,#0x00
0006            641   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:62: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 754800     642            mov     _pwm_count2,#0x00
0009            643   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:63: volatile unsigned char pwm_count3 = 0; //
0009 750800     644            mov     _pwm_count3,#0x00
000C            645   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:78: volatile int flag = 0;
000C E4         646            clr     a
000D F5C8       647            mov     _flag,a
000F F5C9       648            mov     (_flag + 1),a
0011            649   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:79: volatile int claw_flag = 0;
0011 E4         650            clr     a
0012 F588       651            mov     _claw_flag,a
0014 F589       652            mov     (_claw_flag + 1),a
0016            653   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:80: int stop[]={0,0,0,0};
0016 754800     654            mov     _stop,#0x00
0019 754900     655            mov     (_stop + 1),#0x00
001C 754A00     656            mov     (_stop + 0x0002),#0x00
001F 754B00     657            mov     ((_stop + 0x0002) + 1),#0x00
0022 754C00     658            mov     (_stop + 0x0004),#0x00
0025 754D00     659            mov     ((_stop + 0x0004) + 1),#0x00
0028 754E00     660            mov     (_stop + 0x0006),#0x00
002B 754F00     661            mov     ((_stop + 0x0006) + 1),#0x00
002E            662   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:81: int forward[]={1,1,1,1};
002E 750801     663            mov     _forward,#0x01
0031 750900     664            mov     (_forward + 1),#0x00
0034 750A01     665            mov     (_forward + 0x0002),#0x01
0037 750B00     666            mov     ((_forward + 0x0002) + 1),#0x00
003A 750C01     667            mov     (_forward + 0x0004),#0x01
003D 750D00     668            mov     ((_forward + 0x0004) + 1),#0x00
0040 750E01     669            mov     (_forward + 0x0006),#0x01
0043 750F00     670            mov     ((_forward + 0x0006) + 1),#0x00
0046            671   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:82: int backward[]={1,0,1,1};
0046 75C801     672            mov     _backward,#0x01
0049 75C900     673            mov     (_backward + 1),#0x00
004C 75CA00     674            mov     (_backward + 0x0002),#0x00
004F 75CB00     675            mov     ((_backward + 0x0002) + 1),#0x00
0052 75CC01     676            mov     (_backward + 0x0004),#0x01
0055 75CD00     677            mov     ((_backward + 0x0004) + 1),#0x00
0058 75CE01     678            mov     (_backward + 0x0006),#0x01
005B 75CF00     679            mov     ((_backward + 0x0006) + 1),#0x00
005E            680   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:83: int left[]={1,0,0,1};
005E 758801     681            mov     _left,#0x01
0061 758900     682            mov     (_left + 1),#0x00
0064 758A00     683            mov     (_left + 0x0002),#0x00
0067 758B00     684            mov     ((_left + 0x0002) + 1),#0x00
006A 758C00     685            mov     (_left + 0x0004),#0x00
006D 758D00     686            mov     ((_left + 0x0004) + 1),#0x00
0070 758E01     687            mov     (_left + 0x0006),#0x01
0073 758F00     688            mov     ((_left + 0x0006) + 1),#0x00
0076            689   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:84: int right[]={1,0,1,0};
0076 754801     690            mov     _right,#0x01
0079 754900     691            mov     (_right + 1),#0x00
007C 754A00     692            mov     (_right + 0x0002),#0x00
007F 754B00     693            mov     ((_right + 0x0002) + 1),#0x00
0082 754C01     694            mov     (_right + 0x0004),#0x01
0085 754D00     695            mov     ((_right + 0x0004) + 1),#0x00
0088 754E00     696            mov     (_right + 0x0006),#0x00
008B 754F00     697            mov     ((_right + 0x0006) + 1),#0x00
008E            698   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:86: int command[4] = {0,0,0,0};
008E 750800     699            mov     _command,#0x00
0091 750900     700            mov     (_command + 1),#0x00
0094 750A00     701            mov     (_command + 0x0002),#0x00
0097 750B00     702            mov     ((_command + 0x0002) + 1),#0x00
009A 750C00     703            mov     (_command + 0x0004),#0x00
009D 750D00     704            mov     ((_command + 0x0004) + 1),#0x00
00A0 750E00     705            mov     (_command + 0x0006),#0x00
00A3 750F00     706            mov     ((_command + 0x0006) + 1),#0x00
00A6            707   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:88: volatile unsigned int x = 2;
00A6 75C802     708            mov     _x,#0x02
00A9 E4         709            clr     a
00AA F5C9       710            mov     (_x + 1),a
00AC            711            ; The linker places a 'ret' at the end of segment R_DINIT.
00AC            712   ;--------------------------------------------------------
00AC            713   ; code
00AC            714   ;--------------------------------------------------------
0000            715            rseg R_CSEG
0000            716   ;------------------------------------------------------------
0000            717   ;Allocation info for local variables in function '_c51_external_startup'
0000            718   ;------------------------------------------------------------
0000            719   ;------------------------------------------------------------
0000            720   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:90: char _c51_external_startup(void)
0000            721   ;        -----------------------------------------
0000            722   ;         function _c51_external_startup
0000            723   ;        -----------------------------------------
0000            724   __c51_external_startup:
0000            725            using   0
0000            726   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:93: SFRPAGE = 0x00;
0000 75A700     727            mov     _SFRPAGE,#0x00
0003            728   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:94: WDTCN = 0xDE; //First key
0003 7597DE     729            mov     _WDTCN,#0xDE
0006            730   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:95: WDTCN = 0xAD; //Second key
0006 7597AD     731            mov     _WDTCN,#0xAD
0009            732   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:97: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     733            mov     _VDM0CN,#0x80
000C            734   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:98: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     735            mov     _RSTSRC,#0x06
000F            736   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:105: SFRPAGE = 0x10;
000F 75A710     737            mov     _SFRPAGE,#0x10
0012            738   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:106: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     739            mov     _PFE0CN,#0x20
0015            740   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:107: SFRPAGE = 0x00;
0015 75A700     741            mov     _SFRPAGE,#0x00
0018            742   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:128: CLKSEL = 0x00;
0018 75A900     743            mov     _CLKSEL,#0x00
001B            744   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:129: CLKSEL = 0x00;
001B 75A900     745            mov     _CLKSEL,#0x00
001E            746   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:130: while ((CLKSEL & 0x80) == 0);
001E            747   L002001?:
001E E5A9       748            mov     a,_CLKSEL
0020 30E7E8     749            jnb     acc.7,L002001?
0023            750   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:131: CLKSEL = 0x03;
0023 75A903     751            mov     _CLKSEL,#0x03
0026            752   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:132: CLKSEL = 0x03;
0026 75A903     753            mov     _CLKSEL,#0x03
0029            754   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:133: while ((CLKSEL & 0x80) == 0);
0029            755   L002004?:
0029 E5A9       756            mov     a,_CLKSEL
002B 30E768     757            jnb     acc.7,L002004?
002E            758   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:138: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     759            orl     _P0MDOUT,#0x10
0031            760   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:139: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     761            mov     _XBR0,#0x01
0034            762   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:140: XBR1 = 0X00;
0034 75E200     763            mov     _XBR1,#0x00
0037            764   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:141: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     765            mov     _XBR2,#0x40
003A            766   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:147: SCON0 = 0x10;
003A 759810     767            mov     _SCON0,#0x10
003D            768   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:148: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     769            mov     _TH1,#0xE6
0040            770   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:149: TL1 = TH1;      // Init Timer1
0040 858D8B     771            mov     _TL1,_TH1
0043            772   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:150: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     773            anl     _TMOD,#0x0F
0046            774   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:151: TMOD |= 0x20;
0046 438920     775            orl     _TMOD,#0x20
0049            776   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:152: TR1 = 1; // START Timer1
0049 D28E       777            setb    _TR1
004B            778   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:153: TI = 1;  // Indicate TX0 ready
004B D299       779            setb    _TI
004D            780   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:156: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     781            mov     _TMR2CN0,#0x00
0050            782   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:157: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     783            orl     _CKCON0,#0x10
0053            784   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:158: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     785            mov     _TMR2RL,#0xE0
0056 75CBE3     786            mov     (_TMR2RL >> 8),#0xE3
0059            787   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:159: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     788            mov     _TMR2,#0xFF
005C 75CFFF     789            mov     (_TMR2 >> 8),#0xFF
005F            790   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:160: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       791            setb    _ET2
0061            792   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:161: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       793            setb    _TR2
0063            794   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:179: EA = 1; // Enable interrupts
0063 D2AF       795            setb    _EA
0065            796   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:182: return 0;
0065 758200     797            mov     dpl,#0x00
0068 22         798            ret
0069            799   ;------------------------------------------------------------
0069            800   ;Allocation info for local variables in function 'Timer3us'
0069            801   ;------------------------------------------------------------
0069            802   ;us                        Allocated to registers r2 r3 
0069            803   ;i                         Allocated to registers r4 r5 
0069            804   ;------------------------------------------------------------
0069            805   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:184: void Timer3us(unsigned int us)
0069            806   ;        -----------------------------------------
0069            807   ;         function Timer3us
0069            808   ;        -----------------------------------------
0069            809   _Timer3us:
0069 AA82       810            mov     r2,dpl
006B AB83       811            mov     r3,dph
006D            812   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:189: CKCON0|=0b_0100_0000;
006D 438E40     813            orl     _CKCON0,#0x40
0070            814   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:191: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     815            mov     _TMR3RL,#0xB8
0073 7593FF     816            mov     (_TMR3RL >> 8),#0xFF
0076            817   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:192: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     818            mov     _TMR3,_TMR3RL
0079 859395     819            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            820   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:194: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     821            mov     _TMR3CN0,#0x04
007F            822   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:195: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       823            mov     r4,#0x00
0081 7D00       824            mov     r5,#0x00
0083            825   L003004?:
0083 C3         826            clr     c
0084 EC         827            mov     a,r4
0085 9A         828            subb    a,r2
0086 ED         829            mov     a,r5
0087 9B         830            subb    a,r3
0088 5001       831            jnc     L003007?
008A            832   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:197: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            833   L003001?:
008A E591       834            mov     a,_TMR3CN0
008C 30E7A8     835            jnb     acc.7,L003001?
008F            836   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:198: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     837            anl     _TMR3CN0,#0x7F
0092            838   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:195: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         839            inc     r4
0093 BC0028     840            cjne    r4,#0x00,L003004?
0096 0D         841            inc     r5
0097 8001       842            sjmp    L003004?
0099            843   L003007?:
0099            844   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:200: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     845            mov     _TMR3CN0,#0x00
009C 22         846            ret
009D            847   ;------------------------------------------------------------
009D            848   ;Allocation info for local variables in function 'waitms'
009D            849   ;------------------------------------------------------------
009D            850   ;ms                        Allocated to registers r2 r3 
009D            851   ;j                         Allocated to registers r4 r5 
009D            852   ;k                         Allocated to registers r6 
009D            853   ;------------------------------------------------------------
009D            854   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:202: void waitms (unsigned int ms)
009D            855   ;        -----------------------------------------
009D            856   ;         function waitms
009D            857   ;        -----------------------------------------
009D            858   _waitms:
009D AA82       859            mov     r2,dpl
009F AB83       860            mov     r3,dph
00A1            861   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:206: for(j=0; j<ms; j++)
00A1 7C00       862            mov     r4,#0x00
00A3 7D00       863            mov     r5,#0x00
00A5            864   L004005?:
00A5 C3         865            clr     c
00A6 EC         866            mov     a,r4
00A7 9A         867            subb    a,r2
00A8 ED         868            mov     a,r5
00A9 9B         869            subb    a,r3
00AA 5001       870            jnc     L004009?
00AC            871   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:207: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       872            mov     r6,#0x00
00AE            873   L004001?:
00AE BE04A8     874            cjne    r6,#0x04,L004018?
00B1            875   L004018?:
00B1 5001       876            jnc     L004007?
00B3 9000FA     877            mov     dptr,#0x00FA
00B6 C002       878            push    ar2
00B8 C003       879            push    ar3
00BA C004       880            push    ar4
00BC C005       881            push    ar5
00BE C006       882            push    ar6
00C0 120100     883            lcall   _Timer3us
00C3 D006       884            pop     ar6
00C5 D005       885            pop     ar5
00C7 D004       886            pop     ar4
00C9 D003       887            pop     ar3
00CB D002       888            pop     ar2
00CD 0E         889            inc     r6
00CE 8001       890            sjmp    L004001?
00D0            891   L004007?:
00D0            892   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:206: for(j=0; j<ms; j++)
00D0 0C         893            inc     r4
00D1 BC00E8     894            cjne    r4,#0x00,L004005?
00D4 0D         895            inc     r5
00D5 8001       896            sjmp    L004005?
00D7            897   L004009?:
00D7 22         898            ret
00D8            899   ;------------------------------------------------------------
00D8            900   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            901   ;------------------------------------------------------------
00D8            902   ;pin                       Allocated to registers 
00D8            903   ;------------------------------------------------------------
00D8            904   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:211: unsigned int ADC_at_Pin(unsigned char pin)
00D8            905   ;        -----------------------------------------
00D8            906   ;         function ADC_at_Pin
00D8            907   ;        -----------------------------------------
00D8            908   _ADC_at_Pin:
00D8 8582BB     909            mov     _ADC0MX,dpl
00DB            910   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:214: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       911            setb    _ADBUSY
00DD            912   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:215: while (ADBUSY); // Wait for dummy conversion to finish
00DD            913   L005001?:
00DD 20EC28     914            jb      _ADBUSY,L005001?
00E0            915   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:216: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       916            setb    _ADBUSY
00E2            917   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:217: while (ADBUSY); // Wait for conversion to complete
00E2            918   L005004?:
00E2 20EC68     919            jb      _ADBUSY,L005004?
00E5            920   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:218: return (ADC0);
00E5 85BD82     921            mov     dpl,_ADC0
00E8 85BE83     922            mov     dph,(_ADC0 >> 8)
00EB 22         923            ret
00EC            924   ;------------------------------------------------------------
00EC            925   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            926   ;------------------------------------------------------------
00EC            927   ;------------------------------------------------------------
00EC            928   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:222: void Timer2_ISR(void) interrupt 5
00EC            929   ;        -----------------------------------------
00EC            930   ;         function Timer2_ISR
00EC            931   ;        -----------------------------------------
00EC            932   _Timer2_ISR:
00EC C0E0       933            push    acc
00EE C002       934            push    ar2
00F0 C003       935            push    ar3
00F2 C0D0       936            push    psw
00F4 75D000     937            mov     psw,#0x00
00F7            938   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:224: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       939            clr     _TF2H
00F9            940   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:226: pwm_count++;
00F9 05C8       941            inc     _pwm_count
00FB            942   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:227: if (pwm_count>100)
00FB E5C8       943            mov     a,_pwm_count
00FD 249B       944            add     a,#0xff - 0x64
00FF 5001       945            jnc     L006002?
0101            946   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:228: pwm_count = 0;
0101 75C800     947            mov     _pwm_count,#0x00
0104            948   L006002?:
0104            949   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:231: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AAC8       950            mov     r2,_pwm_count
0106 7B00       951            mov     r3,#0x00
0108 C3         952            clr     c
0109 E5C8       953            mov     a,_pwmSig1
010B 9A         954            subb    a,r2
010C E5C9       955            mov     a,(_pwmSig1 + 1)
010E 9B         956            subb    a,r3
010F 9268       957            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         958            cpl     c
0112 9294       959            mov     _P1_4,c
0114            960   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:232: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AAC8       961            mov     r2,_pwm_count
0116 7B00       962            mov     r3,#0x00
0118 C3         963            clr     c
0119 E588       964            mov     a,_pwmSig2
011B 9A         965            subb    a,r2
011C E589       966            mov     a,(_pwmSig2 + 1)
011E 9B         967            subb    a,r3
011F 9268       968            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         969            cpl     c
0122 9295       970            mov     _P1_5,c
0124            971   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:234: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AAC8       972            mov     r2,_pwm_count
0126 7B00       973            mov     r3,#0x00
0128 C3         974            clr     c
0129 E548       975            mov     a,_pwmSig3
012B 9A         976            subb    a,r2
012C E549       977            mov     a,(_pwmSig3 + 1)
012E 9B         978            subb    a,r3
012F 9268       979            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         980            cpl     c
0132 9292       981            mov     _P1_2,c
0134            982   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:235: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AAC8       983            mov     r2,_pwm_count
0136 7B00       984            mov     r3,#0x00
0138 C3         985            clr     c
0139 E508       986            mov     a,_pwmSig4
013B 9A         987            subb    a,r2
013C E509       988            mov     a,(_pwmSig4 + 1)
013E 9B         989            subb    a,r3
013F 9268       990            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         991            cpl     c
0142 9293       992            mov     _P1_3,c
0144            993   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:237: OUT0=pwm_count>80?0:1;
0144 E5C8       994            mov     a,_pwm_count
0146 24AF       995            add     a,#0xff - 0x50
0148 9268       996            mov  _Timer2_ISR_sloc0_1_0,c
014A B3         997            cpl     c
014B 92A0       998            mov     _P2_0,c
014D D0D0       999            pop     psw
014F D003      1000            pop     ar3
0151 D002      1001            pop     ar2
0153 D0E0      1002            pop     acc
0155 32        1003            reti
0156           1004   ;        eliminated unneeded push/pop dpl
0156           1005   ;        eliminated unneeded push/pop dph
0156           1006   ;        eliminated unneeded push/pop b
0156           1007   ;------------------------------------------------------------
0156           1008   ;Allocation info for local variables in function 'InitADC'
0156           1009   ;------------------------------------------------------------
0156           1010   ;------------------------------------------------------------
0156           1011   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:267: void InitADC(void)
0156           1012   ;        -----------------------------------------
0156           1013   ;         function InitADC
0156           1014   ;        -----------------------------------------
0156           1015   _InitADC:
0156           1016   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:269: SFRPAGE = 0x00;
0156 75A700    1017            mov     _SFRPAGE,#0x00
0159           1018   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:270: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0159 75B280    1019            mov     _ADC0CN1,#0x80
015C           1020   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:271: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
015C 75BCF8    1021            mov     _ADC0CF0,#0xF8
015F           1022   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:272: ADC0CF1 = 0b_0_0_011110; // Same as default for now
015F 75B91E    1023            mov     _ADC0CF1,#0x1E
0162           1024   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:273: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0162 75E800    1025            mov     _ADC0CN0,#0x00
0165           1026   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:274: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
0165 75DF3F    1027            mov     _ADC0CF2,#0x3F
0168           1028   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:275: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0168 75B300    1029            mov     _ADC0CN2,#0x00
016B           1030   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:276: ADEN = 1; // Enable ADC
016B D2EF      1031            setb    _ADEN
016D 22        1032            ret
016E           1033   ;------------------------------------------------------------
016E           1034   ;Allocation info for local variables in function 'TIMER0_Init'
016E           1035   ;------------------------------------------------------------
016E           1036   ;------------------------------------------------------------
016E           1037   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:278: void TIMER0_Init(void)
016E           1038   ;        -----------------------------------------
016E           1039   ;         function TIMER0_Init
016E           1040   ;        -----------------------------------------
016E           1041   _TIMER0_Init:
016E           1042   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:280: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
016E 5389F0    1043            anl     _TMOD,#0xF0
0171           1044   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:281: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0171 438901    1045            orl     _TMOD,#0x01
0174           1046   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:282: TR0 = 0; // Stop Timer/Counter 0
0174 C28C      1047            clr     _TR0
0176 22        1048            ret
0177           1049   ;------------------------------------------------------------
0177           1050   ;Allocation info for local variables in function 'Volts_at_Pin'
0177           1051   ;------------------------------------------------------------
0177           1052   ;pin                       Allocated to registers r2 
0177           1053   ;------------------------------------------------------------
0177           1054   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:287: float Volts_at_Pin(unsigned char pin)
0177           1055   ;        -----------------------------------------
0177           1056   ;         function Volts_at_Pin
0177           1057   ;        -----------------------------------------
0177           1058   _Volts_at_Pin:
0177           1059   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:289: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111); 
0177 120100    1060            lcall   _ADC_at_Pin
017A 120100    1061            lcall   ___uint2fs
017D AA82      1062            mov     r2,dpl
017F AB83      1063            mov     r3,dph
0181 ACF0      1064            mov     r4,b
0183 FD        1065            mov     r5,a
0184 C002      1066            push    ar2
0186 C003      1067            push    ar3
0188 C004      1068            push    ar4
018A C005      1069            push    ar5
018C 906C8B    1070            mov     dptr,#0x6C8B
018F 75F053    1071            mov     b,#0x53
0192 7440      1072            mov     a,#0x40
0194 120100    1073            lcall   ___fsmul
0197 AA82      1074            mov     r2,dpl
0199 AB83      1075            mov     r3,dph
019B ACF0      1076            mov     r4,b
019D FD        1077            mov     r5,a
019E E581      1078            mov     a,sp
01A0 24FC      1079            add     a,#0xfc
01A2 F581      1080            mov     sp,a
01A4 E4        1081            clr     a
01A5 C0E0      1082            push    acc
01A7 74FC      1083            mov     a,#0xFC
01A9 C0E0      1084            push    acc
01AB 747F      1085            mov     a,#0x7F
01AD C0E0      1086            push    acc
01AF 7446      1087            mov     a,#0x46
01B1 C0E0      1088            push    acc
01B3 8A82      1089            mov     dpl,r2
01B5 8B83      1090            mov     dph,r3
01B7 8CF0      1091            mov     b,r4
01B9 ED        1092            mov     a,r5
01BA 120100    1093            lcall   ___fsdiv
01BD AA82      1094            mov     r2,dpl
01BF AB83      1095            mov     r3,dph
01C1 ACF0      1096            mov     r4,b
01C3 FD        1097            mov     r5,a
01C4 E581      1098            mov     a,sp
01C6 24FC      1099            add     a,#0xfc
01C8 F581      1100            mov     sp,a
01CA 8A82      1101            mov     dpl,r2
01CC 8B83      1102            mov     dph,r3
01CE 8CF0      1103            mov     b,r4
01D0 ED        1104            mov     a,r5
01D1 22        1105            ret
01D2           1106   ;------------------------------------------------------------
01D2           1107   ;Allocation info for local variables in function 'InitPinADC'
01D2           1108   ;------------------------------------------------------------
01D2           1109   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01D2           1110   ;portno                    Allocated to registers r2 
01D2           1111   ;mask                      Allocated to registers r3 
01D2           1112   ;------------------------------------------------------------
01D2           1113   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:291: void InitPinADC(unsigned char portno, unsigned char pinno)
01D2           1114   ;        -----------------------------------------
01D2           1115   ;         function InitPinADC
01D2           1116   ;        -----------------------------------------
01D2           1117   _InitPinADC:
01D2 AA82      1118            mov     r2,dpl
01D4           1119   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:295: mask = 1 << pinno;
01D4 85F0F0    1120            mov     b,_InitPinADC_PARM_2
01D7 05F0      1121            inc     b
01D9 7401      1122            mov     a,#0x01
01DB 8001      1123            sjmp    L010013?
01DD           1124   L010011?:
01DD 25E0      1125            add     a,acc
01DF           1126   L010013?:
01DF D5F0A8    1127            djnz    b,L010011?
01E2 FB        1128            mov     r3,a
01E3           1129   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:297: SFRPAGE = 0x20;
01E3 75A720    1130            mov     _SFRPAGE,#0x20
01E6           1131   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:298: switch (portno)
01E6 BA00E8    1132            cjne    r2,#0x00,L010014?
01E9 8001      1133            sjmp    L010001?
01EB           1134   L010014?:
01EB BA0168    1135            cjne    r2,#0x01,L010015?
01EE 8001      1136            sjmp    L010002?
01F0           1137   L010015?:
01F0           1138   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:300: case 0:
01F0 BA02E8    1139            cjne    r2,#0x02,L010005?
01F3 8001      1140            sjmp    L010003?
01F5           1141   L010001?:
01F5           1142   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:301: P0MDIN &= (~mask); // Set pin as analog input
01F5 EB        1143            mov     a,r3
01F6 F4        1144            cpl     a
01F7 FA        1145            mov     r2,a
01F8 52F1      1146            anl     _P0MDIN,a
01FA           1147   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:302: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01FA EB        1148            mov     a,r3
01FB 42D4      1149            orl     _P0SKIP,a
01FD           1150   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:303: break;
01FD           1151   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:304: case 1:
01FD 8001      1152            sjmp    L010005?
01FF           1153   L010002?:
01FF           1154   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:305: P1MDIN &= (~mask); // Set pin as analog input
01FF EB        1155            mov     a,r3
0200 F4        1156            cpl     a
0201 FA        1157            mov     r2,a
0202 52F2      1158            anl     _P1MDIN,a
0204           1159   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:306: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0204 EB        1160            mov     a,r3
0205 42D5      1161            orl     _P1SKIP,a
0207           1162   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:307: break;
0207           1163   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:308: case 2:
0207 8001      1164            sjmp    L010005?
0209           1165   L010003?:
0209           1166   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:309: P2MDIN &= (~mask); // Set pin as analog input
0209 EB        1167            mov     a,r3
020A F4        1168            cpl     a
020B FA        1169            mov     r2,a
020C 52F3      1170            anl     _P2MDIN,a
020E           1171   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:310: P2SKIP |= mask; // Skip Crossbar decoding for this pin
020E EB        1172            mov     a,r3
020F 42CC      1173            orl     _P2SKIP,a
0211           1174   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:314: }
0211           1175   L010005?:
0211           1176   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:315: SFRPAGE = 0x00;
0211 75A700    1177            mov     _SFRPAGE,#0x00
0214 22        1178            ret
0215           1179   ;------------------------------------------------------------
0215           1180   ;Allocation info for local variables in function 'PWMbackward'
0215           1181   ;------------------------------------------------------------
0215           1182   ;------------------------------------------------------------
0215           1183   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:324: void PWMbackward(void) {
0215           1184   ;        -----------------------------------------
0215           1185   ;         function PWMbackward
0215           1186   ;        -----------------------------------------
0215           1187   _PWMbackward:
0215           1188   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:325: pwmSig1 = 99;
0215 75C863    1189            mov     _pwmSig1,#0x63
0218 E4        1190            clr     a
0219 F5C9      1191            mov     (_pwmSig1 + 1),a
021B           1192   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:326: pwmSig2 = 0;
021B           1193   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:328: pwmSig3 = 0;
021B E4        1194            clr     a
021C F588      1195            mov     _pwmSig2,a
021E F589      1196            mov     (_pwmSig2 + 1),a
0220 F548      1197            mov     _pwmSig3,a
0222 F549      1198            mov     (_pwmSig3 + 1),a
0224           1199   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:329: pwmSig4 =99;
0224 750863    1200            mov     _pwmSig4,#0x63
0227 E4        1201            clr     a
0228 F509      1202            mov     (_pwmSig4 + 1),a
022A           1203   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:331: LEDRED = 1;
022A D287      1204            setb    _P0_7
022C           1205   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:332: LEDGREEN = 1;
022C D286      1206            setb    _P0_6
022E           1207   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:333: LEDWHITE = 1;
022E D290      1208            setb    _P1_0
0230           1209   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:334: printf("Backward\n\r");
0230 7468      1210            mov     a,#__str_0
0232 C0E0      1211            push    acc
0234 74C5      1212            mov     a,#(__str_0 >> 8)
0236 C0E0      1213            push    acc
0238 7480      1214            mov     a,#0x80
023A C0E0      1215            push    acc
023C 120100    1216            lcall   _printf
023F 1581      1217            dec     sp
0241 1581      1218            dec     sp
0243 1581      1219            dec     sp
0245 22        1220            ret
0246           1221   ;------------------------------------------------------------
0246           1222   ;Allocation info for local variables in function 'PWMforward'
0246           1223   ;------------------------------------------------------------
0246           1224   ;------------------------------------------------------------
0246           1225   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:337: void PWMforward(void) {
0246           1226   ;        -----------------------------------------
0246           1227   ;         function PWMforward
0246           1228   ;        -----------------------------------------
0246           1229   _PWMforward:
0246           1230   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:338: pwmSig1 = 0;
0246 E4        1231            clr     a
0247 F5C8      1232            mov     _pwmSig1,a
0249 F5C9      1233            mov     (_pwmSig1 + 1),a
024B           1234   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:339: pwmSig2 = 99;
024B 758863    1235            mov     _pwmSig2,#0x63
024E E4        1236            clr     a
024F F589      1237            mov     (_pwmSig2 + 1),a
0251           1238   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:341: pwmSig3 = 99;
0251 754863    1239            mov     _pwmSig3,#0x63
0254 E4        1240            clr     a
0255 F549      1241            mov     (_pwmSig3 + 1),a
0257           1242   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:342: pwmSig4 = 0;
0257 E4        1243            clr     a
0258 F508      1244            mov     _pwmSig4,a
025A F509      1245            mov     (_pwmSig4 + 1),a
025C           1246   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:344: LEDRED = 1;
025C D287      1247            setb    _P0_7
025E           1248   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:345: LEDGREEN = 1;
025E D286      1249            setb    _P0_6
0260           1250   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:346: LEDWHITE = 0;
0260 C290      1251            clr     _P1_0
0262           1252   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:347: printf("Forward\n\r");
0262 74E8      1253            mov     a,#__str_1
0264 C0E0      1254            push    acc
0266 74C5      1255            mov     a,#(__str_1 >> 8)
0268 C0E0      1256            push    acc
026A 7480      1257            mov     a,#0x80
026C C0E0      1258            push    acc
026E 120100    1259            lcall   _printf
0271 1581      1260            dec     sp
0273 1581      1261            dec     sp
0275 1581      1262            dec     sp
0277 22        1263            ret
0278           1264   ;------------------------------------------------------------
0278           1265   ;Allocation info for local variables in function 'PWMRight'
0278           1266   ;------------------------------------------------------------
0278           1267   ;------------------------------------------------------------
0278           1268   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:350: void PWMRight(void) {
0278           1269   ;        -----------------------------------------
0278           1270   ;         function PWMRight
0278           1271   ;        -----------------------------------------
0278           1272   _PWMRight:
0278           1273   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:351: pwmSig1 = 0;
0278 E4        1274            clr     a
0279 F5C8      1275            mov     _pwmSig1,a
027B F5C9      1276            mov     (_pwmSig1 + 1),a
027D           1277   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:352: pwmSig2 = 99;
027D 758863    1278            mov     _pwmSig2,#0x63
0280 E4        1279            clr     a
0281 F589      1280            mov     (_pwmSig2 + 1),a
0283           1281   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:354: pwmSig3 = 0;
0283 E4        1282            clr     a
0284 F548      1283            mov     _pwmSig3,a
0286 F549      1284            mov     (_pwmSig3 + 1),a
0288           1285   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:355: pwmSig4 = 99;
0288 750863    1286            mov     _pwmSig4,#0x63
028B E4        1287            clr     a
028C F509      1288            mov     (_pwmSig4 + 1),a
028E           1289   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:357: LEDRED = 1;
028E D287      1290            setb    _P0_7
0290           1291   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:358: LEDGREEN = 0;
0290 C286      1292            clr     _P0_6
0292           1293   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:359: LEDWHITE = 1;
0292 D290      1294            setb    _P1_0
0294           1295   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:361: printf("Right\n\r");
0294 7428      1296            mov     a,#__str_2
0296 C0E0      1297            push    acc
0298 74C6      1298            mov     a,#(__str_2 >> 8)
029A C0E0      1299            push    acc
029C 7480      1300            mov     a,#0x80
029E C0E0      1301            push    acc
02A0 120100    1302            lcall   _printf
02A3 1581      1303            dec     sp
02A5 1581      1304            dec     sp
02A7 1581      1305            dec     sp
02A9 22        1306            ret
02AA           1307   ;------------------------------------------------------------
02AA           1308   ;Allocation info for local variables in function 'PWMLeft'
02AA           1309   ;------------------------------------------------------------
02AA           1310   ;------------------------------------------------------------
02AA           1311   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:364: void PWMLeft(void) {
02AA           1312   ;        -----------------------------------------
02AA           1313   ;         function PWMLeft
02AA           1314   ;        -----------------------------------------
02AA           1315   _PWMLeft:
02AA           1316   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:365: pwmSig1 = 99;
02AA 75C863    1317            mov     _pwmSig1,#0x63
02AD E4        1318            clr     a
02AE F5C9      1319            mov     (_pwmSig1 + 1),a
02B0           1320   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:366: pwmSig2 = 0;
02B0 E4        1321            clr     a
02B1 F588      1322            mov     _pwmSig2,a
02B3 F589      1323            mov     (_pwmSig2 + 1),a
02B5           1324   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:368: pwmSig3 = 99;
02B5 754863    1325            mov     _pwmSig3,#0x63
02B8 E4        1326            clr     a
02B9 F549      1327            mov     (_pwmSig3 + 1),a
02BB           1328   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:369: pwmSig4 = 0;
02BB E4        1329            clr     a
02BC F508      1330            mov     _pwmSig4,a
02BE F509      1331            mov     (_pwmSig4 + 1),a
02C0           1332   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:371: LEDRED = 1;
02C0 D287      1333            setb    _P0_7
02C2           1334   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:372: LEDGREEN = 0;
02C2 C286      1335            clr     _P0_6
02C4           1336   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:373: LEDWHITE = 1;
02C4 D290      1337            setb    _P1_0
02C6           1338   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:375: printf("Left\n\r");
02C6 7468      1339            mov     a,#__str_3
02C8 C0E0      1340            push    acc
02CA 74C6      1341            mov     a,#(__str_3 >> 8)
02CC C0E0      1342            push    acc
02CE 7480      1343            mov     a,#0x80
02D0 C0E0      1344            push    acc
02D2 120100    1345            lcall   _printf
02D5 1581      1346            dec     sp
02D7 1581      1347            dec     sp
02D9 1581      1348            dec     sp
02DB 22        1349            ret
02DC           1350   ;------------------------------------------------------------
02DC           1351   ;Allocation info for local variables in function 'PWMbackwardM'
02DC           1352   ;------------------------------------------------------------
02DC           1353   ;------------------------------------------------------------
02DC           1354   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:378: void PWMbackwardM(void) {
02DC           1355   ;        -----------------------------------------
02DC           1356   ;         function PWMbackwardM
02DC           1357   ;        -----------------------------------------
02DC           1358   _PWMbackwardM:
02DC           1359   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:379: pwmSig1 = 50;
02DC 75C832    1360            mov     _pwmSig1,#0x32
02DF E4        1361            clr     a
02E0 F5C9      1362            mov     (_pwmSig1 + 1),a
02E2           1363   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:380: pwmSig2 = 0;
02E2           1364   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:382: pwmSig3 = 0;
02E2 E4        1365            clr     a
02E3 F588      1366            mov     _pwmSig2,a
02E5 F589      1367            mov     (_pwmSig2 + 1),a
02E7 F548      1368            mov     _pwmSig3,a
02E9 F549      1369            mov     (_pwmSig3 + 1),a
02EB           1370   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:383: pwmSig4 =50;
02EB 750832    1371            mov     _pwmSig4,#0x32
02EE E4        1372            clr     a
02EF F509      1373            mov     (_pwmSig4 + 1),a
02F1           1374   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:385: LEDRED = 1;
02F1 D287      1375            setb    _P0_7
02F3           1376   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:386: LEDGREEN = 1;
02F3 D286      1377            setb    _P0_6
02F5           1378   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:387: LEDWHITE = 1;
02F5 D290      1379            setb    _P1_0
02F7           1380   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:388: printf("Backward\n\r");
02F7 7468      1381            mov     a,#__str_0
02F9 C0E0      1382            push    acc
02FB 74C5      1383            mov     a,#(__str_0 >> 8)
02FD C0E0      1384            push    acc
02FF 7480      1385            mov     a,#0x80
0301 C0E0      1386            push    acc
0303 120100    1387            lcall   _printf
0306 1581      1388            dec     sp
0308 1581      1389            dec     sp
030A 1581      1390            dec     sp
030C 22        1391            ret
030D           1392   ;------------------------------------------------------------
030D           1393   ;Allocation info for local variables in function 'PWMforwardM'
030D           1394   ;------------------------------------------------------------
030D           1395   ;------------------------------------------------------------
030D           1396   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:391: void PWMforwardM(void) {
030D           1397   ;        -----------------------------------------
030D           1398   ;         function PWMforwardM
030D           1399   ;        -----------------------------------------
030D           1400   _PWMforwardM:
030D           1401   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:392: pwmSig1 = 0;
030D E4        1402            clr     a
030E F5C8      1403            mov     _pwmSig1,a
0310 F5C9      1404            mov     (_pwmSig1 + 1),a
0312           1405   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:393: pwmSig2 = 50;
0312 758832    1406            mov     _pwmSig2,#0x32
0315 E4        1407            clr     a
0316 F589      1408            mov     (_pwmSig2 + 1),a
0318           1409   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:395: pwmSig3 = 50;
0318 754832    1410            mov     _pwmSig3,#0x32
031B E4        1411            clr     a
031C F549      1412            mov     (_pwmSig3 + 1),a
031E           1413   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:396: pwmSig4 = 0;
031E E4        1414            clr     a
031F F508      1415            mov     _pwmSig4,a
0321 F509      1416            mov     (_pwmSig4 + 1),a
0323           1417   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:398: LEDRED = 1;
0323 D287      1418            setb    _P0_7
0325           1419   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:399: LEDGREEN = 1;
0325 D286      1420            setb    _P0_6
0327           1421   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:400: LEDWHITE = 0;
0327 C290      1422            clr     _P1_0
0329           1423   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:401: printf("Forward\n\r");
0329 74E8      1424            mov     a,#__str_1
032B C0E0      1425            push    acc
032D 74C5      1426            mov     a,#(__str_1 >> 8)
032F C0E0      1427            push    acc
0331 7480      1428            mov     a,#0x80
0333 C0E0      1429            push    acc
0335 120100    1430            lcall   _printf
0338 1581      1431            dec     sp
033A 1581      1432            dec     sp
033C 1581      1433            dec     sp
033E 22        1434            ret
033F           1435   ;------------------------------------------------------------
033F           1436   ;Allocation info for local variables in function 'PWMRightM'
033F           1437   ;------------------------------------------------------------
033F           1438   ;------------------------------------------------------------
033F           1439   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:404: void PWMRightM(void) {
033F           1440   ;        -----------------------------------------
033F           1441   ;         function PWMRightM
033F           1442   ;        -----------------------------------------
033F           1443   _PWMRightM:
033F           1444   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:405: pwmSig1 = 0;
033F E4        1445            clr     a
0340 F5C8      1446            mov     _pwmSig1,a
0342 F5C9      1447            mov     (_pwmSig1 + 1),a
0344           1448   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:406: pwmSig2 = 50;
0344 758832    1449            mov     _pwmSig2,#0x32
0347 E4        1450            clr     a
0348 F589      1451            mov     (_pwmSig2 + 1),a
034A           1452   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:408: pwmSig3 = 0;
034A E4        1453            clr     a
034B F548      1454            mov     _pwmSig3,a
034D F549      1455            mov     (_pwmSig3 + 1),a
034F           1456   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:409: pwmSig4 = 50;
034F 750832    1457            mov     _pwmSig4,#0x32
0352 E4        1458            clr     a
0353 F509      1459            mov     (_pwmSig4 + 1),a
0355           1460   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:411: LEDRED = 1;
0355 D287      1461            setb    _P0_7
0357           1462   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:412: LEDGREEN = 0;
0357 C286      1463            clr     _P0_6
0359           1464   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:413: LEDWHITE = 1;
0359 D290      1465            setb    _P1_0
035B           1466   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:415: printf("Right\n\r");
035B 7428      1467            mov     a,#__str_2
035D C0E0      1468            push    acc
035F 74C6      1469            mov     a,#(__str_2 >> 8)
0361 C0E0      1470            push    acc
0363 7480      1471            mov     a,#0x80
0365 C0E0      1472            push    acc
0367 120100    1473            lcall   _printf
036A 1581      1474            dec     sp
036C 1581      1475            dec     sp
036E 1581      1476            dec     sp
0370 22        1477            ret
0371           1478   ;------------------------------------------------------------
0371           1479   ;Allocation info for local variables in function 'PWMLeftM'
0371           1480   ;------------------------------------------------------------
0371           1481   ;------------------------------------------------------------
0371           1482   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:418: void PWMLeftM(void) {
0371           1483   ;        -----------------------------------------
0371           1484   ;         function PWMLeftM
0371           1485   ;        -----------------------------------------
0371           1486   _PWMLeftM:
0371           1487   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:419: pwmSig1 = 50;
0371 75C832    1488            mov     _pwmSig1,#0x32
0374 E4        1489            clr     a
0375 F5C9      1490            mov     (_pwmSig1 + 1),a
0377           1491   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:420: pwmSig2 = 0;
0377 E4        1492            clr     a
0378 F588      1493            mov     _pwmSig2,a
037A F589      1494            mov     (_pwmSig2 + 1),a
037C           1495   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:422: pwmSig3 = 50;
037C 754832    1496            mov     _pwmSig3,#0x32
037F E4        1497            clr     a
0380 F549      1498            mov     (_pwmSig3 + 1),a
0382           1499   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:423: pwmSig4 = 0;
0382 E4        1500            clr     a
0383 F508      1501            mov     _pwmSig4,a
0385 F509      1502            mov     (_pwmSig4 + 1),a
0387           1503   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:425: LEDRED = 1;
0387 D287      1504            setb    _P0_7
0389           1505   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:426: LEDGREEN = 0;
0389 C286      1506            clr     _P0_6
038B           1507   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:427: LEDWHITE = 1;
038B D290      1508            setb    _P1_0
038D           1509   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:429: printf("Left\n\r");
038D 7468      1510            mov     a,#__str_3
038F C0E0      1511            push    acc
0391 74C6      1512            mov     a,#(__str_3 >> 8)
0393 C0E0      1513            push    acc
0395 7480      1514            mov     a,#0x80
0397 C0E0      1515            push    acc
0399 120100    1516            lcall   _printf
039C 1581      1517            dec     sp
039E 1581      1518            dec     sp
03A0 1581      1519            dec     sp
03A2 22        1520            ret
03A3           1521   ;------------------------------------------------------------
03A3           1522   ;Allocation info for local variables in function 'PWMStop'
03A3           1523   ;------------------------------------------------------------
03A3           1524   ;------------------------------------------------------------
03A3           1525   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:432: void PWMStop(void) {
03A3           1526   ;        -----------------------------------------
03A3           1527   ;         function PWMStop
03A3           1528   ;        -----------------------------------------
03A3           1529   _PWMStop:
03A3           1530   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:433: pwmSig1 = 0;
03A3           1531   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:434: pwmSig2 = 0;
03A3           1532   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:436: pwmSig3 = 0;
03A3           1533   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:437: pwmSig4 = 0;
03A3 E4        1534            clr     a
03A4 F5C8      1535            mov     _pwmSig1,a
03A6 F5C9      1536            mov     (_pwmSig1 + 1),a
03A8 F588      1537            mov     _pwmSig2,a
03AA F589      1538            mov     (_pwmSig2 + 1),a
03AC F548      1539            mov     _pwmSig3,a
03AE F549      1540            mov     (_pwmSig3 + 1),a
03B0 F508      1541            mov     _pwmSig4,a
03B2 F509      1542            mov     (_pwmSig4 + 1),a
03B4           1543   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:439: LEDRED = 0;
03B4 C287      1544            clr     _P0_7
03B6           1545   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:440: LEDGREEN = 1;
03B6 D286      1546            setb    _P0_6
03B8           1547   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:441: LEDWHITE = 1;
03B8 D290      1548            setb    _P1_0
03BA           1549   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:443: printf("Stop\n\r");
03BA 74A8      1550            mov     a,#__str_4
03BC C0E0      1551            push    acc
03BE 74C6      1552            mov     a,#(__str_4 >> 8)
03C0 C0E0      1553            push    acc
03C2 7480      1554            mov     a,#0x80
03C4 C0E0      1555            push    acc
03C6 120100    1556            lcall   _printf
03C9 1581      1557            dec     sp
03CB 1581      1558            dec     sp
03CD 1581      1559            dec     sp
03CF 22        1560            ret
03D0           1561   ;------------------------------------------------------------
03D0           1562   ;Allocation info for local variables in function 'periodcalc'
03D0           1563   ;------------------------------------------------------------
03D0           1564   ;period1                   Allocated to registers r2 r3 r4 r5 
03D0           1565   ;overflow_count            Allocated to registers r2 r3 
03D0           1566   ;------------------------------------------------------------
03D0           1567   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:446: float periodcalc(void) {
03D0           1568   ;        -----------------------------------------
03D0           1569   ;         function periodcalc
03D0           1570   ;        -----------------------------------------
03D0           1571   _periodcalc:
03D0           1572   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:450: TL0=0; 
03D0 758A00    1573            mov     _TL0,#0x00
03D3           1574   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:451: TH0=0;
03D3 758C00    1575            mov     _TH0,#0x00
03D6           1576   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:452: TF0=0;
03D6 C28D      1577            clr     _TF0
03D8           1578   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:454: TR0=0;
03D8 C28C      1579            clr     _TR0
03DA           1580   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:456: while(P1_6!=0); // Wait for the signal to be zero
03DA           1581   L020001?:
03DA 2096E8    1582            jb      _P1_6,L020001?
03DD           1583   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:457: while(P1_6!=1); // Wait for the signal to be one
03DD           1584   L020004?:
03DD 309628    1585            jnb     _P1_6,L020004?
03E0           1586   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:458: TR0=1; // Start the timer
03E0 D28C      1587            setb    _TR0
03E2           1588   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:459: while(P1_6!=0) // Wait for the signal to be zero
03E2 7A00      1589            mov     r2,#0x00
03E4 7B00      1590            mov     r3,#0x00
03E6           1591   L020009?:
03E6 3096A8    1592            jnb     _P1_6,L020026?
03E9           1593   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:461: if(TF0==1) // Did the 16-bit timer overflow?
03E9           1594   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:463: TF0=0;
03E9 108DE8    1595            jbc     _TF0,L020033?
03EC 8001      1596            sjmp    L020009?
03EE           1597   L020033?:
03EE           1598   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:464: overflow_count++;
03EE 0A        1599            inc     r2
03EF BA0068    1600            cjne    r2,#0x00,L020009?
03F2 0B        1601            inc     r3
03F3           1602   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:468: while(P1_6!=1) // Wait for the signal to be zero
03F3 8001      1603            sjmp    L020009?
03F5           1604   L020026?:
03F5           1605   L020014?:
03F5 209668    1606            jb      _P1_6,L020016?
03F8           1607   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:470: if(TF0==1) // Did the 16-bit timer overflow?
03F8           1608   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:472: TF0=0;
03F8 108DA8    1609            jbc     _TF0,L020035?
03FB 8001      1610            sjmp    L020014?
03FD           1611   L020035?:
03FD           1612   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:473: overflow_count++;
03FD 0A        1613            inc     r2
03FE BA0028    1614            cjne    r2,#0x00,L020014?
0401 0B        1615            inc     r3
0402 8001      1616            sjmp    L020014?
0404           1617   L020016?:
0404           1618   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:478: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0404 C28C      1619            clr     _TR0
0406           1620   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:479: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0406 8A82      1621            mov     dpl,r2
0408 8B83      1622            mov     dph,r3
040A 120100    1623            lcall   ___sint2fs
040D AA82      1624            mov     r2,dpl
040F AB83      1625            mov     r3,dph
0411 ACF0      1626            mov     r4,b
0413 FD        1627            mov     r5,a
0414 C002      1628            push    ar2
0416 C003      1629            push    ar3
0418 C004      1630            push    ar4
041A C005      1631            push    ar5
041C 900000    1632            mov     dptr,#0x0000
041F 75F080    1633            mov     b,#0x80
0422 7447      1634            mov     a,#0x47
0424 120100    1635            lcall   ___fsmul
0427 AA82      1636            mov     r2,dpl
0429 AB83      1637            mov     r3,dph
042B ACF0      1638            mov     r4,b
042D FD        1639            mov     r5,a
042E E581      1640            mov     a,sp
0430 24FC      1641            add     a,#0xfc
0432 F581      1642            mov     sp,a
0434 858C82    1643            mov     dpl,_TH0
0437 C002      1644            push    ar2
0439 C003      1645            push    ar3
043B C004      1646            push    ar4
043D C005      1647            push    ar5
043F 120100    1648            lcall   ___uchar2fs
0442 AE82      1649            mov     r6,dpl
0444 AF83      1650            mov     r7,dph
0446 A8F0      1651            mov     r0,b
0448 F9        1652            mov     r1,a
0449 C006      1653            push    ar6
044B C007      1654            push    ar7
044D C000      1655            push    ar0
044F C001      1656            push    ar1
0451 900000    1657            mov     dptr,#0x0000
0454 75F080    1658            mov     b,#0x80
0457 7443      1659            mov     a,#0x43
0459 120100    1660            lcall   ___fsmul
045C AE82      1661            mov     r6,dpl
045E AF83      1662            mov     r7,dph
0460 A8F0      1663            mov     r0,b
0462 F9        1664            mov     r1,a
0463 E581      1665            mov     a,sp
0465 24FC      1666            add     a,#0xfc
0467 F581      1667            mov     sp,a
0469 D005      1668            pop     ar5
046B D004      1669            pop     ar4
046D D003      1670            pop     ar3
046F D002      1671            pop     ar2
0471 C006      1672            push    ar6
0473 C007      1673            push    ar7
0475 C000      1674            push    ar0
0477 C001      1675            push    ar1
0479 8A82      1676            mov     dpl,r2
047B 8B83      1677            mov     dph,r3
047D 8CF0      1678            mov     b,r4
047F ED        1679            mov     a,r5
0480 120100    1680            lcall   ___fsadd
0483 AA82      1681            mov     r2,dpl
0485 AB83      1682            mov     r3,dph
0487 ACF0      1683            mov     r4,b
0489 FD        1684            mov     r5,a
048A E581      1685            mov     a,sp
048C 24FC      1686            add     a,#0xfc
048E F581      1687            mov     sp,a
0490 AE8A      1688            mov     r6,_TL0
0492 7F00      1689            mov     r7,#0x00
0494 8E82      1690            mov     dpl,r6
0496 8F83      1691            mov     dph,r7
0498 C002      1692            push    ar2
049A C003      1693            push    ar3
049C C004      1694            push    ar4
049E C005      1695            push    ar5
04A0 120100    1696            lcall   ___sint2fs
04A3 AE82      1697            mov     r6,dpl
04A5 AF83      1698            mov     r7,dph
04A7 A8F0      1699            mov     r0,b
04A9 F9        1700            mov     r1,a
04AA D005      1701            pop     ar5
04AC D004      1702            pop     ar4
04AE D003      1703            pop     ar3
04B0 D002      1704            pop     ar2
04B2 C006      1705            push    ar6
04B4 C007      1706            push    ar7
04B6 C000      1707            push    ar0
04B8 C001      1708            push    ar1
04BA 8A82      1709            mov     dpl,r2
04BC 8B83      1710            mov     dph,r3
04BE 8CF0      1711            mov     b,r4
04C0 ED        1712            mov     a,r5
04C1 120100    1713            lcall   ___fsadd
04C4 AA82      1714            mov     r2,dpl
04C6 AB83      1715            mov     r3,dph
04C8 ACF0      1716            mov     r4,b
04CA FD        1717            mov     r5,a
04CB E581      1718            mov     a,sp
04CD 24FC      1719            add     a,#0xfc
04CF F581      1720            mov     sp,a
04D1 C002      1721            push    ar2
04D3 C003      1722            push    ar3
04D5 C004      1723            push    ar4
04D7 C005      1724            push    ar5
04D9 90F4FC    1725            mov     dptr,#0xF4FC
04DC 75F032    1726            mov     b,#0x32
04DF 7434      1727            mov     a,#0x34
04E1 120100    1728            lcall   ___fsmul
04E4 AA82      1729            mov     r2,dpl
04E6 AB83      1730            mov     r3,dph
04E8 ACF0      1731            mov     r4,b
04EA FD        1732            mov     r5,a
04EB E581      1733            mov     a,sp
04ED 24FC      1734            add     a,#0xfc
04EF F581      1735            mov     sp,a
04F1           1736   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:480: printf("%f\n\r", period1);
04F1 C002      1737            push    ar2
04F3 C003      1738            push    ar3
04F5 C004      1739            push    ar4
04F7 C005      1740            push    ar5
04F9 C002      1741            push    ar2
04FB C003      1742            push    ar3
04FD C004      1743            push    ar4
04FF C005      1744            push    ar5
0501 74A8      1745            mov     a,#__str_5
0503 C0E0      1746            push    acc
0505 74C9      1747            mov     a,#(__str_5 >> 8)
0507 C0E0      1748            push    acc
0509 7480      1749            mov     a,#0x80
050B C0E0      1750            push    acc
050D 120100    1751            lcall   _printf
0510 E581      1752            mov     a,sp
0512 24F9      1753            add     a,#0xf9
0514 F581      1754            mov     sp,a
0516           1755   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:481: return period1*1000; //return period of high pulse in seconds
0516 900000    1756            mov     dptr,#0x0000
0519 75F07A    1757            mov     b,#0x7A
051C 7444      1758            mov     a,#0x44
051E 120100    1759            lcall   ___fsmul
0521 AA82      1760            mov     r2,dpl
0523 AB83      1761            mov     r3,dph
0525 ACF0      1762            mov     r4,b
0527 FD        1763            mov     r5,a
0528 E581      1764            mov     a,sp
052A 24FC      1765            add     a,#0xfc
052C F581      1766            mov     sp,a
052E 8A82      1767            mov     dpl,r2
0530 8B83      1768            mov     dph,r3
0532 8CF0      1769            mov     b,r4
0534 ED        1770            mov     a,r5
0535 22        1771            ret
0536           1772   ;------------------------------------------------------------
0536           1773   ;Allocation info for local variables in function 'arrayEqual'
0536           1774   ;------------------------------------------------------------
0536           1775   ;size                      Allocated with name '_arrayEqual_PARM_2'
0536           1776   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
0536           1777   ;arr1                      Allocated with name '_arrayEqual_arr1_1_86'
0536           1778   ;i                         Allocated to registers r5 r6 
0536           1779   ;------------------------------------------------------------
0536           1780   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:486: int arrayEqual (int arr1[], int size, int arr2[]){
0536           1781   ;        -----------------------------------------
0536           1782   ;         function arrayEqual
0536           1783   ;        -----------------------------------------
0536           1784   _arrayEqual:
0536 858218    1785            mov     _arrayEqual_arr1_1_86,dpl
0539 858319    1786            mov     (_arrayEqual_arr1_1_86 + 1),dph
053C 85F01A    1787            mov     (_arrayEqual_arr1_1_86 + 2),b
053F           1788   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:488: for(i=0; i<size; i++){
053F 7D00      1789            mov     r5,#0x00
0541 7E00      1790            mov     r6,#0x00
0543           1791   L021003?:
0543 C3        1792            clr     c
0544 ED        1793            mov     a,r5
0545 95A0      1794            subb    a,_arrayEqual_PARM_2
0547 EE        1795            mov     a,r6
0548 6480      1796            xrl     a,#0x80
054A 85A1F0    1797            mov     b,(_arrayEqual_PARM_2 + 1)
054D 63F080    1798            xrl     b,#0x80
0550 95F0      1799            subb    a,b
0552 5001      1800            jnc     L021006?
0554           1801   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:489: if(arr1[i]!=arr2[i])
0554 8D07      1802            mov     ar7,r5
0556 EE        1803            mov     a,r6
0557 CF        1804            xch     a,r7
0558 25E0      1805            add     a,acc
055A CF        1806            xch     a,r7
055B 33        1807            rlc     a
055C F8        1808            mov     r0,a
055D EF        1809            mov     a,r7
055E 2518      1810            add     a,_arrayEqual_arr1_1_86
0560 F9        1811            mov     r1,a
0561 E8        1812            mov     a,r0
0562 3519      1813            addc    a,(_arrayEqual_arr1_1_86 + 1)
0564 FA        1814            mov     r2,a
0565 AB1A      1815            mov     r3,(_arrayEqual_arr1_1_86 + 2)
0567 8982      1816            mov     dpl,r1
0569 8A83      1817            mov     dph,r2
056B 8BF0      1818            mov     b,r3
056D 120100    1819            lcall   __gptrget
0570 F9        1820            mov     r1,a
0571 A3        1821            inc     dptr
0572 120100    1822            lcall   __gptrget
0575 FA        1823            mov     r2,a
0576 EF        1824            mov     a,r7
0577 2550      1825            add     a,_arrayEqual_PARM_3
0579 FF        1826            mov     r7,a
057A E8        1827            mov     a,r0
057B 3551      1828            addc    a,(_arrayEqual_PARM_3 + 1)
057D F8        1829            mov     r0,a
057E AB52      1830            mov     r3,(_arrayEqual_PARM_3 + 2)
0580 8F82      1831            mov     dpl,r7
0582 8883      1832            mov     dph,r0
0584 8BF0      1833            mov     b,r3
0586 120100    1834            lcall   __gptrget
0589 FF        1835            mov     r7,a
058A A3        1836            inc     dptr
058B 120100    1837            lcall   __gptrget
058E F8        1838            mov     r0,a
058F E9        1839            mov     a,r1
0590 B507A8    1840            cjne    a,ar7,L021013?
0593 EA        1841            mov     a,r2
0594 B500A8    1842            cjne    a,ar0,L021013?
0597 8001      1843            sjmp    L021005?
0599           1844   L021013?:
0599           1845   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:490: return 0; 
0599 900000    1846            mov     dptr,#0x0000
059C 22        1847            ret
059D           1848   L021005?:
059D           1849   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:488: for(i=0; i<size; i++){
059D 0D        1850            inc     r5
059E BD00E8    1851            cjne    r5,#0x00,L021003?
05A1 0E        1852            inc     r6
05A2 8001      1853            sjmp    L021003?
05A4           1854   L021006?:
05A4           1855   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:492: return 1; 
05A4 900001    1856            mov     dptr,#0x0001
05A7 22        1857            ret
05A8           1858   ;------------------------------------------------------------
05A8           1859   ;Allocation info for local variables in function 'checkCommands'
05A8           1860   ;------------------------------------------------------------
05A8           1861   ;------------------------------------------------------------
05A8           1862   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:498: void checkCommands (void){
05A8           1863   ;        -----------------------------------------
05A8           1864   ;         function checkCommands
05A8           1865   ;        -----------------------------------------
05A8           1866   _checkCommands:
05A8           1867   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:499: if(arrayEqual(command, 4, stop)) PWMStop();
05A8 755048    1868            mov     _arrayEqual_PARM_3,#_stop
05AB 755100    1869            mov     (_arrayEqual_PARM_3 + 1),#0x00
05AE 755240    1870            mov     (_arrayEqual_PARM_3 + 2),#0x40
05B1 75A004    1871            mov     _arrayEqual_PARM_2,#0x04
05B4 E4        1872            clr     a
05B5 F5A1      1873            mov     (_arrayEqual_PARM_2 + 1),a
05B7 904B08    1874            mov     dptr,#_command
05BA 75F040    1875            mov     b,#0x40
05BD 120100    1876            lcall   _arrayEqual
05C0 E582      1877            mov     a,dpl
05C2 8583F0    1878            mov     b,dph
05C5 45F0      1879            orl     a,b
05C7 6001      1880            jz      L022014?
05C9 120100    1881            lcall   _PWMStop
05CC 020100    1882            ljmp    L022015?
05CF           1883   L022014?:
05CF           1884   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:500: else if (arrayEqual(command,4,forward)) PWMforwardM(); 
05CF 755008    1885            mov     _arrayEqual_PARM_3,#_forward
05D2 755100    1886            mov     (_arrayEqual_PARM_3 + 1),#0x00
05D5 755240    1887            mov     (_arrayEqual_PARM_3 + 2),#0x40
05D8 75A004    1888            mov     _arrayEqual_PARM_2,#0x04
05DB E4        1889            clr     a
05DC F5A1      1890            mov     (_arrayEqual_PARM_2 + 1),a
05DE 904B08    1891            mov     dptr,#_command
05E1 75F040    1892            mov     b,#0x40
05E4 120100    1893            lcall   _arrayEqual
05E7 E582      1894            mov     a,dpl
05E9 8583F0    1895            mov     b,dph
05EC 45F0      1896            orl     a,b
05EE 6001      1897            jz      L022011?
05F0 120100    1898            lcall   _PWMforwardM
05F3 020100    1899            ljmp    L022015?
05F6           1900   L022011?:
05F6           1901   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:501: else if (arrayEqual(command,4,backward)) PWMbackwardM(); 
05F6 7550C8    1902            mov     _arrayEqual_PARM_3,#_backward
05F9 755100    1903            mov     (_arrayEqual_PARM_3 + 1),#0x00
05FC 755240    1904            mov     (_arrayEqual_PARM_3 + 2),#0x40
05FF 75A004    1905            mov     _arrayEqual_PARM_2,#0x04
0602 E4        1906            clr     a
0603 F5A1      1907            mov     (_arrayEqual_PARM_2 + 1),a
0605 904B08    1908            mov     dptr,#_command
0608 75F040    1909            mov     b,#0x40
060B 120100    1910            lcall   _arrayEqual
060E E582      1911            mov     a,dpl
0610 8583F0    1912            mov     b,dph
0613 45F0      1913            orl     a,b
0615 6001      1914            jz      L022008?
0617 120100    1915            lcall   _PWMbackwardM
061A 8001      1916            sjmp    L022015?
061C           1917   L022008?:
061C           1918   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:502: else if (arrayEqual(command,4, left)) PWMLeftM(); 
061C 755088    1919            mov     _arrayEqual_PARM_3,#_left
061F 755100    1920            mov     (_arrayEqual_PARM_3 + 1),#0x00
0622 755240    1921            mov     (_arrayEqual_PARM_3 + 2),#0x40
0625 75A004    1922            mov     _arrayEqual_PARM_2,#0x04
0628 E4        1923            clr     a
0629 F5A1      1924            mov     (_arrayEqual_PARM_2 + 1),a
062B 904B08    1925            mov     dptr,#_command
062E 75F040    1926            mov     b,#0x40
0631 120100    1927            lcall   _arrayEqual
0634 E582      1928            mov     a,dpl
0636 8583F0    1929            mov     b,dph
0639 45F0      1930            orl     a,b
063B 6001      1931            jz      L022005?
063D 120100    1932            lcall   _PWMLeftM
0640 8001      1933            sjmp    L022015?
0642           1934   L022005?:
0642           1935   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:503: else if (arrayEqual(command,4, right)) PWMRightM(); 
0642 755048    1936            mov     _arrayEqual_PARM_3,#_right
0645 755100    1937            mov     (_arrayEqual_PARM_3 + 1),#0x00
0648 755240    1938            mov     (_arrayEqual_PARM_3 + 2),#0x40
064B 75A004    1939            mov     _arrayEqual_PARM_2,#0x04
064E E4        1940            clr     a
064F F5A1      1941            mov     (_arrayEqual_PARM_2 + 1),a
0651 904B08    1942            mov     dptr,#_command
0654 75F040    1943            mov     b,#0x40
0657 120100    1944            lcall   _arrayEqual
065A E582      1945            mov     a,dpl
065C 8583F0    1946            mov     b,dph
065F 45F0      1947            orl     a,b
0661 6001      1948            jz      L022002?
0663 120100    1949            lcall   _PWMRightM
0666 8001      1950            sjmp    L022015?
0668           1951   L022002?:
0668           1952   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:504: else PWMStop(); //defaults to a halt (redundant)
0668 120100    1953            lcall   _PWMStop
066B           1954   L022015?:
066B           1955   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:505: waitms(350);
066B 90015E    1956            mov     dptr,#0x015E
066E 020100    1957            ljmp    _waitms
0671           1958   ;------------------------------------------------------------
0671           1959   ;Allocation info for local variables in function 'voltsAtPeak'
0671           1960   ;------------------------------------------------------------
0671           1961   ;------------------------------------------------------------
0671           1962   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:511: float voltsAtPeak(void) {
0671           1963   ;        -----------------------------------------
0671           1964   ;         function voltsAtPeak
0671           1965   ;        -----------------------------------------
0671           1966   _voltsAtPeak:
0671           1967   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:513: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
0671           1968   L023001?:
0671 75820C    1969            mov     dpl,#0x0C
0674 120100    1970            lcall   _ADC_at_Pin
0677 E582      1971            mov     a,dpl
0679 8583F0    1972            mov     b,dph
067C 45F0      1973            orl     a,b
067E 6001      1974            jz      L023001?
0680           1975   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:514: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
0680 900000    1976            mov     dptr,#0x0000
0683 120100    1977            lcall   _Timer3us
0686           1978   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:515: return(Volts_at_Pin(QFP32_MUX_P1_6));
0686 75820C    1979            mov     dpl,#0x0C
0689 020100    1980            ljmp    _Volts_at_Pin
068C           1981   ;------------------------------------------------------------
068C           1982   ;Allocation info for local variables in function 'getDigitalSignal'
068C           1983   ;------------------------------------------------------------
068C           1984   ;------------------------------------------------------------
068C           1985   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:528: int getDigitalSignal (void){
068C           1986   ;        -----------------------------------------
068C           1987   ;         function getDigitalSignal
068C           1988   ;        -----------------------------------------
068C           1989   _getDigitalSignal:
068C           1990   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:530: if (Volts_at_Pin(QFP32_MUX_P2_3)>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
068C 758210    1991            mov     dpl,#0x10
068F 120100    1992            lcall   _Volts_at_Pin
0692 AA82      1993            mov     r2,dpl
0694 AB83      1994            mov     r3,dph
0696 ACF0      1995            mov     r4,b
0698 FD        1996            mov     r5,a
0699 E4        1997            clr     a
069A C0E0      1998            push    acc
069C C0E0      1999            push    acc
069E C0E0      2000            push    acc
06A0 743F      2001            mov     a,#0x3F
06A2 C0E0      2002            push    acc
06A4 8A82      2003            mov     dpl,r2
06A6 8B83      2004            mov     dph,r3
06A8 8CF0      2005            mov     b,r4
06AA ED        2006            mov     a,r5
06AB 120100    2007            lcall   ___fslt
06AE AA82      2008            mov     r2,dpl
06B0 E581      2009            mov     a,sp
06B2 24FC      2010            add     a,#0xfc
06B4 F581      2011            mov     sp,a
06B6 EA        2012            mov     a,r2
06B7 7001      2013            jnz     L024002?
06B9           2014   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:532: printf("\nread 1:  at pin 2.3: %f\r", Volts_at_Pin(QFP32_MUX_P2_3));
06B9 758210    2015            mov     dpl,#0x10
06BC 120100    2016            lcall   _Volts_at_Pin
06BF AA82      2017            mov     r2,dpl
06C1 AB83      2018            mov     r3,dph
06C3 ACF0      2019            mov     r4,b
06C5 FD        2020            mov     r5,a
06C6 C002      2021            push    ar2
06C8 C003      2022            push    ar3
06CA C004      2023            push    ar4
06CC C005      2024            push    ar5
06CE 7468      2025            mov     a,#__str_6
06D0 C0E0      2026            push    acc
06D2 74CD      2027            mov     a,#(__str_6 >> 8)
06D4 C0E0      2028            push    acc
06D6 7480      2029            mov     a,#0x80
06D8 C0E0      2030            push    acc
06DA 120100    2031            lcall   _printf
06DD E581      2032            mov     a,sp
06DF 24F9      2033            add     a,#0xf9
06E1 F581      2034            mov     sp,a
06E3           2035   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:533: return 1;
06E3 900001    2036            mov     dptr,#0x0001
06E6           2037   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:537: return 0; 
06E6 22        2038            ret
06E7           2039   L024002?:
06E7 900000    2040            mov     dptr,#0x0000
06EA 22        2041            ret
06EB           2042   ;------------------------------------------------------------
06EB           2043   ;Allocation info for local variables in function 'waitquarterperiod'
06EB           2044   ;------------------------------------------------------------
06EB           2045   ;------------------------------------------------------------
06EB           2046   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:544: void waitquarterperiod(void){
06EB           2047   ;        -----------------------------------------
06EB           2048   ;         function waitquarterperiod
06EB           2049   ;        -----------------------------------------
06EB           2050   _waitquarterperiod:
06EB           2051   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:545: waitms(constant_delay_time);
06EB 900014    2052            mov     dptr,#0x0014
06EE 020100    2053            ljmp    _waitms
06F1           2054   ;------------------------------------------------------------
06F1           2055   ;Allocation info for local variables in function 'recieveData'
06F1           2056   ;------------------------------------------------------------
06F1           2057   ;checkcomm                 Allocated to registers 
06F1           2058   ;i                         Allocated to registers r2 r3 
06F1           2059   ;------------------------------------------------------------
06F1           2060   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:551: void recieveData (){
06F1           2061   ;        -----------------------------------------
06F1           2062   ;         function recieveData
06F1           2063   ;        -----------------------------------------
06F1           2064   _recieveData:
06F1           2065   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:555: while(getDigitalSignal()==0);          //wait for the signal to be 1 
06F1           2066   L026001?:
06F1 120100    2067            lcall   _getDigitalSignal
06F4 E582      2068            mov     a,dpl
06F6 8583F0    2069            mov     b,dph
06F9 45F0      2070            orl     a,b
06FB 6001      2071            jz      L026001?
06FD           2072   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:559: waitms(175);   //wait 
06FD 9000AF    2073            mov     dptr,#0x00AF
0700 120100    2074            lcall   _waitms
0703           2075   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:560: command[0] = 1;
0703 750801    2076            mov     _command,#0x01
0706 750900    2077            mov     (_command + 1),#0x00
0709           2078   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:562: for( i=1; i<4; i++){
0709 7A01      2079            mov     r2,#0x01
070B 7B00      2080            mov     r3,#0x00
070D           2081   L026004?:
070D C3        2082            clr     c
070E EA        2083            mov     a,r2
070F 9404      2084            subb    a,#0x04
0711 EB        2085            mov     a,r3
0712 6480      2086            xrl     a,#0x80
0714 9480      2087            subb    a,#0x80
0716 5001      2088            jnc     L026007?
0718           2089   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:563: waitms(358); //wait for a period
0718 900166    2090            mov     dptr,#0x0166
071B C002      2091            push    ar2
071D C003      2092            push    ar3
071F 120100    2093            lcall   _waitms
0722 D003      2094            pop     ar3
0724 D002      2095            pop     ar2
0726           2096   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:564: command[i]=getDigitalSignal();         
0726 8A04      2097            mov     ar4,r2
0728 EB        2098            mov     a,r3
0729 CC        2099            xch     a,r4
072A 25E0      2100            add     a,acc
072C CC        2101            xch     a,r4
072D 33        2102            rlc     a
072E EC        2103            mov     a,r4
072F 2408      2104            add     a,#_command
0731 F8        2105            mov     r0,a
0732 C002      2106            push    ar2
0734 C003      2107            push    ar3
0736 C000      2108            push    ar0
0738 120100    2109            lcall   _getDigitalSignal
073B E582      2110            mov     a,dpl
073D 8583F0    2111            mov     b,dph
0740 D000      2112            pop     ar0
0742 D003      2113            pop     ar3
0744 D002      2114            pop     ar2
0746 F6        2115            mov     @r0,a
0747 08        2116            inc     r0
0748 A6F0      2117            mov     @r0,b
074A 18        2118            dec     r0
074B           2119   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:562: for( i=1; i<4; i++){
074B 0A        2120            inc     r2
074C BA00E8    2121            cjne    r2,#0x00,L026004?
074F 0B        2122            inc     r3
0750 8001      2123            sjmp    L026004?
0752           2124   L026007?:
0752           2125   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:567: checkCommands();                               //does activity depending on the command given 
0752 020100    2126            ljmp    _checkCommands
0755           2127   ;------------------------------------------------------------
0755           2128   ;Allocation info for local variables in function 'checkMode'
0755           2129   ;------------------------------------------------------------
0755           2130   ;------------------------------------------------------------
0755           2131   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:576: int checkMode(){
0755           2132   ;        -----------------------------------------
0755           2133   ;         function checkMode
0755           2134   ;        -----------------------------------------
0755           2135   _checkMode:
0755           2136   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:577: if(!BUTTON1 || x == 0){
0755 30B168    2137            jnb     _P3_1,L027001?
0758 E5C8      2138            mov     a,_x
075A 45C9      2139            orl     a,(_x + 1)
075C 7001      2140            jnz     L027019?
075E           2141   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:578: while(!BUTTON1);
075E           2142   L027001?:
075E 30B168    2143            jnb     _P3_1,L027001?
0761           2144   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:579: x= 0;
0761           2145   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:580: return 0;
0761 E4        2146            clr     a
0762 F5C8      2147            mov     _x,a
0764 F5C9      2148            mov     (_x + 1),a
0766 F582      2149            mov     dpl,a
0768 F583      2150            mov     dph,a
076A 22        2151            ret
076B           2152   L027019?:
076B           2153   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:582: else if(!BUTTON2 || x == 1){
076B 30B3E8    2154            jnb     _P3_3,L027004?
076E 7401      2155            mov     a,#0x01
0770 B5C828    2156            cjne    a,_x,L027037?
0773 E4        2157            clr     a
0774 B5C928    2158            cjne    a,(_x + 1),L027037?
0777 8001      2159            sjmp    L027038?
0779           2160   L027037?:
0779 8001      2161            sjmp    L027015?
077B           2162   L027038?:
077B           2163   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:583: while(!BUTTON2);
077B           2164   L027004?:
077B 30B3E8    2165            jnb     _P3_3,L027004?
077E           2166   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:584: x = 1;
077E 75C801    2167            mov     _x,#0x01
0781 E4        2168            clr     a
0782 F5C9      2169            mov     (_x + 1),a
0784           2170   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:585: return 1;
0784 900001    2171            mov     dptr,#0x0001
0787 22        2172            ret
0788           2173   L027015?:
0788           2174   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:587: else if(!BUTTON3 || x == 3){
0788 30B7E8    2175            jnb     _P3_7,L027007?
078B 7403      2176            mov     a,#0x03
078D B5C828    2177            cjne    a,_x,L027041?
0790 E4        2178            clr     a
0791 B5C928    2179            cjne    a,(_x + 1),L027041?
0794 8001      2180            sjmp    L027042?
0796           2181   L027041?:
0796 8001      2182            sjmp    L027011?
0798           2183   L027042?:
0798           2184   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:588: while(!BUTTON3);
0798           2185   L027007?:
0798 30B7E8    2186            jnb     _P3_7,L027007?
079B           2187   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:589: x = 3;
079B 75C803    2188            mov     _x,#0x03
079E E4        2189            clr     a
079F F5C9      2190            mov     (_x + 1),a
07A1           2191   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:590: return 3;
07A1 900003    2192            mov     dptr,#0x0003
07A4 22        2193            ret
07A5           2194   L027011?:
07A5           2195   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:593: x = 2;
07A5 75C802    2196            mov     _x,#0x02
07A8 E4        2197            clr     a
07A9 F5C9      2198            mov     (_x + 1),a
07AB           2199   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:594: return 2;
07AB 900002    2200            mov     dptr,#0x0002
07AE 22        2201            ret
07AF           2202   ;------------------------------------------------------------
07AF           2203   ;Allocation info for local variables in function 'detectobstacle'
07AF           2204   ;------------------------------------------------------------
07AF           2205   ;threshold                 Allocated to registers r2 r3 r4 r5 
07AF           2206   ;------------------------------------------------------------
07AF           2207   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:599: void detectobstacle(float threshold){
07AF           2208   ;        -----------------------------------------
07AF           2209   ;         function detectobstacle
07AF           2210   ;        -----------------------------------------
07AF           2211   _detectobstacle:
07AF AA82      2212            mov     r2,dpl
07B1 AB83      2213            mov     r3,dph
07B3 ACF0      2214            mov     r4,b
07B5 FD        2215            mov     r5,a
07B6           2216   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:610: if(threshold <= 4.0 ){
07B6 E4        2217            clr     a
07B7 C0E0      2218            push    acc
07B9 C0E0      2219            push    acc
07BB 7480      2220            mov     a,#0x80
07BD C0E0      2221            push    acc
07BF 7440      2222            mov     a,#0x40
07C1 C0E0      2223            push    acc
07C3 8A82      2224            mov     dpl,r2
07C5 8B83      2225            mov     dph,r3
07C7 8CF0      2226            mov     b,r4
07C9 ED        2227            mov     a,r5
07CA 120100    2228            lcall   ___fsgt
07CD AA82      2229            mov     r2,dpl
07CF E581      2230            mov     a,sp
07D1 24FC      2231            add     a,#0xfc
07D3 F581      2232            mov     sp,a
07D5 EA        2233            mov     a,r2
07D6 7001      2234            jnz     L028002?
07D8           2235   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:612: printf("Turn right \r\n");
07D8 7468      2236            mov     a,#__str_7
07DA C0E0      2237            push    acc
07DC 74D1      2238            mov     a,#(__str_7 >> 8)
07DE C0E0      2239            push    acc
07E0 7480      2240            mov     a,#0x80
07E2 C0E0      2241            push    acc
07E4 120100    2242            lcall   _printf
07E7 1581      2243            dec     sp
07E9 1581      2244            dec     sp
07EB 1581      2245            dec     sp
07ED           2246   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:613: PWMRight();
07ED 120100    2247            lcall   _PWMRight
07F0           2248   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:614: waitms(500); //Make waits longer
07F0 9001F4    2249            mov     dptr,#0x01F4
07F3 120100    2250            lcall   _waitms
07F6           2251   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:615: waitms(500); 
07F6 9001F4    2252            mov     dptr,#0x01F4
07F9 120100    2253            lcall   _waitms
07FC           2254   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:616: waitms(300); 
07FC 90012C    2255            mov     dptr,#0x012C
07FF 120100    2256            lcall   _waitms
0802           2257   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:618: PWMStop();
0802 120100    2258            lcall   _PWMStop
0805           2259   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:619: waitms(500);
0805 9001F4    2260            mov     dptr,#0x01F4
0808 120100    2261            lcall   _waitms
080B           2262   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:620: waitms(250);
080B 9000FA    2263            mov     dptr,#0x00FA
080E 020100    2264            ljmp    _waitms
0811           2265   L028002?:
0811           2266   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:625: printf("Go Straight \r\n");
0811 74A8      2267            mov     a,#__str_8
0813 C0E0      2268            push    acc
0815 74D1      2269            mov     a,#(__str_8 >> 8)
0817 C0E0      2270            push    acc
0819 7480      2271            mov     a,#0x80
081B C0E0      2272            push    acc
081D 120100    2273            lcall   _printf
0820 1581      2274            dec     sp
0822 1581      2275            dec     sp
0824 1581      2276            dec     sp
0826           2277   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:627: PWMforward();
0826 020100    2278            ljmp    _PWMforward
0829           2279   ;------------------------------------------------------------
0829           2280   ;Allocation info for local variables in function 'laserPattern'
0829           2281   ;------------------------------------------------------------
0829           2282   ;rate                      Allocated to registers r2 r3 r4 r5 
0829           2283   ;------------------------------------------------------------
0829           2284   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:634: void laserPattern(float rate){
0829           2285   ;        -----------------------------------------
0829           2286   ;         function laserPattern
0829           2287   ;        -----------------------------------------
0829           2288   _laserPattern:
0829 AA82      2289            mov     r2,dpl
082B AB83      2290            mov     r3,dph
082D ACF0      2291            mov     r4,b
082F FD        2292            mov     r5,a
0830           2293   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:635: LASER = 0;
0830 C2B0      2294            clr     _P3_0
0832           2295   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:636: if(rate<0.8)
0832 C002      2296            push    ar2
0834 C003      2297            push    ar3
0836 C004      2298            push    ar4
0838 C005      2299            push    ar5
083A 74CD      2300            mov     a,#0xCD
083C C0E0      2301            push    acc
083E 74CC      2302            mov     a,#0xCC
0840 C0E0      2303            push    acc
0842 744C      2304            mov     a,#0x4C
0844 C0E0      2305            push    acc
0846 743F      2306            mov     a,#0x3F
0848 C0E0      2307            push    acc
084A 8A82      2308            mov     dpl,r2
084C 8B83      2309            mov     dph,r3
084E 8CF0      2310            mov     b,r4
0850 ED        2311            mov     a,r5
0851 120100    2312            lcall   ___fslt
0854 AE82      2313            mov     r6,dpl
0856 E581      2314            mov     a,sp
0858 24FC      2315            add     a,#0xfc
085A F581      2316            mov     sp,a
085C D005      2317            pop     ar5
085E D004      2318            pop     ar4
0860 D003      2319            pop     ar3
0862 D002      2320            pop     ar2
0864 EE        2321            mov     a,r6
0865 6001      2322            jz      L029010?
0867           2323   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:637: waitms(200);
0867 9000C8    2324            mov     dptr,#0x00C8
086A 120100    2325            lcall   _waitms
086D 020100    2326            ljmp    L029011?
0870           2327   L029010?:
0870           2328   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:638: else if(rate>=0.8 && rate<4.0)
0870 EE        2329            mov     a,r6
0871 7001      2330            jnz     L029006?
0873 C002      2331            push    ar2
0875 C003      2332            push    ar3
0877 C004      2333            push    ar4
0879 C005      2334            push    ar5
087B E4        2335            clr     a
087C C0E0      2336            push    acc
087E C0E0      2337            push    acc
0880 7480      2338            mov     a,#0x80
0882 C0E0      2339            push    acc
0884 7440      2340            mov     a,#0x40
0886 C0E0      2341            push    acc
0888 8A82      2342            mov     dpl,r2
088A 8B83      2343            mov     dph,r3
088C 8CF0      2344            mov     b,r4
088E ED        2345            mov     a,r5
088F 120100    2346            lcall   ___fslt
0892 AE82      2347            mov     r6,dpl
0894 E581      2348            mov     a,sp
0896 24FC      2349            add     a,#0xfc
0898 F581      2350            mov     sp,a
089A D005      2351            pop     ar5
089C D004      2352            pop     ar4
089E D003      2353            pop     ar3
08A0 D002      2354            pop     ar2
08A2 EE        2355            mov     a,r6
08A3 6001      2356            jz      L029006?
08A5           2357   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:639: waitms(500);
08A5 9001F4    2358            mov     dptr,#0x01F4
08A8 120100    2359            lcall   _waitms
08AB 8001      2360            sjmp    L029011?
08AD           2361   L029006?:
08AD           2362   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:640: else if(rate>=8.0 && rate<8.8)
08AD C002      2363            push    ar2
08AF C003      2364            push    ar3
08B1 C004      2365            push    ar4
08B3 C005      2366            push    ar5
08B5 E4        2367            clr     a
08B6 C0E0      2368            push    acc
08B8 C0E0      2369            push    acc
08BA C0E0      2370            push    acc
08BC 7441      2371            mov     a,#0x41
08BE C0E0      2372            push    acc
08C0 8A82      2373            mov     dpl,r2
08C2 8B83      2374            mov     dph,r3
08C4 8CF0      2375            mov     b,r4
08C6 ED        2376            mov     a,r5
08C7 120100    2377            lcall   ___fslt
08CA AE82      2378            mov     r6,dpl
08CC E581      2379            mov     a,sp
08CE 24FC      2380            add     a,#0xfc
08D0 F581      2381            mov     sp,a
08D2 D005      2382            pop     ar5
08D4 D004      2383            pop     ar4
08D6 D003      2384            pop     ar3
08D8 D002      2385            pop     ar2
08DA EE        2386            mov     a,r6
08DB 7001      2387            jnz     L029002?
08DD 74CD      2388            mov     a,#0xCD
08DF C0E0      2389            push    acc
08E1 74CC      2390            mov     a,#0xCC
08E3 C0E0      2391            push    acc
08E5 740C      2392            mov     a,#0x0C
08E7 C0E0      2393            push    acc
08E9 7441      2394            mov     a,#0x41
08EB C0E0      2395            push    acc
08ED 8A82      2396            mov     dpl,r2
08EF 8B83      2397            mov     dph,r3
08F1 8CF0      2398            mov     b,r4
08F3 ED        2399            mov     a,r5
08F4 120100    2400            lcall   ___fslt
08F7 AA82      2401            mov     r2,dpl
08F9 E581      2402            mov     a,sp
08FB 24FC      2403            add     a,#0xfc
08FD F581      2404            mov     sp,a
08FF EA        2405            mov     a,r2
0900 6001      2406            jz      L029002?
0902           2407   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:641: waitms(800);
0902 900320    2408            mov     dptr,#0x0320
0905 120100    2409            lcall   _waitms
0908 8001      2410            sjmp    L029011?
090A           2411   L029002?:
090A           2412   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:643: waitms(1000);
090A 9003E8    2413            mov     dptr,#0x03E8
090D 120100    2414            lcall   _waitms
0910           2415   L029011?:
0910           2416   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:644: LASER = 1;
0910 D2B0      2417            setb    _P3_0
0912 22        2418            ret
0913           2419   ;------------------------------------------------------------
0913           2420   ;Allocation info for local variables in function 'main'
0913           2421   ;------------------------------------------------------------
0913           2422   ;checkcommand              Allocated to registers 
0913           2423   ;i                         Allocated to registers r4 r5 
0913           2424   ;sig1                      Allocated to registers 
0913           2425   ;sig2                      Allocated to registers 
0913           2426   ;peak                      Allocated to registers 
0913           2427   ;voltspeak                 Allocated to registers 
0913           2428   ;periodpwm                 Allocated to registers 
0913           2429   ;period                    Allocated to registers r4 r5 r6 r7 
0913           2430   ;overflow_count            Allocated to registers r4 r5 
0913           2431   ;pir_voltage               Allocated to registers r2 r3 r4 r5 
0913           2432   ;mode_toggle               Allocated to registers r2 r3 
0913           2433   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0913           2434   ;------------------------------------------------------------
0913           2435   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:647: void main(void)
0913           2436   ;        -----------------------------------------
0913           2437   ;         function main
0913           2438   ;        -----------------------------------------
0913           2439   _main:
0913           2440   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:662: TL0=0;
0913 758A00    2441            mov     _TL0,#0x00
0916           2442   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:663: TH0=0;
0916 758C00    2443            mov     _TH0,#0x00
0919           2444   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:664: TF0=0;         
0919 C28D      2445            clr     _TF0
091B           2446   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:665: TIMER0_Init();
091B 120100    2447            lcall   _TIMER0_Init
091E           2448   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:667: InitPinADC(1, 6); // Configure P2.5 as analog input
091E 75F006    2449            mov     _InitPinADC_PARM_2,#0x06
0921 758201    2450            mov     dpl,#0x01
0924 120100    2451            lcall   _InitPinADC
0927           2452   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:668: InitPinADC(2, 3); //???        
0927 75F003    2453            mov     _InitPinADC_PARM_2,#0x03
092A 758202    2454            mov     dpl,#0x02
092D 120100    2455            lcall   _InitPinADC
0930           2456   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:669: InitPinADC(2, 4); //PIR
0930 75F004    2457            mov     _InitPinADC_PARM_2,#0x04
0933 758202    2458            mov     dpl,#0x02
0936 120100    2459            lcall   _InitPinADC
0939           2460   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:670: InitPinADC(2, 6); //Temp Sensor
0939 75F006    2461            mov     _InitPinADC_PARM_2,#0x06
093C 758202    2462            mov     dpl,#0x02
093F 120100    2463            lcall   _InitPinADC
0942           2464   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:671: InitADC();
0942 120100    2465            lcall   _InitADC
0945           2466   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:673: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0945 74E8      2467            mov     a,#__str_9
0947 C0E0      2468            push    acc
0949 74D2      2469            mov     a,#(__str_9 >> 8)
094B C0E0      2470            push    acc
094D 7480      2471            mov     a,#0x80
094F C0E0      2472            push    acc
0951 120100    2473            lcall   _printf
0954 1581      2474            dec     sp
0956 1581      2475            dec     sp
0958 1581      2476            dec     sp
095A           2477   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:675: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
095A 7428      2478            mov     a,#__str_10
095C C0E0      2479            push    acc
095E 74D3      2480            mov     a,#(__str_10 >> 8)
0960 C0E0      2481            push    acc
0962 7480      2482            mov     a,#0x80
0964 C0E0      2483            push    acc
0966 120100    2484            lcall   _printf
0969 1581      2485            dec     sp
096B 1581      2486            dec     sp
096D 1581      2487            dec     sp
096F           2488   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:677: printf("\n\r");
096F 7468      2489            mov     a,#__str_11
0971 C0E0      2490            push    acc
0973 74D3      2491            mov     a,#(__str_11 >> 8)
0975 C0E0      2492            push    acc
0977 7480      2493            mov     a,#0x80
0979 C0E0      2494            push    acc
097B 120100    2495            lcall   _printf
097E 1581      2496            dec     sp
0980 1581      2497            dec     sp
0982 1581      2498            dec     sp
0984           2499   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:679: PWMStop();
0984 120100    2500            lcall   _PWMStop
0987           2501   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:681: while (1)
0987           2502   L030026?:
0987           2503   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:683: mode_toggle = checkMode();
0987 120100    2504            lcall   _checkMode
098A AA82      2505            mov     r2,dpl
098C AB83      2506            mov     r3,dph
098E           2507   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:686: if(mode_toggle == 0){
098E EA        2508            mov     a,r2
098F 4B        2509            orl     a,r3
0990 6001      2510            jz      L030050?
0992 020100    2511            ljmp    L030023?
0995           2512   L030050?:
0995           2513   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:687: printf("auto \r\n");
0995 7468      2514            mov     a,#__str_12
0997 C0E0      2515            push    acc
0999 74D4      2516            mov     a,#(__str_12 >> 8)
099B C0E0      2517            push    acc
099D 7480      2518            mov     a,#0x80
099F C0E0      2519            push    acc
09A1 120100    2520            lcall   _printf
09A4 1581      2521            dec     sp
09A6 1581      2522            dec     sp
09A8 1581      2523            dec     sp
09AA           2524   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:689: TL0=0; 
09AA 758A00    2525            mov     _TL0,#0x00
09AD           2526   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:690: TH0=0;
09AD 758C00    2527            mov     _TH0,#0x00
09B0           2528   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:691: TF0=0;
09B0 C28D      2529            clr     _TF0
09B2           2530   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:693: while(P2_1!=0); // Wait for the signal to be zero
09B2           2531   L030001?:
09B2 20A1A8    2532            jb      _P2_1,L030001?
09B5           2533   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:694: while(P2_1!=1); // Wait for the signal to be one
09B5           2534   L030004?:
09B5 30A1E8    2535            jnb     _P2_1,L030004?
09B8           2536   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:695: TR0=1; // Start the timer
09B8 D28C      2537            setb    _TR0
09BA           2538   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:696: while(P2_1!=0) // Wait for the signal to be zero
09BA 7C00      2539            mov     r4,#0x00
09BC 7D00      2540            mov     r5,#0x00
09BE           2541   L030009?:
09BE 30A168    2542            jnb     _P2_1,L030011?
09C1           2543   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:698: if(TF0==1) // Did the 16-bit timer overflow?
09C1           2544   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:700: TF0=0;
09C1 108DA8    2545            jbc     _TF0,L030054?
09C4 8001      2546            sjmp    L030009?
09C6           2547   L030054?:
09C6           2548   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:701: overflow_count++;
09C6 0C        2549            inc     r4
09C7 BC0028    2550            cjne    r4,#0x00,L030009?
09CA 0D        2551            inc     r5
09CB 8001      2552            sjmp    L030009?
09CD           2553   L030011?:
09CD           2554   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:712: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
09CD C28C      2555            clr     _TR0
09CF           2556   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:713: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
09CF 8C82      2557            mov     dpl,r4
09D1 8D83      2558            mov     dph,r5
09D3 120100    2559            lcall   ___sint2fs
09D6 AC82      2560            mov     r4,dpl
09D8 AD83      2561            mov     r5,dph
09DA AEF0      2562            mov     r6,b
09DC FF        2563            mov     r7,a
09DD C004      2564            push    ar4
09DF C005      2565            push    ar5
09E1 C006      2566            push    ar6
09E3 C007      2567            push    ar7
09E5 900000    2568            mov     dptr,#0x0000
09E8 75F080    2569            mov     b,#0x80
09EB 7447      2570            mov     a,#0x47
09ED 120100    2571            lcall   ___fsmul
09F0 8582C8    2572            mov     _main_sloc0_1_0,dpl
09F3 8583C9    2573            mov     (_main_sloc0_1_0 + 1),dph
09F6 85F0CA    2574            mov     (_main_sloc0_1_0 + 2),b
09F9 F5CB      2575            mov     (_main_sloc0_1_0 + 3),a
09FB E581      2576            mov     a,sp
09FD 24FC      2577            add     a,#0xfc
09FF F581      2578            mov     sp,a
0A01 858C82    2579            mov     dpl,_TH0
0A04 120100    2580            lcall   ___uchar2fs
0A07 AC82      2581            mov     r4,dpl
0A09 AD83      2582            mov     r5,dph
0A0B AEF0      2583            mov     r6,b
0A0D FF        2584            mov     r7,a
0A0E C004      2585            push    ar4
0A10 C005      2586            push    ar5
0A12 C006      2587            push    ar6
0A14 C007      2588            push    ar7
0A16 900000    2589            mov     dptr,#0x0000
0A19 75F080    2590            mov     b,#0x80
0A1C 7443      2591            mov     a,#0x43
0A1E 120100    2592            lcall   ___fsmul
0A21 AC82      2593            mov     r4,dpl
0A23 AD83      2594            mov     r5,dph
0A25 AEF0      2595            mov     r6,b
0A27 FF        2596            mov     r7,a
0A28 E581      2597            mov     a,sp
0A2A 24FC      2598            add     a,#0xfc
0A2C F581      2599            mov     sp,a
0A2E C004      2600            push    ar4
0A30 C005      2601            push    ar5
0A32 C006      2602            push    ar6
0A34 C007      2603            push    ar7
0A36 85C882    2604            mov     dpl,_main_sloc0_1_0
0A39 85C983    2605            mov     dph,(_main_sloc0_1_0 + 1)
0A3C 85CAF0    2606            mov     b,(_main_sloc0_1_0 + 2)
0A3F E5CB      2607            mov     a,(_main_sloc0_1_0 + 3)
0A41 120100    2608            lcall   ___fsadd
0A44 8582C8    2609            mov     _main_sloc0_1_0,dpl
0A47 8583C9    2610            mov     (_main_sloc0_1_0 + 1),dph
0A4A 85F0CA    2611            mov     (_main_sloc0_1_0 + 2),b
0A4D F5CB      2612            mov     (_main_sloc0_1_0 + 3),a
0A4F E581      2613            mov     a,sp
0A51 24FC      2614            add     a,#0xfc
0A53 F581      2615            mov     sp,a
0A55 AC8A      2616            mov     r4,_TL0
0A57 7D00      2617            mov     r5,#0x00
0A59 8C82      2618            mov     dpl,r4
0A5B 8D83      2619            mov     dph,r5
0A5D 120100    2620            lcall   ___sint2fs
0A60 AC82      2621            mov     r4,dpl
0A62 AD83      2622            mov     r5,dph
0A64 AEF0      2623            mov     r6,b
0A66 FF        2624            mov     r7,a
0A67 C004      2625            push    ar4
0A69 C005      2626            push    ar5
0A6B C006      2627            push    ar6
0A6D C007      2628            push    ar7
0A6F 85C882    2629            mov     dpl,_main_sloc0_1_0
0A72 85C983    2630            mov     dph,(_main_sloc0_1_0 + 1)
0A75 85CAF0    2631            mov     b,(_main_sloc0_1_0 + 2)
0A78 E5CB      2632            mov     a,(_main_sloc0_1_0 + 3)
0A7A 120100    2633            lcall   ___fsadd
0A7D AC82      2634            mov     r4,dpl
0A7F AD83      2635            mov     r5,dph
0A81 AEF0      2636            mov     r6,b
0A83 FF        2637            mov     r7,a
0A84 E581      2638            mov     a,sp
0A86 24FC      2639            add     a,#0xfc
0A88 F581      2640            mov     sp,a
0A8A C004      2641            push    ar4
0A8C C005      2642            push    ar5
0A8E C006      2643            push    ar6
0A90 C007      2644            push    ar7
0A92 90F4FC    2645            mov     dptr,#0xF4FC
0A95 75F032    2646            mov     b,#0x32
0A98 7434      2647            mov     a,#0x34
0A9A 120100    2648            lcall   ___fsmul
0A9D AC82      2649            mov     r4,dpl
0A9F AD83      2650            mov     r5,dph
0AA1 AEF0      2651            mov     r6,b
0AA3 FF        2652            mov     r7,a
0AA4 E581      2653            mov     a,sp
0AA6 24FC      2654            add     a,#0xfc
0AA8 F581      2655            mov     sp,a
0AAA           2656   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:715: printf( "\rT=%f ms   \n ", period*1000.0);
0AAA C004      2657            push    ar4
0AAC C005      2658            push    ar5
0AAE C006      2659            push    ar6
0AB0 C007      2660            push    ar7
0AB2 900000    2661            mov     dptr,#0x0000
0AB5 75F07A    2662            mov     b,#0x7A
0AB8 7444      2663            mov     a,#0x44
0ABA 120100    2664            lcall   ___fsmul
0ABD AC82      2665            mov     r4,dpl
0ABF AD83      2666            mov     r5,dph
0AC1 AEF0      2667            mov     r6,b
0AC3 FF        2668            mov     r7,a
0AC4 E581      2669            mov     a,sp
0AC6 24FC      2670            add     a,#0xfc
0AC8 F581      2671            mov     sp,a
0ACA C004      2672            push    ar4
0ACC C005      2673            push    ar5
0ACE C006      2674            push    ar6
0AD0 C007      2675            push    ar7
0AD2 C004      2676            push    ar4
0AD4 C005      2677            push    ar5
0AD6 C006      2678            push    ar6
0AD8 C007      2679            push    ar7
0ADA 74E8      2680            mov     a,#__str_13
0ADC C0E0      2681            push    acc
0ADE 74D5      2682            mov     a,#(__str_13 >> 8)
0AE0 C0E0      2683            push    acc
0AE2 7480      2684            mov     a,#0x80
0AE4 C0E0      2685            push    acc
0AE6 120100    2686            lcall   _printf
0AE9 E581      2687            mov     a,sp
0AEB 24F9      2688            add     a,#0xf9
0AED F581      2689            mov     sp,a
0AEF           2690   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:716: waitms(50);
0AEF 900032    2691            mov     dptr,#0x0032
0AF2 120100    2692            lcall   _waitms
0AF5 D007      2693            pop     ar7
0AF7 D006      2694            pop     ar6
0AF9 D005      2695            pop     ar5
0AFB D004      2696            pop     ar4
0AFD           2697   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:717: detectobstacle(period*1000.0);
0AFD 8C82      2698            mov     dpl,r4
0AFF 8D83      2699            mov     dph,r5
0B01 8EF0      2700            mov     b,r6
0B03 EF        2701            mov     a,r7
0B04 C004      2702            push    ar4
0B06 C005      2703            push    ar5
0B08 C006      2704            push    ar6
0B0A C007      2705            push    ar7
0B0C 120100    2706            lcall   _detectobstacle
0B0F D007      2707            pop     ar7
0B11 D006      2708            pop     ar6
0B13 D005      2709            pop     ar5
0B15 D004      2710            pop     ar4
0B17           2711   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:718: laserPattern(period*1000);
0B17 8C82      2712            mov     dpl,r4
0B19 8D83      2713            mov     dph,r5
0B1B 8EF0      2714            mov     b,r6
0B1D EF        2715            mov     a,r7
0B1E 120100    2716            lcall   _laserPattern
0B21           2717   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:727: waitms(50);    
0B21 900032    2718            mov     dptr,#0x0032
0B24 120100    2719            lcall   _waitms
0B27 020100    2720            ljmp    L030026?
0B2A           2721   L030023?:
0B2A           2722   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:731: else if(mode_toggle == 1){
0B2A BA0128    2723            cjne    r2,#0x01,L030055?
0B2D BB0028    2724            cjne    r3,#0x00,L030055?
0B30 8001      2725            sjmp    L030056?
0B32           2726   L030055?:
0B32 020100    2727            ljmp    L030020?
0B35           2728   L030056?:
0B35           2729   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:732: recieveData();         //keep reading data continously 
0B35 120100    2730            lcall   _recieveData
0B38           2731   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:733: printf("Command: ");
0B38 74E8      2732            mov     a,#__str_14
0B3A C0E0      2733            push    acc
0B3C 74D6      2734            mov     a,#(__str_14 >> 8)
0B3E C0E0      2735            push    acc
0B40 7480      2736            mov     a,#0x80
0B42 C0E0      2737            push    acc
0B44 120100    2738            lcall   _printf
0B47 1581      2739            dec     sp
0B49 1581      2740            dec     sp
0B4B 1581      2741            dec     sp
0B4D           2742   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:734: for(i=0; i<4; i++)
0B4D 7C00      2743            mov     r4,#0x00
0B4F 7D00      2744            mov     r5,#0x00
0B51           2745   L030028?:
0B51 C3        2746            clr     c
0B52 EC        2747            mov     a,r4
0B53 9404      2748            subb    a,#0x04
0B55 ED        2749            mov     a,r5
0B56 6480      2750            xrl     a,#0x80
0B58 9480      2751            subb    a,#0x80
0B5A 5001      2752            jnc     L030031?
0B5C           2753   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:735: printf("%d\t", command[i]);
0B5C 8C06      2754            mov     ar6,r4
0B5E ED        2755            mov     a,r5
0B5F CE        2756            xch     a,r6
0B60 25E0      2757            add     a,acc
0B62 CE        2758            xch     a,r6
0B63 33        2759            rlc     a
0B64 EE        2760            mov     a,r6
0B65 2408      2761            add     a,#_command
0B67 F8        2762            mov     r0,a
0B68 8606      2763            mov     ar6,@r0
0B6A 08        2764            inc     r0
0B6B 8607      2765            mov     ar7,@r0
0B6D 18        2766            dec     r0
0B6E C004      2767            push    ar4
0B70 C005      2768            push    ar5
0B72 C006      2769            push    ar6
0B74 C007      2770            push    ar7
0B76 74A8      2771            mov     a,#__str_15
0B78 C0E0      2772            push    acc
0B7A 74D7      2773            mov     a,#(__str_15 >> 8)
0B7C C0E0      2774            push    acc
0B7E 7480      2775            mov     a,#0x80
0B80 C0E0      2776            push    acc
0B82 120100    2777            lcall   _printf
0B85 E581      2778            mov     a,sp
0B87 24FB      2779            add     a,#0xfb
0B89 F581      2780            mov     sp,a
0B8B D005      2781            pop     ar5
0B8D D004      2782            pop     ar4
0B8F           2783   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:734: for(i=0; i<4; i++)
0B8F 0C        2784            inc     r4
0B90 BC0028    2785            cjne    r4,#0x00,L030028?
0B93 0D        2786            inc     r5
0B94 8001      2787            sjmp    L030028?
0B96           2788   L030031?:
0B96           2789   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:736: printf("\n\r");
0B96 7468      2790            mov     a,#__str_11
0B98 C0E0      2791            push    acc
0B9A 74D3      2792            mov     a,#(__str_11 >> 8)
0B9C C0E0      2793            push    acc
0B9E 7480      2794            mov     a,#0x80
0BA0 C0E0      2795            push    acc
0BA2 120100    2796            lcall   _printf
0BA5 1581      2797            dec     sp
0BA7 1581      2798            dec     sp
0BA9 1581      2799            dec     sp
0BAB           2800   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:737: command[0] = 0;
0BAB 750800    2801            mov     _command,#0x00
0BAE 750900    2802            mov     (_command + 1),#0x00
0BB1           2803   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:738: command[1] = 0;
0BB1 750A00    2804            mov     (_command + 0x0002),#0x00
0BB4 750B00    2805            mov     ((_command + 0x0002) + 1),#0x00
0BB7           2806   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:739: command[2] = 0;
0BB7 750C00    2807            mov     (_command + 0x0004),#0x00
0BBA 750D00    2808            mov     ((_command + 0x0004) + 1),#0x00
0BBD           2809   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:740: command[3] = 0;
0BBD 750E00    2810            mov     (_command + 0x0006),#0x00
0BC0 750F00    2811            mov     ((_command + 0x0006) + 1),#0x00
0BC3 020100    2812            ljmp    L030026?
0BC6           2813   L030020?:
0BC6           2814   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:744: else if( mode_toggle == 3){
0BC6 BA03E8    2815            cjne    r2,#0x03,L030059?
0BC9 BB00E8    2816            cjne    r3,#0x00,L030059?
0BCC 8001      2817            sjmp    L030060?
0BCE           2818   L030059?:
0BCE 020100    2819            ljmp    L030017?
0BD1           2820   L030060?:
0BD1           2821   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:745: pir_voltage = Volts_at_Pin(QFP32_MUX_P2_4);
0BD1 758211    2822            mov     dpl,#0x11
0BD4 120100    2823            lcall   _Volts_at_Pin
0BD7 AA82      2824            mov     r2,dpl
0BD9 AB83      2825            mov     r3,dph
0BDB ACF0      2826            mov     r4,b
0BDD FD        2827            mov     r5,a
0BDE           2828   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:746: if(pir_voltage >= 3.0 && pir_voltage <= 3.4)
0BDE C002      2829            push    ar2
0BE0 C003      2830            push    ar3
0BE2 C004      2831            push    ar4
0BE4 C005      2832            push    ar5
0BE6 E4        2833            clr     a
0BE7 C0E0      2834            push    acc
0BE9 C0E0      2835            push    acc
0BEB 7440      2836            mov     a,#0x40
0BED C0E0      2837            push    acc
0BEF C0E0      2838            push    acc
0BF1 8A82      2839            mov     dpl,r2
0BF3 8B83      2840            mov     dph,r3
0BF5 8CF0      2841            mov     b,r4
0BF7 ED        2842            mov     a,r5
0BF8 120100    2843            lcall   ___fslt
0BFB AE82      2844            mov     r6,dpl
0BFD E581      2845            mov     a,sp
0BFF 24FC      2846            add     a,#0xfc
0C01 F581      2847            mov     sp,a
0C03 D005      2848            pop     ar5
0C05 D004      2849            pop     ar4
0C07 D003      2850            pop     ar3
0C09 D002      2851            pop     ar2
0C0B EE        2852            mov     a,r6
0C0C 7001      2853            jnz     L030013?
0C0E C002      2854            push    ar2
0C10 C003      2855            push    ar3
0C12 C004      2856            push    ar4
0C14 C005      2857            push    ar5
0C16 749A      2858            mov     a,#0x9A
0C18 C0E0      2859            push    acc
0C1A 7499      2860            mov     a,#0x99
0C1C C0E0      2861            push    acc
0C1E 7459      2862            mov     a,#0x59
0C20 C0E0      2863            push    acc
0C22 7440      2864            mov     a,#0x40
0C24 C0E0      2865            push    acc
0C26 8A82      2866            mov     dpl,r2
0C28 8B83      2867            mov     dph,r3
0C2A 8CF0      2868            mov     b,r4
0C2C ED        2869            mov     a,r5
0C2D 120100    2870            lcall   ___fsgt
0C30 AE82      2871            mov     r6,dpl
0C32 E581      2872            mov     a,sp
0C34 24FC      2873            add     a,#0xfc
0C36 F581      2874            mov     sp,a
0C38 D005      2875            pop     ar5
0C3A D004      2876            pop     ar4
0C3C D003      2877            pop     ar3
0C3E D002      2878            pop     ar2
0C40 EE        2879            mov     a,r6
0C41 7001      2880            jnz     L030013?
0C43           2881   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:747: PWMStop();
0C43 C002      2882            push    ar2
0C45 C003      2883            push    ar3
0C47 C004      2884            push    ar4
0C49 C005      2885            push    ar5
0C4B 120100    2886            lcall   _PWMStop
0C4E D005      2887            pop     ar5
0C50 D004      2888            pop     ar4
0C52 D003      2889            pop     ar3
0C54 D002      2890            pop     ar2
0C56 8001      2891            sjmp    L030014?
0C58           2892   L030013?:
0C58           2893   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:749: PWMforward();
0C58 C002      2894            push    ar2
0C5A C003      2895            push    ar3
0C5C C004      2896            push    ar4
0C5E C005      2897            push    ar5
0C60 120100    2898            lcall   _PWMforward
0C63 D005      2899            pop     ar5
0C65 D004      2900            pop     ar4
0C67 D003      2901            pop     ar3
0C69 D002      2902            pop     ar2
0C6B           2903   L030014?:
0C6B           2904   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:750: waitms(100);
0C6B 900064    2905            mov     dptr,#0x0064
0C6E C002      2906            push    ar2
0C70 C003      2907            push    ar3
0C72 C004      2908            push    ar4
0C74 C005      2909            push    ar5
0C76 120100    2910            lcall   _waitms
0C79           2911   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:751: printf("pir_voltage: %f \r\n", pir_voltage);
0C79 7428      2912            mov     a,#__str_16
0C7B C0E0      2913            push    acc
0C7D 74D9      2914            mov     a,#(__str_16 >> 8)
0C7F C0E0      2915            push    acc
0C81 7480      2916            mov     a,#0x80
0C83 C0E0      2917            push    acc
0C85 120100    2918            lcall   _printf
0C88 E581      2919            mov     a,sp
0C8A 24F9      2920            add     a,#0xf9
0C8C F581      2921            mov     sp,a
0C8E 020100    2922            ljmp    L030026?
0C91           2923   L030017?:
0C91           2924   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:755: printf("Do nothing\r\n");      
0C91 7468      2925            mov     a,#__str_17
0C93 C0E0      2926            push    acc
0C95 74D9      2927            mov     a,#(__str_17 >> 8)
0C97 C0E0      2928            push    acc
0C99 7480      2929            mov     a,#0x80
0C9B C0E0      2930            push    acc
0C9D 120100    2931            lcall   _printf
0CA0 1581      2932            dec     sp
0CA2 1581      2933            dec     sp
0CA4 1581      2934            dec     sp
0CA6 020100    2935            ljmp    L030026?
0CA9           2936            rseg R_CSEG
0CA9           2937   
0000           2938            rseg R_XINIT
0000           2939   
0000           2940            rseg R_CONST
0000           2941   __str_0:
0000 4261636B  2942            db 'Backward'
     77617264
0008 0A        2943            db 0x0A
0009 0D        2944            db 0x0D
000A 00        2945            db 0x00
000B           2946   __str_1:
000B 466F7277  2947            db 'Forward'
     617264
0012 0A        2948            db 0x0A
0013 0D        2949            db 0x0D
0014 00        2950            db 0x00
0015           2951   __str_2:
0015 52696768  2952            db 'Right'
     74
001A 0A        2953            db 0x0A
001B 0D        2954            db 0x0D
001C 00        2955            db 0x00
001D           2956   __str_3:
001D 4C656674  2957            db 'Left'
0021 0A        2958            db 0x0A
0022 0D        2959            db 0x0D
0023 00        2960            db 0x00
0024           2961   __str_4:
0024 53746F70  2962            db 'Stop'
0028 0A        2963            db 0x0A
0029 0D        2964            db 0x0D
002A 00        2965            db 0x00
002B           2966   __str_5:
002B 2566      2967            db '%f'
002D 0A        2968            db 0x0A
002E 0D        2969            db 0x0D
002F 00        2970            db 0x00
0030           2971   __str_6:
0030 0A        2972            db 0x0A
0031 72656164  2973            db 'read 1:  at pin 2.3: %f'
     20313A20
     20617420
     70696E20
     322E333A
     202566
0048 0D        2974            db 0x0D
0049 00        2975            db 0x00
004A           2976   __str_7:
004A 5475726E  2977            db 'Turn right '
     20726967
     687420
0055 0D        2978            db 0x0D
0056 0A        2979            db 0x0A
0057 00        2980            db 0x00
0058           2981   __str_8:
0058 476F2053  2982            db 'Go Straight '
     74726169
     67687420
0064 0D        2983            db 0x0D
0065 0A        2984            db 0x0A
0066 00        2985            db 0x00
0067           2986   __str_9:
0067 1B        2987            db 0x1B
0068 5B324A    2988            db '[2J'
006B 00        2989            db 0x00
006C           2990   __str_10:
006C 53717561  2991            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0092 0D        2992            db 0x0D
0093 0A        2993            db 0x0A
0094 43686563  2994            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
00A8 50322E31  2995            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00C3 0D        2996            db 0x0D
00C4 0A        2997            db 0x0A
00C5 00        2998            db 0x00
00C6           2999   __str_11:
00C6 0A        3000            db 0x0A
00C7 0D        3001            db 0x0D
00C8 00        3002            db 0x00
00C9           3003   __str_12:
00C9 6175746F  3004            db 'auto '
     20
00CE 0D        3005            db 0x0D
00CF 0A        3006            db 0x0A
00D0 00        3007            db 0x00
00D1           3008   __str_13:
00D1 0D        3009            db 0x0D
00D2 543D2566  3010            db 'T=%f ms   '
     206D7320
     2020
00DC 0A        3011            db 0x0A
00DD 20        3012            db ' '
00DE 00        3013            db 0x00
00DF           3014   __str_14:
00DF 436F6D6D  3015            db 'Command: '
     616E643A
     20
00E8 00        3016            db 0x00
00E9           3017   __str_15:
00E9 2564      3018            db '%d'
00EB 09        3019            db 0x09
00EC 00        3020            db 0x00
00ED           3021   __str_16:
00ED 7069725F  3022            db 'pir_voltage: %f '
     766F6C74
     6167653A
     20256620
00FD 0D        3023            db 0x0D
00FE 0A        3024            db 0x0A
00FF 00        3025            db 0x00
0100           3026   __str_17:
0100 446F206E  3027            db 'Do nothing'
     6F746869
     6E67
010A 0D        3028            db 0x0D
010B 0A        3029            db 0x0A
010C 00        3030            db 0x00
010D           3031   
002E           3032            CSEG
002E           3033   
002E           3034   end
