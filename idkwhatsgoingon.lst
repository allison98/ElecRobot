0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 02 19:51:24 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _detectobstacle
0000             32            public _checkMode
0000             33            public _recieveData
0000             34            public _waitquarterperiod
0000             35            public _getDigitalSignal
0000             36            public _voltsAtPeak
0000             37            public _checkCommands
0000             38            public _arrayEqual
0000             39            public _zero_time_calc
0000             40            public _PWMStop
0000             41            public _PWMRight
0000             42            public _PWMLeft
0000             43            public _PWMbackward
0000             44            public _PWMforward
0000             45            public _InitPinADC
0000             46            public _Volts_at_Pin
0000             47            public _TIMER0_Init
0000             48            public _InitADC
0000             49            public _Timer2_ISR
0000             50            public _ADC_at_Pin
0000             51            public _waitms
0000             52            public _Timer3us
0000             53            public __c51_external_startup
0000             54            public _x
0000             55            public _command
0000             56            public _right
0000             57            public _left
0000             58            public _backward
0000             59            public _forward
0000             60            public _stop
0000             61            public _claw_flag
0000             62            public _flag
0000             63            public _cartMoveB
0000             64            public _cartMoveF
0000             65            public _pwmSig6
0000             66            public _pwmSig5
0000             67            public _pwmSig4
0000             68            public _pwmSig3
0000             69            public _pwmSig2
0000             70            public _pwmSig1
0000             71            public _pwm_count3
0000             72            public _pwm_count2
0000             73            public _pwm_count1
0000             74            public _pwm_count
0000             75   ;--------------------------------------------------------
0000             76   ; Special Function Registers
0000             77   ;--------------------------------------------------------
0000             78   _ACC            DATA 0xe0
0000             79   _ADC0ASAH       DATA 0xb6
0000             80   _ADC0ASAL       DATA 0xb5
0000             81   _ADC0ASCF       DATA 0xa1
0000             82   _ADC0ASCT       DATA 0xc7
0000             83   _ADC0CF0        DATA 0xbc
0000             84   _ADC0CF1        DATA 0xb9
0000             85   _ADC0CF2        DATA 0xdf
0000             86   _ADC0CN0        DATA 0xe8
0000             87   _ADC0CN1        DATA 0xb2
0000             88   _ADC0CN2        DATA 0xb3
0000             89   _ADC0GTH        DATA 0xc4
0000             90   _ADC0GTL        DATA 0xc3
0000             91   _ADC0H          DATA 0xbe
0000             92   _ADC0L          DATA 0xbd
0000             93   _ADC0LTH        DATA 0xc6
0000             94   _ADC0LTL        DATA 0xc5
0000             95   _ADC0MX         DATA 0xbb
0000             96   _B              DATA 0xf0
0000             97   _CKCON0         DATA 0x8e
0000             98   _CKCON1         DATA 0xa6
0000             99   _CLEN0          DATA 0xc6
0000            100   _CLIE0          DATA 0xc7
0000            101   _CLIF0          DATA 0xe8
0000            102   _CLKSEL         DATA 0xa9
0000            103   _CLOUT0         DATA 0xd1
0000            104   _CLU0CF         DATA 0xb1
0000            105   _CLU0FN         DATA 0xaf
0000            106   _CLU0MX         DATA 0x84
0000            107   _CLU1CF         DATA 0xb3
0000            108   _CLU1FN         DATA 0xb2
0000            109   _CLU1MX         DATA 0x85
0000            110   _CLU2CF         DATA 0xb6
0000            111   _CLU2FN         DATA 0xb5
0000            112   _CLU2MX         DATA 0x91
0000            113   _CLU3CF         DATA 0xbf
0000            114   _CLU3FN         DATA 0xbe
0000            115   _CLU3MX         DATA 0xae
0000            116   _CMP0CN0        DATA 0x9b
0000            117   _CMP0CN1        DATA 0x99
0000            118   _CMP0MD         DATA 0x9d
0000            119   _CMP0MX         DATA 0x9f
0000            120   _CMP1CN0        DATA 0xbf
0000            121   _CMP1CN1        DATA 0xac
0000            122   _CMP1MD         DATA 0xab
0000            123   _CMP1MX         DATA 0xaa
0000            124   _CRC0CN0        DATA 0xce
0000            125   _CRC0CN1        DATA 0x86
0000            126   _CRC0CNT        DATA 0xd3
0000            127   _CRC0DAT        DATA 0xcb
0000            128   _CRC0FLIP       DATA 0xcf
0000            129   _CRC0IN         DATA 0xca
0000            130   _CRC0ST         DATA 0xd2
0000            131   _DAC0CF0        DATA 0x91
0000            132   _DAC0CF1        DATA 0x92
0000            133   _DAC0H          DATA 0x85
0000            134   _DAC0L          DATA 0x84
0000            135   _DAC1CF0        DATA 0x93
0000            136   _DAC1CF1        DATA 0x94
0000            137   _DAC1H          DATA 0x8a
0000            138   _DAC1L          DATA 0x89
0000            139   _DAC2CF0        DATA 0x95
0000            140   _DAC2CF1        DATA 0x96
0000            141   _DAC2H          DATA 0x8c
0000            142   _DAC2L          DATA 0x8b
0000            143   _DAC3CF0        DATA 0x9a
0000            144   _DAC3CF1        DATA 0x9c
0000            145   _DAC3H          DATA 0x8e
0000            146   _DAC3L          DATA 0x8d
0000            147   _DACGCF0        DATA 0x88
0000            148   _DACGCF1        DATA 0x98
0000            149   _DACGCF2        DATA 0xa2
0000            150   _DERIVID        DATA 0xad
0000            151   _DEVICEID       DATA 0xb5
0000            152   _DPH            DATA 0x83
0000            153   _DPL            DATA 0x82
0000            154   _EIE1           DATA 0xe6
0000            155   _EIE2           DATA 0xf3
0000            156   _EIP1           DATA 0xbb
0000            157   _EIP1H          DATA 0xee
0000            158   _EIP2           DATA 0xed
0000            159   _EIP2H          DATA 0xf6
0000            160   _EMI0CN         DATA 0xe7
0000            161   _FLKEY          DATA 0xb7
0000            162   _HFO0CAL        DATA 0xc7
0000            163   _HFO1CAL        DATA 0xd6
0000            164   _HFOCN          DATA 0xef
0000            165   _I2C0ADM        DATA 0xff
0000            166   _I2C0CN0        DATA 0xba
0000            167   _I2C0DIN        DATA 0xbc
0000            168   _I2C0DOUT       DATA 0xbb
0000            169   _I2C0FCN0       DATA 0xad
0000            170   _I2C0FCN1       DATA 0xab
0000            171   _I2C0FCT        DATA 0xf5
0000            172   _I2C0SLAD       DATA 0xbd
0000            173   _I2C0STAT       DATA 0xb9
0000            174   _IE             DATA 0xa8
0000            175   _IP             DATA 0xb8
0000            176   _IPH            DATA 0xf2
0000            177   _IT01CF         DATA 0xe4
0000            178   _LFO0CN         DATA 0xb1
0000            179   _P0             DATA 0x80
0000            180   _P0MASK         DATA 0xfe
0000            181   _P0MAT          DATA 0xfd
0000            182   _P0MDIN         DATA 0xf1
0000            183   _P0MDOUT        DATA 0xa4
0000            184   _P0SKIP         DATA 0xd4
0000            185   _P1             DATA 0x90
0000            186   _P1MASK         DATA 0xee
0000            187   _P1MAT          DATA 0xed
0000            188   _P1MDIN         DATA 0xf2
0000            189   _P1MDOUT        DATA 0xa5
0000            190   _P1SKIP         DATA 0xd5
0000            191   _P2             DATA 0xa0
0000            192   _P2MASK         DATA 0xfc
0000            193   _P2MAT          DATA 0xfb
0000            194   _P2MDIN         DATA 0xf3
0000            195   _P2MDOUT        DATA 0xa6
0000            196   _P2SKIP         DATA 0xcc
0000            197   _P3             DATA 0xb0
0000            198   _P3MDIN         DATA 0xf4
0000            199   _P3MDOUT        DATA 0x9c
0000            200   _PCA0CENT       DATA 0x9e
0000            201   _PCA0CLR        DATA 0x9c
0000            202   _PCA0CN0        DATA 0xd8
0000            203   _PCA0CPH0       DATA 0xfc
0000            204   _PCA0CPH1       DATA 0xea
0000            205   _PCA0CPH2       DATA 0xec
0000            206   _PCA0CPH3       DATA 0xf5
0000            207   _PCA0CPH4       DATA 0x85
0000            208   _PCA0CPH5       DATA 0xde
0000            209   _PCA0CPL0       DATA 0xfb
0000            210   _PCA0CPL1       DATA 0xe9
0000            211   _PCA0CPL2       DATA 0xeb
0000            212   _PCA0CPL3       DATA 0xf4
0000            213   _PCA0CPL4       DATA 0x84
0000            214   _PCA0CPL5       DATA 0xdd
0000            215   _PCA0CPM0       DATA 0xda
0000            216   _PCA0CPM1       DATA 0xdb
0000            217   _PCA0CPM2       DATA 0xdc
0000            218   _PCA0CPM3       DATA 0xae
0000            219   _PCA0CPM4       DATA 0xaf
0000            220   _PCA0CPM5       DATA 0xcc
0000            221   _PCA0H          DATA 0xfa
0000            222   _PCA0L          DATA 0xf9
0000            223   _PCA0MD         DATA 0xd9
0000            224   _PCA0POL        DATA 0x96
0000            225   _PCA0PWM        DATA 0xf7
0000            226   _PCON0          DATA 0x87
0000            227   _PCON1          DATA 0xcd
0000            228   _PFE0CN         DATA 0xc1
0000            229   _PRTDRV         DATA 0xf6
0000            230   _PSCTL          DATA 0x8f
0000            231   _PSTAT0         DATA 0xaa
0000            232   _PSW            DATA 0xd0
0000            233   _REF0CN         DATA 0xd1
0000            234   _REG0CN         DATA 0xc9
0000            235   _REVID          DATA 0xb6
0000            236   _RSTSRC         DATA 0xef
0000            237   _SBCON1         DATA 0x94
0000            238   _SBRLH1         DATA 0x96
0000            239   _SBRLL1         DATA 0x95
0000            240   _SBUF           DATA 0x99
0000            241   _SBUF0          DATA 0x99
0000            242   _SBUF1          DATA 0x92
0000            243   _SCON           DATA 0x98
0000            244   _SCON0          DATA 0x98
0000            245   _SCON1          DATA 0xc8
0000            246   _SFRPAGE        DATA 0xa7
0000            247   _SFRPGCN        DATA 0xbc
0000            248   _SFRSTACK       DATA 0xd7
0000            249   _SMB0ADM        DATA 0xd6
0000            250   _SMB0ADR        DATA 0xd7
0000            251   _SMB0CF         DATA 0xc1
0000            252   _SMB0CN0        DATA 0xc0
0000            253   _SMB0DAT        DATA 0xc2
0000            254   _SMB0FCN0       DATA 0xc3
0000            255   _SMB0FCN1       DATA 0xc4
0000            256   _SMB0FCT        DATA 0xef
0000            257   _SMB0RXLN       DATA 0xc5
0000            258   _SMB0TC         DATA 0xac
0000            259   _SMOD1          DATA 0x93
0000            260   _SP             DATA 0x81
0000            261   _SPI0CFG        DATA 0xa1
0000            262   _SPI0CKR        DATA 0xa2
0000            263   _SPI0CN0        DATA 0xf8
0000            264   _SPI0DAT        DATA 0xa3
0000            265   _SPI0FCN0       DATA 0x9a
0000            266   _SPI0FCN1       DATA 0x9b
0000            267   _SPI0FCT        DATA 0xf7
0000            268   _SPI0PCF        DATA 0xdf
0000            269   _TCON           DATA 0x88
0000            270   _TH0            DATA 0x8c
0000            271   _TH1            DATA 0x8d
0000            272   _TL0            DATA 0x8a
0000            273   _TL1            DATA 0x8b
0000            274   _TMOD           DATA 0x89
0000            275   _TMR2CN0        DATA 0xc8
0000            276   _TMR2CN1        DATA 0xfd
0000            277   _TMR2H          DATA 0xcf
0000            278   _TMR2L          DATA 0xce
0000            279   _TMR2RLH        DATA 0xcb
0000            280   _TMR2RLL        DATA 0xca
0000            281   _TMR3CN0        DATA 0x91
0000            282   _TMR3CN1        DATA 0xfe
0000            283   _TMR3H          DATA 0x95
0000            284   _TMR3L          DATA 0x94
0000            285   _TMR3RLH        DATA 0x93
0000            286   _TMR3RLL        DATA 0x92
0000            287   _TMR4CN0        DATA 0x98
0000            288   _TMR4CN1        DATA 0xff
0000            289   _TMR4H          DATA 0xa5
0000            290   _TMR4L          DATA 0xa4
0000            291   _TMR4RLH        DATA 0xa3
0000            292   _TMR4RLL        DATA 0xa2
0000            293   _TMR5CN0        DATA 0xc0
0000            294   _TMR5CN1        DATA 0xf1
0000            295   _TMR5H          DATA 0xd5
0000            296   _TMR5L          DATA 0xd4
0000            297   _TMR5RLH        DATA 0xd3
0000            298   _TMR5RLL        DATA 0xd2
0000            299   _UART0PCF       DATA 0xd9
0000            300   _UART1FCN0      DATA 0x9d
0000            301   _UART1FCN1      DATA 0xd8
0000            302   _UART1FCT       DATA 0xfa
0000            303   _UART1LIN       DATA 0x9e
0000            304   _UART1PCF       DATA 0xda
0000            305   _VDM0CN         DATA 0xff
0000            306   _WDTCN          DATA 0x97
0000            307   _XBR0           DATA 0xe1
0000            308   _XBR1           DATA 0xe2
0000            309   _XBR2           DATA 0xe3
0000            310   _XOSC0CN        DATA 0x86
0000            311   _DPTR           DATA 0x8382
0000            312   _TMR2RL         DATA 0xcbca
0000            313   _TMR3RL         DATA 0x9392
0000            314   _TMR4RL         DATA 0xa3a2
0000            315   _TMR5RL         DATA 0xd3d2
0000            316   _TMR0           DATA 0x8c8a
0000            317   _TMR1           DATA 0x8d8b
0000            318   _TMR2           DATA 0xcfce
0000            319   _TMR3           DATA 0x9594
0000            320   _TMR4           DATA 0xa5a4
0000            321   _TMR5           DATA 0xd5d4
0000            322   _SBRL1          DATA 0x9695
0000            323   _PCA0           DATA 0xfaf9
0000            324   _PCA0CP0        DATA 0xfcfb
0000            325   _PCA0CP1        DATA 0xeae9
0000            326   _PCA0CP2        DATA 0xeceb
0000            327   _PCA0CP3        DATA 0xf5f4
0000            328   _PCA0CP4        DATA 0x8584
0000            329   _PCA0CP5        DATA 0xdedd
0000            330   _ADC0ASA        DATA 0xb6b5
0000            331   _ADC0GT         DATA 0xc4c3
0000            332   _ADC0           DATA 0xbebd
0000            333   _ADC0LT         DATA 0xc6c5
0000            334   _DAC0           DATA 0x8584
0000            335   _DAC1           DATA 0x8a89
0000            336   _DAC2           DATA 0x8c8b
0000            337   _DAC3           DATA 0x8e8d
0000            338   ;--------------------------------------------------------
0000            339   ; special function bits
0000            340   ;--------------------------------------------------------
0000            341   _ACC_0          BIT 0xe0
0000            342   _ACC_1          BIT 0xe1
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_3          BIT 0xe3
0000            345   _ACC_4          BIT 0xe4
0000            346   _ACC_5          BIT 0xe5
0000            347   _ACC_6          BIT 0xe6
0000            348   _ACC_7          BIT 0xe7
0000            349   _TEMPE          BIT 0xe8
0000            350   _ADGN0          BIT 0xe9
0000            351   _ADGN1          BIT 0xea
0000            352   _ADWINT         BIT 0xeb
0000            353   _ADBUSY         BIT 0xec
0000            354   _ADINT          BIT 0xed
0000            355   _IPOEN          BIT 0xee
0000            356   _ADEN           BIT 0xef
0000            357   _B_0            BIT 0xf0
0000            358   _B_1            BIT 0xf1
0000            359   _B_2            BIT 0xf2
0000            360   _B_3            BIT 0xf3
0000            361   _B_4            BIT 0xf4
0000            362   _B_5            BIT 0xf5
0000            363   _B_6            BIT 0xf6
0000            364   _B_7            BIT 0xf7
0000            365   _C0FIF          BIT 0xe8
0000            366   _C0RIF          BIT 0xe9
0000            367   _C1FIF          BIT 0xea
0000            368   _C1RIF          BIT 0xeb
0000            369   _C2FIF          BIT 0xec
0000            370   _C2RIF          BIT 0xed
0000            371   _C3FIF          BIT 0xee
0000            372   _C3RIF          BIT 0xef
0000            373   _D1SRC0         BIT 0x88
0000            374   _D1SRC1         BIT 0x89
0000            375   _D1AMEN         BIT 0x8a
0000            376   _D01REFSL       BIT 0x8b
0000            377   _D3SRC0         BIT 0x8c
0000            378   _D3SRC1         BIT 0x8d
0000            379   _D3AMEN         BIT 0x8e
0000            380   _D23REFSL       BIT 0x8f
0000            381   _D0UDIS         BIT 0x98
0000            382   _D1UDIS         BIT 0x99
0000            383   _D2UDIS         BIT 0x9a
0000            384   _D3UDIS         BIT 0x9b
0000            385   _EX0            BIT 0xa8
0000            386   _ET0            BIT 0xa9
0000            387   _EX1            BIT 0xaa
0000            388   _ET1            BIT 0xab
0000            389   _ES0            BIT 0xac
0000            390   _ET2            BIT 0xad
0000            391   _ESPI0          BIT 0xae
0000            392   _EA             BIT 0xaf
0000            393   _PX0            BIT 0xb8
0000            394   _PT0            BIT 0xb9
0000            395   _PX1            BIT 0xba
0000            396   _PT1            BIT 0xbb
0000            397   _PS0            BIT 0xbc
0000            398   _PT2            BIT 0xbd
0000            399   _PSPI0          BIT 0xbe
0000            400   _P0_0           BIT 0x80
0000            401   _P0_1           BIT 0x81
0000            402   _P0_2           BIT 0x82
0000            403   _P0_3           BIT 0x83
0000            404   _P0_4           BIT 0x84
0000            405   _P0_5           BIT 0x85
0000            406   _P0_6           BIT 0x86
0000            407   _P0_7           BIT 0x87
0000            408   _P1_0           BIT 0x90
0000            409   _P1_1           BIT 0x91
0000            410   _P1_2           BIT 0x92
0000            411   _P1_3           BIT 0x93
0000            412   _P1_4           BIT 0x94
0000            413   _P1_5           BIT 0x95
0000            414   _P1_6           BIT 0x96
0000            415   _P1_7           BIT 0x97
0000            416   _P2_0           BIT 0xa0
0000            417   _P2_1           BIT 0xa1
0000            418   _P2_2           BIT 0xa2
0000            419   _P2_3           BIT 0xa3
0000            420   _P2_4           BIT 0xa4
0000            421   _P2_5           BIT 0xa5
0000            422   _P2_6           BIT 0xa6
0000            423   _P3_0           BIT 0xb0
0000            424   _P3_1           BIT 0xb1
0000            425   _P3_2           BIT 0xb2
0000            426   _P3_3           BIT 0xb3
0000            427   _P3_4           BIT 0xb4
0000            428   _P3_7           BIT 0xb7
0000            429   _CCF0           BIT 0xd8
0000            430   _CCF1           BIT 0xd9
0000            431   _CCF2           BIT 0xda
0000            432   _CCF3           BIT 0xdb
0000            433   _CCF4           BIT 0xdc
0000            434   _CCF5           BIT 0xdd
0000            435   _CR             BIT 0xde
0000            436   _CF             BIT 0xdf
0000            437   _PARITY         BIT 0xd0
0000            438   _F1             BIT 0xd1
0000            439   _OV             BIT 0xd2
0000            440   _RS0            BIT 0xd3
0000            441   _RS1            BIT 0xd4
0000            442   _F0             BIT 0xd5
0000            443   _AC             BIT 0xd6
0000            444   _CY             BIT 0xd7
0000            445   _RI             BIT 0x98
0000            446   _TI             BIT 0x99
0000            447   _RB8            BIT 0x9a
0000            448   _TB8            BIT 0x9b
0000            449   _REN            BIT 0x9c
0000            450   _CE             BIT 0x9d
0000            451   _SMODE          BIT 0x9e
0000            452   _RI1            BIT 0xc8
0000            453   _TI1            BIT 0xc9
0000            454   _RBX1           BIT 0xca
0000            455   _TBX1           BIT 0xcb
0000            456   _REN1           BIT 0xcc
0000            457   _PERR1          BIT 0xcd
0000            458   _OVR1           BIT 0xce
0000            459   _SI             BIT 0xc0
0000            460   _ACK            BIT 0xc1
0000            461   _ARBLOST        BIT 0xc2
0000            462   _ACKRQ          BIT 0xc3
0000            463   _STO            BIT 0xc4
0000            464   _STA            BIT 0xc5
0000            465   _TXMODE         BIT 0xc6
0000            466   _MASTER         BIT 0xc7
0000            467   _SPIEN          BIT 0xf8
0000            468   _TXNF           BIT 0xf9
0000            469   _NSSMD0         BIT 0xfa
0000            470   _NSSMD1         BIT 0xfb
0000            471   _RXOVRN         BIT 0xfc
0000            472   _MODF           BIT 0xfd
0000            473   _WCOL           BIT 0xfe
0000            474   _SPIF           BIT 0xff
0000            475   _IT0            BIT 0x88
0000            476   _IE0            BIT 0x89
0000            477   _IT1            BIT 0x8a
0000            478   _IE1            BIT 0x8b
0000            479   _TR0            BIT 0x8c
0000            480   _TF0            BIT 0x8d
0000            481   _TR1            BIT 0x8e
0000            482   _TF1            BIT 0x8f
0000            483   _T2XCLK0        BIT 0xc8
0000            484   _T2XCLK1        BIT 0xc9
0000            485   _TR2            BIT 0xca
0000            486   _T2SPLIT        BIT 0xcb
0000            487   _TF2CEN         BIT 0xcc
0000            488   _TF2LEN         BIT 0xcd
0000            489   _TF2L           BIT 0xce
0000            490   _TF2H           BIT 0xcf
0000            491   _T4XCLK0        BIT 0x98
0000            492   _T4XCLK1        BIT 0x99
0000            493   _TR4            BIT 0x9a
0000            494   _T4SPLIT        BIT 0x9b
0000            495   _TF4CEN         BIT 0x9c
0000            496   _TF4LEN         BIT 0x9d
0000            497   _TF4L           BIT 0x9e
0000            498   _TF4H           BIT 0x9f
0000            499   _T5XCLK0        BIT 0xc0
0000            500   _T5XCLK1        BIT 0xc1
0000            501   _TR5            BIT 0xc2
0000            502   _T5SPLIT        BIT 0xc3
0000            503   _TF5CEN         BIT 0xc4
0000            504   _TF5LEN         BIT 0xc5
0000            505   _TF5L           BIT 0xc6
0000            506   _TF5H           BIT 0xc7
0000            507   _RIE            BIT 0xd8
0000            508   _RXTO0          BIT 0xd9
0000            509   _RXTO1          BIT 0xda
0000            510   _RFRQ           BIT 0xdb
0000            511   _TIE            BIT 0xdc
0000            512   _TXHOLD         BIT 0xdd
0000            513   _TXNF1          BIT 0xde
0000            514   _TFRQ           BIT 0xdf
0000            515   ;--------------------------------------------------------
0000            516   ; overlayable register banks
0000            517   ;--------------------------------------------------------
0000            518            rbank0 segment data overlay
0000            519   ;--------------------------------------------------------
0000            520   ; internal ram data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_DSEG
0000            523   _pwm_count:
0000            524            ds 1
0001            525   _pwm_count1:
0001            526            ds 1
0002            527   _pwm_count2:
0002            528            ds 1
0003            529   _pwm_count3:
0003            530            ds 1
0004            531   _pwmSig1:
0004            532            ds 2
0006            533   _pwmSig2:
0006            534            ds 2
0008            535   _pwmSig3:
0008            536            ds 2
000A            537   _pwmSig4:
000A            538            ds 2
000C            539   _pwmSig5:
000C            540            ds 2
000E            541   _pwmSig6:
000E            542            ds 2
0010            543   _cartMoveF:
0010            544            ds 2
0012            545   _cartMoveB:
0012            546            ds 2
0014            547   _flag:
0014            548            ds 2
0016            549   _claw_flag:
0016            550            ds 2
0018            551   _stop:
0018            552            ds 8
0020            553   _forward:
0020            554            ds 8
0028            555   _backward:
0028            556            ds 8
0030            557   _left:
0030            558            ds 8
0038            559   _right:
0038            560            ds 8
0040            561   _command:
0040            562            ds 8
0048            563   _x:
0048            564            ds 2
004A            565   _zero_time_calc_overflow_count_1_73:
004A            566            ds 2
004C            567   _main_sloc0_1_0:
004C            568            ds 4
0050            569   ;--------------------------------------------------------
0050            570   ; overlayable items in internal ram 
0050            571   ;--------------------------------------------------------
0000            572            rseg    R_OSEG
0000            573            rseg    R_OSEG
0000            574            rseg    R_OSEG
0000            575   _InitPinADC_PARM_2:
0000            576            ds 1
0001            577            rseg    R_OSEG
0001            578   _arrayEqual_PARM_2:
0001            579            ds 2
0003            580   _arrayEqual_PARM_3:
0003            581            ds 3
0006            582   _arrayEqual_arr1_1_76:
0006            583            ds 3
0009            584   ;--------------------------------------------------------
0009            585   ; indirectly addressable internal ram data
0009            586   ;--------------------------------------------------------
0000            587            rseg R_ISEG
0000            588   ;--------------------------------------------------------
0000            589   ; absolute internal ram data
0000            590   ;--------------------------------------------------------
0000            591            DSEG
0000            592   ;--------------------------------------------------------
0000            593   ; bit data
0000            594   ;--------------------------------------------------------
0000            595            rseg R_BSEG
0000            596   _Timer2_ISR_sloc0_1_0:
0000            597            DBIT    1
0001            598   ;--------------------------------------------------------
0001            599   ; paged external ram data
0001            600   ;--------------------------------------------------------
0000            601            rseg R_PSEG
0000            602   ;--------------------------------------------------------
0000            603   ; external ram data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_XSEG
0000            606   ;--------------------------------------------------------
0000            607   ; absolute external ram data
0000            608   ;--------------------------------------------------------
0000            609            XSEG
0000            610   ;--------------------------------------------------------
0000            611   ; external initialized ram data
0000            612   ;--------------------------------------------------------
0000            613            rseg R_IXSEG
0000            614            rseg R_HOME
0000            615            rseg R_GSINIT
0000            616            rseg R_CSEG
0000            617   ;--------------------------------------------------------
0000            618   ; Reset entry point and interrupt vectors
0000            619   ;--------------------------------------------------------
0000            620            CSEG at 0x0000
0000 020100     621            ljmp    _crt0
002B            622            CSEG at 0x002b
002B 020100     623            ljmp    _Timer2_ISR
002E            624   ;--------------------------------------------------------
002E            625   ; global & static initialisations
002E            626   ;--------------------------------------------------------
0000            627            rseg R_HOME
0000            628            rseg R_GSINIT
0000            629            rseg R_GSINIT
0000            630   ;--------------------------------------------------------
0000            631   ; data variables initialization
0000            632   ;--------------------------------------------------------
0000            633            rseg R_DINIT
0000            634   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:55: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 750800     635            mov     _pwm_count,#0x00
0003            636   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:56: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75C800     637            mov     _pwm_count1,#0x00
0006            638   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:57: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 758800     639            mov     _pwm_count2,#0x00
0009            640   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:58: volatile unsigned char pwm_count3 = 0; //
0009 754800     641            mov     _pwm_count3,#0x00
000C            642   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:73: volatile int flag = 0;
000C E4         643            clr     a
000D F508       644            mov     _flag,a
000F F509       645            mov     (_flag + 1),a
0011            646   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:74: volatile int claw_flag = 0;
0011 E4         647            clr     a
0012 F5C8       648            mov     _claw_flag,a
0014 F5C9       649            mov     (_claw_flag + 1),a
0016            650   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:75: int stop[]={1,0,0,0};
0016 758801     651            mov     _stop,#0x01
0019 758900     652            mov     (_stop + 1),#0x00
001C 758A00     653            mov     (_stop + 0x0002),#0x00
001F 758B00     654            mov     ((_stop + 0x0002) + 1),#0x00
0022 758C00     655            mov     (_stop + 0x0004),#0x00
0025 758D00     656            mov     ((_stop + 0x0004) + 1),#0x00
0028 758E00     657            mov     (_stop + 0x0006),#0x00
002B 758F00     658            mov     ((_stop + 0x0006) + 1),#0x00
002E            659   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:76: int forward[]={1,1,1,1};
002E 754801     660            mov     _forward,#0x01
0031 754900     661            mov     (_forward + 1),#0x00
0034 754A01     662            mov     (_forward + 0x0002),#0x01
0037 754B00     663            mov     ((_forward + 0x0002) + 1),#0x00
003A 754C01     664            mov     (_forward + 0x0004),#0x01
003D 754D00     665            mov     ((_forward + 0x0004) + 1),#0x00
0040 754E01     666            mov     (_forward + 0x0006),#0x01
0043 754F00     667            mov     ((_forward + 0x0006) + 1),#0x00
0046            668   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:77: int backward[]={1,0,0,0};
0046 750801     669            mov     _backward,#0x01
0049 750900     670            mov     (_backward + 1),#0x00
004C 750A00     671            mov     (_backward + 0x0002),#0x00
004F 750B00     672            mov     ((_backward + 0x0002) + 1),#0x00
0052 750C00     673            mov     (_backward + 0x0004),#0x00
0055 750D00     674            mov     ((_backward + 0x0004) + 1),#0x00
0058 750E00     675            mov     (_backward + 0x0006),#0x00
005B 750F00     676            mov     ((_backward + 0x0006) + 1),#0x00
005E            677   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:78: int left[]={1,0,1,0};
005E 75C801     678            mov     _left,#0x01
0061 75C900     679            mov     (_left + 1),#0x00
0064 75CA00     680            mov     (_left + 0x0002),#0x00
0067 75CB00     681            mov     ((_left + 0x0002) + 1),#0x00
006A 75CC01     682            mov     (_left + 0x0004),#0x01
006D 75CD00     683            mov     ((_left + 0x0004) + 1),#0x00
0070 75CE00     684            mov     (_left + 0x0006),#0x00
0073 75CF00     685            mov     ((_left + 0x0006) + 1),#0x00
0076            686   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:79: int right[]={1,1,0,1};
0076 75E001     687            mov     _right,#0x01
0079 75E100     688            mov     (_right + 1),#0x00
007C 75E201     689            mov     (_right + 0x0002),#0x01
007F 75E300     690            mov     ((_right + 0x0002) + 1),#0x00
0082 75E400     691            mov     (_right + 0x0004),#0x00
0085 75E500     692            mov     ((_right + 0x0004) + 1),#0x00
0088 75E601     693            mov     (_right + 0x0006),#0x01
008B 75E700     694            mov     ((_right + 0x0006) + 1),#0x00
008E            695   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:81: int command[4] = {0,0,0,0};
008E 75A000     696            mov     _command,#0x00
0091 75A100     697            mov     (_command + 1),#0x00
0094 75A200     698            mov     (_command + 0x0002),#0x00
0097 75A300     699            mov     ((_command + 0x0002) + 1),#0x00
009A 75A400     700            mov     (_command + 0x0004),#0x00
009D 75A500     701            mov     ((_command + 0x0004) + 1),#0x00
00A0 75A600     702            mov     (_command + 0x0006),#0x00
00A3 75A700     703            mov     ((_command + 0x0006) + 1),#0x00
00A6            704   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:83: volatile unsigned int x = 2;
00A6 756002     705            mov     _x,#0x02
00A9 E4         706            clr     a
00AA F561       707            mov     (_x + 1),a
00AC            708            ; The linker places a 'ret' at the end of segment R_DINIT.
00AC            709   ;--------------------------------------------------------
00AC            710   ; code
00AC            711   ;--------------------------------------------------------
0000            712            rseg R_CSEG
0000            713   ;------------------------------------------------------------
0000            714   ;Allocation info for local variables in function '_c51_external_startup'
0000            715   ;------------------------------------------------------------
0000            716   ;------------------------------------------------------------
0000            717   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:85: char _c51_external_startup(void)
0000            718   ;        -----------------------------------------
0000            719   ;         function _c51_external_startup
0000            720   ;        -----------------------------------------
0000            721   __c51_external_startup:
0000            722            using   0
0000            723   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:88: SFRPAGE = 0x00;
0000 75A700     724            mov     _SFRPAGE,#0x00
0003            725   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:89: WDTCN = 0xDE; //First key
0003 7597DE     726            mov     _WDTCN,#0xDE
0006            727   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:90: WDTCN = 0xAD; //Second key
0006 7597AD     728            mov     _WDTCN,#0xAD
0009            729   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:92: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     730            mov     _VDM0CN,#0x80
000C            731   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:93: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     732            mov     _RSTSRC,#0x06
000F            733   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:100: SFRPAGE = 0x10;
000F 75A710     734            mov     _SFRPAGE,#0x10
0012            735   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:101: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     736            mov     _PFE0CN,#0x20
0015            737   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:102: SFRPAGE = 0x00;
0015 75A700     738            mov     _SFRPAGE,#0x00
0018            739   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:123: CLKSEL = 0x00;
0018 75A900     740            mov     _CLKSEL,#0x00
001B            741   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:124: CLKSEL = 0x00;
001B 75A900     742            mov     _CLKSEL,#0x00
001E            743   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:125: while ((CLKSEL & 0x80) == 0);
001E            744   L002001?:
001E E5A9       745            mov     a,_CLKSEL
0020 30E788     746            jnb     acc.7,L002001?
0023            747   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:126: CLKSEL = 0x03;
0023 75A903     748            mov     _CLKSEL,#0x03
0026            749   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:127: CLKSEL = 0x03;
0026 75A903     750            mov     _CLKSEL,#0x03
0029            751   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:128: while ((CLKSEL & 0x80) == 0);
0029            752   L002004?:
0029 E5A9       753            mov     a,_CLKSEL
002B 30E708     754            jnb     acc.7,L002004?
002E            755   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:133: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     756            orl     _P0MDOUT,#0x10
0031            757   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:134: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     758            mov     _XBR0,#0x01
0034            759   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:135: XBR1 = 0X00;
0034 75E200     760            mov     _XBR1,#0x00
0037            761   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:136: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     762            mov     _XBR2,#0x40
003A            763   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:142: SCON0 = 0x10;
003A 759810     764            mov     _SCON0,#0x10
003D            765   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:143: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     766            mov     _TH1,#0xE6
0040            767   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:144: TL1 = TH1;      // Init Timer1
0040 858D8B     768            mov     _TL1,_TH1
0043            769   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:145: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     770            anl     _TMOD,#0x0F
0046            771   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:146: TMOD |= 0x20;
0046 438920     772            orl     _TMOD,#0x20
0049            773   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:147: TR1 = 1; // START Timer1
0049 D28E       774            setb    _TR1
004B            775   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:148: TI = 1;  // Indicate TX0 ready
004B D299       776            setb    _TI
004D            777   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:151: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     778            mov     _TMR2CN0,#0x00
0050            779   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:152: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     780            orl     _CKCON0,#0x10
0053            781   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:153: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     782            mov     _TMR2RL,#0xE0
0056 75CBE3     783            mov     (_TMR2RL >> 8),#0xE3
0059            784   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:154: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     785            mov     _TMR2,#0xFF
005C 75CFFF     786            mov     (_TMR2 >> 8),#0xFF
005F            787   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:155: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       788            setb    _ET2
0061            789   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:156: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       790            setb    _TR2
0063            791   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:173: EA = 1; // Enable interrupts
0063 D2AF       792            setb    _EA
0065            793   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:176: return 0;
0065 758200     794            mov     dpl,#0x00
0068 22         795            ret
0069            796   ;------------------------------------------------------------
0069            797   ;Allocation info for local variables in function 'Timer3us'
0069            798   ;------------------------------------------------------------
0069            799   ;us                        Allocated to registers r2 r3 
0069            800   ;i                         Allocated to registers r4 r5 
0069            801   ;------------------------------------------------------------
0069            802   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:178: void Timer3us(unsigned int us)
0069            803   ;        -----------------------------------------
0069            804   ;         function Timer3us
0069            805   ;        -----------------------------------------
0069            806   _Timer3us:
0069 AA82       807            mov     r2,dpl
006B AB83       808            mov     r3,dph
006D            809   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:183: CKCON0|=0b_0100_0000;
006D 438E40     810            orl     _CKCON0,#0x40
0070            811   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:185: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     812            mov     _TMR3RL,#0xB8
0073 7593FF     813            mov     (_TMR3RL >> 8),#0xFF
0076            814   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:186: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     815            mov     _TMR3,_TMR3RL
0079 859395     816            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            817   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:188: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     818            mov     _TMR3CN0,#0x04
007F            819   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:189: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       820            mov     r4,#0x00
0081 7D00       821            mov     r5,#0x00
0083            822   L003004?:
0083 C3         823            clr     c
0084 EC         824            mov     a,r4
0085 9A         825            subb    a,r2
0086 ED         826            mov     a,r5
0087 9B         827            subb    a,r3
0088 5001       828            jnc     L003007?
008A            829   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:191: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            830   L003001?:
008A E591       831            mov     a,_TMR3CN0
008C 30E748     832            jnb     acc.7,L003001?
008F            833   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:192: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     834            anl     _TMR3CN0,#0x7F
0092            835   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:189: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         836            inc     r4
0093 BC00C8     837            cjne    r4,#0x00,L003004?
0096 0D         838            inc     r5
0097 8001       839            sjmp    L003004?
0099            840   L003007?:
0099            841   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:194: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     842            mov     _TMR3CN0,#0x00
009C 22         843            ret
009D            844   ;------------------------------------------------------------
009D            845   ;Allocation info for local variables in function 'waitms'
009D            846   ;------------------------------------------------------------
009D            847   ;ms                        Allocated to registers r2 r3 
009D            848   ;j                         Allocated to registers r4 r5 
009D            849   ;k                         Allocated to registers r6 
009D            850   ;------------------------------------------------------------
009D            851   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:196: void waitms (unsigned int ms)
009D            852   ;        -----------------------------------------
009D            853   ;         function waitms
009D            854   ;        -----------------------------------------
009D            855   _waitms:
009D AA82       856            mov     r2,dpl
009F AB83       857            mov     r3,dph
00A1            858   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:200: for(j=0; j<ms; j++)
00A1 7C00       859            mov     r4,#0x00
00A3 7D00       860            mov     r5,#0x00
00A5            861   L004005?:
00A5 C3         862            clr     c
00A6 EC         863            mov     a,r4
00A7 9A         864            subb    a,r2
00A8 ED         865            mov     a,r5
00A9 9B         866            subb    a,r3
00AA 5001       867            jnc     L004009?
00AC            868   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:201: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       869            mov     r6,#0x00
00AE            870   L004001?:
00AE BE0448     871            cjne    r6,#0x04,L004018?
00B1            872   L004018?:
00B1 5001       873            jnc     L004007?
00B3 9000FA     874            mov     dptr,#0x00FA
00B6 C002       875            push    ar2
00B8 C003       876            push    ar3
00BA C004       877            push    ar4
00BC C005       878            push    ar5
00BE C006       879            push    ar6
00C0 120100     880            lcall   _Timer3us
00C3 D006       881            pop     ar6
00C5 D005       882            pop     ar5
00C7 D004       883            pop     ar4
00C9 D003       884            pop     ar3
00CB D002       885            pop     ar2
00CD 0E         886            inc     r6
00CE 8001       887            sjmp    L004001?
00D0            888   L004007?:
00D0            889   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:200: for(j=0; j<ms; j++)
00D0 0C         890            inc     r4
00D1 BC0088     891            cjne    r4,#0x00,L004005?
00D4 0D         892            inc     r5
00D5 8001       893            sjmp    L004005?
00D7            894   L004009?:
00D7 22         895            ret
00D8            896   ;------------------------------------------------------------
00D8            897   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            898   ;------------------------------------------------------------
00D8            899   ;pin                       Allocated to registers 
00D8            900   ;------------------------------------------------------------
00D8            901   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:204: unsigned int ADC_at_Pin(unsigned char pin)
00D8            902   ;        -----------------------------------------
00D8            903   ;         function ADC_at_Pin
00D8            904   ;        -----------------------------------------
00D8            905   _ADC_at_Pin:
00D8 8582BB     906            mov     _ADC0MX,dpl
00DB            907   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:207: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       908            setb    _ADBUSY
00DD            909   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:208: while (ADBUSY); // Wait for dummy conversion to finish
00DD            910   L005001?:
00DD 20ECC8     911            jb      _ADBUSY,L005001?
00E0            912   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:209: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       913            setb    _ADBUSY
00E2            914   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:210: while (ADBUSY); // Wait for conversion to complete
00E2            915   L005004?:
00E2 20EC08     916            jb      _ADBUSY,L005004?
00E5            917   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:211: return (ADC0);
00E5 85BD82     918            mov     dpl,_ADC0
00E8 85BE83     919            mov     dph,(_ADC0 >> 8)
00EB 22         920            ret
00EC            921   ;------------------------------------------------------------
00EC            922   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            923   ;------------------------------------------------------------
00EC            924   ;------------------------------------------------------------
00EC            925   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:215: void Timer2_ISR(void) interrupt 5
00EC            926   ;        -----------------------------------------
00EC            927   ;         function Timer2_ISR
00EC            928   ;        -----------------------------------------
00EC            929   _Timer2_ISR:
00EC C0E0       930            push    acc
00EE C002       931            push    ar2
00F0 C003       932            push    ar3
00F2 C0D0       933            push    psw
00F4 75D000     934            mov     psw,#0x00
00F7            935   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:217: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       936            clr     _TF2H
00F9            937   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:219: pwm_count++;
00F9 0508       938            inc     _pwm_count
00FB            939   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:220: if (pwm_count>100)
00FB E508       940            mov     a,_pwm_count
00FD 249B       941            add     a,#0xff - 0x64
00FF 5001       942            jnc     L006002?
0101            943   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:221: pwm_count = 0;
0101 750800     944            mov     _pwm_count,#0x00
0104            945   L006002?:
0104            946   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:224: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AA08       947            mov     r2,_pwm_count
0106 7B00       948            mov     r3,#0x00
0108 C3         949            clr     c
0109 E508       950            mov     a,_pwmSig1
010B 9A         951            subb    a,r2
010C E509       952            mov     a,(_pwmSig1 + 1)
010E 9B         953            subb    a,r3
010F 9208       954            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         955            cpl     c
0112 9294       956            mov     _P1_4,c
0114            957   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:225: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AA08       958            mov     r2,_pwm_count
0116 7B00       959            mov     r3,#0x00
0118 C3         960            clr     c
0119 E5C8       961            mov     a,_pwmSig2
011B 9A         962            subb    a,r2
011C E5C9       963            mov     a,(_pwmSig2 + 1)
011E 9B         964            subb    a,r3
011F 9208       965            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         966            cpl     c
0122 9295       967            mov     _P1_5,c
0124            968   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:227: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AA08       969            mov     r2,_pwm_count
0126 7B00       970            mov     r3,#0x00
0128 C3         971            clr     c
0129 E588       972            mov     a,_pwmSig3
012B 9A         973            subb    a,r2
012C E589       974            mov     a,(_pwmSig3 + 1)
012E 9B         975            subb    a,r3
012F 9208       976            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         977            cpl     c
0132 9292       978            mov     _P1_2,c
0134            979   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:228: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AA08       980            mov     r2,_pwm_count
0136 7B00       981            mov     r3,#0x00
0138 C3         982            clr     c
0139 E548       983            mov     a,_pwmSig4
013B 9A         984            subb    a,r2
013C E549       985            mov     a,(_pwmSig4 + 1)
013E 9B         986            subb    a,r3
013F 9208       987            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         988            cpl     c
0142 9293       989            mov     _P1_3,c
0144            990   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:230: OUT0=pwm_count>80?0:1;
0144 E508       991            mov     a,_pwm_count
0146 24AF       992            add     a,#0xff - 0x50
0148 9208       993            mov  _Timer2_ISR_sloc0_1_0,c
014A B3         994            cpl     c
014B 92A0       995            mov     _P2_0,c
014D D0D0       996            pop     psw
014F D003       997            pop     ar3
0151 D002       998            pop     ar2
0153 D0E0       999            pop     acc
0155 32        1000            reti
0156           1001   ;        eliminated unneeded push/pop dpl
0156           1002   ;        eliminated unneeded push/pop dph
0156           1003   ;        eliminated unneeded push/pop b
0156           1004   ;------------------------------------------------------------
0156           1005   ;Allocation info for local variables in function 'InitADC'
0156           1006   ;------------------------------------------------------------
0156           1007   ;------------------------------------------------------------
0156           1008   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:260: void InitADC(void)
0156           1009   ;        -----------------------------------------
0156           1010   ;         function InitADC
0156           1011   ;        -----------------------------------------
0156           1012   _InitADC:
0156           1013   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:262: SFRPAGE = 0x00;
0156 75A700    1014            mov     _SFRPAGE,#0x00
0159           1015   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:263: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0159 75B280    1016            mov     _ADC0CN1,#0x80
015C           1017   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:264: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
015C 75BCF8    1018            mov     _ADC0CF0,#0xF8
015F           1019   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:265: ADC0CF1 = 0b_0_0_011110; // Same as default for now
015F 75B91E    1020            mov     _ADC0CF1,#0x1E
0162           1021   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:266: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0162 75E800    1022            mov     _ADC0CN0,#0x00
0165           1023   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:267: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
0165 75DF3F    1024            mov     _ADC0CF2,#0x3F
0168           1025   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:268: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0168 75B300    1026            mov     _ADC0CN2,#0x00
016B           1027   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:269: ADEN = 1; // Enable ADC
016B D2EF      1028            setb    _ADEN
016D 22        1029            ret
016E           1030   ;------------------------------------------------------------
016E           1031   ;Allocation info for local variables in function 'TIMER0_Init'
016E           1032   ;------------------------------------------------------------
016E           1033   ;------------------------------------------------------------
016E           1034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:271: void TIMER0_Init(void)
016E           1035   ;        -----------------------------------------
016E           1036   ;         function TIMER0_Init
016E           1037   ;        -----------------------------------------
016E           1038   _TIMER0_Init:
016E           1039   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:273: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
016E 5389F0    1040            anl     _TMOD,#0xF0
0171           1041   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:274: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0171 438901    1042            orl     _TMOD,#0x01
0174           1043   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:275: TR0 = 0; // Stop Timer/Counter 0
0174 C28C      1044            clr     _TR0
0176 22        1045            ret
0177           1046   ;------------------------------------------------------------
0177           1047   ;Allocation info for local variables in function 'Volts_at_Pin'
0177           1048   ;------------------------------------------------------------
0177           1049   ;pin                       Allocated to registers r2 
0177           1050   ;------------------------------------------------------------
0177           1051   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:280: float Volts_at_Pin(unsigned char pin)
0177           1052   ;        -----------------------------------------
0177           1053   ;         function Volts_at_Pin
0177           1054   ;        -----------------------------------------
0177           1055   _Volts_at_Pin:
0177           1056   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:282: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
0177 120100    1057            lcall   _ADC_at_Pin
017A 120100    1058            lcall   ___uint2fs
017D AA82      1059            mov     r2,dpl
017F AB83      1060            mov     r3,dph
0181 ACF0      1061            mov     r4,b
0183 FD        1062            mov     r5,a
0184 C002      1063            push    ar2
0186 C003      1064            push    ar3
0188 C004      1065            push    ar4
018A C005      1066            push    ar5
018C 906C8B    1067            mov     dptr,#0x6C8B
018F 75F053    1068            mov     b,#0x53
0192 7440      1069            mov     a,#0x40
0194 120100    1070            lcall   ___fsmul
0197 AA82      1071            mov     r2,dpl
0199 AB83      1072            mov     r3,dph
019B ACF0      1073            mov     r4,b
019D FD        1074            mov     r5,a
019E E581      1075            mov     a,sp
01A0 24FC      1076            add     a,#0xfc
01A2 F581      1077            mov     sp,a
01A4 E4        1078            clr     a
01A5 C0E0      1079            push    acc
01A7 74FC      1080            mov     a,#0xFC
01A9 C0E0      1081            push    acc
01AB 747F      1082            mov     a,#0x7F
01AD C0E0      1083            push    acc
01AF 7446      1084            mov     a,#0x46
01B1 C0E0      1085            push    acc
01B3 8A82      1086            mov     dpl,r2
01B5 8B83      1087            mov     dph,r3
01B7 8CF0      1088            mov     b,r4
01B9 ED        1089            mov     a,r5
01BA 120100    1090            lcall   ___fsdiv
01BD AA82      1091            mov     r2,dpl
01BF AB83      1092            mov     r3,dph
01C1 ACF0      1093            mov     r4,b
01C3 FD        1094            mov     r5,a
01C4 E581      1095            mov     a,sp
01C6 24FC      1096            add     a,#0xfc
01C8 F581      1097            mov     sp,a
01CA 8A82      1098            mov     dpl,r2
01CC 8B83      1099            mov     dph,r3
01CE 8CF0      1100            mov     b,r4
01D0 ED        1101            mov     a,r5
01D1 22        1102            ret
01D2           1103   ;------------------------------------------------------------
01D2           1104   ;Allocation info for local variables in function 'InitPinADC'
01D2           1105   ;------------------------------------------------------------
01D2           1106   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01D2           1107   ;portno                    Allocated to registers r2 
01D2           1108   ;mask                      Allocated to registers r3 
01D2           1109   ;------------------------------------------------------------
01D2           1110   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:284: void InitPinADC(unsigned char portno, unsigned char pinno)
01D2           1111   ;        -----------------------------------------
01D2           1112   ;         function InitPinADC
01D2           1113   ;        -----------------------------------------
01D2           1114   _InitPinADC:
01D2 AA82      1115            mov     r2,dpl
01D4           1116   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:288: mask = 1 << pinno;
01D4 85F0F0    1117            mov     b,_InitPinADC_PARM_2
01D7 05F0      1118            inc     b
01D9 7401      1119            mov     a,#0x01
01DB 8001      1120            sjmp    L010013?
01DD           1121   L010011?:
01DD 25E0      1122            add     a,acc
01DF           1123   L010013?:
01DF D5F048    1124            djnz    b,L010011?
01E2 FB        1125            mov     r3,a
01E3           1126   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:290: SFRPAGE = 0x20;
01E3 75A720    1127            mov     _SFRPAGE,#0x20
01E6           1128   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:291: switch (portno)
01E6 BA0088    1129            cjne    r2,#0x00,L010014?
01E9 8001      1130            sjmp    L010001?
01EB           1131   L010014?:
01EB BA0108    1132            cjne    r2,#0x01,L010015?
01EE 8001      1133            sjmp    L010002?
01F0           1134   L010015?:
01F0           1135   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:293: case 0:
01F0 BA0288    1136            cjne    r2,#0x02,L010005?
01F3 8001      1137            sjmp    L010003?
01F5           1138   L010001?:
01F5           1139   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:294: P0MDIN &= (~mask); // Set pin as analog input
01F5 EB        1140            mov     a,r3
01F6 F4        1141            cpl     a
01F7 FA        1142            mov     r2,a
01F8 52F1      1143            anl     _P0MDIN,a
01FA           1144   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:295: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01FA EB        1145            mov     a,r3
01FB 42D4      1146            orl     _P0SKIP,a
01FD           1147   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:296: break;
01FD           1148   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:297: case 1:
01FD 8001      1149            sjmp    L010005?
01FF           1150   L010002?:
01FF           1151   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:298: P1MDIN &= (~mask); // Set pin as analog input
01FF EB        1152            mov     a,r3
0200 F4        1153            cpl     a
0201 FA        1154            mov     r2,a
0202 52F2      1155            anl     _P1MDIN,a
0204           1156   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:299: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0204 EB        1157            mov     a,r3
0205 42D5      1158            orl     _P1SKIP,a
0207           1159   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:300: break;
0207           1160   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:301: case 2:
0207 8001      1161            sjmp    L010005?
0209           1162   L010003?:
0209           1163   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:302: P2MDIN &= (~mask); // Set pin as analog input
0209 EB        1164            mov     a,r3
020A F4        1165            cpl     a
020B FA        1166            mov     r2,a
020C 52F3      1167            anl     _P2MDIN,a
020E           1168   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:303: P2SKIP |= mask; // Skip Crossbar decoding for this pin
020E EB        1169            mov     a,r3
020F 42CC      1170            orl     _P2SKIP,a
0211           1171   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:307: }
0211           1172   L010005?:
0211           1173   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:308: SFRPAGE = 0x00;
0211 75A700    1174            mov     _SFRPAGE,#0x00
0214 22        1175            ret
0215           1176   ;------------------------------------------------------------
0215           1177   ;Allocation info for local variables in function 'PWMforward'
0215           1178   ;------------------------------------------------------------
0215           1179   ;------------------------------------------------------------
0215           1180   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:317: void PWMforward(void) {
0215           1181   ;        -----------------------------------------
0215           1182   ;         function PWMforward
0215           1183   ;        -----------------------------------------
0215           1184   _PWMforward:
0215           1185   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:318: pwmSig1 = 99;
0215 750863    1186            mov     _pwmSig1,#0x63
0218 E4        1187            clr     a
0219 F509      1188            mov     (_pwmSig1 + 1),a
021B           1189   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:319: pwmSig2 = 0;
021B           1190   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:321: pwmSig3 = 0;
021B E4        1191            clr     a
021C F5C8      1192            mov     _pwmSig2,a
021E F5C9      1193            mov     (_pwmSig2 + 1),a
0220 F588      1194            mov     _pwmSig3,a
0222 F589      1195            mov     (_pwmSig3 + 1),a
0224           1196   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:322: pwmSig4 =99;
0224 754863    1197            mov     _pwmSig4,#0x63
0227 E4        1198            clr     a
0228 F549      1199            mov     (_pwmSig4 + 1),a
022A           1200   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:324: LEDRED = 1;
022A D286      1201            setb    _P0_6
022C           1202   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:325: LEDGREEN = 1;
022C D283      1203            setb    _P0_3
022E           1204   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:326: LEDWHITE = 1;
022E D281      1205            setb    _P0_1
0230           1206   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:327: SPEAKER = 0;
0230 C2A6      1207            clr     _P2_6
0232 22        1208            ret
0233           1209   ;------------------------------------------------------------
0233           1210   ;Allocation info for local variables in function 'PWMbackward'
0233           1211   ;------------------------------------------------------------
0233           1212   ;------------------------------------------------------------
0233           1213   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:330: void PWMbackward(void) {
0233           1214   ;        -----------------------------------------
0233           1215   ;         function PWMbackward
0233           1216   ;        -----------------------------------------
0233           1217   _PWMbackward:
0233           1218   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:331: pwmSig1 = 0;
0233 E4        1219            clr     a
0234 F508      1220            mov     _pwmSig1,a
0236 F509      1221            mov     (_pwmSig1 + 1),a
0238           1222   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:332: pwmSig2 = 99;
0238 75C863    1223            mov     _pwmSig2,#0x63
023B E4        1224            clr     a
023C F5C9      1225            mov     (_pwmSig2 + 1),a
023E           1226   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:334: pwmSig3 = 99;
023E 758863    1227            mov     _pwmSig3,#0x63
0241 E4        1228            clr     a
0242 F589      1229            mov     (_pwmSig3 + 1),a
0244           1230   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:335: pwmSig4 = 0;
0244 E4        1231            clr     a
0245 F548      1232            mov     _pwmSig4,a
0247 F549      1233            mov     (_pwmSig4 + 1),a
0249           1234   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:337: LEDRED = 1;
0249 D286      1235            setb    _P0_6
024B           1236   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:338: LEDGREEN = 1;
024B D283      1237            setb    _P0_3
024D           1238   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:339: LEDWHITE = 0;
024D C281      1239            clr     _P0_1
024F           1240   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:340: SPEAKER = 1;
024F D2A6      1241            setb    _P2_6
0251 22        1242            ret
0252           1243   ;------------------------------------------------------------
0252           1244   ;Allocation info for local variables in function 'PWMLeft'
0252           1245   ;------------------------------------------------------------
0252           1246   ;------------------------------------------------------------
0252           1247   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:343: void PWMLeft(void) {
0252           1248   ;        -----------------------------------------
0252           1249   ;         function PWMLeft
0252           1250   ;        -----------------------------------------
0252           1251   _PWMLeft:
0252           1252   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:344: pwmSig1 = 0;
0252 E4        1253            clr     a
0253 F508      1254            mov     _pwmSig1,a
0255 F509      1255            mov     (_pwmSig1 + 1),a
0257           1256   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:345: pwmSig2 = 99;
0257 75C863    1257            mov     _pwmSig2,#0x63
025A E4        1258            clr     a
025B F5C9      1259            mov     (_pwmSig2 + 1),a
025D           1260   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:347: pwmSig3 = 0;
025D E4        1261            clr     a
025E F588      1262            mov     _pwmSig3,a
0260 F589      1263            mov     (_pwmSig3 + 1),a
0262           1264   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:348: pwmSig4 = 99;
0262 754863    1265            mov     _pwmSig4,#0x63
0265 E4        1266            clr     a
0266 F549      1267            mov     (_pwmSig4 + 1),a
0268           1268   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:350: LEDRED = 1;
0268 D286      1269            setb    _P0_6
026A           1270   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:351: LEDGREEN = 0;
026A C283      1271            clr     _P0_3
026C           1272   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:352: LEDWHITE = 1;
026C D281      1273            setb    _P0_1
026E           1274   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:353: SPEAKER = 0;
026E C2A6      1275            clr     _P2_6
0270 22        1276            ret
0271           1277   ;------------------------------------------------------------
0271           1278   ;Allocation info for local variables in function 'PWMRight'
0271           1279   ;------------------------------------------------------------
0271           1280   ;------------------------------------------------------------
0271           1281   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:357: void PWMRight(void) {
0271           1282   ;        -----------------------------------------
0271           1283   ;         function PWMRight
0271           1284   ;        -----------------------------------------
0271           1285   _PWMRight:
0271           1286   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:358: pwmSig1 = 99;
0271 750863    1287            mov     _pwmSig1,#0x63
0274 E4        1288            clr     a
0275 F509      1289            mov     (_pwmSig1 + 1),a
0277           1290   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:359: pwmSig2 = 0;
0277 E4        1291            clr     a
0278 F5C8      1292            mov     _pwmSig2,a
027A F5C9      1293            mov     (_pwmSig2 + 1),a
027C           1294   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:361: pwmSig3 = 99;
027C 758863    1295            mov     _pwmSig3,#0x63
027F E4        1296            clr     a
0280 F589      1297            mov     (_pwmSig3 + 1),a
0282           1298   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:362: pwmSig4 = 0;
0282 E4        1299            clr     a
0283 F548      1300            mov     _pwmSig4,a
0285 F549      1301            mov     (_pwmSig4 + 1),a
0287           1302   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:364: LEDRED = 1;
0287 D286      1303            setb    _P0_6
0289           1304   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:365: LEDGREEN = 0;
0289 C283      1305            clr     _P0_3
028B           1306   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:366: LEDWHITE = 1;
028B D281      1307            setb    _P0_1
028D           1308   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:367: SPEAKER = 0;   
028D C2A6      1309            clr     _P2_6
028F 22        1310            ret
0290           1311   ;------------------------------------------------------------
0290           1312   ;Allocation info for local variables in function 'PWMStop'
0290           1313   ;------------------------------------------------------------
0290           1314   ;------------------------------------------------------------
0290           1315   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:372: void PWMStop(void) {
0290           1316   ;        -----------------------------------------
0290           1317   ;         function PWMStop
0290           1318   ;        -----------------------------------------
0290           1319   _PWMStop:
0290           1320   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:373: pwmSig1 = 0;
0290           1321   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:374: pwmSig2 = 0;
0290           1322   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:376: pwmSig3 = 0;
0290           1323   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:377: pwmSig4 = 0;
0290 E4        1324            clr     a
0291 F508      1325            mov     _pwmSig1,a
0293 F509      1326            mov     (_pwmSig1 + 1),a
0295 F5C8      1327            mov     _pwmSig2,a
0297 F5C9      1328            mov     (_pwmSig2 + 1),a
0299 F588      1329            mov     _pwmSig3,a
029B F589      1330            mov     (_pwmSig3 + 1),a
029D F548      1331            mov     _pwmSig4,a
029F F549      1332            mov     (_pwmSig4 + 1),a
02A1           1333   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:380: LEDRED = 0;
02A1 C286      1334            clr     _P0_6
02A3           1335   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:381: LEDGREEN = 1;
02A3 D283      1336            setb    _P0_3
02A5           1337   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:382: LEDWHITE = 1;
02A5 D281      1338            setb    _P0_1
02A7           1339   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:383: SPEAKER = 0;
02A7 C2A6      1340            clr     _P2_6
02A9 22        1341            ret
02AA           1342   ;------------------------------------------------------------
02AA           1343   ;Allocation info for local variables in function 'zero_time_calc'
02AA           1344   ;------------------------------------------------------------
02AA           1345   ;period1                   Allocated to registers r2 r3 r4 r5 
02AA           1346   ;overflow_count            Allocated with name '_zero_time_calc_overflow_count_1_73'
02AA           1347   ;------------------------------------------------------------
02AA           1348   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:386: float zero_time_calc(void) {
02AA           1349   ;        -----------------------------------------
02AA           1350   ;         function zero_time_calc
02AA           1351   ;        -----------------------------------------
02AA           1352   _zero_time_calc:
02AA           1353   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:390: TL0=0; 
02AA 758A00    1354            mov     _TL0,#0x00
02AD           1355   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:391: TH0=0;
02AD 758C00    1356            mov     _TH0,#0x00
02B0           1357   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:392: TF0=0;
02B0 C28D      1358            clr     _TF0
02B2           1359   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:393: overflow_count=0;
02B2 7A00      1360            mov     r2,#0x00
02B4 7B00      1361            mov     r3,#0x00
02B6           1362   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:394: TR0=0;
02B6 C28C      1363            clr     _TR0
02B8           1364   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:399: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt);
02B8           1365   L016001?:
02B8 75820C    1366            mov     dpl,#0x0C
02BB C002      1367            push    ar2
02BD C003      1368            push    ar3
02BF 120100    1369            lcall   _Volts_at_Pin
02C2 AC82      1370            mov     r4,dpl
02C4 AD83      1371            mov     r5,dph
02C6 AEF0      1372            mov     r6,b
02C8 FF        1373            mov     r7,a
02C9 74CD      1374            mov     a,#0xCD
02CB C0E0      1375            push    acc
02CD 74CC      1376            mov     a,#0xCC
02CF C0E0      1377            push    acc
02D1 744C      1378            mov     a,#0x4C
02D3 C0E0      1379            push    acc
02D5 743D      1380            mov     a,#0x3D
02D7 C0E0      1381            push    acc
02D9 8C82      1382            mov     dpl,r4
02DB 8D83      1383            mov     dph,r5
02DD 8EF0      1384            mov     b,r6
02DF EF        1385            mov     a,r7
02E0 120100    1386            lcall   ___fslt
02E3 AC82      1387            mov     r4,dpl
02E5 E581      1388            mov     a,sp
02E7 24FC      1389            add     a,#0xfc
02E9 F581      1390            mov     sp,a
02EB D003      1391            pop     ar3
02ED D002      1392            pop     ar2
02EF EC        1393            mov     a,r4
02F0 7001      1394            jnz     L016001?
02F2           1395   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:401: while(Volts_at_Pin(QFP32_MUX_P1_6)>=thresholdVolt);
02F2           1396   L016004?:
02F2 75820C    1397            mov     dpl,#0x0C
02F5 C002      1398            push    ar2
02F7 C003      1399            push    ar3
02F9 120100    1400            lcall   _Volts_at_Pin
02FC AC82      1401            mov     r4,dpl
02FE AD83      1402            mov     r5,dph
0300 AEF0      1403            mov     r6,b
0302 FF        1404            mov     r7,a
0303 74CD      1405            mov     a,#0xCD
0305 C0E0      1406            push    acc
0307 74CC      1407            mov     a,#0xCC
0309 C0E0      1408            push    acc
030B 744C      1409            mov     a,#0x4C
030D C0E0      1410            push    acc
030F 743D      1411            mov     a,#0x3D
0311 C0E0      1412            push    acc
0313 8C82      1413            mov     dpl,r4
0315 8D83      1414            mov     dph,r5
0317 8EF0      1415            mov     b,r6
0319 EF        1416            mov     a,r7
031A 120100    1417            lcall   ___fslt
031D AC82      1418            mov     r4,dpl
031F E581      1419            mov     a,sp
0321 24FC      1420            add     a,#0xfc
0323 F581      1421            mov     sp,a
0325 D003      1422            pop     ar3
0327 D002      1423            pop     ar2
0329 EC        1424            mov     a,r4
032A 6001      1425            jz      L016004?
032C           1426   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:403: TR0=1; // Start the timer
032C D28C      1427            setb    _TR0
032E           1428   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:404: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt) // (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000<1000) // Wait for the signal to be zero
032E E4        1429            clr     a
032F F528      1430            mov     _zero_time_calc_overflow_count_1_73,a
0331 F529      1431            mov     (_zero_time_calc_overflow_count_1_73 + 1),a
0333           1432   L016011?:
0333 75820C    1433            mov     dpl,#0x0C
0336 C002      1434            push    ar2
0338 C003      1435            push    ar3
033A 120100    1436            lcall   _Volts_at_Pin
033D AE82      1437            mov     r6,dpl
033F AF83      1438            mov     r7,dph
0341 A8F0      1439            mov     r0,b
0343 F9        1440            mov     r1,a
0344 74CD      1441            mov     a,#0xCD
0346 C0E0      1442            push    acc
0348 74CC      1443            mov     a,#0xCC
034A C0E0      1444            push    acc
034C 744C      1445            mov     a,#0x4C
034E C0E0      1446            push    acc
0350 743D      1447            mov     a,#0x3D
0352 C0E0      1448            push    acc
0354 8E82      1449            mov     dpl,r6
0356 8F83      1450            mov     dph,r7
0358 88F0      1451            mov     b,r0
035A E9        1452            mov     a,r1
035B 120100    1453            lcall   ___fslt
035E AE82      1454            mov     r6,dpl
0360 E581      1455            mov     a,sp
0362 24FC      1456            add     a,#0xfc
0364 F581      1457            mov     sp,a
0366 D003      1458            pop     ar3
0368 D002      1459            pop     ar2
036A EE        1460            mov     a,r6
036B 7001      1461            jnz     L016025?
036D 020100    1462            ljmp    L016013?
0370           1463   L016025?:
0370           1464   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:406: if(TF0==1) // Did the 16-bit timer overflow?
0370           1465   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:408: TF0=0;
0370 108D88    1466            jbc     _TF0,L016026?
0373 8001      1467            sjmp    L016008?
0375           1468   L016026?:
0375           1469   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:409: overflow_count++;
0375 0528      1470            inc     _zero_time_calc_overflow_count_1_73
0377 E4        1471            clr     a
0378 B52808    1472            cjne    a,_zero_time_calc_overflow_count_1_73,L016027?
037B 0529      1473            inc     (_zero_time_calc_overflow_count_1_73 + 1)
037D           1474   L016027?:
037D AA28      1475            mov     r2,_zero_time_calc_overflow_count_1_73
037F AB29      1476            mov     r3,(_zero_time_calc_overflow_count_1_73 + 1)
0381           1477   L016008?:
0381           1478   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:411: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >1800) 
0381 C002      1479            push    ar2
0383 C003      1480            push    ar3
0385 852882    1481            mov     dpl,_zero_time_calc_overflow_count_1_73
0388 852983    1482            mov     dph,(_zero_time_calc_overflow_count_1_73 + 1)
038B C002      1483            push    ar2
038D C003      1484            push    ar3
038F 120100    1485            lcall   ___sint2fs
0392 AE82      1486            mov     r6,dpl
0394 AF83      1487            mov     r7,dph
0396 A8F0      1488            mov     r0,b
0398 F9        1489            mov     r1,a
0399 C006      1490            push    ar6
039B C007      1491            push    ar7
039D C000      1492            push    ar0
039F C001      1493            push    ar1
03A1 900000    1494            mov     dptr,#0x0000
03A4 75F080    1495            mov     b,#0x80
03A7 7447      1496            mov     a,#0x47
03A9 120100    1497            lcall   ___fsmul
03AC AE82      1498            mov     r6,dpl
03AE AF83      1499            mov     r7,dph
03B0 A8F0      1500            mov     r0,b
03B2 F9        1501            mov     r1,a
03B3 E581      1502            mov     a,sp
03B5 24FC      1503            add     a,#0xfc
03B7 F581      1504            mov     sp,a
03B9 D003      1505            pop     ar3
03BB D002      1506            pop     ar2
03BD 858C82    1507            mov     dpl,_TH0
03C0 C006      1508            push    ar6
03C2 C007      1509            push    ar7
03C4 C000      1510            push    ar0
03C6 C001      1511            push    ar1
03C8 120100    1512            lcall   ___uchar2fs
03CB AC82      1513            mov     r4,dpl
03CD AD83      1514            mov     r5,dph
03CF AAF0      1515            mov     r2,b
03D1 FB        1516            mov     r3,a
03D2 C004      1517            push    ar4
03D4 C005      1518            push    ar5
03D6 C002      1519            push    ar2
03D8 C003      1520            push    ar3
03DA 900000    1521            mov     dptr,#0x0000
03DD 75F080    1522            mov     b,#0x80
03E0 7443      1523            mov     a,#0x43
03E2 120100    1524            lcall   ___fsmul
03E5 AA82      1525            mov     r2,dpl
03E7 AB83      1526            mov     r3,dph
03E9 ACF0      1527            mov     r4,b
03EB FD        1528            mov     r5,a
03EC E581      1529            mov     a,sp
03EE 24FC      1530            add     a,#0xfc
03F0 F581      1531            mov     sp,a
03F2 D001      1532            pop     ar1
03F4 D000      1533            pop     ar0
03F6 D007      1534            pop     ar7
03F8 D006      1535            pop     ar6
03FA C002      1536            push    ar2
03FC C003      1537            push    ar3
03FE C004      1538            push    ar4
0400 C005      1539            push    ar5
0402 8E82      1540            mov     dpl,r6
0404 8F83      1541            mov     dph,r7
0406 88F0      1542            mov     b,r0
0408 E9        1543            mov     a,r1
0409 120100    1544            lcall   ___fsadd
040C AA82      1545            mov     r2,dpl
040E AB83      1546            mov     r3,dph
0410 ACF0      1547            mov     r4,b
0412 FD        1548            mov     r5,a
0413 E581      1549            mov     a,sp
0415 24FC      1550            add     a,#0xfc
0417 F581      1551            mov     sp,a
0419 AE8A      1552            mov     r6,_TL0
041B 7F00      1553            mov     r7,#0x00
041D 8E82      1554            mov     dpl,r6
041F 8F83      1555            mov     dph,r7
0421 C002      1556            push    ar2
0423 C003      1557            push    ar3
0425 C004      1558            push    ar4
0427 C005      1559            push    ar5
0429 120100    1560            lcall   ___sint2fs
042C AE82      1561            mov     r6,dpl
042E AF83      1562            mov     r7,dph
0430 A8F0      1563            mov     r0,b
0432 F9        1564            mov     r1,a
0433 D005      1565            pop     ar5
0435 D004      1566            pop     ar4
0437 D003      1567            pop     ar3
0439 D002      1568            pop     ar2
043B C006      1569            push    ar6
043D C007      1570            push    ar7
043F C000      1571            push    ar0
0441 C001      1572            push    ar1
0443 8A82      1573            mov     dpl,r2
0445 8B83      1574            mov     dph,r3
0447 8CF0      1575            mov     b,r4
0449 ED        1576            mov     a,r5
044A 120100    1577            lcall   ___fsadd
044D AA82      1578            mov     r2,dpl
044F AB83      1579            mov     r3,dph
0451 ACF0      1580            mov     r4,b
0453 FD        1581            mov     r5,a
0454 E581      1582            mov     a,sp
0456 24FC      1583            add     a,#0xfc
0458 F581      1584            mov     sp,a
045A C002      1585            push    ar2
045C C003      1586            push    ar3
045E C004      1587            push    ar4
0460 C005      1588            push    ar5
0462 90C33E    1589            mov     dptr,#0xC33E
0465 75F02E    1590            mov     b,#0x2E
0468 7439      1591            mov     a,#0x39
046A 120100    1592            lcall   ___fsmul
046D AA82      1593            mov     r2,dpl
046F AB83      1594            mov     r3,dph
0471 ACF0      1595            mov     r4,b
0473 FD        1596            mov     r5,a
0474 E581      1597            mov     a,sp
0476 24FC      1598            add     a,#0xfc
0478 F581      1599            mov     sp,a
047A C003      1600            push    ar3
047C E4        1601            clr     a
047D C0E0      1602            push    acc
047F C0E0      1603            push    acc
0481 74E1      1604            mov     a,#0xE1
0483 C0E0      1605            push    acc
0485 7444      1606            mov     a,#0x44
0487 C0E0      1607            push    acc
0489 8A82      1608            mov     dpl,r2
048B 8B83      1609            mov     dph,r3
048D 8CF0      1610            mov     b,r4
048F ED        1611            mov     a,r5
0490 120100    1612            lcall   ___fsgt
0493 AA82      1613            mov     r2,dpl
0495 E581      1614            mov     a,sp
0497 24FC      1615            add     a,#0xfc
0499 F581      1616            mov     sp,a
049B D003      1617            pop     ar3
049D EA        1618            mov     a,r2
049E D003      1619            pop     ar3
04A0 D002      1620            pop     ar2
04A2 7001      1621            jnz     L016028?
04A4 020100    1622            ljmp    L016011?
04A7           1623   L016028?:
04A7           1624   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:412: return 1800;
04A7 900000    1625            mov     dptr,#0x0000
04AA 75F0E1    1626            mov     b,#0xE1
04AD 7444      1627            mov     a,#0x44
04AF 22        1628            ret
04B0           1629   L016013?:
04B0           1630   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:415: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
04B0 C28C      1631            clr     _TR0
04B2           1632   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:416: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000;
04B2 8A82      1633            mov     dpl,r2
04B4 8B83      1634            mov     dph,r3
04B6 120100    1635            lcall   ___sint2fs
04B9 AA82      1636            mov     r2,dpl
04BB AB83      1637            mov     r3,dph
04BD ACF0      1638            mov     r4,b
04BF FD        1639            mov     r5,a
04C0 C002      1640            push    ar2
04C2 C003      1641            push    ar3
04C4 C004      1642            push    ar4
04C6 C005      1643            push    ar5
04C8 900000    1644            mov     dptr,#0x0000
04CB 75F080    1645            mov     b,#0x80
04CE 7447      1646            mov     a,#0x47
04D0 120100    1647            lcall   ___fsmul
04D3 AA82      1648            mov     r2,dpl
04D5 AB83      1649            mov     r3,dph
04D7 ACF0      1650            mov     r4,b
04D9 FD        1651            mov     r5,a
04DA E581      1652            mov     a,sp
04DC 24FC      1653            add     a,#0xfc
04DE F581      1654            mov     sp,a
04E0 858C82    1655            mov     dpl,_TH0
04E3 C002      1656            push    ar2
04E5 C003      1657            push    ar3
04E7 C004      1658            push    ar4
04E9 C005      1659            push    ar5
04EB 120100    1660            lcall   ___uchar2fs
04EE AE82      1661            mov     r6,dpl
04F0 AF83      1662            mov     r7,dph
04F2 A8F0      1663            mov     r0,b
04F4 F9        1664            mov     r1,a
04F5 C006      1665            push    ar6
04F7 C007      1666            push    ar7
04F9 C000      1667            push    ar0
04FB C001      1668            push    ar1
04FD 900000    1669            mov     dptr,#0x0000
0500 75F080    1670            mov     b,#0x80
0503 7443      1671            mov     a,#0x43
0505 120100    1672            lcall   ___fsmul
0508 AE82      1673            mov     r6,dpl
050A AF83      1674            mov     r7,dph
050C A8F0      1675            mov     r0,b
050E F9        1676            mov     r1,a
050F E581      1677            mov     a,sp
0511 24FC      1678            add     a,#0xfc
0513 F581      1679            mov     sp,a
0515 D005      1680            pop     ar5
0517 D004      1681            pop     ar4
0519 D003      1682            pop     ar3
051B D002      1683            pop     ar2
051D C006      1684            push    ar6
051F C007      1685            push    ar7
0521 C000      1686            push    ar0
0523 C001      1687            push    ar1
0525 8A82      1688            mov     dpl,r2
0527 8B83      1689            mov     dph,r3
0529 8CF0      1690            mov     b,r4
052B ED        1691            mov     a,r5
052C 120100    1692            lcall   ___fsadd
052F AA82      1693            mov     r2,dpl
0531 AB83      1694            mov     r3,dph
0533 ACF0      1695            mov     r4,b
0535 FD        1696            mov     r5,a
0536 E581      1697            mov     a,sp
0538 24FC      1698            add     a,#0xfc
053A F581      1699            mov     sp,a
053C AE8A      1700            mov     r6,_TL0
053E 7F00      1701            mov     r7,#0x00
0540 8E82      1702            mov     dpl,r6
0542 8F83      1703            mov     dph,r7
0544 C002      1704            push    ar2
0546 C003      1705            push    ar3
0548 C004      1706            push    ar4
054A C005      1707            push    ar5
054C 120100    1708            lcall   ___sint2fs
054F AE82      1709            mov     r6,dpl
0551 AF83      1710            mov     r7,dph
0553 A8F0      1711            mov     r0,b
0555 F9        1712            mov     r1,a
0556 D005      1713            pop     ar5
0558 D004      1714            pop     ar4
055A D003      1715            pop     ar3
055C D002      1716            pop     ar2
055E C006      1717            push    ar6
0560 C007      1718            push    ar7
0562 C000      1719            push    ar0
0564 C001      1720            push    ar1
0566 8A82      1721            mov     dpl,r2
0568 8B83      1722            mov     dph,r3
056A 8CF0      1723            mov     b,r4
056C ED        1724            mov     a,r5
056D 120100    1725            lcall   ___fsadd
0570 AA82      1726            mov     r2,dpl
0572 AB83      1727            mov     r3,dph
0574 ACF0      1728            mov     r4,b
0576 FD        1729            mov     r5,a
0577 E581      1730            mov     a,sp
0579 24FC      1731            add     a,#0xfc
057B F581      1732            mov     sp,a
057D C002      1733            push    ar2
057F C003      1734            push    ar3
0581 C004      1735            push    ar4
0583 C005      1736            push    ar5
0585 90C33E    1737            mov     dptr,#0xC33E
0588 75F02E    1738            mov     b,#0x2E
058B 7439      1739            mov     a,#0x39
058D 120100    1740            lcall   ___fsmul
0590 AA82      1741            mov     r2,dpl
0592 AB83      1742            mov     r3,dph
0594 ACF0      1743            mov     r4,b
0596 FD        1744            mov     r5,a
0597 E581      1745            mov     a,sp
0599 24FC      1746            add     a,#0xfc
059B F581      1747            mov     sp,a
059D           1748   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:419: return period1; //return period of high pulse in seconds
059D 8A82      1749            mov     dpl,r2
059F 8B83      1750            mov     dph,r3
05A1 8CF0      1751            mov     b,r4
05A3 ED        1752            mov     a,r5
05A4 22        1753            ret
05A5           1754   ;------------------------------------------------------------
05A5           1755   ;Allocation info for local variables in function 'arrayEqual'
05A5           1756   ;------------------------------------------------------------
05A5           1757   ;size                      Allocated with name '_arrayEqual_PARM_2'
05A5           1758   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
05A5           1759   ;arr1                      Allocated with name '_arrayEqual_arr1_1_76'
05A5           1760   ;i                         Allocated to registers r5 r6 
05A5           1761   ;------------------------------------------------------------
05A5           1762   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:423: int arrayEqual (int arr1[], int size, int arr2[]){
05A5           1763   ;        -----------------------------------------
05A5           1764   ;         function arrayEqual
05A5           1765   ;        -----------------------------------------
05A5           1766   _arrayEqual:
05A5 8582B8    1767            mov     _arrayEqual_arr1_1_76,dpl
05A8 8583B9    1768            mov     (_arrayEqual_arr1_1_76 + 1),dph
05AB 85F0BA    1769            mov     (_arrayEqual_arr1_1_76 + 2),b
05AE           1770   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:425: for(i=0; i<size; i++){
05AE 7D00      1771            mov     r5,#0x00
05B0 7E00      1772            mov     r6,#0x00
05B2           1773   L017003?:
05B2 C3        1774            clr     c
05B3 ED        1775            mov     a,r5
05B4 95A0      1776            subb    a,_arrayEqual_PARM_2
05B6 EE        1777            mov     a,r6
05B7 6480      1778            xrl     a,#0x80
05B9 85A1F0    1779            mov     b,(_arrayEqual_PARM_2 + 1)
05BC 63F080    1780            xrl     b,#0x80
05BF 95F0      1781            subb    a,b
05C1 5001      1782            jnc     L017006?
05C3           1783   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:426: if(arr1[i]!=arr2[i])
05C3 8D07      1784            mov     ar7,r5
05C5 EE        1785            mov     a,r6
05C6 CF        1786            xch     a,r7
05C7 25E0      1787            add     a,acc
05C9 CF        1788            xch     a,r7
05CA 33        1789            rlc     a
05CB F8        1790            mov     r0,a
05CC EF        1791            mov     a,r7
05CD 25B8      1792            add     a,_arrayEqual_arr1_1_76
05CF F9        1793            mov     r1,a
05D0 E8        1794            mov     a,r0
05D1 35B9      1795            addc    a,(_arrayEqual_arr1_1_76 + 1)
05D3 FA        1796            mov     r2,a
05D4 ABBA      1797            mov     r3,(_arrayEqual_arr1_1_76 + 2)
05D6 8982      1798            mov     dpl,r1
05D8 8A83      1799            mov     dph,r2
05DA 8BF0      1800            mov     b,r3
05DC 120100    1801            lcall   __gptrget
05DF F9        1802            mov     r1,a
05E0 A3        1803            inc     dptr
05E1 120100    1804            lcall   __gptrget
05E4 FA        1805            mov     r2,a
05E5 EF        1806            mov     a,r7
05E6 2550      1807            add     a,_arrayEqual_PARM_3
05E8 FF        1808            mov     r7,a
05E9 E8        1809            mov     a,r0
05EA 3551      1810            addc    a,(_arrayEqual_PARM_3 + 1)
05EC F8        1811            mov     r0,a
05ED AB52      1812            mov     r3,(_arrayEqual_PARM_3 + 2)
05EF 8F82      1813            mov     dpl,r7
05F1 8883      1814            mov     dph,r0
05F3 8BF0      1815            mov     b,r3
05F5 120100    1816            lcall   __gptrget
05F8 FF        1817            mov     r7,a
05F9 A3        1818            inc     dptr
05FA 120100    1819            lcall   __gptrget
05FD F8        1820            mov     r0,a
05FE E9        1821            mov     a,r1
05FF B50748    1822            cjne    a,ar7,L017013?
0602 EA        1823            mov     a,r2
0603 B50048    1824            cjne    a,ar0,L017013?
0606 8001      1825            sjmp    L017005?
0608           1826   L017013?:
0608           1827   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:427: return 0; 
0608 900000    1828            mov     dptr,#0x0000
060B 22        1829            ret
060C           1830   L017005?:
060C           1831   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:425: for(i=0; i<size; i++){
060C 0D        1832            inc     r5
060D BD0088    1833            cjne    r5,#0x00,L017003?
0610 0E        1834            inc     r6
0611 8001      1835            sjmp    L017003?
0613           1836   L017006?:
0613           1837   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:429: return 1; 
0613 900001    1838            mov     dptr,#0x0001
0616 22        1839            ret
0617           1840   ;------------------------------------------------------------
0617           1841   ;Allocation info for local variables in function 'checkCommands'
0617           1842   ;------------------------------------------------------------
0617           1843   ;------------------------------------------------------------
0617           1844   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:435: void checkCommands (void){
0617           1845   ;        -----------------------------------------
0617           1846   ;         function checkCommands
0617           1847   ;        -----------------------------------------
0617           1848   _checkCommands:
0617           1849   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:436: if(arrayEqual(command, 4, stop)) PWMStop();
0617 755088    1850            mov     _arrayEqual_PARM_3,#_stop
061A 755100    1851            mov     (_arrayEqual_PARM_3 + 1),#0x00
061D 755240    1852            mov     (_arrayEqual_PARM_3 + 2),#0x40
0620 75A004    1853            mov     _arrayEqual_PARM_2,#0x04
0623 E4        1854            clr     a
0624 F5A1      1855            mov     (_arrayEqual_PARM_2 + 1),a
0626 9018A0    1856            mov     dptr,#_command
0629 75F040    1857            mov     b,#0x40
062C 120100    1858            lcall   _arrayEqual
062F E582      1859            mov     a,dpl
0631 8583F0    1860            mov     b,dph
0634 45F0      1861            orl     a,b
0636 6001      1862            jz      L018014?
0638 020100    1863            ljmp    _PWMStop
063B           1864   L018014?:
063B           1865   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:437: else if (arrayEqual(command,4,forward)) PWMforward(); 
063B 755048    1866            mov     _arrayEqual_PARM_3,#_forward
063E 755100    1867            mov     (_arrayEqual_PARM_3 + 1),#0x00
0641 755240    1868            mov     (_arrayEqual_PARM_3 + 2),#0x40
0644 75A004    1869            mov     _arrayEqual_PARM_2,#0x04
0647 E4        1870            clr     a
0648 F5A1      1871            mov     (_arrayEqual_PARM_2 + 1),a
064A 9018A0    1872            mov     dptr,#_command
064D 75F040    1873            mov     b,#0x40
0650 120100    1874            lcall   _arrayEqual
0653 E582      1875            mov     a,dpl
0655 8583F0    1876            mov     b,dph
0658 45F0      1877            orl     a,b
065A 6001      1878            jz      L018011?
065C 020100    1879            ljmp    _PWMforward
065F           1880   L018011?:
065F           1881   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:438: else if (arrayEqual(command,4,backward)) PWMbackward(); 
065F 755008    1882            mov     _arrayEqual_PARM_3,#_backward
0662 755100    1883            mov     (_arrayEqual_PARM_3 + 1),#0x00
0665 755240    1884            mov     (_arrayEqual_PARM_3 + 2),#0x40
0668 75A004    1885            mov     _arrayEqual_PARM_2,#0x04
066B E4        1886            clr     a
066C F5A1      1887            mov     (_arrayEqual_PARM_2 + 1),a
066E 9018A0    1888            mov     dptr,#_command
0671 75F040    1889            mov     b,#0x40
0674 120100    1890            lcall   _arrayEqual
0677 E582      1891            mov     a,dpl
0679 8583F0    1892            mov     b,dph
067C 45F0      1893            orl     a,b
067E 6001      1894            jz      L018008?
0680 020100    1895            ljmp    _PWMbackward
0683           1896   L018008?:
0683           1897   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:439: else if (arrayEqual(command,4, left)) PWMLeft(); 
0683 7550C8    1898            mov     _arrayEqual_PARM_3,#_left
0686 755100    1899            mov     (_arrayEqual_PARM_3 + 1),#0x00
0689 755240    1900            mov     (_arrayEqual_PARM_3 + 2),#0x40
068C 75A004    1901            mov     _arrayEqual_PARM_2,#0x04
068F E4        1902            clr     a
0690 F5A1      1903            mov     (_arrayEqual_PARM_2 + 1),a
0692 9018A0    1904            mov     dptr,#_command
0695 75F040    1905            mov     b,#0x40
0698 120100    1906            lcall   _arrayEqual
069B E582      1907            mov     a,dpl
069D 8583F0    1908            mov     b,dph
06A0 45F0      1909            orl     a,b
06A2 6001      1910            jz      L018005?
06A4 020100    1911            ljmp    _PWMLeft
06A7           1912   L018005?:
06A7           1913   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:440: else if (arrayEqual(command,4, right)) PWMRight(); 
06A7 7550E0    1914            mov     _arrayEqual_PARM_3,#_right
06AA 755100    1915            mov     (_arrayEqual_PARM_3 + 1),#0x00
06AD 755240    1916            mov     (_arrayEqual_PARM_3 + 2),#0x40
06B0 75A004    1917            mov     _arrayEqual_PARM_2,#0x04
06B3 E4        1918            clr     a
06B4 F5A1      1919            mov     (_arrayEqual_PARM_2 + 1),a
06B6 9018A0    1920            mov     dptr,#_command
06B9 75F040    1921            mov     b,#0x40
06BC 120100    1922            lcall   _arrayEqual
06BF E582      1923            mov     a,dpl
06C1 8583F0    1924            mov     b,dph
06C4 45F0      1925            orl     a,b
06C6 6001      1926            jz      L018002?
06C8 020100    1927            ljmp    _PWMRight
06CB           1928   L018002?:
06CB           1929   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:441: else PWMStop(); //defaults to a halt (redundant)
06CB 020100    1930            ljmp    _PWMStop
06CE           1931   ;------------------------------------------------------------
06CE           1932   ;Allocation info for local variables in function 'voltsAtPeak'
06CE           1933   ;------------------------------------------------------------
06CE           1934   ;------------------------------------------------------------
06CE           1935   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:447: float voltsAtPeak(void) {
06CE           1936   ;        -----------------------------------------
06CE           1937   ;         function voltsAtPeak
06CE           1938   ;        -----------------------------------------
06CE           1939   _voltsAtPeak:
06CE           1940   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:449: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
06CE           1941   L019001?:
06CE 75820C    1942            mov     dpl,#0x0C
06D1 120100    1943            lcall   _ADC_at_Pin
06D4 E582      1944            mov     a,dpl
06D6 8583F0    1945            mov     b,dph
06D9 45F0      1946            orl     a,b
06DB 6001      1947            jz      L019001?
06DD           1948   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:450: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
06DD 900000    1949            mov     dptr,#0x0000
06E0 120100    1950            lcall   _Timer3us
06E3           1951   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:451: return(Volts_at_Pin(QFP32_MUX_P1_6));
06E3 75820C    1952            mov     dpl,#0x0C
06E6 020100    1953            ljmp    _Volts_at_Pin
06E9           1954   ;------------------------------------------------------------
06E9           1955   ;Allocation info for local variables in function 'getDigitalSignal'
06E9           1956   ;------------------------------------------------------------
06E9           1957   ;------------------------------------------------------------
06E9           1958   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:464: int getDigitalSignal (void){
06E9           1959   ;        -----------------------------------------
06E9           1960   ;         function getDigitalSignal
06E9           1961   ;        -----------------------------------------
06E9           1962   _getDigitalSignal:
06E9           1963   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:466: if (voltsAtPeak()>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
06E9 120100    1964            lcall   _voltsAtPeak
06EC AA82      1965            mov     r2,dpl
06EE AB83      1966            mov     r3,dph
06F0 ACF0      1967            mov     r4,b
06F2 FD        1968            mov     r5,a
06F3 74CD      1969            mov     a,#0xCD
06F5 C0E0      1970            push    acc
06F7 74CC      1971            mov     a,#0xCC
06F9 C0E0      1972            push    acc
06FB 744C      1973            mov     a,#0x4C
06FD C0E0      1974            push    acc
06FF 743D      1975            mov     a,#0x3D
0701 C0E0      1976            push    acc
0703 8A82      1977            mov     dpl,r2
0705 8B83      1978            mov     dph,r3
0707 8CF0      1979            mov     b,r4
0709 ED        1980            mov     a,r5
070A 120100    1981            lcall   ___fslt
070D AA82      1982            mov     r2,dpl
070F E581      1983            mov     a,sp
0711 24FC      1984            add     a,#0xfc
0713 F581      1985            mov     sp,a
0715 EA        1986            mov     a,r2
0716 7001      1987            jnz     L020002?
0718           1988   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:468: printf("\nread 1:  at pin 1.6: %f\r", voltsAtPeak());
0718 120100    1989            lcall   _voltsAtPeak
071B AA82      1990            mov     r2,dpl
071D AB83      1991            mov     r3,dph
071F ACF0      1992            mov     r4,b
0721 FD        1993            mov     r5,a
0722 C002      1994            push    ar2
0724 C003      1995            push    ar3
0726 C004      1996            push    ar4
0728 C005      1997            push    ar5
072A 7488      1998            mov     a,#__str_0
072C C0E0      1999            push    acc
072E 74CA      2000            mov     a,#(__str_0 >> 8)
0730 C0E0      2001            push    acc
0732 7480      2002            mov     a,#0x80
0734 C0E0      2003            push    acc
0736 120100    2004            lcall   _printf
0739 E581      2005            mov     a,sp
073B 24F9      2006            add     a,#0xf9
073D F581      2007            mov     sp,a
073F           2008   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:469: return 1;
073F 900001    2009            mov     dptr,#0x0001
0742 22        2010            ret
0743           2011   L020002?:
0743           2012   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:472: printf("\nread 0: Volt at pin 1.6: %f\r", voltsAtPeak());
0743 120100    2013            lcall   _voltsAtPeak
0746 AA82      2014            mov     r2,dpl
0748 AB83      2015            mov     r3,dph
074A ACF0      2016            mov     r4,b
074C FD        2017            mov     r5,a
074D C002      2018            push    ar2
074F C003      2019            push    ar3
0751 C004      2020            push    ar4
0753 C005      2021            push    ar5
0755 7408      2022            mov     a,#__str_1
0757 C0E0      2023            push    acc
0759 74CB      2024            mov     a,#(__str_1 >> 8)
075B C0E0      2025            push    acc
075D 7480      2026            mov     a,#0x80
075F C0E0      2027            push    acc
0761 120100    2028            lcall   _printf
0764 E581      2029            mov     a,sp
0766 24F9      2030            add     a,#0xf9
0768 F581      2031            mov     sp,a
076A           2032   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:473: return 0; 
076A 900000    2033            mov     dptr,#0x0000
076D 22        2034            ret
076E           2035   ;------------------------------------------------------------
076E           2036   ;Allocation info for local variables in function 'waitquarterperiod'
076E           2037   ;------------------------------------------------------------
076E           2038   ;------------------------------------------------------------
076E           2039   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:481: void waitquarterperiod(void){
076E           2040   ;        -----------------------------------------
076E           2041   ;         function waitquarterperiod
076E           2042   ;        -----------------------------------------
076E           2043   _waitquarterperiod:
076E           2044   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:482: waitms(constant_delay_time);
076E 90000A    2045            mov     dptr,#0x000A
0771 020100    2046            ljmp    _waitms
0774           2047   ;------------------------------------------------------------
0774           2048   ;Allocation info for local variables in function 'recieveData'
0774           2049   ;------------------------------------------------------------
0774           2050   ;checkcomm                 Allocated to registers 
0774           2051   ;i                         Allocated to registers r2 r3 
0774           2052   ;------------------------------------------------------------
0774           2053   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:488: void recieveData (){
0774           2054   ;        -----------------------------------------
0774           2055   ;         function recieveData
0774           2056   ;        -----------------------------------------
0774           2057   _recieveData:
0774           2058   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:492: while(getDigitalSignal()==0);          //wait for the signal to be 1 
0774           2059   L022001?:
0774 120100    2060            lcall   _getDigitalSignal
0777 E582      2061            mov     a,dpl
0779 8583F0    2062            mov     b,dph
077C 45F0      2063            orl     a,b
077E 6001      2064            jz      L022001?
0780           2065   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:493: if (getDigitalSignal()==1){    //gets the first 1 that identifies a command 
0780 120100    2066            lcall   _getDigitalSignal
0783 AA82      2067            mov     r2,dpl
0785 AB83      2068            mov     r3,dph
0787 BA0188    2069            cjne    r2,#0x01,L022010?
078A BB0088    2070            cjne    r3,#0x00,L022010?
078D           2071   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:494: command[0]=1;
078D 75A001    2072            mov     _command,#0x01
0790 75A100    2073            mov     (_command + 1),#0x00
0793           2074   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:495: for( i=1; i<4; i++){
0793 7A01      2075            mov     r2,#0x01
0795 7B00      2076            mov     r3,#0x00
0797           2077   L022006?:
0797 C3        2078            clr     c
0798 EA        2079            mov     a,r2
0799 9404      2080            subb    a,#0x04
079B EB        2081            mov     a,r3
079C 6480      2082            xrl     a,#0x80
079E 9480      2083            subb    a,#0x80
07A0 5001      2084            jnc     L022009?
07A2           2085   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:496: waitms(constant_delay_time);
07A2 90000A    2086            mov     dptr,#0x000A
07A5 C002      2087            push    ar2
07A7 C003      2088            push    ar3
07A9 120100    2089            lcall   _waitms
07AC D003      2090            pop     ar3
07AE D002      2091            pop     ar2
07B0           2092   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:497: command[i]=getDigitalSignal();         
07B0 8A04      2093            mov     ar4,r2
07B2 EB        2094            mov     a,r3
07B3 CC        2095            xch     a,r4
07B4 25E0      2096            add     a,acc
07B6 CC        2097            xch     a,r4
07B7 33        2098            rlc     a
07B8 EC        2099            mov     a,r4
07B9 24A0      2100            add     a,#_command
07BB F8        2101            mov     r0,a
07BC C002      2102            push    ar2
07BE C003      2103            push    ar3
07C0 C000      2104            push    ar0
07C2 120100    2105            lcall   _getDigitalSignal
07C5 E582      2106            mov     a,dpl
07C7 8583F0    2107            mov     b,dph
07CA D000      2108            pop     ar0
07CC D003      2109            pop     ar3
07CE D002      2110            pop     ar2
07D0 F6        2111            mov     @r0,a
07D1 08        2112            inc     r0
07D2 A6F0      2113            mov     @r0,b
07D4 18        2114            dec     r0
07D5           2115   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:495: for( i=1; i<4; i++){
07D5 0A        2116            inc     r2
07D6 BA00C8    2117            cjne    r2,#0x00,L022006?
07D9 0B        2118            inc     r3
07DA 8001      2119            sjmp    L022006?
07DC           2120   L022009?:
07DC           2121   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:500: checkCommands();                               //does activity depending on the command given 
07DC 020100    2122            ljmp    _checkCommands
07DF           2123   L022010?:
07DF 22        2124            ret
07E0           2125   ;------------------------------------------------------------
07E0           2126   ;Allocation info for local variables in function 'checkMode'
07E0           2127   ;------------------------------------------------------------
07E0           2128   ;------------------------------------------------------------
07E0           2129   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:506: int checkMode(){
07E0           2130   ;        -----------------------------------------
07E0           2131   ;         function checkMode
07E0           2132   ;        -----------------------------------------
07E0           2133   _checkMode:
07E0           2134   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:507: if(!BUTTON1 || x == 0){
07E0 30B248    2135            jnb     _P3_2,L023001?
07E3 E560      2136            mov     a,_x
07E5 4561      2137            orl     a,(_x + 1)
07E7 7001      2138            jnz     L023012?
07E9           2139   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:508: while(!BUTTON1);
07E9           2140   L023001?:
07E9 30B248    2141            jnb     _P3_2,L023001?
07EC           2142   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:509: x= 0;
07EC           2143   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:510: return 0;
07EC E4        2144            clr     a
07ED F560      2145            mov     _x,a
07EF F561      2146            mov     (_x + 1),a
07F1 F582      2147            mov     dpl,a
07F3 F583      2148            mov     dph,a
07F5 22        2149            ret
07F6           2150   L023012?:
07F6           2151   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:512: else if(!BUTTON2 || x == 1){
07F6 30B3C8    2152            jnb     _P3_3,L023004?
07F9 7401      2153            mov     a,#0x01
07FB B56008    2154            cjne    a,_x,L023027?
07FE E4        2155            clr     a
07FF B56108    2156            cjne    a,(_x + 1),L023027?
0802 8001      2157            sjmp    L023028?
0804           2158   L023027?:
0804 8001      2159            sjmp    L023008?
0806           2160   L023028?:
0806           2161   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:513: while(!BUTTON2);
0806           2162   L023004?:
0806 30B3C8    2163            jnb     _P3_3,L023004?
0809           2164   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:514: x = 1;
0809 756001    2165            mov     _x,#0x01
080C E4        2166            clr     a
080D F561      2167            mov     (_x + 1),a
080F           2168   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:515: return 1;
080F 900001    2169            mov     dptr,#0x0001
0812 22        2170            ret
0813           2171   L023008?:
0813           2172   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:518: x = 2;
0813 756002    2173            mov     _x,#0x02
0816 E4        2174            clr     a
0817 F561      2175            mov     (_x + 1),a
0819           2176   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:519: return 2;
0819 900002    2177            mov     dptr,#0x0002
081C 22        2178            ret
081D           2179   ;------------------------------------------------------------
081D           2180   ;Allocation info for local variables in function 'detectobstacle'
081D           2181   ;------------------------------------------------------------
081D           2182   ;threshold                 Allocated to registers r2 r3 r4 r5 
081D           2183   ;------------------------------------------------------------
081D           2184   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:524: void detectobstacle(float threshold){
081D           2185   ;        -----------------------------------------
081D           2186   ;         function detectobstacle
081D           2187   ;        -----------------------------------------
081D           2188   _detectobstacle:
081D AA82      2189            mov     r2,dpl
081F AB83      2190            mov     r3,dph
0821 ACF0      2191            mov     r4,b
0823 FD        2192            mov     r5,a
0824           2193   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:535: if(threshold <= 0.6 ){
0824 749A      2194            mov     a,#0x9A
0826 C0E0      2195            push    acc
0828 7499      2196            mov     a,#0x99
082A C0E0      2197            push    acc
082C 7419      2198            mov     a,#0x19
082E C0E0      2199            push    acc
0830 743F      2200            mov     a,#0x3F
0832 C0E0      2201            push    acc
0834 8A82      2202            mov     dpl,r2
0836 8B83      2203            mov     dph,r3
0838 8CF0      2204            mov     b,r4
083A ED        2205            mov     a,r5
083B 120100    2206            lcall   ___fsgt
083E AA82      2207            mov     r2,dpl
0840 E581      2208            mov     a,sp
0842 24FC      2209            add     a,#0xfc
0844 F581      2210            mov     sp,a
0846 EA        2211            mov     a,r2
0847 7001      2212            jnz     L024002?
0849           2213   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:537: printf("Turn right \r\n");
0849 7408      2214            mov     a,#__str_2
084B C0E0      2215            push    acc
084D 74CE      2216            mov     a,#(__str_2 >> 8)
084F C0E0      2217            push    acc
0851 7480      2218            mov     a,#0x80
0853 C0E0      2219            push    acc
0855 120100    2220            lcall   _printf
0858 1581      2221            dec     sp
085A 1581      2222            dec     sp
085C 1581      2223            dec     sp
085E           2224   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:538: PWMRight();
085E 120100    2225            lcall   _PWMRight
0861           2226   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:539: waitms(500); //Make waits longer
0861 9001F4    2227            mov     dptr,#0x01F4
0864 120100    2228            lcall   _waitms
0867           2229   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:540: waitms(500); 
0867 9001F4    2230            mov     dptr,#0x01F4
086A 120100    2231            lcall   _waitms
086D           2232   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:541: waitms(300); 
086D 90012C    2233            mov     dptr,#0x012C
0870 120100    2234            lcall   _waitms
0873           2235   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:543: PWMStop();
0873 120100    2236            lcall   _PWMStop
0876           2237   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:544: waitms(500);
0876 9001F4    2238            mov     dptr,#0x01F4
0879 120100    2239            lcall   _waitms
087C           2240   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:545: waitms(250);
087C 9000FA    2241            mov     dptr,#0x00FA
087F 020100    2242            ljmp    _waitms
0882           2243   L024002?:
0882           2244   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:550: printf("Go Straight \r\n");
0882 7448      2245            mov     a,#__str_3
0884 C0E0      2246            push    acc
0886 74CE      2247            mov     a,#(__str_3 >> 8)
0888 C0E0      2248            push    acc
088A 7480      2249            mov     a,#0x80
088C C0E0      2250            push    acc
088E 120100    2251            lcall   _printf
0891 1581      2252            dec     sp
0893 1581      2253            dec     sp
0895 1581      2254            dec     sp
0897           2255   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:552: PWMforward();
0897 020100    2256            ljmp    _PWMforward
089A           2257   ;------------------------------------------------------------
089A           2258   ;Allocation info for local variables in function 'main'
089A           2259   ;------------------------------------------------------------
089A           2260   ;checkcommand              Allocated to registers 
089A           2261   ;sig1                      Allocated to registers 
089A           2262   ;sig2                      Allocated to registers 
089A           2263   ;peak                      Allocated to registers 
089A           2264   ;voltspeak                 Allocated to registers 
089A           2265   ;periodpwm                 Allocated to registers 
089A           2266   ;time                      Allocated to registers r2 r3 r4 r5 
089A           2267   ;period                    Allocated to registers r4 r5 r6 r7 
089A           2268   ;overflow_count            Allocated to registers r4 r5 
089A           2269   ;mode_toggle               Allocated to registers r2 r3 
089A           2270   ;sloc0                     Allocated with name '_main_sloc0_1_0'
089A           2271   ;------------------------------------------------------------
089A           2272   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:559: void main(void)
089A           2273   ;        -----------------------------------------
089A           2274   ;         function main
089A           2275   ;        -----------------------------------------
089A           2276   _main:
089A           2277   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:573: TL0=0;
089A 758A00    2278            mov     _TL0,#0x00
089D           2279   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:574: TH0=0;
089D 758C00    2280            mov     _TH0,#0x00
08A0           2281   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:575: TF0=0;         
08A0 C28D      2282            clr     _TF0
08A2           2283   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:576: TIMER0_Init();
08A2 120100    2284            lcall   _TIMER0_Init
08A5           2285   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:578: InitPinADC(1, 6); // Configure P2.5 as analog input
08A5 75F006    2286            mov     _InitPinADC_PARM_2,#0x06
08A8 758201    2287            mov     dpl,#0x01
08AB 120100    2288            lcall   _InitPinADC
08AE           2289   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:580: InitADC();
08AE 120100    2290            lcall   _InitADC
08B1           2291   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:581: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
08B1 7488      2292            mov     a,#__str_4
08B3 C0E0      2293            push    acc
08B5 74CE      2294            mov     a,#(__str_4 >> 8)
08B7 C0E0      2295            push    acc
08B9 7480      2296            mov     a,#0x80
08BB C0E0      2297            push    acc
08BD 120100    2298            lcall   _printf
08C0 1581      2299            dec     sp
08C2 1581      2300            dec     sp
08C4 1581      2301            dec     sp
08C6           2302   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:583: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
08C6 74C8      2303            mov     a,#__str_5
08C8 C0E0      2304            push    acc
08CA 74CE      2305            mov     a,#(__str_5 >> 8)
08CC C0E0      2306            push    acc
08CE 7480      2307            mov     a,#0x80
08D0 C0E0      2308            push    acc
08D2 120100    2309            lcall   _printf
08D5 1581      2310            dec     sp
08D7 1581      2311            dec     sp
08D9 1581      2312            dec     sp
08DB           2313   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:585: printf("\n\r");
08DB 7408      2314            mov     a,#__str_6
08DD C0E0      2315            push    acc
08DF 74CF      2316            mov     a,#(__str_6 >> 8)
08E1 C0E0      2317            push    acc
08E3 7480      2318            mov     a,#0x80
08E5 C0E0      2319            push    acc
08E7 120100    2320            lcall   _printf
08EA 1581      2321            dec     sp
08EC 1581      2322            dec     sp
08EE 1581      2323            dec     sp
08F0           2324   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:588: PWMStop();
08F0 120100    2325            lcall   _PWMStop
08F3           2326   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:590: while (1)
08F3           2327   L025045?:
08F3           2328   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:592: mode_toggle = checkMode();
08F3 120100    2329            lcall   _checkMode
08F6 AA82      2330            mov     r2,dpl
08F8 AB83      2331            mov     r3,dph
08FA           2332   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:595: if(mode_toggle == 0){
08FA EA        2333            mov     a,r2
08FB 4B        2334            orl     a,r3
08FC 6001      2335            jz      L025072?
08FE 020100    2336            ljmp    L025042?
0901           2337   L025072?:
0901           2338   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:596: printf("auto \r\n");
0901 7408      2339            mov     a,#__str_7
0903 C0E0      2340            push    acc
0905 74D0      2341            mov     a,#(__str_7 >> 8)
0907 C0E0      2342            push    acc
0909 7480      2343            mov     a,#0x80
090B C0E0      2344            push    acc
090D 120100    2345            lcall   _printf
0910 1581      2346            dec     sp
0912 1581      2347            dec     sp
0914 1581      2348            dec     sp
0916           2349   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:598: TL0=0; 
0916 758A00    2350            mov     _TL0,#0x00
0919           2351   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:599: TH0=0;
0919 758C00    2352            mov     _TH0,#0x00
091C           2353   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:600: TF0=0;
091C C28D      2354            clr     _TF0
091E           2355   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:602: while(P2_1!=0); // Wait for the signal to be zero
091E           2356   L025001?:
091E 20A148    2357            jb      _P2_1,L025001?
0921           2358   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:603: while(P2_1!=1); // Wait for the signal to be one
0921           2359   L025004?:
0921 30A188    2360            jnb     _P2_1,L025004?
0924           2361   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:604: TR0=1; // Start the timer
0924 D28C      2362            setb    _TR0
0926           2363   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:605: while(P2_1!=0) // Wait for the signal to be zero
0926 7C00      2364            mov     r4,#0x00
0928 7D00      2365            mov     r5,#0x00
092A           2366   L025009?:
092A 30A108    2367            jnb     _P2_1,L025011?
092D           2368   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:607: if(TF0==1) // Did the 16-bit timer overflow?
092D           2369   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:609: TF0=0;
092D 108D48    2370            jbc     _TF0,L025076?
0930 8001      2371            sjmp    L025009?
0932           2372   L025076?:
0932           2373   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:610: overflow_count++;
0932 0C        2374            inc     r4
0933 BC00C8    2375            cjne    r4,#0x00,L025009?
0936 0D        2376            inc     r5
0937 8001      2377            sjmp    L025009?
0939           2378   L025011?:
0939           2379   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:621: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0939 C28C      2380            clr     _TR0
093B           2381   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:622: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
093B 8C82      2382            mov     dpl,r4
093D 8D83      2383            mov     dph,r5
093F 120100    2384            lcall   ___sint2fs
0942 AC82      2385            mov     r4,dpl
0944 AD83      2386            mov     r5,dph
0946 AEF0      2387            mov     r6,b
0948 FF        2388            mov     r7,a
0949 C004      2389            push    ar4
094B C005      2390            push    ar5
094D C006      2391            push    ar6
094F C007      2392            push    ar7
0951 900000    2393            mov     dptr,#0x0000
0954 75F080    2394            mov     b,#0x80
0957 7447      2395            mov     a,#0x47
0959 120100    2396            lcall   ___fsmul
095C 858268    2397            mov     _main_sloc0_1_0,dpl
095F 858369    2398            mov     (_main_sloc0_1_0 + 1),dph
0962 85F06A    2399            mov     (_main_sloc0_1_0 + 2),b
0965 F56B      2400            mov     (_main_sloc0_1_0 + 3),a
0967 E581      2401            mov     a,sp
0969 24FC      2402            add     a,#0xfc
096B F581      2403            mov     sp,a
096D 858C82    2404            mov     dpl,_TH0
0970 120100    2405            lcall   ___uchar2fs
0973 A882      2406            mov     r0,dpl
0975 A983      2407            mov     r1,dph
0977 ACF0      2408            mov     r4,b
0979 FD        2409            mov     r5,a
097A C000      2410            push    ar0
097C C001      2411            push    ar1
097E C004      2412            push    ar4
0980 C005      2413            push    ar5
0982 900000    2414            mov     dptr,#0x0000
0985 75F080    2415            mov     b,#0x80
0988 7443      2416            mov     a,#0x43
098A 120100    2417            lcall   ___fsmul
098D AC82      2418            mov     r4,dpl
098F AD83      2419            mov     r5,dph
0991 AEF0      2420            mov     r6,b
0993 FF        2421            mov     r7,a
0994 E581      2422            mov     a,sp
0996 24FC      2423            add     a,#0xfc
0998 F581      2424            mov     sp,a
099A C004      2425            push    ar4
099C C005      2426            push    ar5
099E C006      2427            push    ar6
09A0 C007      2428            push    ar7
09A2 856882    2429            mov     dpl,_main_sloc0_1_0
09A5 856983    2430            mov     dph,(_main_sloc0_1_0 + 1)
09A8 856AF0    2431            mov     b,(_main_sloc0_1_0 + 2)
09AB E56B      2432            mov     a,(_main_sloc0_1_0 + 3)
09AD 120100    2433            lcall   ___fsadd
09B0 858268    2434            mov     _main_sloc0_1_0,dpl
09B3 858369    2435            mov     (_main_sloc0_1_0 + 1),dph
09B6 85F06A    2436            mov     (_main_sloc0_1_0 + 2),b
09B9 F56B      2437            mov     (_main_sloc0_1_0 + 3),a
09BB E581      2438            mov     a,sp
09BD 24FC      2439            add     a,#0xfc
09BF F581      2440            mov     sp,a
09C1 A88A      2441            mov     r0,_TL0
09C3 7900      2442            mov     r1,#0x00
09C5 8882      2443            mov     dpl,r0
09C7 8983      2444            mov     dph,r1
09C9 120100    2445            lcall   ___sint2fs
09CC A882      2446            mov     r0,dpl
09CE A983      2447            mov     r1,dph
09D0 ACF0      2448            mov     r4,b
09D2 FD        2449            mov     r5,a
09D3 C000      2450            push    ar0
09D5 C001      2451            push    ar1
09D7 C004      2452            push    ar4
09D9 C005      2453            push    ar5
09DB 856882    2454            mov     dpl,_main_sloc0_1_0
09DE 856983    2455            mov     dph,(_main_sloc0_1_0 + 1)
09E1 856AF0    2456            mov     b,(_main_sloc0_1_0 + 2)
09E4 E56B      2457            mov     a,(_main_sloc0_1_0 + 3)
09E6 120100    2458            lcall   ___fsadd
09E9 AC82      2459            mov     r4,dpl
09EB AD83      2460            mov     r5,dph
09ED AEF0      2461            mov     r6,b
09EF FF        2462            mov     r7,a
09F0 E581      2463            mov     a,sp
09F2 24FC      2464            add     a,#0xfc
09F4 F581      2465            mov     sp,a
09F6 C004      2466            push    ar4
09F8 C005      2467            push    ar5
09FA C006      2468            push    ar6
09FC C007      2469            push    ar7
09FE 90F4FC    2470            mov     dptr,#0xF4FC
0A01 75F032    2471            mov     b,#0x32
0A04 7434      2472            mov     a,#0x34
0A06 120100    2473            lcall   ___fsmul
0A09 AC82      2474            mov     r4,dpl
0A0B AD83      2475            mov     r5,dph
0A0D AEF0      2476            mov     r6,b
0A0F FF        2477            mov     r7,a
0A10 E581      2478            mov     a,sp
0A12 24FC      2479            add     a,#0xfc
0A14 F581      2480            mov     sp,a
0A16           2481   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:624: printf( "\rT=%f ms   \n ", period*1000.0);
0A16 C004      2482            push    ar4
0A18 C005      2483            push    ar5
0A1A C006      2484            push    ar6
0A1C C007      2485            push    ar7
0A1E 900000    2486            mov     dptr,#0x0000
0A21 75F07A    2487            mov     b,#0x7A
0A24 7444      2488            mov     a,#0x44
0A26 120100    2489            lcall   ___fsmul
0A29 AC82      2490            mov     r4,dpl
0A2B AD83      2491            mov     r5,dph
0A2D AEF0      2492            mov     r6,b
0A2F FF        2493            mov     r7,a
0A30 E581      2494            mov     a,sp
0A32 24FC      2495            add     a,#0xfc
0A34 F581      2496            mov     sp,a
0A36 C004      2497            push    ar4
0A38 C005      2498            push    ar5
0A3A C006      2499            push    ar6
0A3C C007      2500            push    ar7
0A3E C004      2501            push    ar4
0A40 C005      2502            push    ar5
0A42 C006      2503            push    ar6
0A44 C007      2504            push    ar7
0A46 7488      2505            mov     a,#__str_8
0A48 C0E0      2506            push    acc
0A4A 74D1      2507            mov     a,#(__str_8 >> 8)
0A4C C0E0      2508            push    acc
0A4E 7480      2509            mov     a,#0x80
0A50 C0E0      2510            push    acc
0A52 120100    2511            lcall   _printf
0A55 E581      2512            mov     a,sp
0A57 24F9      2513            add     a,#0xf9
0A59 F581      2514            mov     sp,a
0A5B           2515   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:625: waitms(50);
0A5B 900032    2516            mov     dptr,#0x0032
0A5E 120100    2517            lcall   _waitms
0A61 D007      2518            pop     ar7
0A63 D006      2519            pop     ar6
0A65 D005      2520            pop     ar5
0A67 D004      2521            pop     ar4
0A69           2522   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:626: detectobstacle(period*1000.0);
0A69 8C82      2523            mov     dpl,r4
0A6B 8D83      2524            mov     dph,r5
0A6D 8EF0      2525            mov     b,r6
0A6F EF        2526            mov     a,r7
0A70 120100    2527            lcall   _detectobstacle
0A73           2528   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:635: waitms(50);    
0A73 900032    2529            mov     dptr,#0x0032
0A76 120100    2530            lcall   _waitms
0A79 020100    2531            ljmp    L025045?
0A7C           2532   L025042?:
0A7C           2533   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:639: else if(mode_toggle == 1){
0A7C BA01C8    2534            cjne    r2,#0x01,L025077?
0A7F BB00C8    2535            cjne    r3,#0x00,L025077?
0A82 8001      2536            sjmp    L025078?
0A84           2537   L025077?:
0A84 020100    2538            ljmp    L025039?
0A87           2539   L025078?:
0A87           2540   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:640: printf("manual \r\n");
0A87 7488      2541            mov     a,#__str_9
0A89 C0E0      2542            push    acc
0A8B 74D2      2543            mov     a,#(__str_9 >> 8)
0A8D C0E0      2544            push    acc
0A8F 7480      2545            mov     a,#0x80
0A91 C0E0      2546            push    acc
0A93 120100    2547            lcall   _printf
0A96 1581      2548            dec     sp
0A98 1581      2549            dec     sp
0A9A 1581      2550            dec     sp
0A9C           2551   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:647: time=zero_time_calc(); 
0A9C 120100    2552            lcall   _zero_time_calc
0A9F AA82      2553            mov     r2,dpl
0AA1 AB83      2554            mov     r3,dph
0AA3 ACF0      2555            mov     r4,b
0AA5 FD        2556            mov     r5,a
0AA6           2557   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:648: printf("Time: %f\n\t\r", time);
0AA6 C002      2558            push    ar2
0AA8 C003      2559            push    ar3
0AAA C004      2560            push    ar4
0AAC C005      2561            push    ar5
0AAE C002      2562            push    ar2
0AB0 C003      2563            push    ar3
0AB2 C004      2564            push    ar4
0AB4 C005      2565            push    ar5
0AB6 74C8      2566            mov     a,#__str_10
0AB8 C0E0      2567            push    acc
0ABA 74D2      2568            mov     a,#(__str_10 >> 8)
0ABC C0E0      2569            push    acc
0ABE 7480      2570            mov     a,#0x80
0AC0 C0E0      2571            push    acc
0AC2 120100    2572            lcall   _printf
0AC5 E581      2573            mov     a,sp
0AC7 24F9      2574            add     a,#0xf9
0AC9 F581      2575            mov     sp,a
0ACB D005      2576            pop     ar5
0ACD D004      2577            pop     ar4
0ACF D003      2578            pop     ar3
0AD1 D002      2579            pop     ar2
0AD3           2580   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:651: if((time>=300 && time<=450)||(time>=1400 && time<=1500)||
0AD3 C002      2581            push    ar2
0AD5 C003      2582            push    ar3
0AD7 C004      2583            push    ar4
0AD9 C005      2584            push    ar5
0ADB E4        2585            clr     a
0ADC C0E0      2586            push    acc
0ADE C0E0      2587            push    acc
0AE0 7496      2588            mov     a,#0x96
0AE2 C0E0      2589            push    acc
0AE4 7443      2590            mov     a,#0x43
0AE6 C0E0      2591            push    acc
0AE8 8A82      2592            mov     dpl,r2
0AEA 8B83      2593            mov     dph,r3
0AEC 8CF0      2594            mov     b,r4
0AEE ED        2595            mov     a,r5
0AEF 120100    2596            lcall   ___fslt
0AF2 AE82      2597            mov     r6,dpl
0AF4 E581      2598            mov     a,sp
0AF6 24FC      2599            add     a,#0xfc
0AF8 F581      2600            mov     sp,a
0AFA D005      2601            pop     ar5
0AFC D004      2602            pop     ar4
0AFE D003      2603            pop     ar3
0B00 D002      2604            pop     ar2
0B02 EE        2605            mov     a,r6
0B03 7001      2606            jnz     L025032?
0B05 C002      2607            push    ar2
0B07 C003      2608            push    ar3
0B09 C004      2609            push    ar4
0B0B C005      2610            push    ar5
0B0D C006      2611            push    ar6
0B0F E4        2612            clr     a
0B10 C0E0      2613            push    acc
0B12 C0E0      2614            push    acc
0B14 74E1      2615            mov     a,#0xE1
0B16 C0E0      2616            push    acc
0B18 7443      2617            mov     a,#0x43
0B1A C0E0      2618            push    acc
0B1C 8A82      2619            mov     dpl,r2
0B1E 8B83      2620            mov     dph,r3
0B20 8CF0      2621            mov     b,r4
0B22 ED        2622            mov     a,r5
0B23 120100    2623            lcall   ___fsgt
0B26 AF82      2624            mov     r7,dpl
0B28 E581      2625            mov     a,sp
0B2A 24FC      2626            add     a,#0xfc
0B2C F581      2627            mov     sp,a
0B2E D006      2628            pop     ar6
0B30 D005      2629            pop     ar5
0B32 D004      2630            pop     ar4
0B34 D003      2631            pop     ar3
0B36 D002      2632            pop     ar2
0B38 EF        2633            mov     a,r7
0B39 7001      2634            jnz     L025080?
0B3B 020100    2635            ljmp    L025028?
0B3E           2636   L025080?:
0B3E           2637   L025032?:
0B3E C002      2638            push    ar2
0B40 C003      2639            push    ar3
0B42 C004      2640            push    ar4
0B44 C005      2641            push    ar5
0B46 C006      2642            push    ar6
0B48 E4        2643            clr     a
0B49 C0E0      2644            push    acc
0B4B C0E0      2645            push    acc
0B4D 74AF      2646            mov     a,#0xAF
0B4F C0E0      2647            push    acc
0B51 7444      2648            mov     a,#0x44
0B53 C0E0      2649            push    acc
0B55 8A82      2650            mov     dpl,r2
0B57 8B83      2651            mov     dph,r3
0B59 8CF0      2652            mov     b,r4
0B5B ED        2653            mov     a,r5
0B5C 120100    2654            lcall   ___fslt
0B5F AF82      2655            mov     r7,dpl
0B61 E581      2656            mov     a,sp
0B63 24FC      2657            add     a,#0xfc
0B65 F581      2658            mov     sp,a
0B67 D006      2659            pop     ar6
0B69 D005      2660            pop     ar5
0B6B D004      2661            pop     ar4
0B6D D003      2662            pop     ar3
0B6F D002      2663            pop     ar2
0B71 EF        2664            mov     a,r7
0B72 7001      2665            jnz     L025034?
0B74 C002      2666            push    ar2
0B76 C003      2667            push    ar3
0B78 C004      2668            push    ar4
0B7A C005      2669            push    ar5
0B7C C006      2670            push    ar6
0B7E E4        2671            clr     a
0B7F C0E0      2672            push    acc
0B81 7480      2673            mov     a,#0x80
0B83 C0E0      2674            push    acc
0B85 74BB      2675            mov     a,#0xBB
0B87 C0E0      2676            push    acc
0B89 7444      2677            mov     a,#0x44
0B8B C0E0      2678            push    acc
0B8D 8A82      2679            mov     dpl,r2
0B8F 8B83      2680            mov     dph,r3
0B91 8CF0      2681            mov     b,r4
0B93 ED        2682            mov     a,r5
0B94 120100    2683            lcall   ___fsgt
0B97 AF82      2684            mov     r7,dpl
0B99 E581      2685            mov     a,sp
0B9B 24FC      2686            add     a,#0xfc
0B9D F581      2687            mov     sp,a
0B9F D006      2688            pop     ar6
0BA1 D005      2689            pop     ar5
0BA3 D004      2690            pop     ar4
0BA5 D003      2691            pop     ar3
0BA7 D002      2692            pop     ar2
0BA9 EF        2693            mov     a,r7
0BAA 7001      2694            jnz     L025082?
0BAC 020100    2695            ljmp    L025028?
0BAF           2696   L025082?:
0BAF           2697   L025034?:
0BAF           2698   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:652: (time>=1060 && time<=1090)||(time>=1780) || (time>=600 && time<=750) ){
0BAF C002      2699            push    ar2
0BB1 C003      2700            push    ar3
0BB3 C004      2701            push    ar4
0BB5 C005      2702            push    ar5
0BB7 C006      2703            push    ar6
0BB9 E4        2704            clr     a
0BBA C0E0      2705            push    acc
0BBC 7480      2706            mov     a,#0x80
0BBE C0E0      2707            push    acc
0BC0 7484      2708            mov     a,#0x84
0BC2 C0E0      2709            push    acc
0BC4 7444      2710            mov     a,#0x44
0BC6 C0E0      2711            push    acc
0BC8 8A82      2712            mov     dpl,r2
0BCA 8B83      2713            mov     dph,r3
0BCC 8CF0      2714            mov     b,r4
0BCE ED        2715            mov     a,r5
0BCF 120100    2716            lcall   ___fslt
0BD2 AF82      2717            mov     r7,dpl
0BD4 E581      2718            mov     a,sp
0BD6 24FC      2719            add     a,#0xfc
0BD8 F581      2720            mov     sp,a
0BDA D006      2721            pop     ar6
0BDC D005      2722            pop     ar5
0BDE D004      2723            pop     ar4
0BE0 D003      2724            pop     ar3
0BE2 D002      2725            pop     ar2
0BE4 EF        2726            mov     a,r7
0BE5 7001      2727            jnz     L025035?
0BE7 C002      2728            push    ar2
0BE9 C003      2729            push    ar3
0BEB C004      2730            push    ar4
0BED C005      2731            push    ar5
0BEF C006      2732            push    ar6
0BF1 E4        2733            clr     a
0BF2 C0E0      2734            push    acc
0BF4 7440      2735            mov     a,#0x40
0BF6 C0E0      2736            push    acc
0BF8 7488      2737            mov     a,#0x88
0BFA C0E0      2738            push    acc
0BFC 7444      2739            mov     a,#0x44
0BFE C0E0      2740            push    acc
0C00 8A82      2741            mov     dpl,r2
0C02 8B83      2742            mov     dph,r3
0C04 8CF0      2743            mov     b,r4
0C06 ED        2744            mov     a,r5
0C07 120100    2745            lcall   ___fsgt
0C0A AF82      2746            mov     r7,dpl
0C0C E581      2747            mov     a,sp
0C0E 24FC      2748            add     a,#0xfc
0C10 F581      2749            mov     sp,a
0C12 D006      2750            pop     ar6
0C14 D005      2751            pop     ar5
0C16 D004      2752            pop     ar4
0C18 D003      2753            pop     ar3
0C1A D002      2754            pop     ar2
0C1C EF        2755            mov     a,r7
0C1D 7001      2756            jnz     L025084?
0C1F 020100    2757            ljmp    L025028?
0C22           2758   L025084?:
0C22           2759   L025035?:
0C22 C002      2760            push    ar2
0C24 C003      2761            push    ar3
0C26 C004      2762            push    ar4
0C28 C005      2763            push    ar5
0C2A C006      2764            push    ar6
0C2C E4        2765            clr     a
0C2D C0E0      2766            push    acc
0C2F 7480      2767            mov     a,#0x80
0C31 C0E0      2768            push    acc
0C33 74DE      2769            mov     a,#0xDE
0C35 C0E0      2770            push    acc
0C37 7444      2771            mov     a,#0x44
0C39 C0E0      2772            push    acc
0C3B 8A82      2773            mov     dpl,r2
0C3D 8B83      2774            mov     dph,r3
0C3F 8CF0      2775            mov     b,r4
0C41 ED        2776            mov     a,r5
0C42 120100    2777            lcall   ___fslt
0C45 AF82      2778            mov     r7,dpl
0C47 E581      2779            mov     a,sp
0C49 24FC      2780            add     a,#0xfc
0C4B F581      2781            mov     sp,a
0C4D D006      2782            pop     ar6
0C4F D005      2783            pop     ar5
0C51 D004      2784            pop     ar4
0C53 D003      2785            pop     ar3
0C55 D002      2786            pop     ar2
0C57 EF        2787            mov     a,r7
0C58 6001      2788            jz      L025028?
0C5A C002      2789            push    ar2
0C5C C003      2790            push    ar3
0C5E C004      2791            push    ar4
0C60 C005      2792            push    ar5
0C62 C006      2793            push    ar6
0C64 E4        2794            clr     a
0C65 C0E0      2795            push    acc
0C67 C0E0      2796            push    acc
0C69 7416      2797            mov     a,#0x16
0C6B C0E0      2798            push    acc
0C6D 7444      2799            mov     a,#0x44
0C6F C0E0      2800            push    acc
0C71 8A82      2801            mov     dpl,r2
0C73 8B83      2802            mov     dph,r3
0C75 8CF0      2803            mov     b,r4
0C77 ED        2804            mov     a,r5
0C78 120100    2805            lcall   ___fslt
0C7B AF82      2806            mov     r7,dpl
0C7D E581      2807            mov     a,sp
0C7F 24FC      2808            add     a,#0xfc
0C81 F581      2809            mov     sp,a
0C83 D006      2810            pop     ar6
0C85 D005      2811            pop     ar5
0C87 D004      2812            pop     ar4
0C89 D003      2813            pop     ar3
0C8B D002      2814            pop     ar2
0C8D EF        2815            mov     a,r7
0C8E 6001      2816            jz      L025086?
0C90 020100    2817            ljmp    L025045?
0C93           2818   L025086?:
0C93 C002      2819            push    ar2
0C95 C003      2820            push    ar3
0C97 C004      2821            push    ar4
0C99 C005      2822            push    ar5
0C9B C006      2823            push    ar6
0C9D E4        2824            clr     a
0C9E C0E0      2825            push    acc
0CA0 7480      2826            mov     a,#0x80
0CA2 C0E0      2827            push    acc
0CA4 743B      2828            mov     a,#0x3B
0CA6 C0E0      2829            push    acc
0CA8 7444      2830            mov     a,#0x44
0CAA C0E0      2831            push    acc
0CAC 8A82      2832            mov     dpl,r2
0CAE 8B83      2833            mov     dph,r3
0CB0 8CF0      2834            mov     b,r4
0CB2 ED        2835            mov     a,r5
0CB3 120100    2836            lcall   ___fsgt
0CB6 AF82      2837            mov     r7,dpl
0CB8 E581      2838            mov     a,sp
0CBA 24FC      2839            add     a,#0xfc
0CBC F581      2840            mov     sp,a
0CBE D006      2841            pop     ar6
0CC0 D005      2842            pop     ar5
0CC2 D004      2843            pop     ar4
0CC4 D003      2844            pop     ar3
0CC6 D002      2845            pop     ar2
0CC8 EF        2846            mov     a,r7
0CC9 6001      2847            jz      L025087?
0CCB 020100    2848            ljmp    L025045?
0CCE           2849   L025087?:
0CCE           2850   L025028?:
0CCE           2851   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:653: if(time>=1400 && time<=1500){
0CCE C002      2852            push    ar2
0CD0 C003      2853            push    ar3
0CD2 C004      2854            push    ar4
0CD4 C005      2855            push    ar5
0CD6 C006      2856            push    ar6
0CD8 E4        2857            clr     a
0CD9 C0E0      2858            push    acc
0CDB C0E0      2859            push    acc
0CDD 74AF      2860            mov     a,#0xAF
0CDF C0E0      2861            push    acc
0CE1 7444      2862            mov     a,#0x44
0CE3 C0E0      2863            push    acc
0CE5 8A82      2864            mov     dpl,r2
0CE7 8B83      2865            mov     dph,r3
0CE9 8CF0      2866            mov     b,r4
0CEB ED        2867            mov     a,r5
0CEC 120100    2868            lcall   ___fslt
0CEF AF82      2869            mov     r7,dpl
0CF1 E581      2870            mov     a,sp
0CF3 24FC      2871            add     a,#0xfc
0CF5 F581      2872            mov     sp,a
0CF7 D006      2873            pop     ar6
0CF9 D005      2874            pop     ar5
0CFB D004      2875            pop     ar4
0CFD D003      2876            pop     ar3
0CFF D002      2877            pop     ar2
0D01 EF        2878            mov     a,r7
0D02 7001      2879            jnz     L025025?
0D04 C002      2880            push    ar2
0D06 C003      2881            push    ar3
0D08 C004      2882            push    ar4
0D0A C005      2883            push    ar5
0D0C C006      2884            push    ar6
0D0E E4        2885            clr     a
0D0F C0E0      2886            push    acc
0D11 7480      2887            mov     a,#0x80
0D13 C0E0      2888            push    acc
0D15 74BB      2889            mov     a,#0xBB
0D17 C0E0      2890            push    acc
0D19 7444      2891            mov     a,#0x44
0D1B C0E0      2892            push    acc
0D1D 8A82      2893            mov     dpl,r2
0D1F 8B83      2894            mov     dph,r3
0D21 8CF0      2895            mov     b,r4
0D23 ED        2896            mov     a,r5
0D24 120100    2897            lcall   ___fsgt
0D27 AF82      2898            mov     r7,dpl
0D29 E581      2899            mov     a,sp
0D2B 24FC      2900            add     a,#0xfc
0D2D F581      2901            mov     sp,a
0D2F D006      2902            pop     ar6
0D31 D005      2903            pop     ar5
0D33 D004      2904            pop     ar4
0D35 D003      2905            pop     ar3
0D37 D002      2906            pop     ar2
0D39 EF        2907            mov     a,r7
0D3A 7001      2908            jnz     L025025?
0D3C           2909   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:654: printf("RIGHT\n\r");
0D3C 7488      2910            mov     a,#__str_11
0D3E C0E0      2911            push    acc
0D40 74D5      2912            mov     a,#(__str_11 >> 8)
0D42 C0E0      2913            push    acc
0D44 7480      2914            mov     a,#0x80
0D46 C0E0      2915            push    acc
0D48 120100    2916            lcall   _printf
0D4B 1581      2917            dec     sp
0D4D 1581      2918            dec     sp
0D4F 1581      2919            dec     sp
0D51           2920   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:655: PWMRight();
0D51 120100    2921            lcall   _PWMRight
0D54 020100    2922            ljmp    L025045?
0D57           2923   L025025?:
0D57           2924   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:657: else if(time>=300 && time<=450){
0D57 EE        2925            mov     a,r6
0D58 7001      2926            jnz     L025021?
0D5A C002      2927            push    ar2
0D5C C003      2928            push    ar3
0D5E C004      2929            push    ar4
0D60 C005      2930            push    ar5
0D62 E4        2931            clr     a
0D63 C0E0      2932            push    acc
0D65 C0E0      2933            push    acc
0D67 74E1      2934            mov     a,#0xE1
0D69 C0E0      2935            push    acc
0D6B 7443      2936            mov     a,#0x43
0D6D C0E0      2937            push    acc
0D6F 8A82      2938            mov     dpl,r2
0D71 8B83      2939            mov     dph,r3
0D73 8CF0      2940            mov     b,r4
0D75 ED        2941            mov     a,r5
0D76 120100    2942            lcall   ___fsgt
0D79 AE82      2943            mov     r6,dpl
0D7B E581      2944            mov     a,sp
0D7D 24FC      2945            add     a,#0xfc
0D7F F581      2946            mov     sp,a
0D81 D005      2947            pop     ar5
0D83 D004      2948            pop     ar4
0D85 D003      2949            pop     ar3
0D87 D002      2950            pop     ar2
0D89 EE        2951            mov     a,r6
0D8A 7001      2952            jnz     L025021?
0D8C           2953   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:658: printf("FORWARD\n\r");
0D8C 7408      2954            mov     a,#__str_12
0D8E C0E0      2955            push    acc
0D90 74D6      2956            mov     a,#(__str_12 >> 8)
0D92 C0E0      2957            push    acc
0D94 7480      2958            mov     a,#0x80
0D96 C0E0      2959            push    acc
0D98 120100    2960            lcall   _printf
0D9B 1581      2961            dec     sp
0D9D 1581      2962            dec     sp
0D9F 1581      2963            dec     sp
0DA1           2964   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:659: PWMforward();
0DA1 120100    2965            lcall   _PWMforward
0DA4 020100    2966            ljmp    L025045?
0DA7           2967   L025021?:
0DA7           2968   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:661: else if(time>=600 && time<=750){
0DA7 C002      2969            push    ar2
0DA9 C003      2970            push    ar3
0DAB C004      2971            push    ar4
0DAD C005      2972            push    ar5
0DAF E4        2973            clr     a
0DB0 C0E0      2974            push    acc
0DB2 C0E0      2975            push    acc
0DB4 7416      2976            mov     a,#0x16
0DB6 C0E0      2977            push    acc
0DB8 7444      2978            mov     a,#0x44
0DBA C0E0      2979            push    acc
0DBC 8A82      2980            mov     dpl,r2
0DBE 8B83      2981            mov     dph,r3
0DC0 8CF0      2982            mov     b,r4
0DC2 ED        2983            mov     a,r5
0DC3 120100    2984            lcall   ___fslt
0DC6 AE82      2985            mov     r6,dpl
0DC8 E581      2986            mov     a,sp
0DCA 24FC      2987            add     a,#0xfc
0DCC F581      2988            mov     sp,a
0DCE D005      2989            pop     ar5
0DD0 D004      2990            pop     ar4
0DD2 D003      2991            pop     ar3
0DD4 D002      2992            pop     ar2
0DD6 EE        2993            mov     a,r6
0DD7 7001      2994            jnz     L025017?
0DD9 C002      2995            push    ar2
0DDB C003      2996            push    ar3
0DDD C004      2997            push    ar4
0DDF C005      2998            push    ar5
0DE1 E4        2999            clr     a
0DE2 C0E0      3000            push    acc
0DE4 7480      3001            mov     a,#0x80
0DE6 C0E0      3002            push    acc
0DE8 743B      3003            mov     a,#0x3B
0DEA C0E0      3004            push    acc
0DEC 7444      3005            mov     a,#0x44
0DEE C0E0      3006            push    acc
0DF0 8A82      3007            mov     dpl,r2
0DF2 8B83      3008            mov     dph,r3
0DF4 8CF0      3009            mov     b,r4
0DF6 ED        3010            mov     a,r5
0DF7 120100    3011            lcall   ___fsgt
0DFA AE82      3012            mov     r6,dpl
0DFC E581      3013            mov     a,sp
0DFE 24FC      3014            add     a,#0xfc
0E00 F581      3015            mov     sp,a
0E02 D005      3016            pop     ar5
0E04 D004      3017            pop     ar4
0E06 D003      3018            pop     ar3
0E08 D002      3019            pop     ar2
0E0A EE        3020            mov     a,r6
0E0B 7001      3021            jnz     L025017?
0E0D           3022   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:662: printf("BACKWARD\n\r");
0E0D 7488      3023            mov     a,#__str_13
0E0F C0E0      3024            push    acc
0E11 74D6      3025            mov     a,#(__str_13 >> 8)
0E13 C0E0      3026            push    acc
0E15 7480      3027            mov     a,#0x80
0E17 C0E0      3028            push    acc
0E19 120100    3029            lcall   _printf
0E1C 1581      3030            dec     sp
0E1E 1581      3031            dec     sp
0E20 1581      3032            dec     sp
0E22           3033   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:663: PWMbackward();
0E22 120100    3034            lcall   _PWMbackward
0E25 020100    3035            ljmp    L025045?
0E28           3036   L025017?:
0E28           3037   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:665: else if(time>=1060 && time<=1090){
0E28 C002      3038            push    ar2
0E2A C003      3039            push    ar3
0E2C C004      3040            push    ar4
0E2E C005      3041            push    ar5
0E30 E4        3042            clr     a
0E31 C0E0      3043            push    acc
0E33 7480      3044            mov     a,#0x80
0E35 C0E0      3045            push    acc
0E37 7484      3046            mov     a,#0x84
0E39 C0E0      3047            push    acc
0E3B 7444      3048            mov     a,#0x44
0E3D C0E0      3049            push    acc
0E3F 8A82      3050            mov     dpl,r2
0E41 8B83      3051            mov     dph,r3
0E43 8CF0      3052            mov     b,r4
0E45 ED        3053            mov     a,r5
0E46 120100    3054            lcall   ___fslt
0E49 AE82      3055            mov     r6,dpl
0E4B E581      3056            mov     a,sp
0E4D 24FC      3057            add     a,#0xfc
0E4F F581      3058            mov     sp,a
0E51 D005      3059            pop     ar5
0E53 D004      3060            pop     ar4
0E55 D003      3061            pop     ar3
0E57 D002      3062            pop     ar2
0E59 EE        3063            mov     a,r6
0E5A 7001      3064            jnz     L025013?
0E5C C0E0      3065            push    acc
0E5E 7440      3066            mov     a,#0x40
0E60 C0E0      3067            push    acc
0E62 7488      3068            mov     a,#0x88
0E64 C0E0      3069            push    acc
0E66 7444      3070            mov     a,#0x44
0E68 C0E0      3071            push    acc
0E6A 8A82      3072            mov     dpl,r2
0E6C 8B83      3073            mov     dph,r3
0E6E 8CF0      3074            mov     b,r4
0E70 ED        3075            mov     a,r5
0E71 120100    3076            lcall   ___fsgt
0E74 AA82      3077            mov     r2,dpl
0E76 E581      3078            mov     a,sp
0E78 24FC      3079            add     a,#0xfc
0E7A F581      3080            mov     sp,a
0E7C EA        3081            mov     a,r2
0E7D 7001      3082            jnz     L025013?
0E7F           3083   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:666: printf("LEFT\n\r");
0E7F 7408      3084            mov     a,#__str_14
0E81 C0E0      3085            push    acc
0E83 74D7      3086            mov     a,#(__str_14 >> 8)
0E85 C0E0      3087            push    acc
0E87 7480      3088            mov     a,#0x80
0E89 C0E0      3089            push    acc
0E8B 120100    3090            lcall   _printf
0E8E 1581      3091            dec     sp
0E90 1581      3092            dec     sp
0E92 1581      3093            dec     sp
0E94           3094   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:667: PWMLeft();
0E94 120100    3095            lcall   _PWMLeft
0E97 020100    3096            ljmp    L025045?
0E9A           3097   L025013?:
0E9A           3098   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:670: {      printf("STOP\n\r");
0E9A 7448      3099            mov     a,#__str_15
0E9C C0E0      3100            push    acc
0E9E 74D7      3101            mov     a,#(__str_15 >> 8)
0EA0 C0E0      3102            push    acc
0EA2 7480      3103            mov     a,#0x80
0EA4 C0E0      3104            push    acc
0EA6 120100    3105            lcall   _printf
0EA9 1581      3106            dec     sp
0EAB 1581      3107            dec     sp
0EAD 1581      3108            dec     sp
0EAF           3109   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:671: PWMStop();
0EAF 120100    3110            lcall   _PWMStop
0EB2 020100    3111            ljmp    L025045?
0EB5           3112   L025039?:
0EB5           3113   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:681: printf("Do nothing\r\n");      
0EB5 7488      3114            mov     a,#__str_16
0EB7 C0E0      3115            push    acc
0EB9 74D7      3116            mov     a,#(__str_16 >> 8)
0EBB C0E0      3117            push    acc
0EBD 7480      3118            mov     a,#0x80
0EBF C0E0      3119            push    acc
0EC1 120100    3120            lcall   _printf
0EC4 1581      3121            dec     sp
0EC6 1581      3122            dec     sp
0EC8 1581      3123            dec     sp
0ECA 020100    3124            ljmp    L025045?
0ECD           3125            rseg R_CSEG
0ECD           3126   
0000           3127            rseg R_XINIT
0000           3128   
0000           3129            rseg R_CONST
0000           3130   __str_0:
0000 0A        3131            db 0x0A
0001 72656164  3132            db 'read 1:  at pin 1.6: %f'
     20313A20
     20617420
     70696E20
     312E363A
     202566
0018 0D        3133            db 0x0D
0019 00        3134            db 0x00
001A           3135   __str_1:
001A 0A        3136            db 0x0A
001B 72656164  3137            db 'read 0: Volt at pin 1.6: %f'
     20303A20
     566F6C74
     20617420
     70696E20
     312E363A
     202566
0036 0D        3138            db 0x0D
0037 00        3139            db 0x00
0038           3140   __str_2:
0038 5475726E  3141            db 'Turn right '
     20726967
     687420
0043 0D        3142            db 0x0D
0044 0A        3143            db 0x0A
0045 00        3144            db 0x00
0046           3145   __str_3:
0046 476F2053  3146            db 'Go Straight '
     74726169
     67687420
0052 0D        3147            db 0x0D
0053 0A        3148            db 0x0A
0054 00        3149            db 0x00
0055           3150   __str_4:
0055 1B        3151            db 0x1B
0056 5B324A    3152            db '[2J'
0059 00        3153            db 0x00
005A           3154   __str_5:
005A 53717561  3155            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0080 0D        3156            db 0x0D
0081 0A        3157            db 0x0A
0082 43686563  3158            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0096 50322E31  3159            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00B1 0D        3160            db 0x0D
00B2 0A        3161            db 0x0A
00B3 00        3162            db 0x00
00B4           3163   __str_6:
00B4 0A        3164            db 0x0A
00B5 0D        3165            db 0x0D
00B6 00        3166            db 0x00
00B7           3167   __str_7:
00B7 6175746F  3168            db 'auto '
     20
00BC 0D        3169            db 0x0D
00BD 0A        3170            db 0x0A
00BE 00        3171            db 0x00
00BF           3172   __str_8:
00BF 0D        3173            db 0x0D
00C0 543D2566  3174            db 'T=%f ms   '
     206D7320
     2020
00CA 0A        3175            db 0x0A
00CB 20        3176            db ' '
00CC 00        3177            db 0x00
00CD           3178   __str_9:
00CD 6D616E75  3179            db 'manual '
     616C20
00D4 0D        3180            db 0x0D
00D5 0A        3181            db 0x0A
00D6 00        3182            db 0x00
00D7           3183   __str_10:
00D7 54696D65  3184            db 'Time: %f'
     3A202566
00DF 0A        3185            db 0x0A
00E0 09        3186            db 0x09
00E1 0D        3187            db 0x0D
00E2 00        3188            db 0x00
00E3           3189   __str_11:
00E3 52494748  3190            db 'RIGHT'
     54
00E8 0A        3191            db 0x0A
00E9 0D        3192            db 0x0D
00EA 00        3193            db 0x00
00EB           3194   __str_12:
00EB 464F5257  3195            db 'FORWARD'
     415244
00F2 0A        3196            db 0x0A
00F3 0D        3197            db 0x0D
00F4 00        3198            db 0x00
00F5           3199   __str_13:
00F5 4241434B  3200            db 'BACKWARD'
     57415244
00FD 0A        3201            db 0x0A
00FE 0D        3202            db 0x0D
00FF 00        3203            db 0x00
0100           3204   __str_14:
0100 4C454654  3205            db 'LEFT'
0104 0A        3206            db 0x0A
0105 0D        3207            db 0x0D
0106 00        3208            db 0x00
0107           3209   __str_15:
0107 53544F50  3210            db 'STOP'
010B 0A        3211            db 0x0A
010C 0D        3212            db 0x0D
010D 00        3213            db 0x00
010E           3214   __str_16:
010E 446F206E  3215            db 'Do nothing'
     6F746869
     6E67
0118 0D        3216            db 0x0D
0119 0A        3217            db 0x0A
011A 00        3218            db 0x00
011B           3219   
002E           3220            CSEG
002E           3221   
002E           3222   end
