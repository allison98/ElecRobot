0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 02:25:32 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _laserPattern
0000             32            public _detectobstacle
0000             33            public _checkMode
0000             34            public _recieveData
0000             35            public _waitquarterperiod
0000             36            public _getDigitalSignal
0000             37            public _voltsAtPeak
0000             38            public _checkCommands
0000             39            public _arrayEqual
0000             40            public _zero_time_calc
0000             41            public _PWMStop
0000             42            public _PWMRight
0000             43            public _PWMLeft
0000             44            public _PWMbackward
0000             45            public _PWMforward
0000             46            public _InitPinADC
0000             47            public _Volts_at_Pin
0000             48            public _TIMER0_Init
0000             49            public _InitADC
0000             50            public _Timer2_ISR
0000             51            public _ADC_at_Pin
0000             52            public _waitms
0000             53            public _Timer3us
0000             54            public __c51_external_startup
0000             55            public _count20ms2
0000             56            public _pwm_state2
0000             57            public _pwm_reload2
0000             58            public _x
0000             59            public _command
0000             60            public _right
0000             61            public _left
0000             62            public _backward
0000             63            public _forward
0000             64            public _stop
0000             65            public _claw_flag
0000             66            public _flag
0000             67            public _cartMoveB
0000             68            public _cartMoveF
0000             69            public _pwmSig6
0000             70            public _pwmSig5
0000             71            public _pwmSig4
0000             72            public _pwmSig3
0000             73            public _pwmSig2
0000             74            public _pwmSig1
0000             75            public _pwm_count3
0000             76            public _pwm_count2
0000             77            public _pwm_count1
0000             78            public _pwm_count
0000             79   ;--------------------------------------------------------
0000             80   ; Special Function Registers
0000             81   ;--------------------------------------------------------
0000             82   _ACC            DATA 0xe0
0000             83   _ADC0ASAH       DATA 0xb6
0000             84   _ADC0ASAL       DATA 0xb5
0000             85   _ADC0ASCF       DATA 0xa1
0000             86   _ADC0ASCT       DATA 0xc7
0000             87   _ADC0CF0        DATA 0xbc
0000             88   _ADC0CF1        DATA 0xb9
0000             89   _ADC0CF2        DATA 0xdf
0000             90   _ADC0CN0        DATA 0xe8
0000             91   _ADC0CN1        DATA 0xb2
0000             92   _ADC0CN2        DATA 0xb3
0000             93   _ADC0GTH        DATA 0xc4
0000             94   _ADC0GTL        DATA 0xc3
0000             95   _ADC0H          DATA 0xbe
0000             96   _ADC0L          DATA 0xbd
0000             97   _ADC0LTH        DATA 0xc6
0000             98   _ADC0LTL        DATA 0xc5
0000             99   _ADC0MX         DATA 0xbb
0000            100   _B              DATA 0xf0
0000            101   _CKCON0         DATA 0x8e
0000            102   _CKCON1         DATA 0xa6
0000            103   _CLEN0          DATA 0xc6
0000            104   _CLIE0          DATA 0xc7
0000            105   _CLIF0          DATA 0xe8
0000            106   _CLKSEL         DATA 0xa9
0000            107   _CLOUT0         DATA 0xd1
0000            108   _CLU0CF         DATA 0xb1
0000            109   _CLU0FN         DATA 0xaf
0000            110   _CLU0MX         DATA 0x84
0000            111   _CLU1CF         DATA 0xb3
0000            112   _CLU1FN         DATA 0xb2
0000            113   _CLU1MX         DATA 0x85
0000            114   _CLU2CF         DATA 0xb6
0000            115   _CLU2FN         DATA 0xb5
0000            116   _CLU2MX         DATA 0x91
0000            117   _CLU3CF         DATA 0xbf
0000            118   _CLU3FN         DATA 0xbe
0000            119   _CLU3MX         DATA 0xae
0000            120   _CMP0CN0        DATA 0x9b
0000            121   _CMP0CN1        DATA 0x99
0000            122   _CMP0MD         DATA 0x9d
0000            123   _CMP0MX         DATA 0x9f
0000            124   _CMP1CN0        DATA 0xbf
0000            125   _CMP1CN1        DATA 0xac
0000            126   _CMP1MD         DATA 0xab
0000            127   _CMP1MX         DATA 0xaa
0000            128   _CRC0CN0        DATA 0xce
0000            129   _CRC0CN1        DATA 0x86
0000            130   _CRC0CNT        DATA 0xd3
0000            131   _CRC0DAT        DATA 0xcb
0000            132   _CRC0FLIP       DATA 0xcf
0000            133   _CRC0IN         DATA 0xca
0000            134   _CRC0ST         DATA 0xd2
0000            135   _DAC0CF0        DATA 0x91
0000            136   _DAC0CF1        DATA 0x92
0000            137   _DAC0H          DATA 0x85
0000            138   _DAC0L          DATA 0x84
0000            139   _DAC1CF0        DATA 0x93
0000            140   _DAC1CF1        DATA 0x94
0000            141   _DAC1H          DATA 0x8a
0000            142   _DAC1L          DATA 0x89
0000            143   _DAC2CF0        DATA 0x95
0000            144   _DAC2CF1        DATA 0x96
0000            145   _DAC2H          DATA 0x8c
0000            146   _DAC2L          DATA 0x8b
0000            147   _DAC3CF0        DATA 0x9a
0000            148   _DAC3CF1        DATA 0x9c
0000            149   _DAC3H          DATA 0x8e
0000            150   _DAC3L          DATA 0x8d
0000            151   _DACGCF0        DATA 0x88
0000            152   _DACGCF1        DATA 0x98
0000            153   _DACGCF2        DATA 0xa2
0000            154   _DERIVID        DATA 0xad
0000            155   _DEVICEID       DATA 0xb5
0000            156   _DPH            DATA 0x83
0000            157   _DPL            DATA 0x82
0000            158   _EIE1           DATA 0xe6
0000            159   _EIE2           DATA 0xf3
0000            160   _EIP1           DATA 0xbb
0000            161   _EIP1H          DATA 0xee
0000            162   _EIP2           DATA 0xed
0000            163   _EIP2H          DATA 0xf6
0000            164   _EMI0CN         DATA 0xe7
0000            165   _FLKEY          DATA 0xb7
0000            166   _HFO0CAL        DATA 0xc7
0000            167   _HFO1CAL        DATA 0xd6
0000            168   _HFOCN          DATA 0xef
0000            169   _I2C0ADM        DATA 0xff
0000            170   _I2C0CN0        DATA 0xba
0000            171   _I2C0DIN        DATA 0xbc
0000            172   _I2C0DOUT       DATA 0xbb
0000            173   _I2C0FCN0       DATA 0xad
0000            174   _I2C0FCN1       DATA 0xab
0000            175   _I2C0FCT        DATA 0xf5
0000            176   _I2C0SLAD       DATA 0xbd
0000            177   _I2C0STAT       DATA 0xb9
0000            178   _IE             DATA 0xa8
0000            179   _IP             DATA 0xb8
0000            180   _IPH            DATA 0xf2
0000            181   _IT01CF         DATA 0xe4
0000            182   _LFO0CN         DATA 0xb1
0000            183   _P0             DATA 0x80
0000            184   _P0MASK         DATA 0xfe
0000            185   _P0MAT          DATA 0xfd
0000            186   _P0MDIN         DATA 0xf1
0000            187   _P0MDOUT        DATA 0xa4
0000            188   _P0SKIP         DATA 0xd4
0000            189   _P1             DATA 0x90
0000            190   _P1MASK         DATA 0xee
0000            191   _P1MAT          DATA 0xed
0000            192   _P1MDIN         DATA 0xf2
0000            193   _P1MDOUT        DATA 0xa5
0000            194   _P1SKIP         DATA 0xd5
0000            195   _P2             DATA 0xa0
0000            196   _P2MASK         DATA 0xfc
0000            197   _P2MAT          DATA 0xfb
0000            198   _P2MDIN         DATA 0xf3
0000            199   _P2MDOUT        DATA 0xa6
0000            200   _P2SKIP         DATA 0xcc
0000            201   _P3             DATA 0xb0
0000            202   _P3MDIN         DATA 0xf4
0000            203   _P3MDOUT        DATA 0x9c
0000            204   _PCA0CENT       DATA 0x9e
0000            205   _PCA0CLR        DATA 0x9c
0000            206   _PCA0CN0        DATA 0xd8
0000            207   _PCA0CPH0       DATA 0xfc
0000            208   _PCA0CPH1       DATA 0xea
0000            209   _PCA0CPH2       DATA 0xec
0000            210   _PCA0CPH3       DATA 0xf5
0000            211   _PCA0CPH4       DATA 0x85
0000            212   _PCA0CPH5       DATA 0xde
0000            213   _PCA0CPL0       DATA 0xfb
0000            214   _PCA0CPL1       DATA 0xe9
0000            215   _PCA0CPL2       DATA 0xeb
0000            216   _PCA0CPL3       DATA 0xf4
0000            217   _PCA0CPL4       DATA 0x84
0000            218   _PCA0CPL5       DATA 0xdd
0000            219   _PCA0CPM0       DATA 0xda
0000            220   _PCA0CPM1       DATA 0xdb
0000            221   _PCA0CPM2       DATA 0xdc
0000            222   _PCA0CPM3       DATA 0xae
0000            223   _PCA0CPM4       DATA 0xaf
0000            224   _PCA0CPM5       DATA 0xcc
0000            225   _PCA0H          DATA 0xfa
0000            226   _PCA0L          DATA 0xf9
0000            227   _PCA0MD         DATA 0xd9
0000            228   _PCA0POL        DATA 0x96
0000            229   _PCA0PWM        DATA 0xf7
0000            230   _PCON0          DATA 0x87
0000            231   _PCON1          DATA 0xcd
0000            232   _PFE0CN         DATA 0xc1
0000            233   _PRTDRV         DATA 0xf6
0000            234   _PSCTL          DATA 0x8f
0000            235   _PSTAT0         DATA 0xaa
0000            236   _PSW            DATA 0xd0
0000            237   _REF0CN         DATA 0xd1
0000            238   _REG0CN         DATA 0xc9
0000            239   _REVID          DATA 0xb6
0000            240   _RSTSRC         DATA 0xef
0000            241   _SBCON1         DATA 0x94
0000            242   _SBRLH1         DATA 0x96
0000            243   _SBRLL1         DATA 0x95
0000            244   _SBUF           DATA 0x99
0000            245   _SBUF0          DATA 0x99
0000            246   _SBUF1          DATA 0x92
0000            247   _SCON           DATA 0x98
0000            248   _SCON0          DATA 0x98
0000            249   _SCON1          DATA 0xc8
0000            250   _SFRPAGE        DATA 0xa7
0000            251   _SFRPGCN        DATA 0xbc
0000            252   _SFRSTACK       DATA 0xd7
0000            253   _SMB0ADM        DATA 0xd6
0000            254   _SMB0ADR        DATA 0xd7
0000            255   _SMB0CF         DATA 0xc1
0000            256   _SMB0CN0        DATA 0xc0
0000            257   _SMB0DAT        DATA 0xc2
0000            258   _SMB0FCN0       DATA 0xc3
0000            259   _SMB0FCN1       DATA 0xc4
0000            260   _SMB0FCT        DATA 0xef
0000            261   _SMB0RXLN       DATA 0xc5
0000            262   _SMB0TC         DATA 0xac
0000            263   _SMOD1          DATA 0x93
0000            264   _SP             DATA 0x81
0000            265   _SPI0CFG        DATA 0xa1
0000            266   _SPI0CKR        DATA 0xa2
0000            267   _SPI0CN0        DATA 0xf8
0000            268   _SPI0DAT        DATA 0xa3
0000            269   _SPI0FCN0       DATA 0x9a
0000            270   _SPI0FCN1       DATA 0x9b
0000            271   _SPI0FCT        DATA 0xf7
0000            272   _SPI0PCF        DATA 0xdf
0000            273   _TCON           DATA 0x88
0000            274   _TH0            DATA 0x8c
0000            275   _TH1            DATA 0x8d
0000            276   _TL0            DATA 0x8a
0000            277   _TL1            DATA 0x8b
0000            278   _TMOD           DATA 0x89
0000            279   _TMR2CN0        DATA 0xc8
0000            280   _TMR2CN1        DATA 0xfd
0000            281   _TMR2H          DATA 0xcf
0000            282   _TMR2L          DATA 0xce
0000            283   _TMR2RLH        DATA 0xcb
0000            284   _TMR2RLL        DATA 0xca
0000            285   _TMR3CN0        DATA 0x91
0000            286   _TMR3CN1        DATA 0xfe
0000            287   _TMR3H          DATA 0x95
0000            288   _TMR3L          DATA 0x94
0000            289   _TMR3RLH        DATA 0x93
0000            290   _TMR3RLL        DATA 0x92
0000            291   _TMR4CN0        DATA 0x98
0000            292   _TMR4CN1        DATA 0xff
0000            293   _TMR4H          DATA 0xa5
0000            294   _TMR4L          DATA 0xa4
0000            295   _TMR4RLH        DATA 0xa3
0000            296   _TMR4RLL        DATA 0xa2
0000            297   _TMR5CN0        DATA 0xc0
0000            298   _TMR5CN1        DATA 0xf1
0000            299   _TMR5H          DATA 0xd5
0000            300   _TMR5L          DATA 0xd4
0000            301   _TMR5RLH        DATA 0xd3
0000            302   _TMR5RLL        DATA 0xd2
0000            303   _UART0PCF       DATA 0xd9
0000            304   _UART1FCN0      DATA 0x9d
0000            305   _UART1FCN1      DATA 0xd8
0000            306   _UART1FCT       DATA 0xfa
0000            307   _UART1LIN       DATA 0x9e
0000            308   _UART1PCF       DATA 0xda
0000            309   _VDM0CN         DATA 0xff
0000            310   _WDTCN          DATA 0x97
0000            311   _XBR0           DATA 0xe1
0000            312   _XBR1           DATA 0xe2
0000            313   _XBR2           DATA 0xe3
0000            314   _XOSC0CN        DATA 0x86
0000            315   _DPTR           DATA 0x8382
0000            316   _TMR2RL         DATA 0xcbca
0000            317   _TMR3RL         DATA 0x9392
0000            318   _TMR4RL         DATA 0xa3a2
0000            319   _TMR5RL         DATA 0xd3d2
0000            320   _TMR0           DATA 0x8c8a
0000            321   _TMR1           DATA 0x8d8b
0000            322   _TMR2           DATA 0xcfce
0000            323   _TMR3           DATA 0x9594
0000            324   _TMR4           DATA 0xa5a4
0000            325   _TMR5           DATA 0xd5d4
0000            326   _SBRL1          DATA 0x9695
0000            327   _PCA0           DATA 0xfaf9
0000            328   _PCA0CP0        DATA 0xfcfb
0000            329   _PCA0CP1        DATA 0xeae9
0000            330   _PCA0CP2        DATA 0xeceb
0000            331   _PCA0CP3        DATA 0xf5f4
0000            332   _PCA0CP4        DATA 0x8584
0000            333   _PCA0CP5        DATA 0xdedd
0000            334   _ADC0ASA        DATA 0xb6b5
0000            335   _ADC0GT         DATA 0xc4c3
0000            336   _ADC0           DATA 0xbebd
0000            337   _ADC0LT         DATA 0xc6c5
0000            338   _DAC0           DATA 0x8584
0000            339   _DAC1           DATA 0x8a89
0000            340   _DAC2           DATA 0x8c8b
0000            341   _DAC3           DATA 0x8e8d
0000            342   ;--------------------------------------------------------
0000            343   ; special function bits
0000            344   ;--------------------------------------------------------
0000            345   _ACC_0          BIT 0xe0
0000            346   _ACC_1          BIT 0xe1
0000            347   _ACC_2          BIT 0xe2
0000            348   _ACC_3          BIT 0xe3
0000            349   _ACC_4          BIT 0xe4
0000            350   _ACC_5          BIT 0xe5
0000            351   _ACC_6          BIT 0xe6
0000            352   _ACC_7          BIT 0xe7
0000            353   _TEMPE          BIT 0xe8
0000            354   _ADGN0          BIT 0xe9
0000            355   _ADGN1          BIT 0xea
0000            356   _ADWINT         BIT 0xeb
0000            357   _ADBUSY         BIT 0xec
0000            358   _ADINT          BIT 0xed
0000            359   _IPOEN          BIT 0xee
0000            360   _ADEN           BIT 0xef
0000            361   _B_0            BIT 0xf0
0000            362   _B_1            BIT 0xf1
0000            363   _B_2            BIT 0xf2
0000            364   _B_3            BIT 0xf3
0000            365   _B_4            BIT 0xf4
0000            366   _B_5            BIT 0xf5
0000            367   _B_6            BIT 0xf6
0000            368   _B_7            BIT 0xf7
0000            369   _C0FIF          BIT 0xe8
0000            370   _C0RIF          BIT 0xe9
0000            371   _C1FIF          BIT 0xea
0000            372   _C1RIF          BIT 0xeb
0000            373   _C2FIF          BIT 0xec
0000            374   _C2RIF          BIT 0xed
0000            375   _C3FIF          BIT 0xee
0000            376   _C3RIF          BIT 0xef
0000            377   _D1SRC0         BIT 0x88
0000            378   _D1SRC1         BIT 0x89
0000            379   _D1AMEN         BIT 0x8a
0000            380   _D01REFSL       BIT 0x8b
0000            381   _D3SRC0         BIT 0x8c
0000            382   _D3SRC1         BIT 0x8d
0000            383   _D3AMEN         BIT 0x8e
0000            384   _D23REFSL       BIT 0x8f
0000            385   _D0UDIS         BIT 0x98
0000            386   _D1UDIS         BIT 0x99
0000            387   _D2UDIS         BIT 0x9a
0000            388   _D3UDIS         BIT 0x9b
0000            389   _EX0            BIT 0xa8
0000            390   _ET0            BIT 0xa9
0000            391   _EX1            BIT 0xaa
0000            392   _ET1            BIT 0xab
0000            393   _ES0            BIT 0xac
0000            394   _ET2            BIT 0xad
0000            395   _ESPI0          BIT 0xae
0000            396   _EA             BIT 0xaf
0000            397   _PX0            BIT 0xb8
0000            398   _PT0            BIT 0xb9
0000            399   _PX1            BIT 0xba
0000            400   _PT1            BIT 0xbb
0000            401   _PS0            BIT 0xbc
0000            402   _PT2            BIT 0xbd
0000            403   _PSPI0          BIT 0xbe
0000            404   _P0_0           BIT 0x80
0000            405   _P0_1           BIT 0x81
0000            406   _P0_2           BIT 0x82
0000            407   _P0_3           BIT 0x83
0000            408   _P0_4           BIT 0x84
0000            409   _P0_5           BIT 0x85
0000            410   _P0_6           BIT 0x86
0000            411   _P0_7           BIT 0x87
0000            412   _P1_0           BIT 0x90
0000            413   _P1_1           BIT 0x91
0000            414   _P1_2           BIT 0x92
0000            415   _P1_3           BIT 0x93
0000            416   _P1_4           BIT 0x94
0000            417   _P1_5           BIT 0x95
0000            418   _P1_6           BIT 0x96
0000            419   _P1_7           BIT 0x97
0000            420   _P2_0           BIT 0xa0
0000            421   _P2_1           BIT 0xa1
0000            422   _P2_2           BIT 0xa2
0000            423   _P2_3           BIT 0xa3
0000            424   _P2_4           BIT 0xa4
0000            425   _P2_5           BIT 0xa5
0000            426   _P2_6           BIT 0xa6
0000            427   _P3_0           BIT 0xb0
0000            428   _P3_1           BIT 0xb1
0000            429   _P3_2           BIT 0xb2
0000            430   _P3_3           BIT 0xb3
0000            431   _P3_4           BIT 0xb4
0000            432   _P3_7           BIT 0xb7
0000            433   _CCF0           BIT 0xd8
0000            434   _CCF1           BIT 0xd9
0000            435   _CCF2           BIT 0xda
0000            436   _CCF3           BIT 0xdb
0000            437   _CCF4           BIT 0xdc
0000            438   _CCF5           BIT 0xdd
0000            439   _CR             BIT 0xde
0000            440   _CF             BIT 0xdf
0000            441   _PARITY         BIT 0xd0
0000            442   _F1             BIT 0xd1
0000            443   _OV             BIT 0xd2
0000            444   _RS0            BIT 0xd3
0000            445   _RS1            BIT 0xd4
0000            446   _F0             BIT 0xd5
0000            447   _AC             BIT 0xd6
0000            448   _CY             BIT 0xd7
0000            449   _RI             BIT 0x98
0000            450   _TI             BIT 0x99
0000            451   _RB8            BIT 0x9a
0000            452   _TB8            BIT 0x9b
0000            453   _REN            BIT 0x9c
0000            454   _CE             BIT 0x9d
0000            455   _SMODE          BIT 0x9e
0000            456   _RI1            BIT 0xc8
0000            457   _TI1            BIT 0xc9
0000            458   _RBX1           BIT 0xca
0000            459   _TBX1           BIT 0xcb
0000            460   _REN1           BIT 0xcc
0000            461   _PERR1          BIT 0xcd
0000            462   _OVR1           BIT 0xce
0000            463   _SI             BIT 0xc0
0000            464   _ACK            BIT 0xc1
0000            465   _ARBLOST        BIT 0xc2
0000            466   _ACKRQ          BIT 0xc3
0000            467   _STO            BIT 0xc4
0000            468   _STA            BIT 0xc5
0000            469   _TXMODE         BIT 0xc6
0000            470   _MASTER         BIT 0xc7
0000            471   _SPIEN          BIT 0xf8
0000            472   _TXNF           BIT 0xf9
0000            473   _NSSMD0         BIT 0xfa
0000            474   _NSSMD1         BIT 0xfb
0000            475   _RXOVRN         BIT 0xfc
0000            476   _MODF           BIT 0xfd
0000            477   _WCOL           BIT 0xfe
0000            478   _SPIF           BIT 0xff
0000            479   _IT0            BIT 0x88
0000            480   _IE0            BIT 0x89
0000            481   _IT1            BIT 0x8a
0000            482   _IE1            BIT 0x8b
0000            483   _TR0            BIT 0x8c
0000            484   _TF0            BIT 0x8d
0000            485   _TR1            BIT 0x8e
0000            486   _TF1            BIT 0x8f
0000            487   _T2XCLK0        BIT 0xc8
0000            488   _T2XCLK1        BIT 0xc9
0000            489   _TR2            BIT 0xca
0000            490   _T2SPLIT        BIT 0xcb
0000            491   _TF2CEN         BIT 0xcc
0000            492   _TF2LEN         BIT 0xcd
0000            493   _TF2L           BIT 0xce
0000            494   _TF2H           BIT 0xcf
0000            495   _T4XCLK0        BIT 0x98
0000            496   _T4XCLK1        BIT 0x99
0000            497   _TR4            BIT 0x9a
0000            498   _T4SPLIT        BIT 0x9b
0000            499   _TF4CEN         BIT 0x9c
0000            500   _TF4LEN         BIT 0x9d
0000            501   _TF4L           BIT 0x9e
0000            502   _TF4H           BIT 0x9f
0000            503   _T5XCLK0        BIT 0xc0
0000            504   _T5XCLK1        BIT 0xc1
0000            505   _TR5            BIT 0xc2
0000            506   _T5SPLIT        BIT 0xc3
0000            507   _TF5CEN         BIT 0xc4
0000            508   _TF5LEN         BIT 0xc5
0000            509   _TF5L           BIT 0xc6
0000            510   _TF5H           BIT 0xc7
0000            511   _RIE            BIT 0xd8
0000            512   _RXTO0          BIT 0xd9
0000            513   _RXTO1          BIT 0xda
0000            514   _RFRQ           BIT 0xdb
0000            515   _TIE            BIT 0xdc
0000            516   _TXHOLD         BIT 0xdd
0000            517   _TXNF1          BIT 0xde
0000            518   _TFRQ           BIT 0xdf
0000            519   ;--------------------------------------------------------
0000            520   ; overlayable register banks
0000            521   ;--------------------------------------------------------
0000            522            rbank0 segment data overlay
0000            523   ;--------------------------------------------------------
0000            524   ; internal ram data
0000            525   ;--------------------------------------------------------
0000            526            rseg R_DSEG
0000            527   _pwm_count:
0000            528            ds 1
0001            529   _pwm_count1:
0001            530            ds 1
0002            531   _pwm_count2:
0002            532            ds 1
0003            533   _pwm_count3:
0003            534            ds 1
0004            535   _pwmSig1:
0004            536            ds 2
0006            537   _pwmSig2:
0006            538            ds 2
0008            539   _pwmSig3:
0008            540            ds 2
000A            541   _pwmSig4:
000A            542            ds 2
000C            543   _pwmSig5:
000C            544            ds 2
000E            545   _pwmSig6:
000E            546            ds 2
0010            547   _cartMoveF:
0010            548            ds 2
0012            549   _cartMoveB:
0012            550            ds 2
0014            551   _flag:
0014            552            ds 2
0016            553   _claw_flag:
0016            554            ds 2
0018            555   _stop:
0018            556            ds 8
0020            557   _forward:
0020            558            ds 8
0028            559   _backward:
0028            560            ds 8
0030            561   _left:
0030            562            ds 8
0038            563   _right:
0038            564            ds 8
0040            565   _command:
0040            566            ds 8
0048            567   _x:
0048            568            ds 2
004A            569   _pwm_reload2:
004A            570            ds 2
004C            571   _pwm_state2:
004C            572            ds 1
004D            573   _count20ms2:
004D            574            ds 1
004E            575   _zero_time_calc_overflow_count_1_73:
004E            576            ds 2
0050            577   _main_sloc0_1_0:
0050            578            ds 4
0054            579   ;--------------------------------------------------------
0054            580   ; overlayable items in internal ram 
0054            581   ;--------------------------------------------------------
0000            582            rseg    R_OSEG
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585   _InitPinADC_PARM_2:
0000            586            ds 1
0001            587            rseg    R_OSEG
0001            588   _arrayEqual_PARM_2:
0001            589            ds 2
0003            590   _arrayEqual_PARM_3:
0003            591            ds 3
0006            592   _arrayEqual_arr1_1_76:
0006            593            ds 3
0009            594   ;--------------------------------------------------------
0009            595   ; indirectly addressable internal ram data
0009            596   ;--------------------------------------------------------
0000            597            rseg R_ISEG
0000            598   ;--------------------------------------------------------
0000            599   ; absolute internal ram data
0000            600   ;--------------------------------------------------------
0000            601            DSEG
0000            602   ;--------------------------------------------------------
0000            603   ; bit data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_BSEG
0000            606   _Timer2_ISR_sloc0_1_0:
0000            607            DBIT    1
0001            608   ;--------------------------------------------------------
0001            609   ; paged external ram data
0001            610   ;--------------------------------------------------------
0000            611            rseg R_PSEG
0000            612   ;--------------------------------------------------------
0000            613   ; external ram data
0000            614   ;--------------------------------------------------------
0000            615            rseg R_XSEG
0000            616   ;--------------------------------------------------------
0000            617   ; absolute external ram data
0000            618   ;--------------------------------------------------------
0000            619            XSEG
0000            620   ;--------------------------------------------------------
0000            621   ; external initialized ram data
0000            622   ;--------------------------------------------------------
0000            623            rseg R_IXSEG
0000            624            rseg R_HOME
0000            625            rseg R_GSINIT
0000            626            rseg R_CSEG
0000            627   ;--------------------------------------------------------
0000            628   ; Reset entry point and interrupt vectors
0000            629   ;--------------------------------------------------------
0000            630            CSEG at 0x0000
0000 020100     631            ljmp    _crt0
002B            632            CSEG at 0x002b
002B 020100     633            ljmp    _Timer2_ISR
002E            634   ;--------------------------------------------------------
002E            635   ; global & static initialisations
002E            636   ;--------------------------------------------------------
0000            637            rseg R_HOME
0000            638            rseg R_GSINIT
0000            639            rseg R_GSINIT
0000            640   ;--------------------------------------------------------
0000            641   ; data variables initialization
0000            642   ;--------------------------------------------------------
0000            643            rseg R_DINIT
0000            644   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:65: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 750800     645            mov     _pwm_count,#0x00
0003            646   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:66: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75C800     647            mov     _pwm_count1,#0x00
0006            648   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:67: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 758800     649            mov     _pwm_count2,#0x00
0009            650   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:68: volatile unsigned char pwm_count3 = 0; //
0009 754800     651            mov     _pwm_count3,#0x00
000C            652   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:83: volatile int flag = 0;
000C E4         653            clr     a
000D F508       654            mov     _flag,a
000F F509       655            mov     (_flag + 1),a
0011            656   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:84: volatile int claw_flag = 0;
0011 E4         657            clr     a
0012 F5C8       658            mov     _claw_flag,a
0014 F5C9       659            mov     (_claw_flag + 1),a
0016            660   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:85: int stop[]={1,0,0,0};
0016 758801     661            mov     _stop,#0x01
0019 758900     662            mov     (_stop + 1),#0x00
001C 758A00     663            mov     (_stop + 0x0002),#0x00
001F 758B00     664            mov     ((_stop + 0x0002) + 1),#0x00
0022 758C00     665            mov     (_stop + 0x0004),#0x00
0025 758D00     666            mov     ((_stop + 0x0004) + 1),#0x00
0028 758E00     667            mov     (_stop + 0x0006),#0x00
002B 758F00     668            mov     ((_stop + 0x0006) + 1),#0x00
002E            669   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:86: int forward[]={1,1,1,1};
002E 754801     670            mov     _forward,#0x01
0031 754900     671            mov     (_forward + 1),#0x00
0034 754A01     672            mov     (_forward + 0x0002),#0x01
0037 754B00     673            mov     ((_forward + 0x0002) + 1),#0x00
003A 754C01     674            mov     (_forward + 0x0004),#0x01
003D 754D00     675            mov     ((_forward + 0x0004) + 1),#0x00
0040 754E01     676            mov     (_forward + 0x0006),#0x01
0043 754F00     677            mov     ((_forward + 0x0006) + 1),#0x00
0046            678   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:87: int backward[]={1,0,0,0};
0046 750801     679            mov     _backward,#0x01
0049 750900     680            mov     (_backward + 1),#0x00
004C 750A00     681            mov     (_backward + 0x0002),#0x00
004F 750B00     682            mov     ((_backward + 0x0002) + 1),#0x00
0052 750C00     683            mov     (_backward + 0x0004),#0x00
0055 750D00     684            mov     ((_backward + 0x0004) + 1),#0x00
0058 750E00     685            mov     (_backward + 0x0006),#0x00
005B 750F00     686            mov     ((_backward + 0x0006) + 1),#0x00
005E            687   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:88: int left[]={1,0,1,0};
005E 75C801     688            mov     _left,#0x01
0061 75C900     689            mov     (_left + 1),#0x00
0064 75CA00     690            mov     (_left + 0x0002),#0x00
0067 75CB00     691            mov     ((_left + 0x0002) + 1),#0x00
006A 75CC01     692            mov     (_left + 0x0004),#0x01
006D 75CD00     693            mov     ((_left + 0x0004) + 1),#0x00
0070 75CE00     694            mov     (_left + 0x0006),#0x00
0073 75CF00     695            mov     ((_left + 0x0006) + 1),#0x00
0076            696   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:89: int right[]={1,1,0,1};
0076 758801     697            mov     _right,#0x01
0079 758900     698            mov     (_right + 1),#0x00
007C 758A01     699            mov     (_right + 0x0002),#0x01
007F 758B00     700            mov     ((_right + 0x0002) + 1),#0x00
0082 758C00     701            mov     (_right + 0x0004),#0x00
0085 758D00     702            mov     ((_right + 0x0004) + 1),#0x00
0088 758E01     703            mov     (_right + 0x0006),#0x01
008B 758F00     704            mov     ((_right + 0x0006) + 1),#0x00
008E            705   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:91: int command[4] = {0,0,0,0};
008E 754800     706            mov     _command,#0x00
0091 754900     707            mov     (_command + 1),#0x00
0094 754A00     708            mov     (_command + 0x0002),#0x00
0097 754B00     709            mov     ((_command + 0x0002) + 1),#0x00
009A 754C00     710            mov     (_command + 0x0004),#0x00
009D 754D00     711            mov     ((_command + 0x0004) + 1),#0x00
00A0 754E00     712            mov     (_command + 0x0006),#0x00
00A3 754F00     713            mov     ((_command + 0x0006) + 1),#0x00
00A6            714   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:93: volatile unsigned int x = 2;
00A6 750802     715            mov     _x,#0x02
00A9 E4         716            clr     a
00AA F509       717            mov     (_x + 1),a
00AC            718   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:95: volatile unsigned char pwm_state2 = 0;
00AC 75E000     719            mov     _pwm_state2,#0x00
00AF            720            ; The linker places a 'ret' at the end of segment R_DINIT.
00AF            721   ;--------------------------------------------------------
00AF            722   ; code
00AF            723   ;--------------------------------------------------------
0000            724            rseg R_CSEG
0000            725   ;------------------------------------------------------------
0000            726   ;Allocation info for local variables in function '_c51_external_startup'
0000            727   ;------------------------------------------------------------
0000            728   ;------------------------------------------------------------
0000            729   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:98: char _c51_external_startup(void)
0000            730   ;        -----------------------------------------
0000            731   ;         function _c51_external_startup
0000            732   ;        -----------------------------------------
0000            733   __c51_external_startup:
0000            734            using   0
0000            735   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:101: SFRPAGE = 0x00;
0000 75A700     736            mov     _SFRPAGE,#0x00
0003            737   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:102: WDTCN = 0xDE; //First key
0003 7597DE     738            mov     _WDTCN,#0xDE
0006            739   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:103: WDTCN = 0xAD; //Second key
0006 7597AD     740            mov     _WDTCN,#0xAD
0009            741   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:105: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     742            mov     _VDM0CN,#0x80
000C            743   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:106: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     744            mov     _RSTSRC,#0x06
000F            745   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:113: SFRPAGE = 0x10;
000F 75A710     746            mov     _SFRPAGE,#0x10
0012            747   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:114: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     748            mov     _PFE0CN,#0x20
0015            749   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:115: SFRPAGE = 0x00;
0015 75A700     750            mov     _SFRPAGE,#0x00
0018            751   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:136: CLKSEL = 0x00;
0018 75A900     752            mov     _CLKSEL,#0x00
001B            753   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:137: CLKSEL = 0x00;
001B 75A900     754            mov     _CLKSEL,#0x00
001E            755   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:138: while ((CLKSEL & 0x80) == 0);
001E            756   L002001?:
001E E5A9       757            mov     a,_CLKSEL
0020 30E788     758            jnb     acc.7,L002001?
0023            759   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:139: CLKSEL = 0x03;
0023 75A903     760            mov     _CLKSEL,#0x03
0026            761   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:140: CLKSEL = 0x03;
0026 75A903     762            mov     _CLKSEL,#0x03
0029            763   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:141: while ((CLKSEL & 0x80) == 0);
0029            764   L002004?:
0029 E5A9       765            mov     a,_CLKSEL
002B 30E708     766            jnb     acc.7,L002004?
002E            767   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:146: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     768            orl     _P0MDOUT,#0x10
0031            769   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:147: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     770            mov     _XBR0,#0x01
0034            771   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:148: XBR1 = 0X00;
0034 75E200     772            mov     _XBR1,#0x00
0037            773   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:149: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     774            mov     _XBR2,#0x40
003A            775   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:155: SCON0 = 0x10;
003A 759810     776            mov     _SCON0,#0x10
003D            777   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:156: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     778            mov     _TH1,#0xE6
0040            779   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:157: TL1 = TH1;      // Init Timer1
0040 858D8B     780            mov     _TL1,_TH1
0043            781   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:158: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     782            anl     _TMOD,#0x0F
0046            783   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:159: TMOD |= 0x20;
0046 438920     784            orl     _TMOD,#0x20
0049            785   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:160: TR1 = 1; // START Timer1
0049 D28E       786            setb    _TR1
004B            787   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:161: TI = 1;  // Indicate TX0 ready
004B D299       788            setb    _TI
004D            789   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:164: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     790            mov     _TMR2CN0,#0x00
0050            791   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:165: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     792            orl     _CKCON0,#0x10
0053            793   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:166: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     794            mov     _TMR2RL,#0xE0
0056 75CBE3     795            mov     (_TMR2RL >> 8),#0xE3
0059            796   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:167: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     797            mov     _TMR2,#0xFF
005C 75CFFF     798            mov     (_TMR2 >> 8),#0xFF
005F            799   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:168: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       800            setb    _ET2
0061            801   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:169: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       802            setb    _TR2
0063            803   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:171: SFRPAGE=0x10;
0063 75A710     804            mov     _SFRPAGE,#0x10
0066            805   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:172: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
0066 759800     806            mov     _TMR4CN0,#0x00
0069            807   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:173: pwm_reload2=0x10000L-(SYSCLK*1.5e-3)/12.0;
0069 75C8D8     808            mov     _pwm_reload2,#0xD8
006C 75C9DC     809            mov     (_pwm_reload2 + 1),#0xDC
006F            810   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:174: TMR4=0xffff;   // Set to reload immediately
006F 75A4FF     811            mov     _TMR4,#0xFF
0072 75A5FF     812            mov     (_TMR4 >> 8),#0xFF
0075            813   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:175: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
0075 43F304     814            orl     _EIE2,#0x04
0078            815   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:176: TR4=1;
0078 D29A       816            setb    _TR4
007A            817   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:194: EA = 1; // Enable interrupts
007A D2AF       818            setb    _EA
007C            819   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:197: return 0;
007C 758200     820            mov     dpl,#0x00
007F 22         821            ret
0080            822   ;------------------------------------------------------------
0080            823   ;Allocation info for local variables in function 'Timer3us'
0080            824   ;------------------------------------------------------------
0080            825   ;us                        Allocated to registers r2 r3 
0080            826   ;i                         Allocated to registers r4 r5 
0080            827   ;------------------------------------------------------------
0080            828   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:199: void Timer3us(unsigned int us)
0080            829   ;        -----------------------------------------
0080            830   ;         function Timer3us
0080            831   ;        -----------------------------------------
0080            832   _Timer3us:
0080 AA82       833            mov     r2,dpl
0082 AB83       834            mov     r3,dph
0084            835   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:204: CKCON0|=0b_0100_0000;
0084 438E40     836            orl     _CKCON0,#0x40
0087            837   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:206: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0087 7592B8     838            mov     _TMR3RL,#0xB8
008A 7593FF     839            mov     (_TMR3RL >> 8),#0xFF
008D            840   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:207: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
008D 859294     841            mov     _TMR3,_TMR3RL
0090 859395     842            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0093            843   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:209: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0093 759104     844            mov     _TMR3CN0,#0x04
0096            845   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:210: for (i = 0; i < us; i++)       // Count <us> overflows
0096 7C00       846            mov     r4,#0x00
0098 7D00       847            mov     r5,#0x00
009A            848   L003004?:
009A C3         849            clr     c
009B EC         850            mov     a,r4
009C 9A         851            subb    a,r2
009D ED         852            mov     a,r5
009E 9B         853            subb    a,r3
009F 5001       854            jnc     L003007?
00A1            855   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:212: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00A1            856   L003001?:
00A1 E591       857            mov     a,_TMR3CN0
00A3 30E748     858            jnb     acc.7,L003001?
00A6            859   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:213: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00A6 53917F     860            anl     _TMR3CN0,#0x7F
00A9            861   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:210: for (i = 0; i < us; i++)       // Count <us> overflows
00A9 0C         862            inc     r4
00AA BC00C8     863            cjne    r4,#0x00,L003004?
00AD 0D         864            inc     r5
00AE 8001       865            sjmp    L003004?
00B0            866   L003007?:
00B0            867   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:215: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00B0 759100     868            mov     _TMR3CN0,#0x00
00B3 22         869            ret
00B4            870   ;------------------------------------------------------------
00B4            871   ;Allocation info for local variables in function 'waitms'
00B4            872   ;------------------------------------------------------------
00B4            873   ;ms                        Allocated to registers r2 r3 
00B4            874   ;j                         Allocated to registers r4 r5 
00B4            875   ;k                         Allocated to registers r6 
00B4            876   ;------------------------------------------------------------
00B4            877   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:217: void waitms (unsigned int ms)
00B4            878   ;        -----------------------------------------
00B4            879   ;         function waitms
00B4            880   ;        -----------------------------------------
00B4            881   _waitms:
00B4 AA82       882            mov     r2,dpl
00B6 AB83       883            mov     r3,dph
00B8            884   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:221: for(j=0; j<ms; j++)
00B8 7C00       885            mov     r4,#0x00
00BA 7D00       886            mov     r5,#0x00
00BC            887   L004005?:
00BC C3         888            clr     c
00BD EC         889            mov     a,r4
00BE 9A         890            subb    a,r2
00BF ED         891            mov     a,r5
00C0 9B         892            subb    a,r3
00C1 5001       893            jnc     L004009?
00C3            894   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:222: for (k=0; k<4; k++) Timer3us(250);
00C3 7E00       895            mov     r6,#0x00
00C5            896   L004001?:
00C5 BE0448     897            cjne    r6,#0x04,L004018?
00C8            898   L004018?:
00C8 5001       899            jnc     L004007?
00CA 9000FA     900            mov     dptr,#0x00FA
00CD C002       901            push    ar2
00CF C003       902            push    ar3
00D1 C004       903            push    ar4
00D3 C005       904            push    ar5
00D5 C006       905            push    ar6
00D7 120100     906            lcall   _Timer3us
00DA D006       907            pop     ar6
00DC D005       908            pop     ar5
00DE D004       909            pop     ar4
00E0 D003       910            pop     ar3
00E2 D002       911            pop     ar2
00E4 0E         912            inc     r6
00E5 8001       913            sjmp    L004001?
00E7            914   L004007?:
00E7            915   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:221: for(j=0; j<ms; j++)
00E7 0C         916            inc     r4
00E8 BC0088     917            cjne    r4,#0x00,L004005?
00EB 0D         918            inc     r5
00EC 8001       919            sjmp    L004005?
00EE            920   L004009?:
00EE 22         921            ret
00EF            922   ;------------------------------------------------------------
00EF            923   ;Allocation info for local variables in function 'ADC_at_Pin'
00EF            924   ;------------------------------------------------------------
00EF            925   ;pin                       Allocated to registers 
00EF            926   ;------------------------------------------------------------
00EF            927   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:254: unsigned int ADC_at_Pin(unsigned char pin)
00EF            928   ;        -----------------------------------------
00EF            929   ;         function ADC_at_Pin
00EF            930   ;        -----------------------------------------
00EF            931   _ADC_at_Pin:
00EF 8582BB     932            mov     _ADC0MX,dpl
00F2            933   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:257: ADBUSY = 1;       // Dummy conversion first to select new pin
00F2 D2EC       934            setb    _ADBUSY
00F4            935   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:258: while (ADBUSY); // Wait for dummy conversion to finish
00F4            936   L005001?:
00F4 20ECC8     937            jb      _ADBUSY,L005001?
00F7            938   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:259: ADBUSY = 1;     // Convert voltage at the pin
00F7 D2EC       939            setb    _ADBUSY
00F9            940   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:260: while (ADBUSY); // Wait for conversion to complete
00F9            941   L005004?:
00F9 20EC08     942            jb      _ADBUSY,L005004?
00FC            943   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:261: return (ADC0);
00FC 85BD82     944            mov     dpl,_ADC0
00FF 85BE83     945            mov     dph,(_ADC0 >> 8)
0102 22         946            ret
0103            947   ;------------------------------------------------------------
0103            948   ;Allocation info for local variables in function 'Timer2_ISR'
0103            949   ;------------------------------------------------------------
0103            950   ;------------------------------------------------------------
0103            951   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:265: void Timer2_ISR(void) interrupt 5
0103            952   ;        -----------------------------------------
0103            953   ;         function Timer2_ISR
0103            954   ;        -----------------------------------------
0103            955   _Timer2_ISR:
0103 C0E0       956            push    acc
0105 C002       957            push    ar2
0107 C003       958            push    ar3
0109 C0D0       959            push    psw
010B 75D000     960            mov     psw,#0x00
010E            961   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:267: TF2H = 0; // Clear Timer2 interrupt flag
010E C2CF       962            clr     _TF2H
0110            963   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:269: pwm_count++;
0110 0508       964            inc     _pwm_count
0112            965   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:270: if (pwm_count>100)
0112 E508       966            mov     a,_pwm_count
0114 249B       967            add     a,#0xff - 0x64
0116 5001       968            jnc     L006002?
0118            969   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:271: pwm_count = 0;
0118 750800     970            mov     _pwm_count,#0x00
011B            971   L006002?:
011B            972   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:274: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
011B AA08       973            mov     r2,_pwm_count
011D 7B00       974            mov     r3,#0x00
011F C3         975            clr     c
0120 E508       976            mov     a,_pwmSig1
0122 9A         977            subb    a,r2
0123 E509       978            mov     a,(_pwmSig1 + 1)
0125 9B         979            subb    a,r3
0126 9208       980            mov  _Timer2_ISR_sloc0_1_0,c
0128 B3         981            cpl     c
0129 9294       982            mov     _P1_4,c
012B            983   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:275: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
012B AA08       984            mov     r2,_pwm_count
012D 7B00       985            mov     r3,#0x00
012F C3         986            clr     c
0130 E5C8       987            mov     a,_pwmSig2
0132 9A         988            subb    a,r2
0133 E5C9       989            mov     a,(_pwmSig2 + 1)
0135 9B         990            subb    a,r3
0136 9208       991            mov  _Timer2_ISR_sloc0_1_0,c
0138 B3         992            cpl     c
0139 9295       993            mov     _P1_5,c
013B            994   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:277: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
013B AA08       995            mov     r2,_pwm_count
013D 7B00       996            mov     r3,#0x00
013F C3         997            clr     c
0140 E588       998            mov     a,_pwmSig3
0142 9A         999            subb    a,r2
0143 E589      1000            mov     a,(_pwmSig3 + 1)
0145 9B        1001            subb    a,r3
0146 9208      1002            mov  _Timer2_ISR_sloc0_1_0,c
0148 B3        1003            cpl     c
0149 9292      1004            mov     _P1_2,c
014B           1005   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:278: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
014B AA08      1006            mov     r2,_pwm_count
014D 7B00      1007            mov     r3,#0x00
014F C3        1008            clr     c
0150 E548      1009            mov     a,_pwmSig4
0152 9A        1010            subb    a,r2
0153 E549      1011            mov     a,(_pwmSig4 + 1)
0155 9B        1012            subb    a,r3
0156 9208      1013            mov  _Timer2_ISR_sloc0_1_0,c
0158 B3        1014            cpl     c
0159 9293      1015            mov     _P1_3,c
015B           1016   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:280: OUT0=pwm_count>80?0:1;
015B E508      1017            mov     a,_pwm_count
015D 24AF      1018            add     a,#0xff - 0x50
015F 9208      1019            mov  _Timer2_ISR_sloc0_1_0,c
0161 B3        1020            cpl     c
0162 92A0      1021            mov     _P2_0,c
0164 D0D0      1022            pop     psw
0166 D003      1023            pop     ar3
0168 D002      1024            pop     ar2
016A D0E0      1025            pop     acc
016C 32        1026            reti
016D           1027   ;        eliminated unneeded push/pop dpl
016D           1028   ;        eliminated unneeded push/pop dph
016D           1029   ;        eliminated unneeded push/pop b
016D           1030   ;------------------------------------------------------------
016D           1031   ;Allocation info for local variables in function 'InitADC'
016D           1032   ;------------------------------------------------------------
016D           1033   ;------------------------------------------------------------
016D           1034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:310: void InitADC(void)
016D           1035   ;        -----------------------------------------
016D           1036   ;         function InitADC
016D           1037   ;        -----------------------------------------
016D           1038   _InitADC:
016D           1039   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:312: SFRPAGE = 0x00;
016D 75A700    1040            mov     _SFRPAGE,#0x00
0170           1041   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:313: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0170 75B280    1042            mov     _ADC0CN1,#0x80
0173           1043   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:314: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0173 75BCF8    1044            mov     _ADC0CF0,#0xF8
0176           1045   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:315: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0176 75B91E    1046            mov     _ADC0CF1,#0x1E
0179           1047   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:316: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0179 75E800    1048            mov     _ADC0CN0,#0x00
017C           1049   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:317: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
017C 75DF3F    1050            mov     _ADC0CF2,#0x3F
017F           1051   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:318: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
017F 75B300    1052            mov     _ADC0CN2,#0x00
0182           1053   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:319: ADEN = 1; // Enable ADC
0182 D2EF      1054            setb    _ADEN
0184 22        1055            ret
0185           1056   ;------------------------------------------------------------
0185           1057   ;Allocation info for local variables in function 'TIMER0_Init'
0185           1058   ;------------------------------------------------------------
0185           1059   ;------------------------------------------------------------
0185           1060   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:321: void TIMER0_Init(void)
0185           1061   ;        -----------------------------------------
0185           1062   ;         function TIMER0_Init
0185           1063   ;        -----------------------------------------
0185           1064   _TIMER0_Init:
0185           1065   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:323: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0185 5389F0    1066            anl     _TMOD,#0xF0
0188           1067   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:324: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0188 438901    1068            orl     _TMOD,#0x01
018B           1069   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:325: TR0 = 0; // Stop Timer/Counter 0
018B C28C      1070            clr     _TR0
018D 22        1071            ret
018E           1072   ;------------------------------------------------------------
018E           1073   ;Allocation info for local variables in function 'Volts_at_Pin'
018E           1074   ;------------------------------------------------------------
018E           1075   ;pin                       Allocated to registers r2 
018E           1076   ;------------------------------------------------------------
018E           1077   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:330: float Volts_at_Pin(unsigned char pin)
018E           1078   ;        -----------------------------------------
018E           1079   ;         function Volts_at_Pin
018E           1080   ;        -----------------------------------------
018E           1081   _Volts_at_Pin:
018E           1082   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:332: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
018E 120100    1083            lcall   _ADC_at_Pin
0191 120100    1084            lcall   ___uint2fs
0194 AA82      1085            mov     r2,dpl
0196 AB83      1086            mov     r3,dph
0198 ACF0      1087            mov     r4,b
019A FD        1088            mov     r5,a
019B C002      1089            push    ar2
019D C003      1090            push    ar3
019F C004      1091            push    ar4
01A1 C005      1092            push    ar5
01A3 906C8B    1093            mov     dptr,#0x6C8B
01A6 75F053    1094            mov     b,#0x53
01A9 7440      1095            mov     a,#0x40
01AB 120100    1096            lcall   ___fsmul
01AE AA82      1097            mov     r2,dpl
01B0 AB83      1098            mov     r3,dph
01B2 ACF0      1099            mov     r4,b
01B4 FD        1100            mov     r5,a
01B5 E581      1101            mov     a,sp
01B7 24FC      1102            add     a,#0xfc
01B9 F581      1103            mov     sp,a
01BB E4        1104            clr     a
01BC C0E0      1105            push    acc
01BE 74FC      1106            mov     a,#0xFC
01C0 C0E0      1107            push    acc
01C2 747F      1108            mov     a,#0x7F
01C4 C0E0      1109            push    acc
01C6 7446      1110            mov     a,#0x46
01C8 C0E0      1111            push    acc
01CA 8A82      1112            mov     dpl,r2
01CC 8B83      1113            mov     dph,r3
01CE 8CF0      1114            mov     b,r4
01D0 ED        1115            mov     a,r5
01D1 120100    1116            lcall   ___fsdiv
01D4 AA82      1117            mov     r2,dpl
01D6 AB83      1118            mov     r3,dph
01D8 ACF0      1119            mov     r4,b
01DA FD        1120            mov     r5,a
01DB E581      1121            mov     a,sp
01DD 24FC      1122            add     a,#0xfc
01DF F581      1123            mov     sp,a
01E1 8A82      1124            mov     dpl,r2
01E3 8B83      1125            mov     dph,r3
01E5 8CF0      1126            mov     b,r4
01E7 ED        1127            mov     a,r5
01E8 22        1128            ret
01E9           1129   ;------------------------------------------------------------
01E9           1130   ;Allocation info for local variables in function 'InitPinADC'
01E9           1131   ;------------------------------------------------------------
01E9           1132   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01E9           1133   ;portno                    Allocated to registers r2 
01E9           1134   ;mask                      Allocated to registers r3 
01E9           1135   ;------------------------------------------------------------
01E9           1136   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:334: void InitPinADC(unsigned char portno, unsigned char pinno)
01E9           1137   ;        -----------------------------------------
01E9           1138   ;         function InitPinADC
01E9           1139   ;        -----------------------------------------
01E9           1140   _InitPinADC:
01E9 AA82      1141            mov     r2,dpl
01EB           1142   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:338: mask = 1 << pinno;
01EB 85F0F0    1143            mov     b,_InitPinADC_PARM_2
01EE 05F0      1144            inc     b
01F0 7401      1145            mov     a,#0x01
01F2 8001      1146            sjmp    L010013?
01F4           1147   L010011?:
01F4 25E0      1148            add     a,acc
01F6           1149   L010013?:
01F6 D5F048    1150            djnz    b,L010011?
01F9 FB        1151            mov     r3,a
01FA           1152   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:340: SFRPAGE = 0x20;
01FA 75A720    1153            mov     _SFRPAGE,#0x20
01FD           1154   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:341: switch (portno)
01FD BA0088    1155            cjne    r2,#0x00,L010014?
0200 8001      1156            sjmp    L010001?
0202           1157   L010014?:
0202 BA0108    1158            cjne    r2,#0x01,L010015?
0205 8001      1159            sjmp    L010002?
0207           1160   L010015?:
0207           1161   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:343: case 0:
0207 BA0288    1162            cjne    r2,#0x02,L010005?
020A 8001      1163            sjmp    L010003?
020C           1164   L010001?:
020C           1165   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:344: P0MDIN &= (~mask); // Set pin as analog input
020C EB        1166            mov     a,r3
020D F4        1167            cpl     a
020E FA        1168            mov     r2,a
020F 52F1      1169            anl     _P0MDIN,a
0211           1170   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:345: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0211 EB        1171            mov     a,r3
0212 42D4      1172            orl     _P0SKIP,a
0214           1173   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:346: break;
0214           1174   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:347: case 1:
0214 8001      1175            sjmp    L010005?
0216           1176   L010002?:
0216           1177   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:348: P1MDIN &= (~mask); // Set pin as analog input
0216 EB        1178            mov     a,r3
0217 F4        1179            cpl     a
0218 FA        1180            mov     r2,a
0219 52F2      1181            anl     _P1MDIN,a
021B           1182   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:349: P1SKIP |= mask; // Skip Crossbar decoding for this pin
021B EB        1183            mov     a,r3
021C 42D5      1184            orl     _P1SKIP,a
021E           1185   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:350: break;
021E           1186   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:351: case 2:
021E 8001      1187            sjmp    L010005?
0220           1188   L010003?:
0220           1189   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:352: P2MDIN &= (~mask); // Set pin as analog input
0220 EB        1190            mov     a,r3
0221 F4        1191            cpl     a
0222 FA        1192            mov     r2,a
0223 52F3      1193            anl     _P2MDIN,a
0225           1194   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:353: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0225 EB        1195            mov     a,r3
0226 42CC      1196            orl     _P2SKIP,a
0228           1197   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:357: }
0228           1198   L010005?:
0228           1199   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:358: SFRPAGE = 0x00;
0228 75A700    1200            mov     _SFRPAGE,#0x00
022B 22        1201            ret
022C           1202   ;------------------------------------------------------------
022C           1203   ;Allocation info for local variables in function 'PWMforward'
022C           1204   ;------------------------------------------------------------
022C           1205   ;------------------------------------------------------------
022C           1206   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:367: void PWMforward(void) {
022C           1207   ;        -----------------------------------------
022C           1208   ;         function PWMforward
022C           1209   ;        -----------------------------------------
022C           1210   _PWMforward:
022C           1211   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:368: pwmSig1 = 99;
022C 750863    1212            mov     _pwmSig1,#0x63
022F E4        1213            clr     a
0230 F509      1214            mov     (_pwmSig1 + 1),a
0232           1215   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:369: pwmSig2 = 0;
0232           1216   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:371: pwmSig3 = 0;
0232 E4        1217            clr     a
0233 F5C8      1218            mov     _pwmSig2,a
0235 F5C9      1219            mov     (_pwmSig2 + 1),a
0237 F588      1220            mov     _pwmSig3,a
0239 F589      1221            mov     (_pwmSig3 + 1),a
023B           1222   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:372: pwmSig4 =99;
023B 754863    1223            mov     _pwmSig4,#0x63
023E E4        1224            clr     a
023F F549      1225            mov     (_pwmSig4 + 1),a
0241           1226   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:374: LEDRED = 1;
0241 D286      1227            setb    _P0_6
0243           1228   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:375: LEDGREEN = 1;
0243 D283      1229            setb    _P0_3
0245           1230   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:376: LEDWHITE = 1;
0245 D281      1231            setb    _P0_1
0247           1232   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:377: SPEAKER = 0;
0247 C2A6      1233            clr     _P2_6
0249 22        1234            ret
024A           1235   ;------------------------------------------------------------
024A           1236   ;Allocation info for local variables in function 'PWMbackward'
024A           1237   ;------------------------------------------------------------
024A           1238   ;------------------------------------------------------------
024A           1239   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:380: void PWMbackward(void) {
024A           1240   ;        -----------------------------------------
024A           1241   ;         function PWMbackward
024A           1242   ;        -----------------------------------------
024A           1243   _PWMbackward:
024A           1244   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:381: pwmSig1 = 0;
024A E4        1245            clr     a
024B F508      1246            mov     _pwmSig1,a
024D F509      1247            mov     (_pwmSig1 + 1),a
024F           1248   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:382: pwmSig2 = 99;
024F 75C863    1249            mov     _pwmSig2,#0x63
0252 E4        1250            clr     a
0253 F5C9      1251            mov     (_pwmSig2 + 1),a
0255           1252   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:384: pwmSig3 = 99;
0255 758863    1253            mov     _pwmSig3,#0x63
0258 E4        1254            clr     a
0259 F589      1255            mov     (_pwmSig3 + 1),a
025B           1256   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:385: pwmSig4 = 0;
025B E4        1257            clr     a
025C F548      1258            mov     _pwmSig4,a
025E F549      1259            mov     (_pwmSig4 + 1),a
0260           1260   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:387: LEDRED = 1;
0260 D286      1261            setb    _P0_6
0262           1262   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:388: LEDGREEN = 1;
0262 D283      1263            setb    _P0_3
0264           1264   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:389: LEDWHITE = 0;
0264 C281      1265            clr     _P0_1
0266           1266   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:390: SPEAKER = 1;
0266 D2A6      1267            setb    _P2_6
0268 22        1268            ret
0269           1269   ;------------------------------------------------------------
0269           1270   ;Allocation info for local variables in function 'PWMLeft'
0269           1271   ;------------------------------------------------------------
0269           1272   ;------------------------------------------------------------
0269           1273   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:393: void PWMLeft(void) {
0269           1274   ;        -----------------------------------------
0269           1275   ;         function PWMLeft
0269           1276   ;        -----------------------------------------
0269           1277   _PWMLeft:
0269           1278   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:394: pwmSig1 = 0;
0269 E4        1279            clr     a
026A F508      1280            mov     _pwmSig1,a
026C F509      1281            mov     (_pwmSig1 + 1),a
026E           1282   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:395: pwmSig2 = 99;
026E 75C863    1283            mov     _pwmSig2,#0x63
0271 E4        1284            clr     a
0272 F5C9      1285            mov     (_pwmSig2 + 1),a
0274           1286   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:397: pwmSig3 = 0;
0274 E4        1287            clr     a
0275 F588      1288            mov     _pwmSig3,a
0277 F589      1289            mov     (_pwmSig3 + 1),a
0279           1290   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:398: pwmSig4 = 99;
0279 754863    1291            mov     _pwmSig4,#0x63
027C E4        1292            clr     a
027D F549      1293            mov     (_pwmSig4 + 1),a
027F           1294   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:400: LEDRED = 1;
027F D286      1295            setb    _P0_6
0281           1296   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:401: LEDGREEN = 0;
0281 C283      1297            clr     _P0_3
0283           1298   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:402: LEDWHITE = 1;
0283 D281      1299            setb    _P0_1
0285           1300   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:403: SPEAKER = 0;
0285 C2A6      1301            clr     _P2_6
0287 22        1302            ret
0288           1303   ;------------------------------------------------------------
0288           1304   ;Allocation info for local variables in function 'PWMRight'
0288           1305   ;------------------------------------------------------------
0288           1306   ;------------------------------------------------------------
0288           1307   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:407: void PWMRight(void) {
0288           1308   ;        -----------------------------------------
0288           1309   ;         function PWMRight
0288           1310   ;        -----------------------------------------
0288           1311   _PWMRight:
0288           1312   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:408: pwmSig1 = 99;
0288 750863    1313            mov     _pwmSig1,#0x63
028B E4        1314            clr     a
028C F509      1315            mov     (_pwmSig1 + 1),a
028E           1316   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:409: pwmSig2 = 0;
028E E4        1317            clr     a
028F F5C8      1318            mov     _pwmSig2,a
0291 F5C9      1319            mov     (_pwmSig2 + 1),a
0293           1320   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:411: pwmSig3 = 99;
0293 758863    1321            mov     _pwmSig3,#0x63
0296 E4        1322            clr     a
0297 F589      1323            mov     (_pwmSig3 + 1),a
0299           1324   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:412: pwmSig4 = 0;
0299 E4        1325            clr     a
029A F548      1326            mov     _pwmSig4,a
029C F549      1327            mov     (_pwmSig4 + 1),a
029E           1328   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:414: LEDRED = 1;
029E D286      1329            setb    _P0_6
02A0           1330   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:415: LEDGREEN = 0;
02A0 C283      1331            clr     _P0_3
02A2           1332   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:416: LEDWHITE = 1;
02A2 D281      1333            setb    _P0_1
02A4           1334   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:417: SPEAKER = 0;   
02A4 C2A6      1335            clr     _P2_6
02A6 22        1336            ret
02A7           1337   ;------------------------------------------------------------
02A7           1338   ;Allocation info for local variables in function 'PWMStop'
02A7           1339   ;------------------------------------------------------------
02A7           1340   ;------------------------------------------------------------
02A7           1341   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:422: void PWMStop(void) {
02A7           1342   ;        -----------------------------------------
02A7           1343   ;         function PWMStop
02A7           1344   ;        -----------------------------------------
02A7           1345   _PWMStop:
02A7           1346   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:423: pwmSig1 = 0;
02A7           1347   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:424: pwmSig2 = 0;
02A7           1348   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:426: pwmSig3 = 0;
02A7           1349   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:427: pwmSig4 = 0;
02A7 E4        1350            clr     a
02A8 F508      1351            mov     _pwmSig1,a
02AA F509      1352            mov     (_pwmSig1 + 1),a
02AC F5C8      1353            mov     _pwmSig2,a
02AE F5C9      1354            mov     (_pwmSig2 + 1),a
02B0 F588      1355            mov     _pwmSig3,a
02B2 F589      1356            mov     (_pwmSig3 + 1),a
02B4 F548      1357            mov     _pwmSig4,a
02B6 F549      1358            mov     (_pwmSig4 + 1),a
02B8           1359   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:430: LEDRED = 0;
02B8 C286      1360            clr     _P0_6
02BA           1361   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:431: LEDGREEN = 1;
02BA D283      1362            setb    _P0_3
02BC           1363   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:432: LEDWHITE = 1;
02BC D281      1364            setb    _P0_1
02BE           1365   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:433: SPEAKER = 0;
02BE C2A6      1366            clr     _P2_6
02C0 22        1367            ret
02C1           1368   ;------------------------------------------------------------
02C1           1369   ;Allocation info for local variables in function 'zero_time_calc'
02C1           1370   ;------------------------------------------------------------
02C1           1371   ;period1                   Allocated to registers r2 r3 r4 r5 
02C1           1372   ;overflow_count            Allocated with name '_zero_time_calc_overflow_count_1_73'
02C1           1373   ;------------------------------------------------------------
02C1           1374   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:436: float zero_time_calc(void) {
02C1           1375   ;        -----------------------------------------
02C1           1376   ;         function zero_time_calc
02C1           1377   ;        -----------------------------------------
02C1           1378   _zero_time_calc:
02C1           1379   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:440: TL0=0; 
02C1 758A00    1380            mov     _TL0,#0x00
02C4           1381   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:441: TH0=0;
02C4 758C00    1382            mov     _TH0,#0x00
02C7           1383   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:442: TF0=0;
02C7 C28D      1384            clr     _TF0
02C9           1385   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:443: overflow_count=0;
02C9 7A00      1386            mov     r2,#0x00
02CB 7B00      1387            mov     r3,#0x00
02CD           1388   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:444: TR0=0;
02CD C28C      1389            clr     _TR0
02CF           1390   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:449: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt);
02CF           1391   L016001?:
02CF 75820C    1392            mov     dpl,#0x0C
02D2 C002      1393            push    ar2
02D4 C003      1394            push    ar3
02D6 120100    1395            lcall   _Volts_at_Pin
02D9 AC82      1396            mov     r4,dpl
02DB AD83      1397            mov     r5,dph
02DD AEF0      1398            mov     r6,b
02DF FF        1399            mov     r7,a
02E0 74CD      1400            mov     a,#0xCD
02E2 C0E0      1401            push    acc
02E4 74CC      1402            mov     a,#0xCC
02E6 C0E0      1403            push    acc
02E8 744C      1404            mov     a,#0x4C
02EA C0E0      1405            push    acc
02EC 743D      1406            mov     a,#0x3D
02EE C0E0      1407            push    acc
02F0 8C82      1408            mov     dpl,r4
02F2 8D83      1409            mov     dph,r5
02F4 8EF0      1410            mov     b,r6
02F6 EF        1411            mov     a,r7
02F7 120100    1412            lcall   ___fslt
02FA AC82      1413            mov     r4,dpl
02FC E581      1414            mov     a,sp
02FE 24FC      1415            add     a,#0xfc
0300 F581      1416            mov     sp,a
0302 D003      1417            pop     ar3
0304 D002      1418            pop     ar2
0306 EC        1419            mov     a,r4
0307 7001      1420            jnz     L016001?
0309           1421   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:451: while(Volts_at_Pin(QFP32_MUX_P1_6)>=thresholdVolt);
0309           1422   L016004?:
0309 75820C    1423            mov     dpl,#0x0C
030C C002      1424            push    ar2
030E C003      1425            push    ar3
0310 120100    1426            lcall   _Volts_at_Pin
0313 AC82      1427            mov     r4,dpl
0315 AD83      1428            mov     r5,dph
0317 AEF0      1429            mov     r6,b
0319 FF        1430            mov     r7,a
031A 74CD      1431            mov     a,#0xCD
031C C0E0      1432            push    acc
031E 74CC      1433            mov     a,#0xCC
0320 C0E0      1434            push    acc
0322 744C      1435            mov     a,#0x4C
0324 C0E0      1436            push    acc
0326 743D      1437            mov     a,#0x3D
0328 C0E0      1438            push    acc
032A 8C82      1439            mov     dpl,r4
032C 8D83      1440            mov     dph,r5
032E 8EF0      1441            mov     b,r6
0330 EF        1442            mov     a,r7
0331 120100    1443            lcall   ___fslt
0334 AC82      1444            mov     r4,dpl
0336 E581      1445            mov     a,sp
0338 24FC      1446            add     a,#0xfc
033A F581      1447            mov     sp,a
033C D003      1448            pop     ar3
033E D002      1449            pop     ar2
0340 EC        1450            mov     a,r4
0341 6001      1451            jz      L016004?
0343           1452   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:453: TR0=1; // Start the timer
0343 D28C      1453            setb    _TR0
0345           1454   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:454: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt) // (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000<1000) // Wait for the signal to be zero
0345 E4        1455            clr     a
0346 F528      1456            mov     _zero_time_calc_overflow_count_1_73,a
0348 F529      1457            mov     (_zero_time_calc_overflow_count_1_73 + 1),a
034A           1458   L016011?:
034A 75820C    1459            mov     dpl,#0x0C
034D C002      1460            push    ar2
034F C003      1461            push    ar3
0351 120100    1462            lcall   _Volts_at_Pin
0354 AE82      1463            mov     r6,dpl
0356 AF83      1464            mov     r7,dph
0358 A8F0      1465            mov     r0,b
035A F9        1466            mov     r1,a
035B 74CD      1467            mov     a,#0xCD
035D C0E0      1468            push    acc
035F 74CC      1469            mov     a,#0xCC
0361 C0E0      1470            push    acc
0363 744C      1471            mov     a,#0x4C
0365 C0E0      1472            push    acc
0367 743D      1473            mov     a,#0x3D
0369 C0E0      1474            push    acc
036B 8E82      1475            mov     dpl,r6
036D 8F83      1476            mov     dph,r7
036F 88F0      1477            mov     b,r0
0371 E9        1478            mov     a,r1
0372 120100    1479            lcall   ___fslt
0375 AE82      1480            mov     r6,dpl
0377 E581      1481            mov     a,sp
0379 24FC      1482            add     a,#0xfc
037B F581      1483            mov     sp,a
037D D003      1484            pop     ar3
037F D002      1485            pop     ar2
0381 EE        1486            mov     a,r6
0382 7001      1487            jnz     L016025?
0384 020100    1488            ljmp    L016013?
0387           1489   L016025?:
0387           1490   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:456: if(TF0==1) // Did the 16-bit timer overflow?
0387           1491   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:458: TF0=0;
0387 108D88    1492            jbc     _TF0,L016026?
038A 8001      1493            sjmp    L016008?
038C           1494   L016026?:
038C           1495   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:459: overflow_count++;
038C 0528      1496            inc     _zero_time_calc_overflow_count_1_73
038E E4        1497            clr     a
038F B52808    1498            cjne    a,_zero_time_calc_overflow_count_1_73,L016027?
0392 0529      1499            inc     (_zero_time_calc_overflow_count_1_73 + 1)
0394           1500   L016027?:
0394 AA28      1501            mov     r2,_zero_time_calc_overflow_count_1_73
0396 AB29      1502            mov     r3,(_zero_time_calc_overflow_count_1_73 + 1)
0398           1503   L016008?:
0398           1504   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:461: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >1800) 
0398 C002      1505            push    ar2
039A C003      1506            push    ar3
039C 852882    1507            mov     dpl,_zero_time_calc_overflow_count_1_73
039F 852983    1508            mov     dph,(_zero_time_calc_overflow_count_1_73 + 1)
03A2 C002      1509            push    ar2
03A4 C003      1510            push    ar3
03A6 120100    1511            lcall   ___sint2fs
03A9 AE82      1512            mov     r6,dpl
03AB AF83      1513            mov     r7,dph
03AD A8F0      1514            mov     r0,b
03AF F9        1515            mov     r1,a
03B0 C006      1516            push    ar6
03B2 C007      1517            push    ar7
03B4 C000      1518            push    ar0
03B6 C001      1519            push    ar1
03B8 900000    1520            mov     dptr,#0x0000
03BB 75F080    1521            mov     b,#0x80
03BE 7447      1522            mov     a,#0x47
03C0 120100    1523            lcall   ___fsmul
03C3 AE82      1524            mov     r6,dpl
03C5 AF83      1525            mov     r7,dph
03C7 A8F0      1526            mov     r0,b
03C9 F9        1527            mov     r1,a
03CA E581      1528            mov     a,sp
03CC 24FC      1529            add     a,#0xfc
03CE F581      1530            mov     sp,a
03D0 D003      1531            pop     ar3
03D2 D002      1532            pop     ar2
03D4 858C82    1533            mov     dpl,_TH0
03D7 C006      1534            push    ar6
03D9 C007      1535            push    ar7
03DB C000      1536            push    ar0
03DD C001      1537            push    ar1
03DF 120100    1538            lcall   ___uchar2fs
03E2 AC82      1539            mov     r4,dpl
03E4 AD83      1540            mov     r5,dph
03E6 AAF0      1541            mov     r2,b
03E8 FB        1542            mov     r3,a
03E9 C004      1543            push    ar4
03EB C005      1544            push    ar5
03ED C002      1545            push    ar2
03EF C003      1546            push    ar3
03F1 900000    1547            mov     dptr,#0x0000
03F4 75F080    1548            mov     b,#0x80
03F7 7443      1549            mov     a,#0x43
03F9 120100    1550            lcall   ___fsmul
03FC AA82      1551            mov     r2,dpl
03FE AB83      1552            mov     r3,dph
0400 ACF0      1553            mov     r4,b
0402 FD        1554            mov     r5,a
0403 E581      1555            mov     a,sp
0405 24FC      1556            add     a,#0xfc
0407 F581      1557            mov     sp,a
0409 D001      1558            pop     ar1
040B D000      1559            pop     ar0
040D D007      1560            pop     ar7
040F D006      1561            pop     ar6
0411 C002      1562            push    ar2
0413 C003      1563            push    ar3
0415 C004      1564            push    ar4
0417 C005      1565            push    ar5
0419 8E82      1566            mov     dpl,r6
041B 8F83      1567            mov     dph,r7
041D 88F0      1568            mov     b,r0
041F E9        1569            mov     a,r1
0420 120100    1570            lcall   ___fsadd
0423 AA82      1571            mov     r2,dpl
0425 AB83      1572            mov     r3,dph
0427 ACF0      1573            mov     r4,b
0429 FD        1574            mov     r5,a
042A E581      1575            mov     a,sp
042C 24FC      1576            add     a,#0xfc
042E F581      1577            mov     sp,a
0430 AE8A      1578            mov     r6,_TL0
0432 7F00      1579            mov     r7,#0x00
0434 8E82      1580            mov     dpl,r6
0436 8F83      1581            mov     dph,r7
0438 C002      1582            push    ar2
043A C003      1583            push    ar3
043C C004      1584            push    ar4
043E C005      1585            push    ar5
0440 120100    1586            lcall   ___sint2fs
0443 AE82      1587            mov     r6,dpl
0445 AF83      1588            mov     r7,dph
0447 A8F0      1589            mov     r0,b
0449 F9        1590            mov     r1,a
044A D005      1591            pop     ar5
044C D004      1592            pop     ar4
044E D003      1593            pop     ar3
0450 D002      1594            pop     ar2
0452 C006      1595            push    ar6
0454 C007      1596            push    ar7
0456 C000      1597            push    ar0
0458 C001      1598            push    ar1
045A 8A82      1599            mov     dpl,r2
045C 8B83      1600            mov     dph,r3
045E 8CF0      1601            mov     b,r4
0460 ED        1602            mov     a,r5
0461 120100    1603            lcall   ___fsadd
0464 AA82      1604            mov     r2,dpl
0466 AB83      1605            mov     r3,dph
0468 ACF0      1606            mov     r4,b
046A FD        1607            mov     r5,a
046B E581      1608            mov     a,sp
046D 24FC      1609            add     a,#0xfc
046F F581      1610            mov     sp,a
0471 C002      1611            push    ar2
0473 C003      1612            push    ar3
0475 C004      1613            push    ar4
0477 C005      1614            push    ar5
0479 90C33E    1615            mov     dptr,#0xC33E
047C 75F02E    1616            mov     b,#0x2E
047F 7439      1617            mov     a,#0x39
0481 120100    1618            lcall   ___fsmul
0484 AA82      1619            mov     r2,dpl
0486 AB83      1620            mov     r3,dph
0488 ACF0      1621            mov     r4,b
048A FD        1622            mov     r5,a
048B E581      1623            mov     a,sp
048D 24FC      1624            add     a,#0xfc
048F F581      1625            mov     sp,a
0491 C003      1626            push    ar3
0493 E4        1627            clr     a
0494 C0E0      1628            push    acc
0496 C0E0      1629            push    acc
0498 74E1      1630            mov     a,#0xE1
049A C0E0      1631            push    acc
049C 7444      1632            mov     a,#0x44
049E C0E0      1633            push    acc
04A0 8A82      1634            mov     dpl,r2
04A2 8B83      1635            mov     dph,r3
04A4 8CF0      1636            mov     b,r4
04A6 ED        1637            mov     a,r5
04A7 120100    1638            lcall   ___fsgt
04AA AA82      1639            mov     r2,dpl
04AC E581      1640            mov     a,sp
04AE 24FC      1641            add     a,#0xfc
04B0 F581      1642            mov     sp,a
04B2 D003      1643            pop     ar3
04B4 EA        1644            mov     a,r2
04B5 D003      1645            pop     ar3
04B7 D002      1646            pop     ar2
04B9 7001      1647            jnz     L016028?
04BB 020100    1648            ljmp    L016011?
04BE           1649   L016028?:
04BE           1650   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:462: return 1800;
04BE 900000    1651            mov     dptr,#0x0000
04C1 75F0E1    1652            mov     b,#0xE1
04C4 7444      1653            mov     a,#0x44
04C6 22        1654            ret
04C7           1655   L016013?:
04C7           1656   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:465: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
04C7 C28C      1657            clr     _TR0
04C9           1658   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:466: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000;
04C9 8A82      1659            mov     dpl,r2
04CB 8B83      1660            mov     dph,r3
04CD 120100    1661            lcall   ___sint2fs
04D0 AA82      1662            mov     r2,dpl
04D2 AB83      1663            mov     r3,dph
04D4 ACF0      1664            mov     r4,b
04D6 FD        1665            mov     r5,a
04D7 C002      1666            push    ar2
04D9 C003      1667            push    ar3
04DB C004      1668            push    ar4
04DD C005      1669            push    ar5
04DF 900000    1670            mov     dptr,#0x0000
04E2 75F080    1671            mov     b,#0x80
04E5 7447      1672            mov     a,#0x47
04E7 120100    1673            lcall   ___fsmul
04EA AA82      1674            mov     r2,dpl
04EC AB83      1675            mov     r3,dph
04EE ACF0      1676            mov     r4,b
04F0 FD        1677            mov     r5,a
04F1 E581      1678            mov     a,sp
04F3 24FC      1679            add     a,#0xfc
04F5 F581      1680            mov     sp,a
04F7 858C82    1681            mov     dpl,_TH0
04FA C002      1682            push    ar2
04FC C003      1683            push    ar3
04FE C004      1684            push    ar4
0500 C005      1685            push    ar5
0502 120100    1686            lcall   ___uchar2fs
0505 AE82      1687            mov     r6,dpl
0507 AF83      1688            mov     r7,dph
0509 A8F0      1689            mov     r0,b
050B F9        1690            mov     r1,a
050C C006      1691            push    ar6
050E C007      1692            push    ar7
0510 C000      1693            push    ar0
0512 C001      1694            push    ar1
0514 900000    1695            mov     dptr,#0x0000
0517 75F080    1696            mov     b,#0x80
051A 7443      1697            mov     a,#0x43
051C 120100    1698            lcall   ___fsmul
051F AE82      1699            mov     r6,dpl
0521 AF83      1700            mov     r7,dph
0523 A8F0      1701            mov     r0,b
0525 F9        1702            mov     r1,a
0526 E581      1703            mov     a,sp
0528 24FC      1704            add     a,#0xfc
052A F581      1705            mov     sp,a
052C D005      1706            pop     ar5
052E D004      1707            pop     ar4
0530 D003      1708            pop     ar3
0532 D002      1709            pop     ar2
0534 C006      1710            push    ar6
0536 C007      1711            push    ar7
0538 C000      1712            push    ar0
053A C001      1713            push    ar1
053C 8A82      1714            mov     dpl,r2
053E 8B83      1715            mov     dph,r3
0540 8CF0      1716            mov     b,r4
0542 ED        1717            mov     a,r5
0543 120100    1718            lcall   ___fsadd
0546 AA82      1719            mov     r2,dpl
0548 AB83      1720            mov     r3,dph
054A ACF0      1721            mov     r4,b
054C FD        1722            mov     r5,a
054D E581      1723            mov     a,sp
054F 24FC      1724            add     a,#0xfc
0551 F581      1725            mov     sp,a
0553 AE8A      1726            mov     r6,_TL0
0555 7F00      1727            mov     r7,#0x00
0557 8E82      1728            mov     dpl,r6
0559 8F83      1729            mov     dph,r7
055B C002      1730            push    ar2
055D C003      1731            push    ar3
055F C004      1732            push    ar4
0561 C005      1733            push    ar5
0563 120100    1734            lcall   ___sint2fs
0566 AE82      1735            mov     r6,dpl
0568 AF83      1736            mov     r7,dph
056A A8F0      1737            mov     r0,b
056C F9        1738            mov     r1,a
056D D005      1739            pop     ar5
056F D004      1740            pop     ar4
0571 D003      1741            pop     ar3
0573 D002      1742            pop     ar2
0575 C006      1743            push    ar6
0577 C007      1744            push    ar7
0579 C000      1745            push    ar0
057B C001      1746            push    ar1
057D 8A82      1747            mov     dpl,r2
057F 8B83      1748            mov     dph,r3
0581 8CF0      1749            mov     b,r4
0583 ED        1750            mov     a,r5
0584 120100    1751            lcall   ___fsadd
0587 AA82      1752            mov     r2,dpl
0589 AB83      1753            mov     r3,dph
058B ACF0      1754            mov     r4,b
058D FD        1755            mov     r5,a
058E E581      1756            mov     a,sp
0590 24FC      1757            add     a,#0xfc
0592 F581      1758            mov     sp,a
0594 C002      1759            push    ar2
0596 C003      1760            push    ar3
0598 C004      1761            push    ar4
059A C005      1762            push    ar5
059C 90C33E    1763            mov     dptr,#0xC33E
059F 75F02E    1764            mov     b,#0x2E
05A2 7439      1765            mov     a,#0x39
05A4 120100    1766            lcall   ___fsmul
05A7 AA82      1767            mov     r2,dpl
05A9 AB83      1768            mov     r3,dph
05AB ACF0      1769            mov     r4,b
05AD FD        1770            mov     r5,a
05AE E581      1771            mov     a,sp
05B0 24FC      1772            add     a,#0xfc
05B2 F581      1773            mov     sp,a
05B4           1774   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:469: return period1; //return period of high pulse in seconds
05B4 8A82      1775            mov     dpl,r2
05B6 8B83      1776            mov     dph,r3
05B8 8CF0      1777            mov     b,r4
05BA ED        1778            mov     a,r5
05BB 22        1779            ret
05BC           1780   ;------------------------------------------------------------
05BC           1781   ;Allocation info for local variables in function 'arrayEqual'
05BC           1782   ;------------------------------------------------------------
05BC           1783   ;size                      Allocated with name '_arrayEqual_PARM_2'
05BC           1784   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
05BC           1785   ;arr1                      Allocated with name '_arrayEqual_arr1_1_76'
05BC           1786   ;i                         Allocated to registers r5 r6 
05BC           1787   ;------------------------------------------------------------
05BC           1788   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:473: int arrayEqual (int arr1[], int size, int arr2[]){
05BC           1789   ;        -----------------------------------------
05BC           1790   ;         function arrayEqual
05BC           1791   ;        -----------------------------------------
05BC           1792   _arrayEqual:
05BC 8582B8    1793            mov     _arrayEqual_arr1_1_76,dpl
05BF 8583B9    1794            mov     (_arrayEqual_arr1_1_76 + 1),dph
05C2 85F0BA    1795            mov     (_arrayEqual_arr1_1_76 + 2),b
05C5           1796   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:475: for(i=0; i<size; i++){
05C5 7D00      1797            mov     r5,#0x00
05C7 7E00      1798            mov     r6,#0x00
05C9           1799   L017003?:
05C9 C3        1800            clr     c
05CA ED        1801            mov     a,r5
05CB 95A0      1802            subb    a,_arrayEqual_PARM_2
05CD EE        1803            mov     a,r6
05CE 6480      1804            xrl     a,#0x80
05D0 85A1F0    1805            mov     b,(_arrayEqual_PARM_2 + 1)
05D3 63F080    1806            xrl     b,#0x80
05D6 95F0      1807            subb    a,b
05D8 5001      1808            jnc     L017006?
05DA           1809   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:476: if(arr1[i]!=arr2[i])
05DA 8D07      1810            mov     ar7,r5
05DC EE        1811            mov     a,r6
05DD CF        1812            xch     a,r7
05DE 25E0      1813            add     a,acc
05E0 CF        1814            xch     a,r7
05E1 33        1815            rlc     a
05E2 F8        1816            mov     r0,a
05E3 EF        1817            mov     a,r7
05E4 25B8      1818            add     a,_arrayEqual_arr1_1_76
05E6 F9        1819            mov     r1,a
05E7 E8        1820            mov     a,r0
05E8 35B9      1821            addc    a,(_arrayEqual_arr1_1_76 + 1)
05EA FA        1822            mov     r2,a
05EB ABBA      1823            mov     r3,(_arrayEqual_arr1_1_76 + 2)
05ED 8982      1824            mov     dpl,r1
05EF 8A83      1825            mov     dph,r2
05F1 8BF0      1826            mov     b,r3
05F3 120100    1827            lcall   __gptrget
05F6 F9        1828            mov     r1,a
05F7 A3        1829            inc     dptr
05F8 120100    1830            lcall   __gptrget
05FB FA        1831            mov     r2,a
05FC EF        1832            mov     a,r7
05FD 2550      1833            add     a,_arrayEqual_PARM_3
05FF FF        1834            mov     r7,a
0600 E8        1835            mov     a,r0
0601 3551      1836            addc    a,(_arrayEqual_PARM_3 + 1)
0603 F8        1837            mov     r0,a
0604 AB52      1838            mov     r3,(_arrayEqual_PARM_3 + 2)
0606 8F82      1839            mov     dpl,r7
0608 8883      1840            mov     dph,r0
060A 8BF0      1841            mov     b,r3
060C 120100    1842            lcall   __gptrget
060F FF        1843            mov     r7,a
0610 A3        1844            inc     dptr
0611 120100    1845            lcall   __gptrget
0614 F8        1846            mov     r0,a
0615 E9        1847            mov     a,r1
0616 B50748    1848            cjne    a,ar7,L017013?
0619 EA        1849            mov     a,r2
061A B50048    1850            cjne    a,ar0,L017013?
061D 8001      1851            sjmp    L017005?
061F           1852   L017013?:
061F           1853   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:477: return 0; 
061F 900000    1854            mov     dptr,#0x0000
0622 22        1855            ret
0623           1856   L017005?:
0623           1857   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:475: for(i=0; i<size; i++){
0623 0D        1858            inc     r5
0624 BD0088    1859            cjne    r5,#0x00,L017003?
0627 0E        1860            inc     r6
0628 8001      1861            sjmp    L017003?
062A           1862   L017006?:
062A           1863   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:479: return 1; 
062A 900001    1864            mov     dptr,#0x0001
062D 22        1865            ret
062E           1866   ;------------------------------------------------------------
062E           1867   ;Allocation info for local variables in function 'checkCommands'
062E           1868   ;------------------------------------------------------------
062E           1869   ;------------------------------------------------------------
062E           1870   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:485: void checkCommands (void){
062E           1871   ;        -----------------------------------------
062E           1872   ;         function checkCommands
062E           1873   ;        -----------------------------------------
062E           1874   _checkCommands:
062E           1875   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:486: if(arrayEqual(command, 4, stop)) PWMStop();
062E 755088    1876            mov     _arrayEqual_PARM_3,#_stop
0631 755100    1877            mov     (_arrayEqual_PARM_3 + 1),#0x00
0634 755240    1878            mov     (_arrayEqual_PARM_3 + 2),#0x40
0637 75A004    1879            mov     _arrayEqual_PARM_2,#0x04
063A E4        1880            clr     a
063B F5A1      1881            mov     (_arrayEqual_PARM_2 + 1),a
063D 904A48    1882            mov     dptr,#_command
0640 75F040    1883            mov     b,#0x40
0643 120100    1884            lcall   _arrayEqual
0646 E582      1885            mov     a,dpl
0648 8583F0    1886            mov     b,dph
064B 45F0      1887            orl     a,b
064D 6001      1888            jz      L018014?
064F 020100    1889            ljmp    _PWMStop
0652           1890   L018014?:
0652           1891   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:487: else if (arrayEqual(command,4,forward)) PWMforward(); 
0652 755048    1892            mov     _arrayEqual_PARM_3,#_forward
0655 755100    1893            mov     (_arrayEqual_PARM_3 + 1),#0x00
0658 755240    1894            mov     (_arrayEqual_PARM_3 + 2),#0x40
065B 75A004    1895            mov     _arrayEqual_PARM_2,#0x04
065E E4        1896            clr     a
065F F5A1      1897            mov     (_arrayEqual_PARM_2 + 1),a
0661 904A48    1898            mov     dptr,#_command
0664 75F040    1899            mov     b,#0x40
0667 120100    1900            lcall   _arrayEqual
066A E582      1901            mov     a,dpl
066C 8583F0    1902            mov     b,dph
066F 45F0      1903            orl     a,b
0671 6001      1904            jz      L018011?
0673 020100    1905            ljmp    _PWMforward
0676           1906   L018011?:
0676           1907   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:488: else if (arrayEqual(command,4,backward)) PWMbackward(); 
0676 755008    1908            mov     _arrayEqual_PARM_3,#_backward
0679 755100    1909            mov     (_arrayEqual_PARM_3 + 1),#0x00
067C 755240    1910            mov     (_arrayEqual_PARM_3 + 2),#0x40
067F 75A004    1911            mov     _arrayEqual_PARM_2,#0x04
0682 E4        1912            clr     a
0683 F5A1      1913            mov     (_arrayEqual_PARM_2 + 1),a
0685 904A48    1914            mov     dptr,#_command
0688 75F040    1915            mov     b,#0x40
068B 120100    1916            lcall   _arrayEqual
068E E582      1917            mov     a,dpl
0690 8583F0    1918            mov     b,dph
0693 45F0      1919            orl     a,b
0695 6001      1920            jz      L018008?
0697 020100    1921            ljmp    _PWMbackward
069A           1922   L018008?:
069A           1923   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:489: else if (arrayEqual(command,4, left)) PWMLeft(); 
069A 7550C8    1924            mov     _arrayEqual_PARM_3,#_left
069D 755100    1925            mov     (_arrayEqual_PARM_3 + 1),#0x00
06A0 755240    1926            mov     (_arrayEqual_PARM_3 + 2),#0x40
06A3 75A004    1927            mov     _arrayEqual_PARM_2,#0x04
06A6 E4        1928            clr     a
06A7 F5A1      1929            mov     (_arrayEqual_PARM_2 + 1),a
06A9 904A48    1930            mov     dptr,#_command
06AC 75F040    1931            mov     b,#0x40
06AF 120100    1932            lcall   _arrayEqual
06B2 E582      1933            mov     a,dpl
06B4 8583F0    1934            mov     b,dph
06B7 45F0      1935            orl     a,b
06B9 6001      1936            jz      L018005?
06BB 020100    1937            ljmp    _PWMLeft
06BE           1938   L018005?:
06BE           1939   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:490: else if (arrayEqual(command,4, right)) PWMRight(); 
06BE 755088    1940            mov     _arrayEqual_PARM_3,#_right
06C1 755100    1941            mov     (_arrayEqual_PARM_3 + 1),#0x00
06C4 755240    1942            mov     (_arrayEqual_PARM_3 + 2),#0x40
06C7 75A004    1943            mov     _arrayEqual_PARM_2,#0x04
06CA E4        1944            clr     a
06CB F5A1      1945            mov     (_arrayEqual_PARM_2 + 1),a
06CD 904A48    1946            mov     dptr,#_command
06D0 75F040    1947            mov     b,#0x40
06D3 120100    1948            lcall   _arrayEqual
06D6 E582      1949            mov     a,dpl
06D8 8583F0    1950            mov     b,dph
06DB 45F0      1951            orl     a,b
06DD 6001      1952            jz      L018002?
06DF 020100    1953            ljmp    _PWMRight
06E2           1954   L018002?:
06E2           1955   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:491: else PWMStop(); //defaults to a halt (redundant)
06E2 020100    1956            ljmp    _PWMStop
06E5           1957   ;------------------------------------------------------------
06E5           1958   ;Allocation info for local variables in function 'voltsAtPeak'
06E5           1959   ;------------------------------------------------------------
06E5           1960   ;------------------------------------------------------------
06E5           1961   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:497: float voltsAtPeak(void) {
06E5           1962   ;        -----------------------------------------
06E5           1963   ;         function voltsAtPeak
06E5           1964   ;        -----------------------------------------
06E5           1965   _voltsAtPeak:
06E5           1966   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:499: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
06E5           1967   L019001?:
06E5 75820C    1968            mov     dpl,#0x0C
06E8 120100    1969            lcall   _ADC_at_Pin
06EB E582      1970            mov     a,dpl
06ED 8583F0    1971            mov     b,dph
06F0 45F0      1972            orl     a,b
06F2 6001      1973            jz      L019001?
06F4           1974   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:500: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
06F4 900000    1975            mov     dptr,#0x0000
06F7 120100    1976            lcall   _Timer3us
06FA           1977   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:501: return(Volts_at_Pin(QFP32_MUX_P1_6));
06FA 75820C    1978            mov     dpl,#0x0C
06FD 020100    1979            ljmp    _Volts_at_Pin
0700           1980   ;------------------------------------------------------------
0700           1981   ;Allocation info for local variables in function 'getDigitalSignal'
0700           1982   ;------------------------------------------------------------
0700           1983   ;------------------------------------------------------------
0700           1984   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:514: int getDigitalSignal (void){
0700           1985   ;        -----------------------------------------
0700           1986   ;         function getDigitalSignal
0700           1987   ;        -----------------------------------------
0700           1988   _getDigitalSignal:
0700           1989   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:516: if (voltsAtPeak()>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
0700 120100    1990            lcall   _voltsAtPeak
0703 AA82      1991            mov     r2,dpl
0705 AB83      1992            mov     r3,dph
0707 ACF0      1993            mov     r4,b
0709 FD        1994            mov     r5,a
070A 74CD      1995            mov     a,#0xCD
070C C0E0      1996            push    acc
070E 74CC      1997            mov     a,#0xCC
0710 C0E0      1998            push    acc
0712 744C      1999            mov     a,#0x4C
0714 C0E0      2000            push    acc
0716 743D      2001            mov     a,#0x3D
0718 C0E0      2002            push    acc
071A 8A82      2003            mov     dpl,r2
071C 8B83      2004            mov     dph,r3
071E 8CF0      2005            mov     b,r4
0720 ED        2006            mov     a,r5
0721 120100    2007            lcall   ___fslt
0724 AA82      2008            mov     r2,dpl
0726 E581      2009            mov     a,sp
0728 24FC      2010            add     a,#0xfc
072A F581      2011            mov     sp,a
072C EA        2012            mov     a,r2
072D 7001      2013            jnz     L020002?
072F           2014   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:518: printf("\nread 1:  at pin 1.6: %f\r", voltsAtPeak());
072F 120100    2015            lcall   _voltsAtPeak
0732 AA82      2016            mov     r2,dpl
0734 AB83      2017            mov     r3,dph
0736 ACF0      2018            mov     r4,b
0738 FD        2019            mov     r5,a
0739 C002      2020            push    ar2
073B C003      2021            push    ar3
073D C004      2022            push    ar4
073F C005      2023            push    ar5
0741 7488      2024            mov     a,#__str_0
0743 C0E0      2025            push    acc
0745 74CB      2026            mov     a,#(__str_0 >> 8)
0747 C0E0      2027            push    acc
0749 7480      2028            mov     a,#0x80
074B C0E0      2029            push    acc
074D 120100    2030            lcall   _printf
0750 E581      2031            mov     a,sp
0752 24F9      2032            add     a,#0xf9
0754 F581      2033            mov     sp,a
0756           2034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:519: return 1;
0756 900001    2035            mov     dptr,#0x0001
0759 22        2036            ret
075A           2037   L020002?:
075A           2038   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:522: printf("\nread 0: Volt at pin 1.6: %f\r", voltsAtPeak());
075A 120100    2039            lcall   _voltsAtPeak
075D AA82      2040            mov     r2,dpl
075F AB83      2041            mov     r3,dph
0761 ACF0      2042            mov     r4,b
0763 FD        2043            mov     r5,a
0764 C002      2044            push    ar2
0766 C003      2045            push    ar3
0768 C004      2046            push    ar4
076A C005      2047            push    ar5
076C 7408      2048            mov     a,#__str_1
076E C0E0      2049            push    acc
0770 74CC      2050            mov     a,#(__str_1 >> 8)
0772 C0E0      2051            push    acc
0774 7480      2052            mov     a,#0x80
0776 C0E0      2053            push    acc
0778 120100    2054            lcall   _printf
077B E581      2055            mov     a,sp
077D 24F9      2056            add     a,#0xf9
077F F581      2057            mov     sp,a
0781           2058   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:523: return 0; 
0781 900000    2059            mov     dptr,#0x0000
0784 22        2060            ret
0785           2061   ;------------------------------------------------------------
0785           2062   ;Allocation info for local variables in function 'waitquarterperiod'
0785           2063   ;------------------------------------------------------------
0785           2064   ;------------------------------------------------------------
0785           2065   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:531: void waitquarterperiod(void){
0785           2066   ;        -----------------------------------------
0785           2067   ;         function waitquarterperiod
0785           2068   ;        -----------------------------------------
0785           2069   _waitquarterperiod:
0785           2070   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:532: waitms(constant_delay_time);
0785 90000A    2071            mov     dptr,#0x000A
0788 020100    2072            ljmp    _waitms
078B           2073   ;------------------------------------------------------------
078B           2074   ;Allocation info for local variables in function 'recieveData'
078B           2075   ;------------------------------------------------------------
078B           2076   ;checkcomm                 Allocated to registers 
078B           2077   ;i                         Allocated to registers r2 r3 
078B           2078   ;------------------------------------------------------------
078B           2079   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:538: void recieveData (){
078B           2080   ;        -----------------------------------------
078B           2081   ;         function recieveData
078B           2082   ;        -----------------------------------------
078B           2083   _recieveData:
078B           2084   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:542: while(getDigitalSignal()==0);          //wait for the signal to be 1 
078B           2085   L022001?:
078B 120100    2086            lcall   _getDigitalSignal
078E E582      2087            mov     a,dpl
0790 8583F0    2088            mov     b,dph
0793 45F0      2089            orl     a,b
0795 6001      2090            jz      L022001?
0797           2091   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:543: if (getDigitalSignal()==1){    //gets the first 1 that identifies a command 
0797 120100    2092            lcall   _getDigitalSignal
079A AA82      2093            mov     r2,dpl
079C AB83      2094            mov     r3,dph
079E BA0188    2095            cjne    r2,#0x01,L022010?
07A1 BB0088    2096            cjne    r3,#0x00,L022010?
07A4           2097   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:544: command[0]=1;
07A4 754801    2098            mov     _command,#0x01
07A7 754900    2099            mov     (_command + 1),#0x00
07AA           2100   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:545: for( i=1; i<4; i++){
07AA 7A01      2101            mov     r2,#0x01
07AC 7B00      2102            mov     r3,#0x00
07AE           2103   L022006?:
07AE C3        2104            clr     c
07AF EA        2105            mov     a,r2
07B0 9404      2106            subb    a,#0x04
07B2 EB        2107            mov     a,r3
07B3 6480      2108            xrl     a,#0x80
07B5 9480      2109            subb    a,#0x80
07B7 5001      2110            jnc     L022009?
07B9           2111   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:546: waitms(constant_delay_time);
07B9 90000A    2112            mov     dptr,#0x000A
07BC C002      2113            push    ar2
07BE C003      2114            push    ar3
07C0 120100    2115            lcall   _waitms
07C3 D003      2116            pop     ar3
07C5 D002      2117            pop     ar2
07C7           2118   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:547: command[i]=getDigitalSignal();         
07C7 8A04      2119            mov     ar4,r2
07C9 EB        2120            mov     a,r3
07CA CC        2121            xch     a,r4
07CB 25E0      2122            add     a,acc
07CD CC        2123            xch     a,r4
07CE 33        2124            rlc     a
07CF EC        2125            mov     a,r4
07D0 2448      2126            add     a,#_command
07D2 F8        2127            mov     r0,a
07D3 C002      2128            push    ar2
07D5 C003      2129            push    ar3
07D7 C000      2130            push    ar0
07D9 120100    2131            lcall   _getDigitalSignal
07DC E582      2132            mov     a,dpl
07DE 8583F0    2133            mov     b,dph
07E1 D000      2134            pop     ar0
07E3 D003      2135            pop     ar3
07E5 D002      2136            pop     ar2
07E7 F6        2137            mov     @r0,a
07E8 08        2138            inc     r0
07E9 A6F0      2139            mov     @r0,b
07EB 18        2140            dec     r0
07EC           2141   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:545: for( i=1; i<4; i++){
07EC 0A        2142            inc     r2
07ED BA00C8    2143            cjne    r2,#0x00,L022006?
07F0 0B        2144            inc     r3
07F1 8001      2145            sjmp    L022006?
07F3           2146   L022009?:
07F3           2147   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:550: checkCommands();                               //does activity depending on the command given 
07F3 020100    2148            ljmp    _checkCommands
07F6           2149   L022010?:
07F6 22        2150            ret
07F7           2151   ;------------------------------------------------------------
07F7           2152   ;Allocation info for local variables in function 'checkMode'
07F7           2153   ;------------------------------------------------------------
07F7           2154   ;------------------------------------------------------------
07F7           2155   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:556: int checkMode(){
07F7           2156   ;        -----------------------------------------
07F7           2157   ;         function checkMode
07F7           2158   ;        -----------------------------------------
07F7           2159   _checkMode:
07F7           2160   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:557: if(!BUTTON1 || x == 0){
07F7 30B348    2161            jnb     _P3_3,L023001?
07FA E508      2162            mov     a,_x
07FC 4509      2163            orl     a,(_x + 1)
07FE 7001      2164            jnz     L023026?
0800           2165   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:558: while(!BUTTON1);
0800           2166   L023001?:
0800 30B348    2167            jnb     _P3_3,L023001?
0803           2168   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:559: x= 0;
0803           2169   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:560: return 0;
0803 E4        2170            clr     a
0804 F508      2171            mov     _x,a
0806 F509      2172            mov     (_x + 1),a
0808 F582      2173            mov     dpl,a
080A F583      2174            mov     dph,a
080C 22        2175            ret
080D           2176   L023026?:
080D           2177   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:562: else if(!BUTTON2 || x == 1){
080D 30B2C8    2178            jnb     _P3_2,L023004?
0810 7401      2179            mov     a,#0x01
0812 B50808    2180            cjne    a,_x,L023047?
0815 E4        2181            clr     a
0816 B50908    2182            cjne    a,(_x + 1),L023047?
0819 8001      2183            sjmp    L023048?
081B           2184   L023047?:
081B 8001      2185            sjmp    L023022?
081D           2186   L023048?:
081D           2187   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:563: while(!BUTTON2);
081D           2188   L023004?:
081D 30B2C8    2189            jnb     _P3_2,L023004?
0820           2190   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:564: x = 1;
0820 750801    2191            mov     _x,#0x01
0823 E4        2192            clr     a
0824 F509      2193            mov     (_x + 1),a
0826           2194   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:565: return 1;
0826 900001    2195            mov     dptr,#0x0001
0829 22        2196            ret
082A           2197   L023022?:
082A           2198   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:567: else if(!BUTTON3 || x == 3){
082A 30B1C8    2199            jnb     _P3_1,L023007?
082D 7403      2200            mov     a,#0x03
082F B50808    2201            cjne    a,_x,L023051?
0832 E4        2202            clr     a
0833 B50908    2203            cjne    a,(_x + 1),L023051?
0836 8001      2204            sjmp    L023052?
0838           2205   L023051?:
0838 8001      2206            sjmp    L023018?
083A           2207   L023052?:
083A           2208   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:568: while(!BUTTON3);
083A           2209   L023007?:
083A 30B1C8    2210            jnb     _P3_1,L023007?
083D           2211   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:569: x = 3;
083D 750803    2212            mov     _x,#0x03
0840 E4        2213            clr     a
0841 F509      2214            mov     (_x + 1),a
0843           2215   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:570: return 3;
0843 900003    2216            mov     dptr,#0x0003
0846 22        2217            ret
0847           2218   L023018?:
0847           2219   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:572: else if(!BUTTON4 || x == 4){
0847 30B0C8    2220            jnb     _P3_0,L023010?
084A 7404      2221            mov     a,#0x04
084C B50808    2222            cjne    a,_x,L023055?
084F E4        2223            clr     a
0850 B50908    2224            cjne    a,(_x + 1),L023055?
0853 8001      2225            sjmp    L023056?
0855           2226   L023055?:
0855 8001      2227            sjmp    L023014?
0857           2228   L023056?:
0857           2229   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:573: while(!BUTTON4);
0857           2230   L023010?:
0857 30B0C8    2231            jnb     _P3_0,L023010?
085A           2232   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:574: x = 4;
085A 750804    2233            mov     _x,#0x04
085D E4        2234            clr     a
085E F509      2235            mov     (_x + 1),a
0860           2236   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:575: return 4;
0860 900004    2237            mov     dptr,#0x0004
0863 22        2238            ret
0864           2239   L023014?:
0864           2240   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:578: x = 2;
0864 750802    2241            mov     _x,#0x02
0867 E4        2242            clr     a
0868 F509      2243            mov     (_x + 1),a
086A           2244   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:579: return 2;
086A 900002    2245            mov     dptr,#0x0002
086D 22        2246            ret
086E           2247   ;------------------------------------------------------------
086E           2248   ;Allocation info for local variables in function 'detectobstacle'
086E           2249   ;------------------------------------------------------------
086E           2250   ;threshold                 Allocated to registers r2 r3 r4 r5 
086E           2251   ;------------------------------------------------------------
086E           2252   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:584: void detectobstacle(float threshold){
086E           2253   ;        -----------------------------------------
086E           2254   ;         function detectobstacle
086E           2255   ;        -----------------------------------------
086E           2256   _detectobstacle:
086E AA82      2257            mov     r2,dpl
0870 AB83      2258            mov     r3,dph
0872 ACF0      2259            mov     r4,b
0874 FD        2260            mov     r5,a
0875           2261   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:595: if(threshold <= 0.6 ){
0875 749A      2262            mov     a,#0x9A
0877 C0E0      2263            push    acc
0879 7499      2264            mov     a,#0x99
087B C0E0      2265            push    acc
087D 7419      2266            mov     a,#0x19
087F C0E0      2267            push    acc
0881 743F      2268            mov     a,#0x3F
0883 C0E0      2269            push    acc
0885 8A82      2270            mov     dpl,r2
0887 8B83      2271            mov     dph,r3
0889 8CF0      2272            mov     b,r4
088B ED        2273            mov     a,r5
088C 120100    2274            lcall   ___fsgt
088F AA82      2275            mov     r2,dpl
0891 E581      2276            mov     a,sp
0893 24FC      2277            add     a,#0xfc
0895 F581      2278            mov     sp,a
0897 EA        2279            mov     a,r2
0898 7001      2280            jnz     L024002?
089A           2281   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:597: printf("Turn right \r\n");
089A 7408      2282            mov     a,#__str_2
089C C0E0      2283            push    acc
089E 74D1      2284            mov     a,#(__str_2 >> 8)
08A0 C0E0      2285            push    acc
08A2 7480      2286            mov     a,#0x80
08A4 C0E0      2287            push    acc
08A6 120100    2288            lcall   _printf
08A9 1581      2289            dec     sp
08AB 1581      2290            dec     sp
08AD 1581      2291            dec     sp
08AF           2292   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:598: PWMRight();
08AF 120100    2293            lcall   _PWMRight
08B2           2294   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:599: waitms(500); //Make waits longer
08B2 9001F4    2295            mov     dptr,#0x01F4
08B5 120100    2296            lcall   _waitms
08B8           2297   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:600: waitms(500); 
08B8 9001F4    2298            mov     dptr,#0x01F4
08BB 120100    2299            lcall   _waitms
08BE           2300   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:601: waitms(300); 
08BE 90012C    2301            mov     dptr,#0x012C
08C1 120100    2302            lcall   _waitms
08C4           2303   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:603: PWMStop();
08C4 120100    2304            lcall   _PWMStop
08C7           2305   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:604: waitms(500);
08C7 9001F4    2306            mov     dptr,#0x01F4
08CA 120100    2307            lcall   _waitms
08CD           2308   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:605: waitms(250);
08CD 9000FA    2309            mov     dptr,#0x00FA
08D0 020100    2310            ljmp    _waitms
08D3           2311   L024002?:
08D3           2312   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:610: printf("Go Straight \r\n");
08D3 7448      2313            mov     a,#__str_3
08D5 C0E0      2314            push    acc
08D7 74D1      2315            mov     a,#(__str_3 >> 8)
08D9 C0E0      2316            push    acc
08DB 7480      2317            mov     a,#0x80
08DD C0E0      2318            push    acc
08DF 120100    2319            lcall   _printf
08E2 1581      2320            dec     sp
08E4 1581      2321            dec     sp
08E6 1581      2322            dec     sp
08E8           2323   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:612: PWMforward();
08E8 020100    2324            ljmp    _PWMforward
08EB           2325   ;------------------------------------------------------------
08EB           2326   ;Allocation info for local variables in function 'laserPattern'
08EB           2327   ;------------------------------------------------------------
08EB           2328   ;rate                      Allocated to registers r2 r3 
08EB           2329   ;------------------------------------------------------------
08EB           2330   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:619: void laserPattern(int rate){
08EB           2331   ;        -----------------------------------------
08EB           2332   ;         function laserPattern
08EB           2333   ;        -----------------------------------------
08EB           2334   _laserPattern:
08EB AA82      2335            mov     r2,dpl
08ED AB83      2336            mov     r3,dph
08EF           2337   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:620: LASER = 0;
08EF C2B0      2338            clr     _P3_0
08F1           2339   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:621: waitms(rate*1000);
08F1 8A00      2340            mov     __mulint_PARM_2,r2
08F3 8B01      2341            mov     (__mulint_PARM_2 + 1),r3
08F5 9003E8    2342            mov     dptr,#0x03E8
08F8 120100    2343            lcall   __mulint
08FB 120100    2344            lcall   _waitms
08FE           2345   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:622: LASER = 1;
08FE D2B0      2346            setb    _P3_0
0900 22        2347            ret
0901           2348   ;------------------------------------------------------------
0901           2349   ;Allocation info for local variables in function 'main'
0901           2350   ;------------------------------------------------------------
0901           2351   ;checkcommand              Allocated to registers 
0901           2352   ;sig1                      Allocated to registers 
0901           2353   ;sig2                      Allocated to registers 
0901           2354   ;peak                      Allocated to registers 
0901           2355   ;voltspeak                 Allocated to registers 
0901           2356   ;periodpwm                 Allocated to registers 
0901           2357   ;time                      Allocated to registers r4 r5 r6 r7 
0901           2358   ;period                    Allocated to registers r4 r5 r6 r7 
0901           2359   ;overflow_count            Allocated to registers r4 r5 
0901           2360   ;pir_voltage               Allocated to registers r2 r3 r4 r5 
0901           2361   ;mode_toggle               Allocated to registers r2 r3 
0901           2362   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0901           2363   ;------------------------------------------------------------
0901           2364   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:625: void main(void)
0901           2365   ;        -----------------------------------------
0901           2366   ;         function main
0901           2367   ;        -----------------------------------------
0901           2368   _main:
0901           2369   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:646: count20ms2 = 0;
0901 75A000    2370            mov     _count20ms2,#0x00
0904           2371   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:647: TL0=0;
0904 758A00    2372            mov     _TL0,#0x00
0907           2373   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:648: TH0=0;
0907 758C00    2374            mov     _TH0,#0x00
090A           2375   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:649: TF0=0;         
090A C28D      2376            clr     _TF0
090C           2377   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:650: TIMER0_Init();
090C 120100    2378            lcall   _TIMER0_Init
090F           2379   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:652: InitPinADC(1, 6); // Configure P2.5 as analog input
090F 75F006    2380            mov     _InitPinADC_PARM_2,#0x06
0912 758201    2381            mov     dpl,#0x01
0915 120100    2382            lcall   _InitPinADC
0918           2383   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:653: InitPinADC(2, 4);
0918 75F004    2384            mov     _InitPinADC_PARM_2,#0x04
091B 758202    2385            mov     dpl,#0x02
091E 120100    2386            lcall   _InitPinADC
0921           2387   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:654: InitPinADC(2, 5);
0921 75F005    2388            mov     _InitPinADC_PARM_2,#0x05
0924 758202    2389            mov     dpl,#0x02
0927 120100    2390            lcall   _InitPinADC
092A           2391   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:656: InitADC();
092A 120100    2392            lcall   _InitADC
092D           2393   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:660: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
092D 7408      2394            mov     a,#__str_4
092F C0E0      2395            push    acc
0931 74D2      2396            mov     a,#(__str_4 >> 8)
0933 C0E0      2397            push    acc
0935 7480      2398            mov     a,#0x80
0937 C0E0      2399            push    acc
0939 120100    2400            lcall   _printf
093C 1581      2401            dec     sp
093E 1581      2402            dec     sp
0940 1581      2403            dec     sp
0942           2404   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:662: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
0942 7448      2405            mov     a,#__str_5
0944 C0E0      2406            push    acc
0946 74D2      2407            mov     a,#(__str_5 >> 8)
0948 C0E0      2408            push    acc
094A 7480      2409            mov     a,#0x80
094C C0E0      2410            push    acc
094E 120100    2411            lcall   _printf
0951 1581      2412            dec     sp
0953 1581      2413            dec     sp
0955 1581      2414            dec     sp
0957           2415   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:664: printf("\n\r");
0957 7488      2416            mov     a,#__str_6
0959 C0E0      2417            push    acc
095B 74D2      2418            mov     a,#(__str_6 >> 8)
095D C0E0      2419            push    acc
095F 7480      2420            mov     a,#0x80
0961 C0E0      2421            push    acc
0963 120100    2422            lcall   _printf
0966 1581      2423            dec     sp
0968 1581      2424            dec     sp
096A 1581      2425            dec     sp
096C           2426   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:667: PWMStop();
096C 120100    2427            lcall   _PWMStop
096F           2428   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:669: while (1)
096F           2429   L026052?:
096F           2430   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:671: mode_toggle = checkMode();
096F 120100    2431            lcall   _checkMode
0972 AA82      2432            mov     r2,dpl
0974 AB83      2433            mov     r3,dph
0976           2434   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:674: if(mode_toggle == 0){
0976 EA        2435            mov     a,r2
0977 4B        2436            orl     a,r3
0978 6001      2437            jz      L026082?
097A 020100    2438            ljmp    L026049?
097D           2439   L026082?:
097D           2440   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:675: printf("auto \r\n");
097D 7488      2441            mov     a,#__str_7
097F C0E0      2442            push    acc
0981 74D3      2443            mov     a,#(__str_7 >> 8)
0983 C0E0      2444            push    acc
0985 7480      2445            mov     a,#0x80
0987 C0E0      2446            push    acc
0989 120100    2447            lcall   _printf
098C 1581      2448            dec     sp
098E 1581      2449            dec     sp
0990 1581      2450            dec     sp
0992           2451   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:677: TL0=0; 
0992 758A00    2452            mov     _TL0,#0x00
0995           2453   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:678: TH0=0;
0995 758C00    2454            mov     _TH0,#0x00
0998           2455   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:679: TF0=0;
0998 C28D      2456            clr     _TF0
099A           2457   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:681: while(P2_1!=0); // Wait for the signal to be zero
099A           2458   L026001?:
099A 20A1C8    2459            jb      _P2_1,L026001?
099D           2460   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:682: while(P2_1!=1); // Wait for the signal to be one
099D           2461   L026004?:
099D 30A108    2462            jnb     _P2_1,L026004?
09A0           2463   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:683: TR0=1; // Start the timer
09A0 D28C      2464            setb    _TR0
09A2           2465   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:684: while(P2_1!=0) // Wait for the signal to be zero
09A2 7C00      2466            mov     r4,#0x00
09A4 7D00      2467            mov     r5,#0x00
09A6           2468   L026009?:
09A6 30A188    2469            jnb     _P2_1,L026011?
09A9           2470   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:686: if(TF0==1) // Did the 16-bit timer overflow?
09A9           2471   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:688: TF0=0;
09A9 108DC8    2472            jbc     _TF0,L026086?
09AC 8001      2473            sjmp    L026009?
09AE           2474   L026086?:
09AE           2475   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:689: overflow_count++;
09AE 0C        2476            inc     r4
09AF BC0048    2477            cjne    r4,#0x00,L026009?
09B2 0D        2478            inc     r5
09B3 8001      2479            sjmp    L026009?
09B5           2480   L026011?:
09B5           2481   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:700: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
09B5 C28C      2482            clr     _TR0
09B7           2483   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:701: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
09B7 8C82      2484            mov     dpl,r4
09B9 8D83      2485            mov     dph,r5
09BB 120100    2486            lcall   ___sint2fs
09BE AC82      2487            mov     r4,dpl
09C0 AD83      2488            mov     r5,dph
09C2 AEF0      2489            mov     r6,b
09C4 FF        2490            mov     r7,a
09C5 C004      2491            push    ar4
09C7 C005      2492            push    ar5
09C9 C006      2493            push    ar6
09CB C007      2494            push    ar7
09CD 900000    2495            mov     dptr,#0x0000
09D0 75F080    2496            mov     b,#0x80
09D3 7447      2497            mov     a,#0x47
09D5 120100    2498            lcall   ___fsmul
09D8 858268    2499            mov     _main_sloc0_1_0,dpl
09DB 858369    2500            mov     (_main_sloc0_1_0 + 1),dph
09DE 85F06A    2501            mov     (_main_sloc0_1_0 + 2),b
09E1 F56B      2502            mov     (_main_sloc0_1_0 + 3),a
09E3 E581      2503            mov     a,sp
09E5 24FC      2504            add     a,#0xfc
09E7 F581      2505            mov     sp,a
09E9 858C82    2506            mov     dpl,_TH0
09EC 120100    2507            lcall   ___uchar2fs
09EF A882      2508            mov     r0,dpl
09F1 A983      2509            mov     r1,dph
09F3 ACF0      2510            mov     r4,b
09F5 FD        2511            mov     r5,a
09F6 C000      2512            push    ar0
09F8 C001      2513            push    ar1
09FA C004      2514            push    ar4
09FC C005      2515            push    ar5
09FE 900000    2516            mov     dptr,#0x0000
0A01 75F080    2517            mov     b,#0x80
0A04 7443      2518            mov     a,#0x43
0A06 120100    2519            lcall   ___fsmul
0A09 AC82      2520            mov     r4,dpl
0A0B AD83      2521            mov     r5,dph
0A0D AEF0      2522            mov     r6,b
0A0F FF        2523            mov     r7,a
0A10 E581      2524            mov     a,sp
0A12 24FC      2525            add     a,#0xfc
0A14 F581      2526            mov     sp,a
0A16 C004      2527            push    ar4
0A18 C005      2528            push    ar5
0A1A C006      2529            push    ar6
0A1C C007      2530            push    ar7
0A1E 856882    2531            mov     dpl,_main_sloc0_1_0
0A21 856983    2532            mov     dph,(_main_sloc0_1_0 + 1)
0A24 856AF0    2533            mov     b,(_main_sloc0_1_0 + 2)
0A27 E56B      2534            mov     a,(_main_sloc0_1_0 + 3)
0A29 120100    2535            lcall   ___fsadd
0A2C 858268    2536            mov     _main_sloc0_1_0,dpl
0A2F 858369    2537            mov     (_main_sloc0_1_0 + 1),dph
0A32 85F06A    2538            mov     (_main_sloc0_1_0 + 2),b
0A35 F56B      2539            mov     (_main_sloc0_1_0 + 3),a
0A37 E581      2540            mov     a,sp
0A39 24FC      2541            add     a,#0xfc
0A3B F581      2542            mov     sp,a
0A3D A88A      2543            mov     r0,_TL0
0A3F 7900      2544            mov     r1,#0x00
0A41 8882      2545            mov     dpl,r0
0A43 8983      2546            mov     dph,r1
0A45 120100    2547            lcall   ___sint2fs
0A48 A882      2548            mov     r0,dpl
0A4A A983      2549            mov     r1,dph
0A4C ACF0      2550            mov     r4,b
0A4E FD        2551            mov     r5,a
0A4F C000      2552            push    ar0
0A51 C001      2553            push    ar1
0A53 C004      2554            push    ar4
0A55 C005      2555            push    ar5
0A57 856882    2556            mov     dpl,_main_sloc0_1_0
0A5A 856983    2557            mov     dph,(_main_sloc0_1_0 + 1)
0A5D 856AF0    2558            mov     b,(_main_sloc0_1_0 + 2)
0A60 E56B      2559            mov     a,(_main_sloc0_1_0 + 3)
0A62 120100    2560            lcall   ___fsadd
0A65 AC82      2561            mov     r4,dpl
0A67 AD83      2562            mov     r5,dph
0A69 AEF0      2563            mov     r6,b
0A6B FF        2564            mov     r7,a
0A6C E581      2565            mov     a,sp
0A6E 24FC      2566            add     a,#0xfc
0A70 F581      2567            mov     sp,a
0A72 C004      2568            push    ar4
0A74 C005      2569            push    ar5
0A76 C006      2570            push    ar6
0A78 C007      2571            push    ar7
0A7A 90F4FC    2572            mov     dptr,#0xF4FC
0A7D 75F032    2573            mov     b,#0x32
0A80 7434      2574            mov     a,#0x34
0A82 120100    2575            lcall   ___fsmul
0A85 AC82      2576            mov     r4,dpl
0A87 AD83      2577            mov     r5,dph
0A89 AEF0      2578            mov     r6,b
0A8B FF        2579            mov     r7,a
0A8C E581      2580            mov     a,sp
0A8E 24FC      2581            add     a,#0xfc
0A90 F581      2582            mov     sp,a
0A92           2583   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:703: printf( "\rT=%f ms   \n ", period*1000.0);
0A92 C004      2584            push    ar4
0A94 C005      2585            push    ar5
0A96 C006      2586            push    ar6
0A98 C007      2587            push    ar7
0A9A 900000    2588            mov     dptr,#0x0000
0A9D 75F07A    2589            mov     b,#0x7A
0AA0 7444      2590            mov     a,#0x44
0AA2 120100    2591            lcall   ___fsmul
0AA5 AC82      2592            mov     r4,dpl
0AA7 AD83      2593            mov     r5,dph
0AA9 AEF0      2594            mov     r6,b
0AAB FF        2595            mov     r7,a
0AAC E581      2596            mov     a,sp
0AAE 24FC      2597            add     a,#0xfc
0AB0 F581      2598            mov     sp,a
0AB2 C004      2599            push    ar4
0AB4 C005      2600            push    ar5
0AB6 C006      2601            push    ar6
0AB8 C007      2602            push    ar7
0ABA C004      2603            push    ar4
0ABC C005      2604            push    ar5
0ABE C006      2605            push    ar6
0AC0 C007      2606            push    ar7
0AC2 7408      2607            mov     a,#__str_8
0AC4 C0E0      2608            push    acc
0AC6 74D5      2609            mov     a,#(__str_8 >> 8)
0AC8 C0E0      2610            push    acc
0ACA 7480      2611            mov     a,#0x80
0ACC C0E0      2612            push    acc
0ACE 120100    2613            lcall   _printf
0AD1 E581      2614            mov     a,sp
0AD3 24F9      2615            add     a,#0xf9
0AD5 F581      2616            mov     sp,a
0AD7           2617   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:704: waitms(50);
0AD7 900032    2618            mov     dptr,#0x0032
0ADA 120100    2619            lcall   _waitms
0ADD D007      2620            pop     ar7
0ADF D006      2621            pop     ar6
0AE1 D005      2622            pop     ar5
0AE3 D004      2623            pop     ar4
0AE5           2624   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:705: detectobstacle(period*1000.0);
0AE5 8C82      2625            mov     dpl,r4
0AE7 8D83      2626            mov     dph,r5
0AE9 8EF0      2627            mov     b,r6
0AEB EF        2628            mov     a,r7
0AEC C004      2629            push    ar4
0AEE C005      2630            push    ar5
0AF0 C006      2631            push    ar6
0AF2 C007      2632            push    ar7
0AF4 120100    2633            lcall   _detectobstacle
0AF7 D007      2634            pop     ar7
0AF9 D006      2635            pop     ar6
0AFB D005      2636            pop     ar5
0AFD D004      2637            pop     ar4
0AFF           2638   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:706: laserPattern(period*1000);
0AFF 8C82      2639            mov     dpl,r4
0B01 8D83      2640            mov     dph,r5
0B03 8EF0      2641            mov     b,r6
0B05 EF        2642            mov     a,r7
0B06 120100    2643            lcall   ___fs2sint
0B09 120100    2644            lcall   _laserPattern
0B0C           2645   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:715: waitms(50);    
0B0C 900032    2646            mov     dptr,#0x0032
0B0F 120100    2647            lcall   _waitms
0B12 020100    2648            ljmp    L026052?
0B15           2649   L026049?:
0B15           2650   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:719: else if(mode_toggle == 1){
0B15 BA0188    2651            cjne    r2,#0x01,L026087?
0B18 BB0088    2652            cjne    r3,#0x00,L026087?
0B1B 8001      2653            sjmp    L026088?
0B1D           2654   L026087?:
0B1D 020100    2655            ljmp    L026046?
0B20           2656   L026088?:
0B20           2657   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:720: printf("manual \r\n");
0B20 7448      2658            mov     a,#__str_9
0B22 C0E0      2659            push    acc
0B24 74D6      2660            mov     a,#(__str_9 >> 8)
0B26 C0E0      2661            push    acc
0B28 7480      2662            mov     a,#0x80
0B2A C0E0      2663            push    acc
0B2C 120100    2664            lcall   _printf
0B2F 1581      2665            dec     sp
0B31 1581      2666            dec     sp
0B33 1581      2667            dec     sp
0B35           2668   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:727: time=zero_time_calc(); 
0B35 120100    2669            lcall   _zero_time_calc
0B38 AC82      2670            mov     r4,dpl
0B3A AD83      2671            mov     r5,dph
0B3C AEF0      2672            mov     r6,b
0B3E FF        2673            mov     r7,a
0B3F           2674   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:728: printf("Time: %f\n\t\r", time);
0B3F C004      2675            push    ar4
0B41 C005      2676            push    ar5
0B43 C006      2677            push    ar6
0B45 C007      2678            push    ar7
0B47 C004      2679            push    ar4
0B49 C005      2680            push    ar5
0B4B C006      2681            push    ar6
0B4D C007      2682            push    ar7
0B4F 7488      2683            mov     a,#__str_10
0B51 C0E0      2684            push    acc
0B53 74D6      2685            mov     a,#(__str_10 >> 8)
0B55 C0E0      2686            push    acc
0B57 7480      2687            mov     a,#0x80
0B59 C0E0      2688            push    acc
0B5B 120100    2689            lcall   _printf
0B5E E581      2690            mov     a,sp
0B60 24F9      2691            add     a,#0xf9
0B62 F581      2692            mov     sp,a
0B64 D007      2693            pop     ar7
0B66 D006      2694            pop     ar6
0B68 D005      2695            pop     ar5
0B6A D004      2696            pop     ar4
0B6C           2697   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:731: if((time>=300 && time<=450)||(time>=1400 && time<=1500)||
0B6C C004      2698            push    ar4
0B6E C005      2699            push    ar5
0B70 C006      2700            push    ar6
0B72 C007      2701            push    ar7
0B74 E4        2702            clr     a
0B75 C0E0      2703            push    acc
0B77 C0E0      2704            push    acc
0B79 7496      2705            mov     a,#0x96
0B7B C0E0      2706            push    acc
0B7D 7443      2707            mov     a,#0x43
0B7F C0E0      2708            push    acc
0B81 8C82      2709            mov     dpl,r4
0B83 8D83      2710            mov     dph,r5
0B85 8EF0      2711            mov     b,r6
0B87 EF        2712            mov     a,r7
0B88 120100    2713            lcall   ___fslt
0B8B A882      2714            mov     r0,dpl
0B8D E581      2715            mov     a,sp
0B8F 24FC      2716            add     a,#0xfc
0B91 F581      2717            mov     sp,a
0B93 D007      2718            pop     ar7
0B95 D006      2719            pop     ar6
0B97 D005      2720            pop     ar5
0B99 D004      2721            pop     ar4
0B9B E8        2722            mov     a,r0
0B9C 7001      2723            jnz     L026032?
0B9E C004      2724            push    ar4
0BA0 C005      2725            push    ar5
0BA2 C006      2726            push    ar6
0BA4 C007      2727            push    ar7
0BA6 C000      2728            push    ar0
0BA8 E4        2729            clr     a
0BA9 C0E0      2730            push    acc
0BAB C0E0      2731            push    acc
0BAD 74E1      2732            mov     a,#0xE1
0BAF C0E0      2733            push    acc
0BB1 7443      2734            mov     a,#0x43
0BB3 C0E0      2735            push    acc
0BB5 8C82      2736            mov     dpl,r4
0BB7 8D83      2737            mov     dph,r5
0BB9 8EF0      2738            mov     b,r6
0BBB EF        2739            mov     a,r7
0BBC 120100    2740            lcall   ___fsgt
0BBF A982      2741            mov     r1,dpl
0BC1 E581      2742            mov     a,sp
0BC3 24FC      2743            add     a,#0xfc
0BC5 F581      2744            mov     sp,a
0BC7 D000      2745            pop     ar0
0BC9 D007      2746            pop     ar7
0BCB D006      2747            pop     ar6
0BCD D005      2748            pop     ar5
0BCF D004      2749            pop     ar4
0BD1 E9        2750            mov     a,r1
0BD2 7001      2751            jnz     L026090?
0BD4 020100    2752            ljmp    L026028?
0BD7           2753   L026090?:
0BD7           2754   L026032?:
0BD7 C004      2755            push    ar4
0BD9 C005      2756            push    ar5
0BDB C006      2757            push    ar6
0BDD C007      2758            push    ar7
0BDF C000      2759            push    ar0
0BE1 E4        2760            clr     a
0BE2 C0E0      2761            push    acc
0BE4 C0E0      2762            push    acc
0BE6 74AF      2763            mov     a,#0xAF
0BE8 C0E0      2764            push    acc
0BEA 7444      2765            mov     a,#0x44
0BEC C0E0      2766            push    acc
0BEE 8C82      2767            mov     dpl,r4
0BF0 8D83      2768            mov     dph,r5
0BF2 8EF0      2769            mov     b,r6
0BF4 EF        2770            mov     a,r7
0BF5 120100    2771            lcall   ___fslt
0BF8 A982      2772            mov     r1,dpl
0BFA E581      2773            mov     a,sp
0BFC 24FC      2774            add     a,#0xfc
0BFE F581      2775            mov     sp,a
0C00 D000      2776            pop     ar0
0C02 D007      2777            pop     ar7
0C04 D006      2778            pop     ar6
0C06 D005      2779            pop     ar5
0C08 D004      2780            pop     ar4
0C0A E9        2781            mov     a,r1
0C0B 7001      2782            jnz     L026034?
0C0D C004      2783            push    ar4
0C0F C005      2784            push    ar5
0C11 C006      2785            push    ar6
0C13 C007      2786            push    ar7
0C15 C000      2787            push    ar0
0C17 E4        2788            clr     a
0C18 C0E0      2789            push    acc
0C1A 7480      2790            mov     a,#0x80
0C1C C0E0      2791            push    acc
0C1E 74BB      2792            mov     a,#0xBB
0C20 C0E0      2793            push    acc
0C22 7444      2794            mov     a,#0x44
0C24 C0E0      2795            push    acc
0C26 8C82      2796            mov     dpl,r4
0C28 8D83      2797            mov     dph,r5
0C2A 8EF0      2798            mov     b,r6
0C2C EF        2799            mov     a,r7
0C2D 120100    2800            lcall   ___fsgt
0C30 A982      2801            mov     r1,dpl
0C32 E581      2802            mov     a,sp
0C34 24FC      2803            add     a,#0xfc
0C36 F581      2804            mov     sp,a
0C38 D000      2805            pop     ar0
0C3A D007      2806            pop     ar7
0C3C D006      2807            pop     ar6
0C3E D005      2808            pop     ar5
0C40 D004      2809            pop     ar4
0C42 E9        2810            mov     a,r1
0C43 7001      2811            jnz     L026092?
0C45 020100    2812            ljmp    L026028?
0C48           2813   L026092?:
0C48           2814   L026034?:
0C48           2815   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:732: (time>=1060 && time<=1090)||(time>=1780) || (time>=600 && time<=750) ){
0C48 C004      2816            push    ar4
0C4A C005      2817            push    ar5
0C4C C006      2818            push    ar6
0C4E C007      2819            push    ar7
0C50 C000      2820            push    ar0
0C52 E4        2821            clr     a
0C53 C0E0      2822            push    acc
0C55 7480      2823            mov     a,#0x80
0C57 C0E0      2824            push    acc
0C59 7484      2825            mov     a,#0x84
0C5B C0E0      2826            push    acc
0C5D 7444      2827            mov     a,#0x44
0C5F C0E0      2828            push    acc
0C61 8C82      2829            mov     dpl,r4
0C63 8D83      2830            mov     dph,r5
0C65 8EF0      2831            mov     b,r6
0C67 EF        2832            mov     a,r7
0C68 120100    2833            lcall   ___fslt
0C6B A982      2834            mov     r1,dpl
0C6D E581      2835            mov     a,sp
0C6F 24FC      2836            add     a,#0xfc
0C71 F581      2837            mov     sp,a
0C73 D000      2838            pop     ar0
0C75 D007      2839            pop     ar7
0C77 D006      2840            pop     ar6
0C79 D005      2841            pop     ar5
0C7B D004      2842            pop     ar4
0C7D E9        2843            mov     a,r1
0C7E 7001      2844            jnz     L026035?
0C80 C004      2845            push    ar4
0C82 C005      2846            push    ar5
0C84 C006      2847            push    ar6
0C86 C007      2848            push    ar7
0C88 C000      2849            push    ar0
0C8A E4        2850            clr     a
0C8B C0E0      2851            push    acc
0C8D 7440      2852            mov     a,#0x40
0C8F C0E0      2853            push    acc
0C91 7488      2854            mov     a,#0x88
0C93 C0E0      2855            push    acc
0C95 7444      2856            mov     a,#0x44
0C97 C0E0      2857            push    acc
0C99 8C82      2858            mov     dpl,r4
0C9B 8D83      2859            mov     dph,r5
0C9D 8EF0      2860            mov     b,r6
0C9F EF        2861            mov     a,r7
0CA0 120100    2862            lcall   ___fsgt
0CA3 A982      2863            mov     r1,dpl
0CA5 E581      2864            mov     a,sp
0CA7 24FC      2865            add     a,#0xfc
0CA9 F581      2866            mov     sp,a
0CAB D000      2867            pop     ar0
0CAD D007      2868            pop     ar7
0CAF D006      2869            pop     ar6
0CB1 D005      2870            pop     ar5
0CB3 D004      2871            pop     ar4
0CB5 E9        2872            mov     a,r1
0CB6 7001      2873            jnz     L026094?
0CB8 020100    2874            ljmp    L026028?
0CBB           2875   L026094?:
0CBB           2876   L026035?:
0CBB C004      2877            push    ar4
0CBD C005      2878            push    ar5
0CBF C006      2879            push    ar6
0CC1 C007      2880            push    ar7
0CC3 C000      2881            push    ar0
0CC5 E4        2882            clr     a
0CC6 C0E0      2883            push    acc
0CC8 7480      2884            mov     a,#0x80
0CCA C0E0      2885            push    acc
0CCC 74DE      2886            mov     a,#0xDE
0CCE C0E0      2887            push    acc
0CD0 7444      2888            mov     a,#0x44
0CD2 C0E0      2889            push    acc
0CD4 8C82      2890            mov     dpl,r4
0CD6 8D83      2891            mov     dph,r5
0CD8 8EF0      2892            mov     b,r6
0CDA EF        2893            mov     a,r7
0CDB 120100    2894            lcall   ___fslt
0CDE A982      2895            mov     r1,dpl
0CE0 E581      2896            mov     a,sp
0CE2 24FC      2897            add     a,#0xfc
0CE4 F581      2898            mov     sp,a
0CE6 D000      2899            pop     ar0
0CE8 D007      2900            pop     ar7
0CEA D006      2901            pop     ar6
0CEC D005      2902            pop     ar5
0CEE D004      2903            pop     ar4
0CF0 E9        2904            mov     a,r1
0CF1 6001      2905            jz      L026028?
0CF3 C004      2906            push    ar4
0CF5 C005      2907            push    ar5
0CF7 C006      2908            push    ar6
0CF9 C007      2909            push    ar7
0CFB C000      2910            push    ar0
0CFD E4        2911            clr     a
0CFE C0E0      2912            push    acc
0D00 C0E0      2913            push    acc
0D02 7416      2914            mov     a,#0x16
0D04 C0E0      2915            push    acc
0D06 7444      2916            mov     a,#0x44
0D08 C0E0      2917            push    acc
0D0A 8C82      2918            mov     dpl,r4
0D0C 8D83      2919            mov     dph,r5
0D0E 8EF0      2920            mov     b,r6
0D10 EF        2921            mov     a,r7
0D11 120100    2922            lcall   ___fslt
0D14 A982      2923            mov     r1,dpl
0D16 E581      2924            mov     a,sp
0D18 24FC      2925            add     a,#0xfc
0D1A F581      2926            mov     sp,a
0D1C D000      2927            pop     ar0
0D1E D007      2928            pop     ar7
0D20 D006      2929            pop     ar6
0D22 D005      2930            pop     ar5
0D24 D004      2931            pop     ar4
0D26 E9        2932            mov     a,r1
0D27 6001      2933            jz      L026096?
0D29 020100    2934            ljmp    L026052?
0D2C           2935   L026096?:
0D2C C004      2936            push    ar4
0D2E C005      2937            push    ar5
0D30 C006      2938            push    ar6
0D32 C007      2939            push    ar7
0D34 C000      2940            push    ar0
0D36 E4        2941            clr     a
0D37 C0E0      2942            push    acc
0D39 7480      2943            mov     a,#0x80
0D3B C0E0      2944            push    acc
0D3D 743B      2945            mov     a,#0x3B
0D3F C0E0      2946            push    acc
0D41 7444      2947            mov     a,#0x44
0D43 C0E0      2948            push    acc
0D45 8C82      2949            mov     dpl,r4
0D47 8D83      2950            mov     dph,r5
0D49 8EF0      2951            mov     b,r6
0D4B EF        2952            mov     a,r7
0D4C 120100    2953            lcall   ___fsgt
0D4F A982      2954            mov     r1,dpl
0D51 E581      2955            mov     a,sp
0D53 24FC      2956            add     a,#0xfc
0D55 F581      2957            mov     sp,a
0D57 D000      2958            pop     ar0
0D59 D007      2959            pop     ar7
0D5B D006      2960            pop     ar6
0D5D D005      2961            pop     ar5
0D5F D004      2962            pop     ar4
0D61 E9        2963            mov     a,r1
0D62 6001      2964            jz      L026097?
0D64 020100    2965            ljmp    L026052?
0D67           2966   L026097?:
0D67           2967   L026028?:
0D67           2968   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:733: if(time>=1400 && time<=1500){
0D67 C004      2969            push    ar4
0D69 C005      2970            push    ar5
0D6B C006      2971            push    ar6
0D6D C007      2972            push    ar7
0D6F C000      2973            push    ar0
0D71 E4        2974            clr     a
0D72 C0E0      2975            push    acc
0D74 C0E0      2976            push    acc
0D76 74AF      2977            mov     a,#0xAF
0D78 C0E0      2978            push    acc
0D7A 7444      2979            mov     a,#0x44
0D7C C0E0      2980            push    acc
0D7E 8C82      2981            mov     dpl,r4
0D80 8D83      2982            mov     dph,r5
0D82 8EF0      2983            mov     b,r6
0D84 EF        2984            mov     a,r7
0D85 120100    2985            lcall   ___fslt
0D88 A982      2986            mov     r1,dpl
0D8A E581      2987            mov     a,sp
0D8C 24FC      2988            add     a,#0xfc
0D8E F581      2989            mov     sp,a
0D90 D000      2990            pop     ar0
0D92 D007      2991            pop     ar7
0D94 D006      2992            pop     ar6
0D96 D005      2993            pop     ar5
0D98 D004      2994            pop     ar4
0D9A E9        2995            mov     a,r1
0D9B 7001      2996            jnz     L026025?
0D9D C004      2997            push    ar4
0D9F C005      2998            push    ar5
0DA1 C006      2999            push    ar6
0DA3 C007      3000            push    ar7
0DA5 C000      3001            push    ar0
0DA7 E4        3002            clr     a
0DA8 C0E0      3003            push    acc
0DAA 7480      3004            mov     a,#0x80
0DAC C0E0      3005            push    acc
0DAE 74BB      3006            mov     a,#0xBB
0DB0 C0E0      3007            push    acc
0DB2 7444      3008            mov     a,#0x44
0DB4 C0E0      3009            push    acc
0DB6 8C82      3010            mov     dpl,r4
0DB8 8D83      3011            mov     dph,r5
0DBA 8EF0      3012            mov     b,r6
0DBC EF        3013            mov     a,r7
0DBD 120100    3014            lcall   ___fsgt
0DC0 A982      3015            mov     r1,dpl
0DC2 E581      3016            mov     a,sp
0DC4 24FC      3017            add     a,#0xfc
0DC6 F581      3018            mov     sp,a
0DC8 D000      3019            pop     ar0
0DCA D007      3020            pop     ar7
0DCC D006      3021            pop     ar6
0DCE D005      3022            pop     ar5
0DD0 D004      3023            pop     ar4
0DD2 E9        3024            mov     a,r1
0DD3 7001      3025            jnz     L026025?
0DD5           3026   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:734: printf("RIGHT\n\r");
0DD5 7448      3027            mov     a,#__str_11
0DD7 C0E0      3028            push    acc
0DD9 74D9      3029            mov     a,#(__str_11 >> 8)
0DDB C0E0      3030            push    acc
0DDD 7480      3031            mov     a,#0x80
0DDF C0E0      3032            push    acc
0DE1 120100    3033            lcall   _printf
0DE4 1581      3034            dec     sp
0DE6 1581      3035            dec     sp
0DE8 1581      3036            dec     sp
0DEA           3037   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:735: PWMRight();
0DEA 120100    3038            lcall   _PWMRight
0DED 020100    3039            ljmp    L026052?
0DF0           3040   L026025?:
0DF0           3041   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:737: else if(time>=300 && time<=450){
0DF0 E8        3042            mov     a,r0
0DF1 7001      3043            jnz     L026021?
0DF3 C004      3044            push    ar4
0DF5 C005      3045            push    ar5
0DF7 C006      3046            push    ar6
0DF9 C007      3047            push    ar7
0DFB E4        3048            clr     a
0DFC C0E0      3049            push    acc
0DFE C0E0      3050            push    acc
0E00 74E1      3051            mov     a,#0xE1
0E02 C0E0      3052            push    acc
0E04 7443      3053            mov     a,#0x43
0E06 C0E0      3054            push    acc
0E08 8C82      3055            mov     dpl,r4
0E0A 8D83      3056            mov     dph,r5
0E0C 8EF0      3057            mov     b,r6
0E0E EF        3058            mov     a,r7
0E0F 120100    3059            lcall   ___fsgt
0E12 A882      3060            mov     r0,dpl
0E14 E581      3061            mov     a,sp
0E16 24FC      3062            add     a,#0xfc
0E18 F581      3063            mov     sp,a
0E1A D007      3064            pop     ar7
0E1C D006      3065            pop     ar6
0E1E D005      3066            pop     ar5
0E20 D004      3067            pop     ar4
0E22 E8        3068            mov     a,r0
0E23 7001      3069            jnz     L026021?
0E25           3070   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:738: printf("FORWARD\n\r");
0E25 74C8      3071            mov     a,#__str_12
0E27 C0E0      3072            push    acc
0E29 74D9      3073            mov     a,#(__str_12 >> 8)
0E2B C0E0      3074            push    acc
0E2D 7480      3075            mov     a,#0x80
0E2F C0E0      3076            push    acc
0E31 120100    3077            lcall   _printf
0E34 1581      3078            dec     sp
0E36 1581      3079            dec     sp
0E38 1581      3080            dec     sp
0E3A           3081   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:739: PWMforward();
0E3A 120100    3082            lcall   _PWMforward
0E3D 020100    3083            ljmp    L026052?
0E40           3084   L026021?:
0E40           3085   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:741: else if(time>=600 && time<=750){
0E40 C004      3086            push    ar4
0E42 C005      3087            push    ar5
0E44 C006      3088            push    ar6
0E46 C007      3089            push    ar7
0E48 E4        3090            clr     a
0E49 C0E0      3091            push    acc
0E4B C0E0      3092            push    acc
0E4D 7416      3093            mov     a,#0x16
0E4F C0E0      3094            push    acc
0E51 7444      3095            mov     a,#0x44
0E53 C0E0      3096            push    acc
0E55 8C82      3097            mov     dpl,r4
0E57 8D83      3098            mov     dph,r5
0E59 8EF0      3099            mov     b,r6
0E5B EF        3100            mov     a,r7
0E5C 120100    3101            lcall   ___fslt
0E5F A882      3102            mov     r0,dpl
0E61 E581      3103            mov     a,sp
0E63 24FC      3104            add     a,#0xfc
0E65 F581      3105            mov     sp,a
0E67 D007      3106            pop     ar7
0E69 D006      3107            pop     ar6
0E6B D005      3108            pop     ar5
0E6D D004      3109            pop     ar4
0E6F E8        3110            mov     a,r0
0E70 7001      3111            jnz     L026017?
0E72 C004      3112            push    ar4
0E74 C005      3113            push    ar5
0E76 C006      3114            push    ar6
0E78 C007      3115            push    ar7
0E7A E4        3116            clr     a
0E7B C0E0      3117            push    acc
0E7D 7480      3118            mov     a,#0x80
0E7F C0E0      3119            push    acc
0E81 743B      3120            mov     a,#0x3B
0E83 C0E0      3121            push    acc
0E85 7444      3122            mov     a,#0x44
0E87 C0E0      3123            push    acc
0E89 8C82      3124            mov     dpl,r4
0E8B 8D83      3125            mov     dph,r5
0E8D 8EF0      3126            mov     b,r6
0E8F EF        3127            mov     a,r7
0E90 120100    3128            lcall   ___fsgt
0E93 A882      3129            mov     r0,dpl
0E95 E581      3130            mov     a,sp
0E97 24FC      3131            add     a,#0xfc
0E99 F581      3132            mov     sp,a
0E9B D007      3133            pop     ar7
0E9D D006      3134            pop     ar6
0E9F D005      3135            pop     ar5
0EA1 D004      3136            pop     ar4
0EA3 E8        3137            mov     a,r0
0EA4 7001      3138            jnz     L026017?
0EA6           3139   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:742: printf("BACKWARD\n\r");
0EA6 7448      3140            mov     a,#__str_13
0EA8 C0E0      3141            push    acc
0EAA 74DA      3142            mov     a,#(__str_13 >> 8)
0EAC C0E0      3143            push    acc
0EAE 7480      3144            mov     a,#0x80
0EB0 C0E0      3145            push    acc
0EB2 120100    3146            lcall   _printf
0EB5 1581      3147            dec     sp
0EB7 1581      3148            dec     sp
0EB9 1581      3149            dec     sp
0EBB           3150   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:743: PWMbackward();
0EBB 120100    3151            lcall   _PWMbackward
0EBE 020100    3152            ljmp    L026052?
0EC1           3153   L026017?:
0EC1           3154   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:745: else if(time>=1060 && time<=1090){
0EC1 C004      3155            push    ar4
0EC3 C005      3156            push    ar5
0EC5 C006      3157            push    ar6
0EC7 C007      3158            push    ar7
0EC9 E4        3159            clr     a
0ECA C0E0      3160            push    acc
0ECC 7480      3161            mov     a,#0x80
0ECE C0E0      3162            push    acc
0ED0 7484      3163            mov     a,#0x84
0ED2 C0E0      3164            push    acc
0ED4 7444      3165            mov     a,#0x44
0ED6 C0E0      3166            push    acc
0ED8 8C82      3167            mov     dpl,r4
0EDA 8D83      3168            mov     dph,r5
0EDC 8EF0      3169            mov     b,r6
0EDE EF        3170            mov     a,r7
0EDF 120100    3171            lcall   ___fslt
0EE2 A882      3172            mov     r0,dpl
0EE4 E581      3173            mov     a,sp
0EE6 24FC      3174            add     a,#0xfc
0EE8 F581      3175            mov     sp,a
0EEA D007      3176            pop     ar7
0EEC D006      3177            pop     ar6
0EEE D005      3178            pop     ar5
0EF0 D004      3179            pop     ar4
0EF2 E8        3180            mov     a,r0
0EF3 7001      3181            jnz     L026013?
0EF5 C0E0      3182            push    acc
0EF7 7440      3183            mov     a,#0x40
0EF9 C0E0      3184            push    acc
0EFB 7488      3185            mov     a,#0x88
0EFD C0E0      3186            push    acc
0EFF 7444      3187            mov     a,#0x44
0F01 C0E0      3188            push    acc
0F03 8C82      3189            mov     dpl,r4
0F05 8D83      3190            mov     dph,r5
0F07 8EF0      3191            mov     b,r6
0F09 EF        3192            mov     a,r7
0F0A 120100    3193            lcall   ___fsgt
0F0D AC82      3194            mov     r4,dpl
0F0F E581      3195            mov     a,sp
0F11 24FC      3196            add     a,#0xfc
0F13 F581      3197            mov     sp,a
0F15 EC        3198            mov     a,r4
0F16 7001      3199            jnz     L026013?
0F18           3200   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:746: printf("LEFT\n\r");
0F18 74C8      3201            mov     a,#__str_14
0F1A C0E0      3202            push    acc
0F1C 74DA      3203            mov     a,#(__str_14 >> 8)
0F1E C0E0      3204            push    acc
0F20 7480      3205            mov     a,#0x80
0F22 C0E0      3206            push    acc
0F24 120100    3207            lcall   _printf
0F27 1581      3208            dec     sp
0F29 1581      3209            dec     sp
0F2B 1581      3210            dec     sp
0F2D           3211   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:747: PWMLeft();
0F2D 120100    3212            lcall   _PWMLeft
0F30 020100    3213            ljmp    L026052?
0F33           3214   L026013?:
0F33           3215   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:750: {      printf("STOP\n\r");
0F33 7408      3216            mov     a,#__str_15
0F35 C0E0      3217            push    acc
0F37 74DB      3218            mov     a,#(__str_15 >> 8)
0F39 C0E0      3219            push    acc
0F3B 7480      3220            mov     a,#0x80
0F3D C0E0      3221            push    acc
0F3F 120100    3222            lcall   _printf
0F42 1581      3223            dec     sp
0F44 1581      3224            dec     sp
0F46 1581      3225            dec     sp
0F48           3226   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:751: PWMStop();
0F48 120100    3227            lcall   _PWMStop
0F4B 020100    3228            ljmp    L026052?
0F4E           3229   L026046?:
0F4E           3230   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:755: else if( mode_toggle == 3){
0F4E BA0348    3231            cjne    r2,#0x03,L026043?
0F51 BB0048    3232            cjne    r3,#0x00,L026043?
0F54           3233   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:756: pir_voltage = Volts_at_Pin(QFP32_MUX_P2_4);
0F54 758211    3234            mov     dpl,#0x11
0F57 120100    3235            lcall   _Volts_at_Pin
0F5A AA82      3236            mov     r2,dpl
0F5C AB83      3237            mov     r3,dph
0F5E ACF0      3238            mov     r4,b
0F60 FD        3239            mov     r5,a
0F61           3240   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:757: if(pir_voltage >= 3.0 && pir_voltage <= 3.4)
0F61 C002      3241            push    ar2
0F63 C003      3242            push    ar3
0F65 C004      3243            push    ar4
0F67 C005      3244            push    ar5
0F69 E4        3245            clr     a
0F6A C0E0      3246            push    acc
0F6C C0E0      3247            push    acc
0F6E 7440      3248            mov     a,#0x40
0F70 C0E0      3249            push    acc
0F72 C0E0      3250            push    acc
0F74 8A82      3251            mov     dpl,r2
0F76 8B83      3252            mov     dph,r3
0F78 8CF0      3253            mov     b,r4
0F7A ED        3254            mov     a,r5
0F7B 120100    3255            lcall   ___fslt
0F7E AE82      3256            mov     r6,dpl
0F80 E581      3257            mov     a,sp
0F82 24FC      3258            add     a,#0xfc
0F84 F581      3259            mov     sp,a
0F86 D005      3260            pop     ar5
0F88 D004      3261            pop     ar4
0F8A D003      3262            pop     ar3
0F8C D002      3263            pop     ar2
0F8E EE        3264            mov     a,r6
0F8F 7001      3265            jnz     L026039?
0F91 749A      3266            mov     a,#0x9A
0F93 C0E0      3267            push    acc
0F95 7499      3268            mov     a,#0x99
0F97 C0E0      3269            push    acc
0F99 7459      3270            mov     a,#0x59
0F9B C0E0      3271            push    acc
0F9D 7440      3272            mov     a,#0x40
0F9F C0E0      3273            push    acc
0FA1 8A82      3274            mov     dpl,r2
0FA3 8B83      3275            mov     dph,r3
0FA5 8CF0      3276            mov     b,r4
0FA7 ED        3277            mov     a,r5
0FA8 120100    3278            lcall   ___fsgt
0FAB AA82      3279            mov     r2,dpl
0FAD E581      3280            mov     a,sp
0FAF 24FC      3281            add     a,#0xfc
0FB1 F581      3282            mov     sp,a
0FB3 EA        3283            mov     a,r2
0FB4 7001      3284            jnz     L026039?
0FB6           3285   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:758: PWMStop();
0FB6 120100    3286            lcall   _PWMStop
0FB9 8001      3287            sjmp    L026040?
0FBB           3288   L026039?:
0FBB           3289   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:760: PWMforward();
0FBB 120100    3290            lcall   _PWMforward
0FBE           3291   L026040?:
0FBE           3292   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:761: waitms(100);
0FBE 900064    3293            mov     dptr,#0x0064
0FC1 120100    3294            lcall   _waitms
0FC4 020100    3295            ljmp    L026052?
0FC7           3296   L026043?:
0FC7           3297   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:804: printf("Do nothing\r\n");      
0FC7 7408      3298            mov     a,#__str_16
0FC9 C0E0      3299            push    acc
0FCB 74DC      3300            mov     a,#(__str_16 >> 8)
0FCD C0E0      3301            push    acc
0FCF 7480      3302            mov     a,#0x80
0FD1 C0E0      3303            push    acc
0FD3 120100    3304            lcall   _printf
0FD6 1581      3305            dec     sp
0FD8 1581      3306            dec     sp
0FDA 1581      3307            dec     sp
0FDC 020100    3308            ljmp    L026052?
0FDF           3309            rseg R_CSEG
0FDF           3310   
0000           3311            rseg R_XINIT
0000           3312   
0000           3313            rseg R_CONST
0000           3314   __str_0:
0000 0A        3315            db 0x0A
0001 72656164  3316            db 'read 1:  at pin 1.6: %f'
     20313A20
     20617420
     70696E20
     312E363A
     202566
0018 0D        3317            db 0x0D
0019 00        3318            db 0x00
001A           3319   __str_1:
001A 0A        3320            db 0x0A
001B 72656164  3321            db 'read 0: Volt at pin 1.6: %f'
     20303A20
     566F6C74
     20617420
     70696E20
     312E363A
     202566
0036 0D        3322            db 0x0D
0037 00        3323            db 0x00
0038           3324   __str_2:
0038 5475726E  3325            db 'Turn right '
     20726967
     687420
0043 0D        3326            db 0x0D
0044 0A        3327            db 0x0A
0045 00        3328            db 0x00
0046           3329   __str_3:
0046 476F2053  3330            db 'Go Straight '
     74726169
     67687420
0052 0D        3331            db 0x0D
0053 0A        3332            db 0x0A
0054 00        3333            db 0x00
0055           3334   __str_4:
0055 1B        3335            db 0x1B
0056 5B324A    3336            db '[2J'
0059 00        3337            db 0x00
005A           3338   __str_5:
005A 53717561  3339            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0080 0D        3340            db 0x0D
0081 0A        3341            db 0x0A
0082 43686563  3342            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0096 50322E31  3343            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00B1 0D        3344            db 0x0D
00B2 0A        3345            db 0x0A
00B3 00        3346            db 0x00
00B4           3347   __str_6:
00B4 0A        3348            db 0x0A
00B5 0D        3349            db 0x0D
00B6 00        3350            db 0x00
00B7           3351   __str_7:
00B7 6175746F  3352            db 'auto '
     20
00BC 0D        3353            db 0x0D
00BD 0A        3354            db 0x0A
00BE 00        3355            db 0x00
00BF           3356   __str_8:
00BF 0D        3357            db 0x0D
00C0 543D2566  3358            db 'T=%f ms   '
     206D7320
     2020
00CA 0A        3359            db 0x0A
00CB 20        3360            db ' '
00CC 00        3361            db 0x00
00CD           3362   __str_9:
00CD 6D616E75  3363            db 'manual '
     616C20
00D4 0D        3364            db 0x0D
00D5 0A        3365            db 0x0A
00D6 00        3366            db 0x00
00D7           3367   __str_10:
00D7 54696D65  3368            db 'Time: %f'
     3A202566
00DF 0A        3369            db 0x0A
00E0 09        3370            db 0x09
00E1 0D        3371            db 0x0D
00E2 00        3372            db 0x00
00E3           3373   __str_11:
00E3 52494748  3374            db 'RIGHT'
     54
00E8 0A        3375            db 0x0A
00E9 0D        3376            db 0x0D
00EA 00        3377            db 0x00
00EB           3378   __str_12:
00EB 464F5257  3379            db 'FORWARD'
     415244
00F2 0A        3380            db 0x0A
00F3 0D        3381            db 0x0D
00F4 00        3382            db 0x00
00F5           3383   __str_13:
00F5 4241434B  3384            db 'BACKWARD'
     57415244
00FD 0A        3385            db 0x0A
00FE 0D        3386            db 0x0D
00FF 00        3387            db 0x00
0100           3388   __str_14:
0100 4C454654  3389            db 'LEFT'
0104 0A        3390            db 0x0A
0105 0D        3391            db 0x0D
0106 00        3392            db 0x00
0107           3393   __str_15:
0107 53544F50  3394            db 'STOP'
010B 0A        3395            db 0x0A
010C 0D        3396            db 0x0D
010D 00        3397            db 0x00
010E           3398   __str_16:
010E 446F206E  3399            db 'Do nothing'
     6F746869
     6E67
0118 0D        3400            db 0x0D
0119 0A        3401            db 0x0A
011A 00        3402            db 0x00
011B           3403   
002E           3404            CSEG
002E           3405   
002E           3406   end
