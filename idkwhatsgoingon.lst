0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 02 16:58:32 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _detectobstacle
0000             32            public _checkMode
0000             33            public _recieveData
0000             34            public _waitquarterperiod
0000             35            public _getDigitalSignal
0000             36            public _voltsAtPeak
0000             37            public _checkCommands
0000             38            public _arrayEqual
0000             39            public _zero_time_calc
0000             40            public _PWMStop
0000             41            public _PWMRight
0000             42            public _PWMLeft
0000             43            public _PWMbackward
0000             44            public _PWMforward
0000             45            public _InitPinADC
0000             46            public _Volts_at_Pin
0000             47            public _TIMER0_Init
0000             48            public _InitADC
0000             49            public _Timer2_ISR
0000             50            public _ADC_at_Pin
0000             51            public _waitms
0000             52            public _Timer3us
0000             53            public __c51_external_startup
0000             54            public _x
0000             55            public _command
0000             56            public _right
0000             57            public _left
0000             58            public _backward
0000             59            public _forward
0000             60            public _stop
0000             61            public _claw_flag
0000             62            public _flag
0000             63            public _cartMoveB
0000             64            public _cartMoveF
0000             65            public _pwmSig6
0000             66            public _pwmSig5
0000             67            public _pwmSig4
0000             68            public _pwmSig3
0000             69            public _pwmSig2
0000             70            public _pwmSig1
0000             71            public _pwm_count3
0000             72            public _pwm_count2
0000             73            public _pwm_count1
0000             74            public _pwm_count
0000             75   ;--------------------------------------------------------
0000             76   ; Special Function Registers
0000             77   ;--------------------------------------------------------
0000             78   _ACC            DATA 0xe0
0000             79   _ADC0ASAH       DATA 0xb6
0000             80   _ADC0ASAL       DATA 0xb5
0000             81   _ADC0ASCF       DATA 0xa1
0000             82   _ADC0ASCT       DATA 0xc7
0000             83   _ADC0CF0        DATA 0xbc
0000             84   _ADC0CF1        DATA 0xb9
0000             85   _ADC0CF2        DATA 0xdf
0000             86   _ADC0CN0        DATA 0xe8
0000             87   _ADC0CN1        DATA 0xb2
0000             88   _ADC0CN2        DATA 0xb3
0000             89   _ADC0GTH        DATA 0xc4
0000             90   _ADC0GTL        DATA 0xc3
0000             91   _ADC0H          DATA 0xbe
0000             92   _ADC0L          DATA 0xbd
0000             93   _ADC0LTH        DATA 0xc6
0000             94   _ADC0LTL        DATA 0xc5
0000             95   _ADC0MX         DATA 0xbb
0000             96   _B              DATA 0xf0
0000             97   _CKCON0         DATA 0x8e
0000             98   _CKCON1         DATA 0xa6
0000             99   _CLEN0          DATA 0xc6
0000            100   _CLIE0          DATA 0xc7
0000            101   _CLIF0          DATA 0xe8
0000            102   _CLKSEL         DATA 0xa9
0000            103   _CLOUT0         DATA 0xd1
0000            104   _CLU0CF         DATA 0xb1
0000            105   _CLU0FN         DATA 0xaf
0000            106   _CLU0MX         DATA 0x84
0000            107   _CLU1CF         DATA 0xb3
0000            108   _CLU1FN         DATA 0xb2
0000            109   _CLU1MX         DATA 0x85
0000            110   _CLU2CF         DATA 0xb6
0000            111   _CLU2FN         DATA 0xb5
0000            112   _CLU2MX         DATA 0x91
0000            113   _CLU3CF         DATA 0xbf
0000            114   _CLU3FN         DATA 0xbe
0000            115   _CLU3MX         DATA 0xae
0000            116   _CMP0CN0        DATA 0x9b
0000            117   _CMP0CN1        DATA 0x99
0000            118   _CMP0MD         DATA 0x9d
0000            119   _CMP0MX         DATA 0x9f
0000            120   _CMP1CN0        DATA 0xbf
0000            121   _CMP1CN1        DATA 0xac
0000            122   _CMP1MD         DATA 0xab
0000            123   _CMP1MX         DATA 0xaa
0000            124   _CRC0CN0        DATA 0xce
0000            125   _CRC0CN1        DATA 0x86
0000            126   _CRC0CNT        DATA 0xd3
0000            127   _CRC0DAT        DATA 0xcb
0000            128   _CRC0FLIP       DATA 0xcf
0000            129   _CRC0IN         DATA 0xca
0000            130   _CRC0ST         DATA 0xd2
0000            131   _DAC0CF0        DATA 0x91
0000            132   _DAC0CF1        DATA 0x92
0000            133   _DAC0H          DATA 0x85
0000            134   _DAC0L          DATA 0x84
0000            135   _DAC1CF0        DATA 0x93
0000            136   _DAC1CF1        DATA 0x94
0000            137   _DAC1H          DATA 0x8a
0000            138   _DAC1L          DATA 0x89
0000            139   _DAC2CF0        DATA 0x95
0000            140   _DAC2CF1        DATA 0x96
0000            141   _DAC2H          DATA 0x8c
0000            142   _DAC2L          DATA 0x8b
0000            143   _DAC3CF0        DATA 0x9a
0000            144   _DAC3CF1        DATA 0x9c
0000            145   _DAC3H          DATA 0x8e
0000            146   _DAC3L          DATA 0x8d
0000            147   _DACGCF0        DATA 0x88
0000            148   _DACGCF1        DATA 0x98
0000            149   _DACGCF2        DATA 0xa2
0000            150   _DERIVID        DATA 0xad
0000            151   _DEVICEID       DATA 0xb5
0000            152   _DPH            DATA 0x83
0000            153   _DPL            DATA 0x82
0000            154   _EIE1           DATA 0xe6
0000            155   _EIE2           DATA 0xf3
0000            156   _EIP1           DATA 0xbb
0000            157   _EIP1H          DATA 0xee
0000            158   _EIP2           DATA 0xed
0000            159   _EIP2H          DATA 0xf6
0000            160   _EMI0CN         DATA 0xe7
0000            161   _FLKEY          DATA 0xb7
0000            162   _HFO0CAL        DATA 0xc7
0000            163   _HFO1CAL        DATA 0xd6
0000            164   _HFOCN          DATA 0xef
0000            165   _I2C0ADM        DATA 0xff
0000            166   _I2C0CN0        DATA 0xba
0000            167   _I2C0DIN        DATA 0xbc
0000            168   _I2C0DOUT       DATA 0xbb
0000            169   _I2C0FCN0       DATA 0xad
0000            170   _I2C0FCN1       DATA 0xab
0000            171   _I2C0FCT        DATA 0xf5
0000            172   _I2C0SLAD       DATA 0xbd
0000            173   _I2C0STAT       DATA 0xb9
0000            174   _IE             DATA 0xa8
0000            175   _IP             DATA 0xb8
0000            176   _IPH            DATA 0xf2
0000            177   _IT01CF         DATA 0xe4
0000            178   _LFO0CN         DATA 0xb1
0000            179   _P0             DATA 0x80
0000            180   _P0MASK         DATA 0xfe
0000            181   _P0MAT          DATA 0xfd
0000            182   _P0MDIN         DATA 0xf1
0000            183   _P0MDOUT        DATA 0xa4
0000            184   _P0SKIP         DATA 0xd4
0000            185   _P1             DATA 0x90
0000            186   _P1MASK         DATA 0xee
0000            187   _P1MAT          DATA 0xed
0000            188   _P1MDIN         DATA 0xf2
0000            189   _P1MDOUT        DATA 0xa5
0000            190   _P1SKIP         DATA 0xd5
0000            191   _P2             DATA 0xa0
0000            192   _P2MASK         DATA 0xfc
0000            193   _P2MAT          DATA 0xfb
0000            194   _P2MDIN         DATA 0xf3
0000            195   _P2MDOUT        DATA 0xa6
0000            196   _P2SKIP         DATA 0xcc
0000            197   _P3             DATA 0xb0
0000            198   _P3MDIN         DATA 0xf4
0000            199   _P3MDOUT        DATA 0x9c
0000            200   _PCA0CENT       DATA 0x9e
0000            201   _PCA0CLR        DATA 0x9c
0000            202   _PCA0CN0        DATA 0xd8
0000            203   _PCA0CPH0       DATA 0xfc
0000            204   _PCA0CPH1       DATA 0xea
0000            205   _PCA0CPH2       DATA 0xec
0000            206   _PCA0CPH3       DATA 0xf5
0000            207   _PCA0CPH4       DATA 0x85
0000            208   _PCA0CPH5       DATA 0xde
0000            209   _PCA0CPL0       DATA 0xfb
0000            210   _PCA0CPL1       DATA 0xe9
0000            211   _PCA0CPL2       DATA 0xeb
0000            212   _PCA0CPL3       DATA 0xf4
0000            213   _PCA0CPL4       DATA 0x84
0000            214   _PCA0CPL5       DATA 0xdd
0000            215   _PCA0CPM0       DATA 0xda
0000            216   _PCA0CPM1       DATA 0xdb
0000            217   _PCA0CPM2       DATA 0xdc
0000            218   _PCA0CPM3       DATA 0xae
0000            219   _PCA0CPM4       DATA 0xaf
0000            220   _PCA0CPM5       DATA 0xcc
0000            221   _PCA0H          DATA 0xfa
0000            222   _PCA0L          DATA 0xf9
0000            223   _PCA0MD         DATA 0xd9
0000            224   _PCA0POL        DATA 0x96
0000            225   _PCA0PWM        DATA 0xf7
0000            226   _PCON0          DATA 0x87
0000            227   _PCON1          DATA 0xcd
0000            228   _PFE0CN         DATA 0xc1
0000            229   _PRTDRV         DATA 0xf6
0000            230   _PSCTL          DATA 0x8f
0000            231   _PSTAT0         DATA 0xaa
0000            232   _PSW            DATA 0xd0
0000            233   _REF0CN         DATA 0xd1
0000            234   _REG0CN         DATA 0xc9
0000            235   _REVID          DATA 0xb6
0000            236   _RSTSRC         DATA 0xef
0000            237   _SBCON1         DATA 0x94
0000            238   _SBRLH1         DATA 0x96
0000            239   _SBRLL1         DATA 0x95
0000            240   _SBUF           DATA 0x99
0000            241   _SBUF0          DATA 0x99
0000            242   _SBUF1          DATA 0x92
0000            243   _SCON           DATA 0x98
0000            244   _SCON0          DATA 0x98
0000            245   _SCON1          DATA 0xc8
0000            246   _SFRPAGE        DATA 0xa7
0000            247   _SFRPGCN        DATA 0xbc
0000            248   _SFRSTACK       DATA 0xd7
0000            249   _SMB0ADM        DATA 0xd6
0000            250   _SMB0ADR        DATA 0xd7
0000            251   _SMB0CF         DATA 0xc1
0000            252   _SMB0CN0        DATA 0xc0
0000            253   _SMB0DAT        DATA 0xc2
0000            254   _SMB0FCN0       DATA 0xc3
0000            255   _SMB0FCN1       DATA 0xc4
0000            256   _SMB0FCT        DATA 0xef
0000            257   _SMB0RXLN       DATA 0xc5
0000            258   _SMB0TC         DATA 0xac
0000            259   _SMOD1          DATA 0x93
0000            260   _SP             DATA 0x81
0000            261   _SPI0CFG        DATA 0xa1
0000            262   _SPI0CKR        DATA 0xa2
0000            263   _SPI0CN0        DATA 0xf8
0000            264   _SPI0DAT        DATA 0xa3
0000            265   _SPI0FCN0       DATA 0x9a
0000            266   _SPI0FCN1       DATA 0x9b
0000            267   _SPI0FCT        DATA 0xf7
0000            268   _SPI0PCF        DATA 0xdf
0000            269   _TCON           DATA 0x88
0000            270   _TH0            DATA 0x8c
0000            271   _TH1            DATA 0x8d
0000            272   _TL0            DATA 0x8a
0000            273   _TL1            DATA 0x8b
0000            274   _TMOD           DATA 0x89
0000            275   _TMR2CN0        DATA 0xc8
0000            276   _TMR2CN1        DATA 0xfd
0000            277   _TMR2H          DATA 0xcf
0000            278   _TMR2L          DATA 0xce
0000            279   _TMR2RLH        DATA 0xcb
0000            280   _TMR2RLL        DATA 0xca
0000            281   _TMR3CN0        DATA 0x91
0000            282   _TMR3CN1        DATA 0xfe
0000            283   _TMR3H          DATA 0x95
0000            284   _TMR3L          DATA 0x94
0000            285   _TMR3RLH        DATA 0x93
0000            286   _TMR3RLL        DATA 0x92
0000            287   _TMR4CN0        DATA 0x98
0000            288   _TMR4CN1        DATA 0xff
0000            289   _TMR4H          DATA 0xa5
0000            290   _TMR4L          DATA 0xa4
0000            291   _TMR4RLH        DATA 0xa3
0000            292   _TMR4RLL        DATA 0xa2
0000            293   _TMR5CN0        DATA 0xc0
0000            294   _TMR5CN1        DATA 0xf1
0000            295   _TMR5H          DATA 0xd5
0000            296   _TMR5L          DATA 0xd4
0000            297   _TMR5RLH        DATA 0xd3
0000            298   _TMR5RLL        DATA 0xd2
0000            299   _UART0PCF       DATA 0xd9
0000            300   _UART1FCN0      DATA 0x9d
0000            301   _UART1FCN1      DATA 0xd8
0000            302   _UART1FCT       DATA 0xfa
0000            303   _UART1LIN       DATA 0x9e
0000            304   _UART1PCF       DATA 0xda
0000            305   _VDM0CN         DATA 0xff
0000            306   _WDTCN          DATA 0x97
0000            307   _XBR0           DATA 0xe1
0000            308   _XBR1           DATA 0xe2
0000            309   _XBR2           DATA 0xe3
0000            310   _XOSC0CN        DATA 0x86
0000            311   _DPTR           DATA 0x8382
0000            312   _TMR2RL         DATA 0xcbca
0000            313   _TMR3RL         DATA 0x9392
0000            314   _TMR4RL         DATA 0xa3a2
0000            315   _TMR5RL         DATA 0xd3d2
0000            316   _TMR0           DATA 0x8c8a
0000            317   _TMR1           DATA 0x8d8b
0000            318   _TMR2           DATA 0xcfce
0000            319   _TMR3           DATA 0x9594
0000            320   _TMR4           DATA 0xa5a4
0000            321   _TMR5           DATA 0xd5d4
0000            322   _SBRL1          DATA 0x9695
0000            323   _PCA0           DATA 0xfaf9
0000            324   _PCA0CP0        DATA 0xfcfb
0000            325   _PCA0CP1        DATA 0xeae9
0000            326   _PCA0CP2        DATA 0xeceb
0000            327   _PCA0CP3        DATA 0xf5f4
0000            328   _PCA0CP4        DATA 0x8584
0000            329   _PCA0CP5        DATA 0xdedd
0000            330   _ADC0ASA        DATA 0xb6b5
0000            331   _ADC0GT         DATA 0xc4c3
0000            332   _ADC0           DATA 0xbebd
0000            333   _ADC0LT         DATA 0xc6c5
0000            334   _DAC0           DATA 0x8584
0000            335   _DAC1           DATA 0x8a89
0000            336   _DAC2           DATA 0x8c8b
0000            337   _DAC3           DATA 0x8e8d
0000            338   ;--------------------------------------------------------
0000            339   ; special function bits
0000            340   ;--------------------------------------------------------
0000            341   _ACC_0          BIT 0xe0
0000            342   _ACC_1          BIT 0xe1
0000            343   _ACC_2          BIT 0xe2
0000            344   _ACC_3          BIT 0xe3
0000            345   _ACC_4          BIT 0xe4
0000            346   _ACC_5          BIT 0xe5
0000            347   _ACC_6          BIT 0xe6
0000            348   _ACC_7          BIT 0xe7
0000            349   _TEMPE          BIT 0xe8
0000            350   _ADGN0          BIT 0xe9
0000            351   _ADGN1          BIT 0xea
0000            352   _ADWINT         BIT 0xeb
0000            353   _ADBUSY         BIT 0xec
0000            354   _ADINT          BIT 0xed
0000            355   _IPOEN          BIT 0xee
0000            356   _ADEN           BIT 0xef
0000            357   _B_0            BIT 0xf0
0000            358   _B_1            BIT 0xf1
0000            359   _B_2            BIT 0xf2
0000            360   _B_3            BIT 0xf3
0000            361   _B_4            BIT 0xf4
0000            362   _B_5            BIT 0xf5
0000            363   _B_6            BIT 0xf6
0000            364   _B_7            BIT 0xf7
0000            365   _C0FIF          BIT 0xe8
0000            366   _C0RIF          BIT 0xe9
0000            367   _C1FIF          BIT 0xea
0000            368   _C1RIF          BIT 0xeb
0000            369   _C2FIF          BIT 0xec
0000            370   _C2RIF          BIT 0xed
0000            371   _C3FIF          BIT 0xee
0000            372   _C3RIF          BIT 0xef
0000            373   _D1SRC0         BIT 0x88
0000            374   _D1SRC1         BIT 0x89
0000            375   _D1AMEN         BIT 0x8a
0000            376   _D01REFSL       BIT 0x8b
0000            377   _D3SRC0         BIT 0x8c
0000            378   _D3SRC1         BIT 0x8d
0000            379   _D3AMEN         BIT 0x8e
0000            380   _D23REFSL       BIT 0x8f
0000            381   _D0UDIS         BIT 0x98
0000            382   _D1UDIS         BIT 0x99
0000            383   _D2UDIS         BIT 0x9a
0000            384   _D3UDIS         BIT 0x9b
0000            385   _EX0            BIT 0xa8
0000            386   _ET0            BIT 0xa9
0000            387   _EX1            BIT 0xaa
0000            388   _ET1            BIT 0xab
0000            389   _ES0            BIT 0xac
0000            390   _ET2            BIT 0xad
0000            391   _ESPI0          BIT 0xae
0000            392   _EA             BIT 0xaf
0000            393   _PX0            BIT 0xb8
0000            394   _PT0            BIT 0xb9
0000            395   _PX1            BIT 0xba
0000            396   _PT1            BIT 0xbb
0000            397   _PS0            BIT 0xbc
0000            398   _PT2            BIT 0xbd
0000            399   _PSPI0          BIT 0xbe
0000            400   _P0_0           BIT 0x80
0000            401   _P0_1           BIT 0x81
0000            402   _P0_2           BIT 0x82
0000            403   _P0_3           BIT 0x83
0000            404   _P0_4           BIT 0x84
0000            405   _P0_5           BIT 0x85
0000            406   _P0_6           BIT 0x86
0000            407   _P0_7           BIT 0x87
0000            408   _P1_0           BIT 0x90
0000            409   _P1_1           BIT 0x91
0000            410   _P1_2           BIT 0x92
0000            411   _P1_3           BIT 0x93
0000            412   _P1_4           BIT 0x94
0000            413   _P1_5           BIT 0x95
0000            414   _P1_6           BIT 0x96
0000            415   _P1_7           BIT 0x97
0000            416   _P2_0           BIT 0xa0
0000            417   _P2_1           BIT 0xa1
0000            418   _P2_2           BIT 0xa2
0000            419   _P2_3           BIT 0xa3
0000            420   _P2_4           BIT 0xa4
0000            421   _P2_5           BIT 0xa5
0000            422   _P2_6           BIT 0xa6
0000            423   _P3_0           BIT 0xb0
0000            424   _P3_1           BIT 0xb1
0000            425   _P3_2           BIT 0xb2
0000            426   _P3_3           BIT 0xb3
0000            427   _P3_4           BIT 0xb4
0000            428   _P3_7           BIT 0xb7
0000            429   _CCF0           BIT 0xd8
0000            430   _CCF1           BIT 0xd9
0000            431   _CCF2           BIT 0xda
0000            432   _CCF3           BIT 0xdb
0000            433   _CCF4           BIT 0xdc
0000            434   _CCF5           BIT 0xdd
0000            435   _CR             BIT 0xde
0000            436   _CF             BIT 0xdf
0000            437   _PARITY         BIT 0xd0
0000            438   _F1             BIT 0xd1
0000            439   _OV             BIT 0xd2
0000            440   _RS0            BIT 0xd3
0000            441   _RS1            BIT 0xd4
0000            442   _F0             BIT 0xd5
0000            443   _AC             BIT 0xd6
0000            444   _CY             BIT 0xd7
0000            445   _RI             BIT 0x98
0000            446   _TI             BIT 0x99
0000            447   _RB8            BIT 0x9a
0000            448   _TB8            BIT 0x9b
0000            449   _REN            BIT 0x9c
0000            450   _CE             BIT 0x9d
0000            451   _SMODE          BIT 0x9e
0000            452   _RI1            BIT 0xc8
0000            453   _TI1            BIT 0xc9
0000            454   _RBX1           BIT 0xca
0000            455   _TBX1           BIT 0xcb
0000            456   _REN1           BIT 0xcc
0000            457   _PERR1          BIT 0xcd
0000            458   _OVR1           BIT 0xce
0000            459   _SI             BIT 0xc0
0000            460   _ACK            BIT 0xc1
0000            461   _ARBLOST        BIT 0xc2
0000            462   _ACKRQ          BIT 0xc3
0000            463   _STO            BIT 0xc4
0000            464   _STA            BIT 0xc5
0000            465   _TXMODE         BIT 0xc6
0000            466   _MASTER         BIT 0xc7
0000            467   _SPIEN          BIT 0xf8
0000            468   _TXNF           BIT 0xf9
0000            469   _NSSMD0         BIT 0xfa
0000            470   _NSSMD1         BIT 0xfb
0000            471   _RXOVRN         BIT 0xfc
0000            472   _MODF           BIT 0xfd
0000            473   _WCOL           BIT 0xfe
0000            474   _SPIF           BIT 0xff
0000            475   _IT0            BIT 0x88
0000            476   _IE0            BIT 0x89
0000            477   _IT1            BIT 0x8a
0000            478   _IE1            BIT 0x8b
0000            479   _TR0            BIT 0x8c
0000            480   _TF0            BIT 0x8d
0000            481   _TR1            BIT 0x8e
0000            482   _TF1            BIT 0x8f
0000            483   _T2XCLK0        BIT 0xc8
0000            484   _T2XCLK1        BIT 0xc9
0000            485   _TR2            BIT 0xca
0000            486   _T2SPLIT        BIT 0xcb
0000            487   _TF2CEN         BIT 0xcc
0000            488   _TF2LEN         BIT 0xcd
0000            489   _TF2L           BIT 0xce
0000            490   _TF2H           BIT 0xcf
0000            491   _T4XCLK0        BIT 0x98
0000            492   _T4XCLK1        BIT 0x99
0000            493   _TR4            BIT 0x9a
0000            494   _T4SPLIT        BIT 0x9b
0000            495   _TF4CEN         BIT 0x9c
0000            496   _TF4LEN         BIT 0x9d
0000            497   _TF4L           BIT 0x9e
0000            498   _TF4H           BIT 0x9f
0000            499   _T5XCLK0        BIT 0xc0
0000            500   _T5XCLK1        BIT 0xc1
0000            501   _TR5            BIT 0xc2
0000            502   _T5SPLIT        BIT 0xc3
0000            503   _TF5CEN         BIT 0xc4
0000            504   _TF5LEN         BIT 0xc5
0000            505   _TF5L           BIT 0xc6
0000            506   _TF5H           BIT 0xc7
0000            507   _RIE            BIT 0xd8
0000            508   _RXTO0          BIT 0xd9
0000            509   _RXTO1          BIT 0xda
0000            510   _RFRQ           BIT 0xdb
0000            511   _TIE            BIT 0xdc
0000            512   _TXHOLD         BIT 0xdd
0000            513   _TXNF1          BIT 0xde
0000            514   _TFRQ           BIT 0xdf
0000            515   ;--------------------------------------------------------
0000            516   ; overlayable register banks
0000            517   ;--------------------------------------------------------
0000            518            rbank0 segment data overlay
0000            519   ;--------------------------------------------------------
0000            520   ; internal ram data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_DSEG
0000            523   _pwm_count:
0000            524            ds 1
0001            525   _pwm_count1:
0001            526            ds 1
0002            527   _pwm_count2:
0002            528            ds 1
0003            529   _pwm_count3:
0003            530            ds 1
0004            531   _pwmSig1:
0004            532            ds 2
0006            533   _pwmSig2:
0006            534            ds 2
0008            535   _pwmSig3:
0008            536            ds 2
000A            537   _pwmSig4:
000A            538            ds 2
000C            539   _pwmSig5:
000C            540            ds 2
000E            541   _pwmSig6:
000E            542            ds 2
0010            543   _cartMoveF:
0010            544            ds 2
0012            545   _cartMoveB:
0012            546            ds 2
0014            547   _flag:
0014            548            ds 2
0016            549   _claw_flag:
0016            550            ds 2
0018            551   _stop:
0018            552            ds 8
0020            553   _forward:
0020            554            ds 8
0028            555   _backward:
0028            556            ds 8
0030            557   _left:
0030            558            ds 8
0038            559   _right:
0038            560            ds 8
0040            561   _command:
0040            562            ds 8
0048            563   _x:
0048            564            ds 2
004A            565   _zero_time_calc_overflow_count_1_73:
004A            566            ds 2
004C            567   _main_sloc0_1_0:
004C            568            ds 4
0050            569   ;--------------------------------------------------------
0050            570   ; overlayable items in internal ram 
0050            571   ;--------------------------------------------------------
0000            572            rseg    R_OSEG
0000            573            rseg    R_OSEG
0000            574            rseg    R_OSEG
0000            575   _InitPinADC_PARM_2:
0000            576            ds 1
0001            577            rseg    R_OSEG
0001            578   _arrayEqual_PARM_2:
0001            579            ds 2
0003            580   _arrayEqual_PARM_3:
0003            581            ds 3
0006            582   _arrayEqual_arr1_1_76:
0006            583            ds 3
0009            584   ;--------------------------------------------------------
0009            585   ; indirectly addressable internal ram data
0009            586   ;--------------------------------------------------------
0000            587            rseg R_ISEG
0000            588   ;--------------------------------------------------------
0000            589   ; absolute internal ram data
0000            590   ;--------------------------------------------------------
0000            591            DSEG
0000            592   ;--------------------------------------------------------
0000            593   ; bit data
0000            594   ;--------------------------------------------------------
0000            595            rseg R_BSEG
0000            596   _Timer2_ISR_sloc0_1_0:
0000            597            DBIT    1
0001            598   ;--------------------------------------------------------
0001            599   ; paged external ram data
0001            600   ;--------------------------------------------------------
0000            601            rseg R_PSEG
0000            602   ;--------------------------------------------------------
0000            603   ; external ram data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_XSEG
0000            606   ;--------------------------------------------------------
0000            607   ; absolute external ram data
0000            608   ;--------------------------------------------------------
0000            609            XSEG
0000            610   ;--------------------------------------------------------
0000            611   ; external initialized ram data
0000            612   ;--------------------------------------------------------
0000            613            rseg R_IXSEG
0000            614            rseg R_HOME
0000            615            rseg R_GSINIT
0000            616            rseg R_CSEG
0000            617   ;--------------------------------------------------------
0000            618   ; Reset entry point and interrupt vectors
0000            619   ;--------------------------------------------------------
0000            620            CSEG at 0x0000
0000 020100     621            ljmp    _crt0
002B            622            CSEG at 0x002b
002B 020100     623            ljmp    _Timer2_ISR
002E            624   ;--------------------------------------------------------
002E            625   ; global & static initialisations
002E            626   ;--------------------------------------------------------
0000            627            rseg R_HOME
0000            628            rseg R_GSINIT
0000            629            rseg R_GSINIT
0000            630   ;--------------------------------------------------------
0000            631   ; data variables initialization
0000            632   ;--------------------------------------------------------
0000            633            rseg R_DINIT
0000            634   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:49: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 750800     635            mov     _pwm_count,#0x00
0003            636   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:50: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75C800     637            mov     _pwm_count1,#0x00
0006            638   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:51: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 758800     639            mov     _pwm_count2,#0x00
0009            640   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:52: volatile unsigned char pwm_count3 = 0; //
0009 754800     641            mov     _pwm_count3,#0x00
000C            642   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:67: volatile int flag = 0;
000C E4         643            clr     a
000D F508       644            mov     _flag,a
000F F509       645            mov     (_flag + 1),a
0011            646   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:68: volatile int claw_flag = 0;
0011 E4         647            clr     a
0012 F5C8       648            mov     _claw_flag,a
0014 F5C9       649            mov     (_claw_flag + 1),a
0016            650   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:69: int stop[]={1,0,0,0};
0016 758801     651            mov     _stop,#0x01
0019 758900     652            mov     (_stop + 1),#0x00
001C 758A00     653            mov     (_stop + 0x0002),#0x00
001F 758B00     654            mov     ((_stop + 0x0002) + 1),#0x00
0022 758C00     655            mov     (_stop + 0x0004),#0x00
0025 758D00     656            mov     ((_stop + 0x0004) + 1),#0x00
0028 758E00     657            mov     (_stop + 0x0006),#0x00
002B 758F00     658            mov     ((_stop + 0x0006) + 1),#0x00
002E            659   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:70: int forward[]={1,1,1,1};
002E 754801     660            mov     _forward,#0x01
0031 754900     661            mov     (_forward + 1),#0x00
0034 754A01     662            mov     (_forward + 0x0002),#0x01
0037 754B00     663            mov     ((_forward + 0x0002) + 1),#0x00
003A 754C01     664            mov     (_forward + 0x0004),#0x01
003D 754D00     665            mov     ((_forward + 0x0004) + 1),#0x00
0040 754E01     666            mov     (_forward + 0x0006),#0x01
0043 754F00     667            mov     ((_forward + 0x0006) + 1),#0x00
0046            668   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:71: int backward[]={1,0,0,0};
0046 750801     669            mov     _backward,#0x01
0049 750900     670            mov     (_backward + 1),#0x00
004C 750A00     671            mov     (_backward + 0x0002),#0x00
004F 750B00     672            mov     ((_backward + 0x0002) + 1),#0x00
0052 750C00     673            mov     (_backward + 0x0004),#0x00
0055 750D00     674            mov     ((_backward + 0x0004) + 1),#0x00
0058 750E00     675            mov     (_backward + 0x0006),#0x00
005B 750F00     676            mov     ((_backward + 0x0006) + 1),#0x00
005E            677   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:72: int left[]={1,0,1,0};
005E 75C801     678            mov     _left,#0x01
0061 75C900     679            mov     (_left + 1),#0x00
0064 75CA00     680            mov     (_left + 0x0002),#0x00
0067 75CB00     681            mov     ((_left + 0x0002) + 1),#0x00
006A 75CC01     682            mov     (_left + 0x0004),#0x01
006D 75CD00     683            mov     ((_left + 0x0004) + 1),#0x00
0070 75CE00     684            mov     (_left + 0x0006),#0x00
0073 75CF00     685            mov     ((_left + 0x0006) + 1),#0x00
0076            686   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:73: int right[]={1,1,0,1};
0076 75E001     687            mov     _right,#0x01
0079 75E100     688            mov     (_right + 1),#0x00
007C 75E201     689            mov     (_right + 0x0002),#0x01
007F 75E300     690            mov     ((_right + 0x0002) + 1),#0x00
0082 75E400     691            mov     (_right + 0x0004),#0x00
0085 75E500     692            mov     ((_right + 0x0004) + 1),#0x00
0088 75E601     693            mov     (_right + 0x0006),#0x01
008B 75E700     694            mov     ((_right + 0x0006) + 1),#0x00
008E            695   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:75: int command[4] = {0,0,0,0};
008E 75A000     696            mov     _command,#0x00
0091 75A100     697            mov     (_command + 1),#0x00
0094 75A200     698            mov     (_command + 0x0002),#0x00
0097 75A300     699            mov     ((_command + 0x0002) + 1),#0x00
009A 75A400     700            mov     (_command + 0x0004),#0x00
009D 75A500     701            mov     ((_command + 0x0004) + 1),#0x00
00A0 75A600     702            mov     (_command + 0x0006),#0x00
00A3 75A700     703            mov     ((_command + 0x0006) + 1),#0x00
00A6            704   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:77: volatile unsigned int x = 2;
00A6 756002     705            mov     _x,#0x02
00A9 E4         706            clr     a
00AA F561       707            mov     (_x + 1),a
00AC            708            ; The linker places a 'ret' at the end of segment R_DINIT.
00AC            709   ;--------------------------------------------------------
00AC            710   ; code
00AC            711   ;--------------------------------------------------------
0000            712            rseg R_CSEG
0000            713   ;------------------------------------------------------------
0000            714   ;Allocation info for local variables in function '_c51_external_startup'
0000            715   ;------------------------------------------------------------
0000            716   ;------------------------------------------------------------
0000            717   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:79: char _c51_external_startup(void)
0000            718   ;        -----------------------------------------
0000            719   ;         function _c51_external_startup
0000            720   ;        -----------------------------------------
0000            721   __c51_external_startup:
0000            722            using   0
0000            723   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:82: SFRPAGE = 0x00;
0000 75A700     724            mov     _SFRPAGE,#0x00
0003            725   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:83: WDTCN = 0xDE; //First key
0003 7597DE     726            mov     _WDTCN,#0xDE
0006            727   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:84: WDTCN = 0xAD; //Second key
0006 7597AD     728            mov     _WDTCN,#0xAD
0009            729   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:86: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     730            mov     _VDM0CN,#0x80
000C            731   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:87: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     732            mov     _RSTSRC,#0x06
000F            733   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:94: SFRPAGE = 0x10;
000F 75A710     734            mov     _SFRPAGE,#0x10
0012            735   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:95: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     736            mov     _PFE0CN,#0x20
0015            737   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:96: SFRPAGE = 0x00;
0015 75A700     738            mov     _SFRPAGE,#0x00
0018            739   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:117: CLKSEL = 0x00;
0018 75A900     740            mov     _CLKSEL,#0x00
001B            741   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:118: CLKSEL = 0x00;
001B 75A900     742            mov     _CLKSEL,#0x00
001E            743   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:119: while ((CLKSEL & 0x80) == 0);
001E            744   L002001?:
001E E5A9       745            mov     a,_CLKSEL
0020 30E788     746            jnb     acc.7,L002001?
0023            747   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:120: CLKSEL = 0x03;
0023 75A903     748            mov     _CLKSEL,#0x03
0026            749   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:121: CLKSEL = 0x03;
0026 75A903     750            mov     _CLKSEL,#0x03
0029            751   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:122: while ((CLKSEL & 0x80) == 0);
0029            752   L002004?:
0029 E5A9       753            mov     a,_CLKSEL
002B 30E708     754            jnb     acc.7,L002004?
002E            755   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:127: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     756            orl     _P0MDOUT,#0x10
0031            757   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:128: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     758            mov     _XBR0,#0x01
0034            759   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:129: XBR1 = 0X00;
0034 75E200     760            mov     _XBR1,#0x00
0037            761   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:130: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     762            mov     _XBR2,#0x40
003A            763   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:136: SCON0 = 0x10;
003A 759810     764            mov     _SCON0,#0x10
003D            765   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:137: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     766            mov     _TH1,#0xE6
0040            767   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:138: TL1 = TH1;      // Init Timer1
0040 858D8B     768            mov     _TL1,_TH1
0043            769   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:139: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     770            anl     _TMOD,#0x0F
0046            771   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:140: TMOD |= 0x20;
0046 438920     772            orl     _TMOD,#0x20
0049            773   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:141: TR1 = 1; // START Timer1
0049 D28E       774            setb    _TR1
004B            775   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:142: TI = 1;  // Indicate TX0 ready
004B D299       776            setb    _TI
004D            777   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:145: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     778            mov     _TMR2CN0,#0x00
0050            779   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:146: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     780            orl     _CKCON0,#0x10
0053            781   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:147: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     782            mov     _TMR2RL,#0xE0
0056 75CBE3     783            mov     (_TMR2RL >> 8),#0xE3
0059            784   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:148: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     785            mov     _TMR2,#0xFF
005C 75CFFF     786            mov     (_TMR2 >> 8),#0xFF
005F            787   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:149: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       788            setb    _ET2
0061            789   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:150: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       790            setb    _TR2
0063            791   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:167: EA = 1; // Enable interrupts
0063 D2AF       792            setb    _EA
0065            793   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:170: return 0;
0065 758200     794            mov     dpl,#0x00
0068 22         795            ret
0069            796   ;------------------------------------------------------------
0069            797   ;Allocation info for local variables in function 'Timer3us'
0069            798   ;------------------------------------------------------------
0069            799   ;us                        Allocated to registers r2 r3 
0069            800   ;i                         Allocated to registers r4 r5 
0069            801   ;------------------------------------------------------------
0069            802   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:172: void Timer3us(unsigned int us)
0069            803   ;        -----------------------------------------
0069            804   ;         function Timer3us
0069            805   ;        -----------------------------------------
0069            806   _Timer3us:
0069 AA82       807            mov     r2,dpl
006B AB83       808            mov     r3,dph
006D            809   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:177: CKCON0|=0b_0100_0000;
006D 438E40     810            orl     _CKCON0,#0x40
0070            811   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:179: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     812            mov     _TMR3RL,#0xB8
0073 7593FF     813            mov     (_TMR3RL >> 8),#0xFF
0076            814   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:180: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     815            mov     _TMR3,_TMR3RL
0079 859395     816            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            817   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:182: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     818            mov     _TMR3CN0,#0x04
007F            819   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:183: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       820            mov     r4,#0x00
0081 7D00       821            mov     r5,#0x00
0083            822   L003004?:
0083 C3         823            clr     c
0084 EC         824            mov     a,r4
0085 9A         825            subb    a,r2
0086 ED         826            mov     a,r5
0087 9B         827            subb    a,r3
0088 5001       828            jnc     L003007?
008A            829   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:185: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            830   L003001?:
008A E591       831            mov     a,_TMR3CN0
008C 30E748     832            jnb     acc.7,L003001?
008F            833   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:186: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     834            anl     _TMR3CN0,#0x7F
0092            835   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:183: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         836            inc     r4
0093 BC00C8     837            cjne    r4,#0x00,L003004?
0096 0D         838            inc     r5
0097 8001       839            sjmp    L003004?
0099            840   L003007?:
0099            841   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:188: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     842            mov     _TMR3CN0,#0x00
009C 22         843            ret
009D            844   ;------------------------------------------------------------
009D            845   ;Allocation info for local variables in function 'waitms'
009D            846   ;------------------------------------------------------------
009D            847   ;ms                        Allocated to registers r2 r3 
009D            848   ;j                         Allocated to registers r4 r5 
009D            849   ;k                         Allocated to registers r6 
009D            850   ;------------------------------------------------------------
009D            851   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:190: void waitms (unsigned int ms)
009D            852   ;        -----------------------------------------
009D            853   ;         function waitms
009D            854   ;        -----------------------------------------
009D            855   _waitms:
009D AA82       856            mov     r2,dpl
009F AB83       857            mov     r3,dph
00A1            858   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:194: for(j=0; j<ms; j++)
00A1 7C00       859            mov     r4,#0x00
00A3 7D00       860            mov     r5,#0x00
00A5            861   L004005?:
00A5 C3         862            clr     c
00A6 EC         863            mov     a,r4
00A7 9A         864            subb    a,r2
00A8 ED         865            mov     a,r5
00A9 9B         866            subb    a,r3
00AA 5001       867            jnc     L004009?
00AC            868   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:195: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       869            mov     r6,#0x00
00AE            870   L004001?:
00AE BE0448     871            cjne    r6,#0x04,L004018?
00B1            872   L004018?:
00B1 5001       873            jnc     L004007?
00B3 9000FA     874            mov     dptr,#0x00FA
00B6 C002       875            push    ar2
00B8 C003       876            push    ar3
00BA C004       877            push    ar4
00BC C005       878            push    ar5
00BE C006       879            push    ar6
00C0 120100     880            lcall   _Timer3us
00C3 D006       881            pop     ar6
00C5 D005       882            pop     ar5
00C7 D004       883            pop     ar4
00C9 D003       884            pop     ar3
00CB D002       885            pop     ar2
00CD 0E         886            inc     r6
00CE 8001       887            sjmp    L004001?
00D0            888   L004007?:
00D0            889   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:194: for(j=0; j<ms; j++)
00D0 0C         890            inc     r4
00D1 BC0088     891            cjne    r4,#0x00,L004005?
00D4 0D         892            inc     r5
00D5 8001       893            sjmp    L004005?
00D7            894   L004009?:
00D7 22         895            ret
00D8            896   ;------------------------------------------------------------
00D8            897   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            898   ;------------------------------------------------------------
00D8            899   ;pin                       Allocated to registers 
00D8            900   ;------------------------------------------------------------
00D8            901   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:198: unsigned int ADC_at_Pin(unsigned char pin)
00D8            902   ;        -----------------------------------------
00D8            903   ;         function ADC_at_Pin
00D8            904   ;        -----------------------------------------
00D8            905   _ADC_at_Pin:
00D8 8582BB     906            mov     _ADC0MX,dpl
00DB            907   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:201: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       908            setb    _ADBUSY
00DD            909   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:202: while (ADBUSY); // Wait for dummy conversion to finish
00DD            910   L005001?:
00DD 20ECC8     911            jb      _ADBUSY,L005001?
00E0            912   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:203: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       913            setb    _ADBUSY
00E2            914   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:204: while (ADBUSY); // Wait for conversion to complete
00E2            915   L005004?:
00E2 20EC08     916            jb      _ADBUSY,L005004?
00E5            917   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:205: return (ADC0);
00E5 85BD82     918            mov     dpl,_ADC0
00E8 85BE83     919            mov     dph,(_ADC0 >> 8)
00EB 22         920            ret
00EC            921   ;------------------------------------------------------------
00EC            922   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            923   ;------------------------------------------------------------
00EC            924   ;------------------------------------------------------------
00EC            925   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:209: void Timer2_ISR(void) interrupt 5
00EC            926   ;        -----------------------------------------
00EC            927   ;         function Timer2_ISR
00EC            928   ;        -----------------------------------------
00EC            929   _Timer2_ISR:
00EC C0E0       930            push    acc
00EE C002       931            push    ar2
00F0 C003       932            push    ar3
00F2 C0D0       933            push    psw
00F4 75D000     934            mov     psw,#0x00
00F7            935   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:211: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       936            clr     _TF2H
00F9            937   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:213: pwm_count++;
00F9 0508       938            inc     _pwm_count
00FB            939   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:214: if (pwm_count>100)
00FB E508       940            mov     a,_pwm_count
00FD 249B       941            add     a,#0xff - 0x64
00FF 5001       942            jnc     L006002?
0101            943   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:215: pwm_count = 0;
0101 750800     944            mov     _pwm_count,#0x00
0104            945   L006002?:
0104            946   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:218: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AA08       947            mov     r2,_pwm_count
0106 7B00       948            mov     r3,#0x00
0108 C3         949            clr     c
0109 E508       950            mov     a,_pwmSig1
010B 9A         951            subb    a,r2
010C E509       952            mov     a,(_pwmSig1 + 1)
010E 9B         953            subb    a,r3
010F 9208       954            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         955            cpl     c
0112 9294       956            mov     _P1_4,c
0114            957   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:219: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AA08       958            mov     r2,_pwm_count
0116 7B00       959            mov     r3,#0x00
0118 C3         960            clr     c
0119 E5C8       961            mov     a,_pwmSig2
011B 9A         962            subb    a,r2
011C E5C9       963            mov     a,(_pwmSig2 + 1)
011E 9B         964            subb    a,r3
011F 9208       965            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         966            cpl     c
0122 9295       967            mov     _P1_5,c
0124            968   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:221: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AA08       969            mov     r2,_pwm_count
0126 7B00       970            mov     r3,#0x00
0128 C3         971            clr     c
0129 E588       972            mov     a,_pwmSig3
012B 9A         973            subb    a,r2
012C E589       974            mov     a,(_pwmSig3 + 1)
012E 9B         975            subb    a,r3
012F 9208       976            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         977            cpl     c
0132 9292       978            mov     _P1_2,c
0134            979   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:222: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AA08       980            mov     r2,_pwm_count
0136 7B00       981            mov     r3,#0x00
0138 C3         982            clr     c
0139 E548       983            mov     a,_pwmSig4
013B 9A         984            subb    a,r2
013C E549       985            mov     a,(_pwmSig4 + 1)
013E 9B         986            subb    a,r3
013F 9208       987            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         988            cpl     c
0142 9293       989            mov     _P1_3,c
0144            990   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:224: OUT0=pwm_count>80?0:1;
0144 E508       991            mov     a,_pwm_count
0146 24AF       992            add     a,#0xff - 0x50
0148 9208       993            mov  _Timer2_ISR_sloc0_1_0,c
014A B3         994            cpl     c
014B 92A0       995            mov     _P2_0,c
014D D0D0       996            pop     psw
014F D003       997            pop     ar3
0151 D002       998            pop     ar2
0153 D0E0       999            pop     acc
0155 32        1000            reti
0156           1001   ;        eliminated unneeded push/pop dpl
0156           1002   ;        eliminated unneeded push/pop dph
0156           1003   ;        eliminated unneeded push/pop b
0156           1004   ;------------------------------------------------------------
0156           1005   ;Allocation info for local variables in function 'InitADC'
0156           1006   ;------------------------------------------------------------
0156           1007   ;------------------------------------------------------------
0156           1008   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:254: void InitADC(void)
0156           1009   ;        -----------------------------------------
0156           1010   ;         function InitADC
0156           1011   ;        -----------------------------------------
0156           1012   _InitADC:
0156           1013   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:256: SFRPAGE = 0x00;
0156 75A700    1014            mov     _SFRPAGE,#0x00
0159           1015   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:257: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0159 75B280    1016            mov     _ADC0CN1,#0x80
015C           1017   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:258: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
015C 75BCF8    1018            mov     _ADC0CF0,#0xF8
015F           1019   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:259: ADC0CF1 = 0b_0_0_011110; // Same as default for now
015F 75B91E    1020            mov     _ADC0CF1,#0x1E
0162           1021   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:260: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0162 75E800    1022            mov     _ADC0CN0,#0x00
0165           1023   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:261: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
0165 75DF3F    1024            mov     _ADC0CF2,#0x3F
0168           1025   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:262: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0168 75B300    1026            mov     _ADC0CN2,#0x00
016B           1027   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:263: ADEN = 1; // Enable ADC
016B D2EF      1028            setb    _ADEN
016D 22        1029            ret
016E           1030   ;------------------------------------------------------------
016E           1031   ;Allocation info for local variables in function 'TIMER0_Init'
016E           1032   ;------------------------------------------------------------
016E           1033   ;------------------------------------------------------------
016E           1034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:265: void TIMER0_Init(void)
016E           1035   ;        -----------------------------------------
016E           1036   ;         function TIMER0_Init
016E           1037   ;        -----------------------------------------
016E           1038   _TIMER0_Init:
016E           1039   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:267: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
016E 5389F0    1040            anl     _TMOD,#0xF0
0171           1041   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:268: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0171 438901    1042            orl     _TMOD,#0x01
0174           1043   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:269: TR0 = 0; // Stop Timer/Counter 0
0174 C28C      1044            clr     _TR0
0176 22        1045            ret
0177           1046   ;------------------------------------------------------------
0177           1047   ;Allocation info for local variables in function 'Volts_at_Pin'
0177           1048   ;------------------------------------------------------------
0177           1049   ;pin                       Allocated to registers r2 
0177           1050   ;------------------------------------------------------------
0177           1051   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:274: float Volts_at_Pin(unsigned char pin)
0177           1052   ;        -----------------------------------------
0177           1053   ;         function Volts_at_Pin
0177           1054   ;        -----------------------------------------
0177           1055   _Volts_at_Pin:
0177           1056   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:276: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
0177 120100    1057            lcall   _ADC_at_Pin
017A 120100    1058            lcall   ___uint2fs
017D AA82      1059            mov     r2,dpl
017F AB83      1060            mov     r3,dph
0181 ACF0      1061            mov     r4,b
0183 FD        1062            mov     r5,a
0184 C002      1063            push    ar2
0186 C003      1064            push    ar3
0188 C004      1065            push    ar4
018A C005      1066            push    ar5
018C 906C8B    1067            mov     dptr,#0x6C8B
018F 75F053    1068            mov     b,#0x53
0192 7440      1069            mov     a,#0x40
0194 120100    1070            lcall   ___fsmul
0197 AA82      1071            mov     r2,dpl
0199 AB83      1072            mov     r3,dph
019B ACF0      1073            mov     r4,b
019D FD        1074            mov     r5,a
019E E581      1075            mov     a,sp
01A0 24FC      1076            add     a,#0xfc
01A2 F581      1077            mov     sp,a
01A4 E4        1078            clr     a
01A5 C0E0      1079            push    acc
01A7 74FC      1080            mov     a,#0xFC
01A9 C0E0      1081            push    acc
01AB 747F      1082            mov     a,#0x7F
01AD C0E0      1083            push    acc
01AF 7446      1084            mov     a,#0x46
01B1 C0E0      1085            push    acc
01B3 8A82      1086            mov     dpl,r2
01B5 8B83      1087            mov     dph,r3
01B7 8CF0      1088            mov     b,r4
01B9 ED        1089            mov     a,r5
01BA 120100    1090            lcall   ___fsdiv
01BD AA82      1091            mov     r2,dpl
01BF AB83      1092            mov     r3,dph
01C1 ACF0      1093            mov     r4,b
01C3 FD        1094            mov     r5,a
01C4 E581      1095            mov     a,sp
01C6 24FC      1096            add     a,#0xfc
01C8 F581      1097            mov     sp,a
01CA 8A82      1098            mov     dpl,r2
01CC 8B83      1099            mov     dph,r3
01CE 8CF0      1100            mov     b,r4
01D0 ED        1101            mov     a,r5
01D1 22        1102            ret
01D2           1103   ;------------------------------------------------------------
01D2           1104   ;Allocation info for local variables in function 'InitPinADC'
01D2           1105   ;------------------------------------------------------------
01D2           1106   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01D2           1107   ;portno                    Allocated to registers r2 
01D2           1108   ;mask                      Allocated to registers r3 
01D2           1109   ;------------------------------------------------------------
01D2           1110   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:278: void InitPinADC(unsigned char portno, unsigned char pinno)
01D2           1111   ;        -----------------------------------------
01D2           1112   ;         function InitPinADC
01D2           1113   ;        -----------------------------------------
01D2           1114   _InitPinADC:
01D2 AA82      1115            mov     r2,dpl
01D4           1116   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:282: mask = 1 << pinno;
01D4 85F0F0    1117            mov     b,_InitPinADC_PARM_2
01D7 05F0      1118            inc     b
01D9 7401      1119            mov     a,#0x01
01DB 8001      1120            sjmp    L010013?
01DD           1121   L010011?:
01DD 25E0      1122            add     a,acc
01DF           1123   L010013?:
01DF D5F048    1124            djnz    b,L010011?
01E2 FB        1125            mov     r3,a
01E3           1126   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:284: SFRPAGE = 0x20;
01E3 75A720    1127            mov     _SFRPAGE,#0x20
01E6           1128   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:285: switch (portno)
01E6 BA0088    1129            cjne    r2,#0x00,L010014?
01E9 8001      1130            sjmp    L010001?
01EB           1131   L010014?:
01EB BA0108    1132            cjne    r2,#0x01,L010015?
01EE 8001      1133            sjmp    L010002?
01F0           1134   L010015?:
01F0           1135   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:287: case 0:
01F0 BA0288    1136            cjne    r2,#0x02,L010005?
01F3 8001      1137            sjmp    L010003?
01F5           1138   L010001?:
01F5           1139   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:288: P0MDIN &= (~mask); // Set pin as analog input
01F5 EB        1140            mov     a,r3
01F6 F4        1141            cpl     a
01F7 FA        1142            mov     r2,a
01F8 52F1      1143            anl     _P0MDIN,a
01FA           1144   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:289: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01FA EB        1145            mov     a,r3
01FB 42D4      1146            orl     _P0SKIP,a
01FD           1147   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:290: break;
01FD           1148   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:291: case 1:
01FD 8001      1149            sjmp    L010005?
01FF           1150   L010002?:
01FF           1151   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:292: P1MDIN &= (~mask); // Set pin as analog input
01FF EB        1152            mov     a,r3
0200 F4        1153            cpl     a
0201 FA        1154            mov     r2,a
0202 52F2      1155            anl     _P1MDIN,a
0204           1156   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:293: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0204 EB        1157            mov     a,r3
0205 42D5      1158            orl     _P1SKIP,a
0207           1159   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:294: break;
0207           1160   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:295: case 2:
0207 8001      1161            sjmp    L010005?
0209           1162   L010003?:
0209           1163   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:296: P2MDIN &= (~mask); // Set pin as analog input
0209 EB        1164            mov     a,r3
020A F4        1165            cpl     a
020B FA        1166            mov     r2,a
020C 52F3      1167            anl     _P2MDIN,a
020E           1168   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:297: P2SKIP |= mask; // Skip Crossbar decoding for this pin
020E EB        1169            mov     a,r3
020F 42CC      1170            orl     _P2SKIP,a
0211           1171   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:301: }
0211           1172   L010005?:
0211           1173   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:302: SFRPAGE = 0x00;
0211 75A700    1174            mov     _SFRPAGE,#0x00
0214 22        1175            ret
0215           1176   ;------------------------------------------------------------
0215           1177   ;Allocation info for local variables in function 'PWMforward'
0215           1178   ;------------------------------------------------------------
0215           1179   ;------------------------------------------------------------
0215           1180   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:311: void PWMforward(void) {
0215           1181   ;        -----------------------------------------
0215           1182   ;         function PWMforward
0215           1183   ;        -----------------------------------------
0215           1184   _PWMforward:
0215           1185   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:312: pwmSig1 = 99;
0215 750863    1186            mov     _pwmSig1,#0x63
0218 E4        1187            clr     a
0219 F509      1188            mov     (_pwmSig1 + 1),a
021B           1189   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:313: pwmSig2 = 0;
021B           1190   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:315: pwmSig3 = 0;
021B E4        1191            clr     a
021C F5C8      1192            mov     _pwmSig2,a
021E F5C9      1193            mov     (_pwmSig2 + 1),a
0220 F588      1194            mov     _pwmSig3,a
0222 F589      1195            mov     (_pwmSig3 + 1),a
0224           1196   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:316: pwmSig4 =99;
0224 754863    1197            mov     _pwmSig4,#0x63
0227 E4        1198            clr     a
0228 F549      1199            mov     (_pwmSig4 + 1),a
022A 22        1200            ret
022B           1201   ;------------------------------------------------------------
022B           1202   ;Allocation info for local variables in function 'PWMbackward'
022B           1203   ;------------------------------------------------------------
022B           1204   ;------------------------------------------------------------
022B           1205   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:320: void PWMbackward(void) {
022B           1206   ;        -----------------------------------------
022B           1207   ;         function PWMbackward
022B           1208   ;        -----------------------------------------
022B           1209   _PWMbackward:
022B           1210   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:321: pwmSig1 = 0;
022B E4        1211            clr     a
022C F508      1212            mov     _pwmSig1,a
022E F509      1213            mov     (_pwmSig1 + 1),a
0230           1214   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:322: pwmSig2 = 99;
0230 75C863    1215            mov     _pwmSig2,#0x63
0233 E4        1216            clr     a
0234 F5C9      1217            mov     (_pwmSig2 + 1),a
0236           1218   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:324: pwmSig3 = 99;
0236 758863    1219            mov     _pwmSig3,#0x63
0239 E4        1220            clr     a
023A F589      1221            mov     (_pwmSig3 + 1),a
023C           1222   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:325: pwmSig4 = 0;
023C E4        1223            clr     a
023D F548      1224            mov     _pwmSig4,a
023F F549      1225            mov     (_pwmSig4 + 1),a
0241 22        1226            ret
0242           1227   ;------------------------------------------------------------
0242           1228   ;Allocation info for local variables in function 'PWMLeft'
0242           1229   ;------------------------------------------------------------
0242           1230   ;------------------------------------------------------------
0242           1231   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:329: void PWMLeft(void) {
0242           1232   ;        -----------------------------------------
0242           1233   ;         function PWMLeft
0242           1234   ;        -----------------------------------------
0242           1235   _PWMLeft:
0242           1236   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:330: pwmSig1 = 0;
0242 E4        1237            clr     a
0243 F508      1238            mov     _pwmSig1,a
0245 F509      1239            mov     (_pwmSig1 + 1),a
0247           1240   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:331: pwmSig2 = 99;
0247 75C863    1241            mov     _pwmSig2,#0x63
024A E4        1242            clr     a
024B F5C9      1243            mov     (_pwmSig2 + 1),a
024D           1244   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:333: pwmSig3 = 0;
024D E4        1245            clr     a
024E F588      1246            mov     _pwmSig3,a
0250 F589      1247            mov     (_pwmSig3 + 1),a
0252           1248   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:334: pwmSig4 = 99;
0252 754863    1249            mov     _pwmSig4,#0x63
0255 E4        1250            clr     a
0256 F549      1251            mov     (_pwmSig4 + 1),a
0258 22        1252            ret
0259           1253   ;------------------------------------------------------------
0259           1254   ;Allocation info for local variables in function 'PWMRight'
0259           1255   ;------------------------------------------------------------
0259           1256   ;------------------------------------------------------------
0259           1257   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:338: void PWMRight(void) {
0259           1258   ;        -----------------------------------------
0259           1259   ;         function PWMRight
0259           1260   ;        -----------------------------------------
0259           1261   _PWMRight:
0259           1262   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:339: pwmSig1 = 99;
0259 750863    1263            mov     _pwmSig1,#0x63
025C E4        1264            clr     a
025D F509      1265            mov     (_pwmSig1 + 1),a
025F           1266   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:340: pwmSig2 = 0;
025F E4        1267            clr     a
0260 F5C8      1268            mov     _pwmSig2,a
0262 F5C9      1269            mov     (_pwmSig2 + 1),a
0264           1270   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:342: pwmSig3 = 99;
0264 758863    1271            mov     _pwmSig3,#0x63
0267 E4        1272            clr     a
0268 F589      1273            mov     (_pwmSig3 + 1),a
026A           1274   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:343: pwmSig4 = 0;
026A E4        1275            clr     a
026B F548      1276            mov     _pwmSig4,a
026D F549      1277            mov     (_pwmSig4 + 1),a
026F 22        1278            ret
0270           1279   ;------------------------------------------------------------
0270           1280   ;Allocation info for local variables in function 'PWMStop'
0270           1281   ;------------------------------------------------------------
0270           1282   ;------------------------------------------------------------
0270           1283   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:347: void PWMStop(void) {
0270           1284   ;        -----------------------------------------
0270           1285   ;         function PWMStop
0270           1286   ;        -----------------------------------------
0270           1287   _PWMStop:
0270           1288   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:348: pwmSig1 = 0;
0270           1289   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:349: pwmSig2 = 0;
0270           1290   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:351: pwmSig3 = 0;
0270           1291   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:352: pwmSig4 = 0;
0270 E4        1292            clr     a
0271 F508      1293            mov     _pwmSig1,a
0273 F509      1294            mov     (_pwmSig1 + 1),a
0275 F5C8      1295            mov     _pwmSig2,a
0277 F5C9      1296            mov     (_pwmSig2 + 1),a
0279 F588      1297            mov     _pwmSig3,a
027B F589      1298            mov     (_pwmSig3 + 1),a
027D F548      1299            mov     _pwmSig4,a
027F F549      1300            mov     (_pwmSig4 + 1),a
0281 22        1301            ret
0282           1302   ;------------------------------------------------------------
0282           1303   ;Allocation info for local variables in function 'zero_time_calc'
0282           1304   ;------------------------------------------------------------
0282           1305   ;period1                   Allocated to registers r2 r3 r4 r5 
0282           1306   ;overflow_count            Allocated with name '_zero_time_calc_overflow_count_1_73'
0282           1307   ;------------------------------------------------------------
0282           1308   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:356: float zero_time_calc(void) {
0282           1309   ;        -----------------------------------------
0282           1310   ;         function zero_time_calc
0282           1311   ;        -----------------------------------------
0282           1312   _zero_time_calc:
0282           1313   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:360: TL0=0; 
0282 758A00    1314            mov     _TL0,#0x00
0285           1315   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:361: TH0=0;
0285 758C00    1316            mov     _TH0,#0x00
0288           1317   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:362: TF0=0;
0288 C28D      1318            clr     _TF0
028A           1319   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:363: overflow_count=0;
028A 7A00      1320            mov     r2,#0x00
028C 7B00      1321            mov     r3,#0x00
028E           1322   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:364: TR0=0;
028E C28C      1323            clr     _TR0
0290           1324   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:369: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt);
0290           1325   L016001?:
0290 75820C    1326            mov     dpl,#0x0C
0293 C002      1327            push    ar2
0295 C003      1328            push    ar3
0297 120100    1329            lcall   _Volts_at_Pin
029A AC82      1330            mov     r4,dpl
029C AD83      1331            mov     r5,dph
029E AEF0      1332            mov     r6,b
02A0 FF        1333            mov     r7,a
02A1 74CD      1334            mov     a,#0xCD
02A3 C0E0      1335            push    acc
02A5 74CC      1336            mov     a,#0xCC
02A7 C0E0      1337            push    acc
02A9 744C      1338            mov     a,#0x4C
02AB C0E0      1339            push    acc
02AD 743D      1340            mov     a,#0x3D
02AF C0E0      1341            push    acc
02B1 8C82      1342            mov     dpl,r4
02B3 8D83      1343            mov     dph,r5
02B5 8EF0      1344            mov     b,r6
02B7 EF        1345            mov     a,r7
02B8 120100    1346            lcall   ___fslt
02BB AC82      1347            mov     r4,dpl
02BD E581      1348            mov     a,sp
02BF 24FC      1349            add     a,#0xfc
02C1 F581      1350            mov     sp,a
02C3 D003      1351            pop     ar3
02C5 D002      1352            pop     ar2
02C7 EC        1353            mov     a,r4
02C8 7001      1354            jnz     L016001?
02CA           1355   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:371: while(Volts_at_Pin(QFP32_MUX_P1_6)>=thresholdVolt);
02CA           1356   L016004?:
02CA 75820C    1357            mov     dpl,#0x0C
02CD C002      1358            push    ar2
02CF C003      1359            push    ar3
02D1 120100    1360            lcall   _Volts_at_Pin
02D4 AC82      1361            mov     r4,dpl
02D6 AD83      1362            mov     r5,dph
02D8 AEF0      1363            mov     r6,b
02DA FF        1364            mov     r7,a
02DB 74CD      1365            mov     a,#0xCD
02DD C0E0      1366            push    acc
02DF 74CC      1367            mov     a,#0xCC
02E1 C0E0      1368            push    acc
02E3 744C      1369            mov     a,#0x4C
02E5 C0E0      1370            push    acc
02E7 743D      1371            mov     a,#0x3D
02E9 C0E0      1372            push    acc
02EB 8C82      1373            mov     dpl,r4
02ED 8D83      1374            mov     dph,r5
02EF 8EF0      1375            mov     b,r6
02F1 EF        1376            mov     a,r7
02F2 120100    1377            lcall   ___fslt
02F5 AC82      1378            mov     r4,dpl
02F7 E581      1379            mov     a,sp
02F9 24FC      1380            add     a,#0xfc
02FB F581      1381            mov     sp,a
02FD D003      1382            pop     ar3
02FF D002      1383            pop     ar2
0301 EC        1384            mov     a,r4
0302 6001      1385            jz      L016004?
0304           1386   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:373: TR0=1; // Start the timer
0304 D28C      1387            setb    _TR0
0306           1388   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:374: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt) // (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000<1000) // Wait for the signal to be zero
0306 E4        1389            clr     a
0307 F528      1390            mov     _zero_time_calc_overflow_count_1_73,a
0309 F529      1391            mov     (_zero_time_calc_overflow_count_1_73 + 1),a
030B           1392   L016011?:
030B 75820C    1393            mov     dpl,#0x0C
030E C002      1394            push    ar2
0310 C003      1395            push    ar3
0312 120100    1396            lcall   _Volts_at_Pin
0315 AE82      1397            mov     r6,dpl
0317 AF83      1398            mov     r7,dph
0319 A8F0      1399            mov     r0,b
031B F9        1400            mov     r1,a
031C 74CD      1401            mov     a,#0xCD
031E C0E0      1402            push    acc
0320 74CC      1403            mov     a,#0xCC
0322 C0E0      1404            push    acc
0324 744C      1405            mov     a,#0x4C
0326 C0E0      1406            push    acc
0328 743D      1407            mov     a,#0x3D
032A C0E0      1408            push    acc
032C 8E82      1409            mov     dpl,r6
032E 8F83      1410            mov     dph,r7
0330 88F0      1411            mov     b,r0
0332 E9        1412            mov     a,r1
0333 120100    1413            lcall   ___fslt
0336 AE82      1414            mov     r6,dpl
0338 E581      1415            mov     a,sp
033A 24FC      1416            add     a,#0xfc
033C F581      1417            mov     sp,a
033E D003      1418            pop     ar3
0340 D002      1419            pop     ar2
0342 EE        1420            mov     a,r6
0343 7001      1421            jnz     L016025?
0345 020100    1422            ljmp    L016013?
0348           1423   L016025?:
0348           1424   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:376: if(TF0==1) // Did the 16-bit timer overflow?
0348           1425   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:378: TF0=0;
0348 108D88    1426            jbc     _TF0,L016026?
034B 8001      1427            sjmp    L016008?
034D           1428   L016026?:
034D           1429   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:379: overflow_count++;
034D 0528      1430            inc     _zero_time_calc_overflow_count_1_73
034F E4        1431            clr     a
0350 B52808    1432            cjne    a,_zero_time_calc_overflow_count_1_73,L016027?
0353 0529      1433            inc     (_zero_time_calc_overflow_count_1_73 + 1)
0355           1434   L016027?:
0355 AA28      1435            mov     r2,_zero_time_calc_overflow_count_1_73
0357 AB29      1436            mov     r3,(_zero_time_calc_overflow_count_1_73 + 1)
0359           1437   L016008?:
0359           1438   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:381: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >1800) 
0359 C002      1439            push    ar2
035B C003      1440            push    ar3
035D 852882    1441            mov     dpl,_zero_time_calc_overflow_count_1_73
0360 852983    1442            mov     dph,(_zero_time_calc_overflow_count_1_73 + 1)
0363 C002      1443            push    ar2
0365 C003      1444            push    ar3
0367 120100    1445            lcall   ___sint2fs
036A AE82      1446            mov     r6,dpl
036C AF83      1447            mov     r7,dph
036E A8F0      1448            mov     r0,b
0370 F9        1449            mov     r1,a
0371 C006      1450            push    ar6
0373 C007      1451            push    ar7
0375 C000      1452            push    ar0
0377 C001      1453            push    ar1
0379 900000    1454            mov     dptr,#0x0000
037C 75F080    1455            mov     b,#0x80
037F 7447      1456            mov     a,#0x47
0381 120100    1457            lcall   ___fsmul
0384 AE82      1458            mov     r6,dpl
0386 AF83      1459            mov     r7,dph
0388 A8F0      1460            mov     r0,b
038A F9        1461            mov     r1,a
038B E581      1462            mov     a,sp
038D 24FC      1463            add     a,#0xfc
038F F581      1464            mov     sp,a
0391 D003      1465            pop     ar3
0393 D002      1466            pop     ar2
0395 858C82    1467            mov     dpl,_TH0
0398 C006      1468            push    ar6
039A C007      1469            push    ar7
039C C000      1470            push    ar0
039E C001      1471            push    ar1
03A0 120100    1472            lcall   ___uchar2fs
03A3 AC82      1473            mov     r4,dpl
03A5 AD83      1474            mov     r5,dph
03A7 AAF0      1475            mov     r2,b
03A9 FB        1476            mov     r3,a
03AA C004      1477            push    ar4
03AC C005      1478            push    ar5
03AE C002      1479            push    ar2
03B0 C003      1480            push    ar3
03B2 900000    1481            mov     dptr,#0x0000
03B5 75F080    1482            mov     b,#0x80
03B8 7443      1483            mov     a,#0x43
03BA 120100    1484            lcall   ___fsmul
03BD AA82      1485            mov     r2,dpl
03BF AB83      1486            mov     r3,dph
03C1 ACF0      1487            mov     r4,b
03C3 FD        1488            mov     r5,a
03C4 E581      1489            mov     a,sp
03C6 24FC      1490            add     a,#0xfc
03C8 F581      1491            mov     sp,a
03CA D001      1492            pop     ar1
03CC D000      1493            pop     ar0
03CE D007      1494            pop     ar7
03D0 D006      1495            pop     ar6
03D2 C002      1496            push    ar2
03D4 C003      1497            push    ar3
03D6 C004      1498            push    ar4
03D8 C005      1499            push    ar5
03DA 8E82      1500            mov     dpl,r6
03DC 8F83      1501            mov     dph,r7
03DE 88F0      1502            mov     b,r0
03E0 E9        1503            mov     a,r1
03E1 120100    1504            lcall   ___fsadd
03E4 AA82      1505            mov     r2,dpl
03E6 AB83      1506            mov     r3,dph
03E8 ACF0      1507            mov     r4,b
03EA FD        1508            mov     r5,a
03EB E581      1509            mov     a,sp
03ED 24FC      1510            add     a,#0xfc
03EF F581      1511            mov     sp,a
03F1 AE8A      1512            mov     r6,_TL0
03F3 7F00      1513            mov     r7,#0x00
03F5 8E82      1514            mov     dpl,r6
03F7 8F83      1515            mov     dph,r7
03F9 C002      1516            push    ar2
03FB C003      1517            push    ar3
03FD C004      1518            push    ar4
03FF C005      1519            push    ar5
0401 120100    1520            lcall   ___sint2fs
0404 AE82      1521            mov     r6,dpl
0406 AF83      1522            mov     r7,dph
0408 A8F0      1523            mov     r0,b
040A F9        1524            mov     r1,a
040B D005      1525            pop     ar5
040D D004      1526            pop     ar4
040F D003      1527            pop     ar3
0411 D002      1528            pop     ar2
0413 C006      1529            push    ar6
0415 C007      1530            push    ar7
0417 C000      1531            push    ar0
0419 C001      1532            push    ar1
041B 8A82      1533            mov     dpl,r2
041D 8B83      1534            mov     dph,r3
041F 8CF0      1535            mov     b,r4
0421 ED        1536            mov     a,r5
0422 120100    1537            lcall   ___fsadd
0425 AA82      1538            mov     r2,dpl
0427 AB83      1539            mov     r3,dph
0429 ACF0      1540            mov     r4,b
042B FD        1541            mov     r5,a
042C E581      1542            mov     a,sp
042E 24FC      1543            add     a,#0xfc
0430 F581      1544            mov     sp,a
0432 C002      1545            push    ar2
0434 C003      1546            push    ar3
0436 C004      1547            push    ar4
0438 C005      1548            push    ar5
043A 90C33E    1549            mov     dptr,#0xC33E
043D 75F02E    1550            mov     b,#0x2E
0440 7439      1551            mov     a,#0x39
0442 120100    1552            lcall   ___fsmul
0445 AA82      1553            mov     r2,dpl
0447 AB83      1554            mov     r3,dph
0449 ACF0      1555            mov     r4,b
044B FD        1556            mov     r5,a
044C E581      1557            mov     a,sp
044E 24FC      1558            add     a,#0xfc
0450 F581      1559            mov     sp,a
0452 C003      1560            push    ar3
0454 E4        1561            clr     a
0455 C0E0      1562            push    acc
0457 C0E0      1563            push    acc
0459 74E1      1564            mov     a,#0xE1
045B C0E0      1565            push    acc
045D 7444      1566            mov     a,#0x44
045F C0E0      1567            push    acc
0461 8A82      1568            mov     dpl,r2
0463 8B83      1569            mov     dph,r3
0465 8CF0      1570            mov     b,r4
0467 ED        1571            mov     a,r5
0468 120100    1572            lcall   ___fsgt
046B AA82      1573            mov     r2,dpl
046D E581      1574            mov     a,sp
046F 24FC      1575            add     a,#0xfc
0471 F581      1576            mov     sp,a
0473 D003      1577            pop     ar3
0475 EA        1578            mov     a,r2
0476 D003      1579            pop     ar3
0478 D002      1580            pop     ar2
047A 7001      1581            jnz     L016028?
047C 020100    1582            ljmp    L016011?
047F           1583   L016028?:
047F           1584   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:382: return 1800;
047F 900000    1585            mov     dptr,#0x0000
0482 75F0E1    1586            mov     b,#0xE1
0485 7444      1587            mov     a,#0x44
0487 22        1588            ret
0488           1589   L016013?:
0488           1590   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:385: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0488 C28C      1591            clr     _TR0
048A           1592   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:386: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000;
048A 8A82      1593            mov     dpl,r2
048C 8B83      1594            mov     dph,r3
048E 120100    1595            lcall   ___sint2fs
0491 AA82      1596            mov     r2,dpl
0493 AB83      1597            mov     r3,dph
0495 ACF0      1598            mov     r4,b
0497 FD        1599            mov     r5,a
0498 C002      1600            push    ar2
049A C003      1601            push    ar3
049C C004      1602            push    ar4
049E C005      1603            push    ar5
04A0 900000    1604            mov     dptr,#0x0000
04A3 75F080    1605            mov     b,#0x80
04A6 7447      1606            mov     a,#0x47
04A8 120100    1607            lcall   ___fsmul
04AB AA82      1608            mov     r2,dpl
04AD AB83      1609            mov     r3,dph
04AF ACF0      1610            mov     r4,b
04B1 FD        1611            mov     r5,a
04B2 E581      1612            mov     a,sp
04B4 24FC      1613            add     a,#0xfc
04B6 F581      1614            mov     sp,a
04B8 858C82    1615            mov     dpl,_TH0
04BB C002      1616            push    ar2
04BD C003      1617            push    ar3
04BF C004      1618            push    ar4
04C1 C005      1619            push    ar5
04C3 120100    1620            lcall   ___uchar2fs
04C6 AE82      1621            mov     r6,dpl
04C8 AF83      1622            mov     r7,dph
04CA A8F0      1623            mov     r0,b
04CC F9        1624            mov     r1,a
04CD C006      1625            push    ar6
04CF C007      1626            push    ar7
04D1 C000      1627            push    ar0
04D3 C001      1628            push    ar1
04D5 900000    1629            mov     dptr,#0x0000
04D8 75F080    1630            mov     b,#0x80
04DB 7443      1631            mov     a,#0x43
04DD 120100    1632            lcall   ___fsmul
04E0 AE82      1633            mov     r6,dpl
04E2 AF83      1634            mov     r7,dph
04E4 A8F0      1635            mov     r0,b
04E6 F9        1636            mov     r1,a
04E7 E581      1637            mov     a,sp
04E9 24FC      1638            add     a,#0xfc
04EB F581      1639            mov     sp,a
04ED D005      1640            pop     ar5
04EF D004      1641            pop     ar4
04F1 D003      1642            pop     ar3
04F3 D002      1643            pop     ar2
04F5 C006      1644            push    ar6
04F7 C007      1645            push    ar7
04F9 C000      1646            push    ar0
04FB C001      1647            push    ar1
04FD 8A82      1648            mov     dpl,r2
04FF 8B83      1649            mov     dph,r3
0501 8CF0      1650            mov     b,r4
0503 ED        1651            mov     a,r5
0504 120100    1652            lcall   ___fsadd
0507 AA82      1653            mov     r2,dpl
0509 AB83      1654            mov     r3,dph
050B ACF0      1655            mov     r4,b
050D FD        1656            mov     r5,a
050E E581      1657            mov     a,sp
0510 24FC      1658            add     a,#0xfc
0512 F581      1659            mov     sp,a
0514 AE8A      1660            mov     r6,_TL0
0516 7F00      1661            mov     r7,#0x00
0518 8E82      1662            mov     dpl,r6
051A 8F83      1663            mov     dph,r7
051C C002      1664            push    ar2
051E C003      1665            push    ar3
0520 C004      1666            push    ar4
0522 C005      1667            push    ar5
0524 120100    1668            lcall   ___sint2fs
0527 AE82      1669            mov     r6,dpl
0529 AF83      1670            mov     r7,dph
052B A8F0      1671            mov     r0,b
052D F9        1672            mov     r1,a
052E D005      1673            pop     ar5
0530 D004      1674            pop     ar4
0532 D003      1675            pop     ar3
0534 D002      1676            pop     ar2
0536 C006      1677            push    ar6
0538 C007      1678            push    ar7
053A C000      1679            push    ar0
053C C001      1680            push    ar1
053E 8A82      1681            mov     dpl,r2
0540 8B83      1682            mov     dph,r3
0542 8CF0      1683            mov     b,r4
0544 ED        1684            mov     a,r5
0545 120100    1685            lcall   ___fsadd
0548 AA82      1686            mov     r2,dpl
054A AB83      1687            mov     r3,dph
054C ACF0      1688            mov     r4,b
054E FD        1689            mov     r5,a
054F E581      1690            mov     a,sp
0551 24FC      1691            add     a,#0xfc
0553 F581      1692            mov     sp,a
0555 C002      1693            push    ar2
0557 C003      1694            push    ar3
0559 C004      1695            push    ar4
055B C005      1696            push    ar5
055D 90C33E    1697            mov     dptr,#0xC33E
0560 75F02E    1698            mov     b,#0x2E
0563 7439      1699            mov     a,#0x39
0565 120100    1700            lcall   ___fsmul
0568 AA82      1701            mov     r2,dpl
056A AB83      1702            mov     r3,dph
056C ACF0      1703            mov     r4,b
056E FD        1704            mov     r5,a
056F E581      1705            mov     a,sp
0571 24FC      1706            add     a,#0xfc
0573 F581      1707            mov     sp,a
0575           1708   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:389: return period1; //return period of high pulse in seconds
0575 8A82      1709            mov     dpl,r2
0577 8B83      1710            mov     dph,r3
0579 8CF0      1711            mov     b,r4
057B ED        1712            mov     a,r5
057C 22        1713            ret
057D           1714   ;------------------------------------------------------------
057D           1715   ;Allocation info for local variables in function 'arrayEqual'
057D           1716   ;------------------------------------------------------------
057D           1717   ;size                      Allocated with name '_arrayEqual_PARM_2'
057D           1718   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
057D           1719   ;arr1                      Allocated with name '_arrayEqual_arr1_1_76'
057D           1720   ;i                         Allocated to registers r5 r6 
057D           1721   ;------------------------------------------------------------
057D           1722   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:393: int arrayEqual (int arr1[], int size, int arr2[]){
057D           1723   ;        -----------------------------------------
057D           1724   ;         function arrayEqual
057D           1725   ;        -----------------------------------------
057D           1726   _arrayEqual:
057D 8582B8    1727            mov     _arrayEqual_arr1_1_76,dpl
0580 8583B9    1728            mov     (_arrayEqual_arr1_1_76 + 1),dph
0583 85F0BA    1729            mov     (_arrayEqual_arr1_1_76 + 2),b
0586           1730   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:395: for(i=0; i<size; i++){
0586 7D00      1731            mov     r5,#0x00
0588 7E00      1732            mov     r6,#0x00
058A           1733   L017003?:
058A C3        1734            clr     c
058B ED        1735            mov     a,r5
058C 95A0      1736            subb    a,_arrayEqual_PARM_2
058E EE        1737            mov     a,r6
058F 6480      1738            xrl     a,#0x80
0591 85A1F0    1739            mov     b,(_arrayEqual_PARM_2 + 1)
0594 63F080    1740            xrl     b,#0x80
0597 95F0      1741            subb    a,b
0599 5001      1742            jnc     L017006?
059B           1743   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:396: if(arr1[i]!=arr2[i])
059B 8D07      1744            mov     ar7,r5
059D EE        1745            mov     a,r6
059E CF        1746            xch     a,r7
059F 25E0      1747            add     a,acc
05A1 CF        1748            xch     a,r7
05A2 33        1749            rlc     a
05A3 F8        1750            mov     r0,a
05A4 EF        1751            mov     a,r7
05A5 25B8      1752            add     a,_arrayEqual_arr1_1_76
05A7 F9        1753            mov     r1,a
05A8 E8        1754            mov     a,r0
05A9 35B9      1755            addc    a,(_arrayEqual_arr1_1_76 + 1)
05AB FA        1756            mov     r2,a
05AC ABBA      1757            mov     r3,(_arrayEqual_arr1_1_76 + 2)
05AE 8982      1758            mov     dpl,r1
05B0 8A83      1759            mov     dph,r2
05B2 8BF0      1760            mov     b,r3
05B4 120100    1761            lcall   __gptrget
05B7 F9        1762            mov     r1,a
05B8 A3        1763            inc     dptr
05B9 120100    1764            lcall   __gptrget
05BC FA        1765            mov     r2,a
05BD EF        1766            mov     a,r7
05BE 2550      1767            add     a,_arrayEqual_PARM_3
05C0 FF        1768            mov     r7,a
05C1 E8        1769            mov     a,r0
05C2 3551      1770            addc    a,(_arrayEqual_PARM_3 + 1)
05C4 F8        1771            mov     r0,a
05C5 AB52      1772            mov     r3,(_arrayEqual_PARM_3 + 2)
05C7 8F82      1773            mov     dpl,r7
05C9 8883      1774            mov     dph,r0
05CB 8BF0      1775            mov     b,r3
05CD 120100    1776            lcall   __gptrget
05D0 FF        1777            mov     r7,a
05D1 A3        1778            inc     dptr
05D2 120100    1779            lcall   __gptrget
05D5 F8        1780            mov     r0,a
05D6 E9        1781            mov     a,r1
05D7 B50748    1782            cjne    a,ar7,L017013?
05DA EA        1783            mov     a,r2
05DB B50048    1784            cjne    a,ar0,L017013?
05DE 8001      1785            sjmp    L017005?
05E0           1786   L017013?:
05E0           1787   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:397: return 0; 
05E0 900000    1788            mov     dptr,#0x0000
05E3 22        1789            ret
05E4           1790   L017005?:
05E4           1791   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:395: for(i=0; i<size; i++){
05E4 0D        1792            inc     r5
05E5 BD0088    1793            cjne    r5,#0x00,L017003?
05E8 0E        1794            inc     r6
05E9 8001      1795            sjmp    L017003?
05EB           1796   L017006?:
05EB           1797   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:399: return 1; 
05EB 900001    1798            mov     dptr,#0x0001
05EE 22        1799            ret
05EF           1800   ;------------------------------------------------------------
05EF           1801   ;Allocation info for local variables in function 'checkCommands'
05EF           1802   ;------------------------------------------------------------
05EF           1803   ;------------------------------------------------------------
05EF           1804   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:405: void checkCommands (void){
05EF           1805   ;        -----------------------------------------
05EF           1806   ;         function checkCommands
05EF           1807   ;        -----------------------------------------
05EF           1808   _checkCommands:
05EF           1809   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:406: if(arrayEqual(command, 4, stop)) PWMStop();
05EF 755088    1810            mov     _arrayEqual_PARM_3,#_stop
05F2 755100    1811            mov     (_arrayEqual_PARM_3 + 1),#0x00
05F5 755240    1812            mov     (_arrayEqual_PARM_3 + 2),#0x40
05F8 75A004    1813            mov     _arrayEqual_PARM_2,#0x04
05FB E4        1814            clr     a
05FC F5A1      1815            mov     (_arrayEqual_PARM_2 + 1),a
05FE 9018A0    1816            mov     dptr,#_command
0601 75F040    1817            mov     b,#0x40
0604 120100    1818            lcall   _arrayEqual
0607 E582      1819            mov     a,dpl
0609 8583F0    1820            mov     b,dph
060C 45F0      1821            orl     a,b
060E 6001      1822            jz      L018014?
0610 020100    1823            ljmp    _PWMStop
0613           1824   L018014?:
0613           1825   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:407: else if (arrayEqual(command,4,forward)) PWMforward(); 
0613 755048    1826            mov     _arrayEqual_PARM_3,#_forward
0616 755100    1827            mov     (_arrayEqual_PARM_3 + 1),#0x00
0619 755240    1828            mov     (_arrayEqual_PARM_3 + 2),#0x40
061C 75A004    1829            mov     _arrayEqual_PARM_2,#0x04
061F E4        1830            clr     a
0620 F5A1      1831            mov     (_arrayEqual_PARM_2 + 1),a
0622 9018A0    1832            mov     dptr,#_command
0625 75F040    1833            mov     b,#0x40
0628 120100    1834            lcall   _arrayEqual
062B E582      1835            mov     a,dpl
062D 8583F0    1836            mov     b,dph
0630 45F0      1837            orl     a,b
0632 6001      1838            jz      L018011?
0634 020100    1839            ljmp    _PWMforward
0637           1840   L018011?:
0637           1841   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:408: else if (arrayEqual(command,4,backward)) PWMbackward(); 
0637 755008    1842            mov     _arrayEqual_PARM_3,#_backward
063A 755100    1843            mov     (_arrayEqual_PARM_3 + 1),#0x00
063D 755240    1844            mov     (_arrayEqual_PARM_3 + 2),#0x40
0640 75A004    1845            mov     _arrayEqual_PARM_2,#0x04
0643 E4        1846            clr     a
0644 F5A1      1847            mov     (_arrayEqual_PARM_2 + 1),a
0646 9018A0    1848            mov     dptr,#_command
0649 75F040    1849            mov     b,#0x40
064C 120100    1850            lcall   _arrayEqual
064F E582      1851            mov     a,dpl
0651 8583F0    1852            mov     b,dph
0654 45F0      1853            orl     a,b
0656 6001      1854            jz      L018008?
0658 020100    1855            ljmp    _PWMbackward
065B           1856   L018008?:
065B           1857   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:409: else if (arrayEqual(command,4, left)) PWMLeft(); 
065B 7550C8    1858            mov     _arrayEqual_PARM_3,#_left
065E 755100    1859            mov     (_arrayEqual_PARM_3 + 1),#0x00
0661 755240    1860            mov     (_arrayEqual_PARM_3 + 2),#0x40
0664 75A004    1861            mov     _arrayEqual_PARM_2,#0x04
0667 E4        1862            clr     a
0668 F5A1      1863            mov     (_arrayEqual_PARM_2 + 1),a
066A 9018A0    1864            mov     dptr,#_command
066D 75F040    1865            mov     b,#0x40
0670 120100    1866            lcall   _arrayEqual
0673 E582      1867            mov     a,dpl
0675 8583F0    1868            mov     b,dph
0678 45F0      1869            orl     a,b
067A 6001      1870            jz      L018005?
067C 020100    1871            ljmp    _PWMLeft
067F           1872   L018005?:
067F           1873   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:410: else if (arrayEqual(command,4, right)) PWMRight(); 
067F 7550E0    1874            mov     _arrayEqual_PARM_3,#_right
0682 755100    1875            mov     (_arrayEqual_PARM_3 + 1),#0x00
0685 755240    1876            mov     (_arrayEqual_PARM_3 + 2),#0x40
0688 75A004    1877            mov     _arrayEqual_PARM_2,#0x04
068B E4        1878            clr     a
068C F5A1      1879            mov     (_arrayEqual_PARM_2 + 1),a
068E 9018A0    1880            mov     dptr,#_command
0691 75F040    1881            mov     b,#0x40
0694 120100    1882            lcall   _arrayEqual
0697 E582      1883            mov     a,dpl
0699 8583F0    1884            mov     b,dph
069C 45F0      1885            orl     a,b
069E 6001      1886            jz      L018002?
06A0 020100    1887            ljmp    _PWMRight
06A3           1888   L018002?:
06A3           1889   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:411: else PWMStop(); //defaults to a halt (redundant)
06A3 020100    1890            ljmp    _PWMStop
06A6           1891   ;------------------------------------------------------------
06A6           1892   ;Allocation info for local variables in function 'voltsAtPeak'
06A6           1893   ;------------------------------------------------------------
06A6           1894   ;------------------------------------------------------------
06A6           1895   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:417: float voltsAtPeak(void) {
06A6           1896   ;        -----------------------------------------
06A6           1897   ;         function voltsAtPeak
06A6           1898   ;        -----------------------------------------
06A6           1899   _voltsAtPeak:
06A6           1900   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:419: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
06A6           1901   L019001?:
06A6 75820C    1902            mov     dpl,#0x0C
06A9 120100    1903            lcall   _ADC_at_Pin
06AC E582      1904            mov     a,dpl
06AE 8583F0    1905            mov     b,dph
06B1 45F0      1906            orl     a,b
06B3 6001      1907            jz      L019001?
06B5           1908   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:420: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
06B5 900000    1909            mov     dptr,#0x0000
06B8 120100    1910            lcall   _Timer3us
06BB           1911   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:421: return(Volts_at_Pin(QFP32_MUX_P1_6));
06BB 75820C    1912            mov     dpl,#0x0C
06BE 020100    1913            ljmp    _Volts_at_Pin
06C1           1914   ;------------------------------------------------------------
06C1           1915   ;Allocation info for local variables in function 'getDigitalSignal'
06C1           1916   ;------------------------------------------------------------
06C1           1917   ;------------------------------------------------------------
06C1           1918   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:434: int getDigitalSignal (void){
06C1           1919   ;        -----------------------------------------
06C1           1920   ;         function getDigitalSignal
06C1           1921   ;        -----------------------------------------
06C1           1922   _getDigitalSignal:
06C1           1923   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:436: if (voltsAtPeak()>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
06C1 120100    1924            lcall   _voltsAtPeak
06C4 AA82      1925            mov     r2,dpl
06C6 AB83      1926            mov     r3,dph
06C8 ACF0      1927            mov     r4,b
06CA FD        1928            mov     r5,a
06CB 74CD      1929            mov     a,#0xCD
06CD C0E0      1930            push    acc
06CF 74CC      1931            mov     a,#0xCC
06D1 C0E0      1932            push    acc
06D3 744C      1933            mov     a,#0x4C
06D5 C0E0      1934            push    acc
06D7 743D      1935            mov     a,#0x3D
06D9 C0E0      1936            push    acc
06DB 8A82      1937            mov     dpl,r2
06DD 8B83      1938            mov     dph,r3
06DF 8CF0      1939            mov     b,r4
06E1 ED        1940            mov     a,r5
06E2 120100    1941            lcall   ___fslt
06E5 AA82      1942            mov     r2,dpl
06E7 E581      1943            mov     a,sp
06E9 24FC      1944            add     a,#0xfc
06EB F581      1945            mov     sp,a
06ED EA        1946            mov     a,r2
06EE 7001      1947            jnz     L020002?
06F0           1948   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:438: printf("\nread 1:  at pin 1.6: %f\r", voltsAtPeak());
06F0 120100    1949            lcall   _voltsAtPeak
06F3 AA82      1950            mov     r2,dpl
06F5 AB83      1951            mov     r3,dph
06F7 ACF0      1952            mov     r4,b
06F9 FD        1953            mov     r5,a
06FA C002      1954            push    ar2
06FC C003      1955            push    ar3
06FE C004      1956            push    ar4
0700 C005      1957            push    ar5
0702 7488      1958            mov     a,#__str_0
0704 C0E0      1959            push    acc
0706 74CA      1960            mov     a,#(__str_0 >> 8)
0708 C0E0      1961            push    acc
070A 7480      1962            mov     a,#0x80
070C C0E0      1963            push    acc
070E 120100    1964            lcall   _printf
0711 E581      1965            mov     a,sp
0713 24F9      1966            add     a,#0xf9
0715 F581      1967            mov     sp,a
0717           1968   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:439: return 1;
0717 900001    1969            mov     dptr,#0x0001
071A 22        1970            ret
071B           1971   L020002?:
071B           1972   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:442: printf("\nread 0: Volt at pin 1.6: %f\r", voltsAtPeak());
071B 120100    1973            lcall   _voltsAtPeak
071E AA82      1974            mov     r2,dpl
0720 AB83      1975            mov     r3,dph
0722 ACF0      1976            mov     r4,b
0724 FD        1977            mov     r5,a
0725 C002      1978            push    ar2
0727 C003      1979            push    ar3
0729 C004      1980            push    ar4
072B C005      1981            push    ar5
072D 7408      1982            mov     a,#__str_1
072F C0E0      1983            push    acc
0731 74CB      1984            mov     a,#(__str_1 >> 8)
0733 C0E0      1985            push    acc
0735 7480      1986            mov     a,#0x80
0737 C0E0      1987            push    acc
0739 120100    1988            lcall   _printf
073C E581      1989            mov     a,sp
073E 24F9      1990            add     a,#0xf9
0740 F581      1991            mov     sp,a
0742           1992   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:443: return 0; 
0742 900000    1993            mov     dptr,#0x0000
0745 22        1994            ret
0746           1995   ;------------------------------------------------------------
0746           1996   ;Allocation info for local variables in function 'waitquarterperiod'
0746           1997   ;------------------------------------------------------------
0746           1998   ;------------------------------------------------------------
0746           1999   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:451: void waitquarterperiod(void){
0746           2000   ;        -----------------------------------------
0746           2001   ;         function waitquarterperiod
0746           2002   ;        -----------------------------------------
0746           2003   _waitquarterperiod:
0746           2004   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:452: waitms(constant_delay_time);
0746 90000A    2005            mov     dptr,#0x000A
0749 020100    2006            ljmp    _waitms
074C           2007   ;------------------------------------------------------------
074C           2008   ;Allocation info for local variables in function 'recieveData'
074C           2009   ;------------------------------------------------------------
074C           2010   ;checkcomm                 Allocated to registers 
074C           2011   ;i                         Allocated to registers r2 r3 
074C           2012   ;------------------------------------------------------------
074C           2013   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:458: void recieveData (){
074C           2014   ;        -----------------------------------------
074C           2015   ;         function recieveData
074C           2016   ;        -----------------------------------------
074C           2017   _recieveData:
074C           2018   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:462: while(getDigitalSignal()==0);          //wait for the signal to be 1 
074C           2019   L022001?:
074C 120100    2020            lcall   _getDigitalSignal
074F E582      2021            mov     a,dpl
0751 8583F0    2022            mov     b,dph
0754 45F0      2023            orl     a,b
0756 6001      2024            jz      L022001?
0758           2025   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:463: if (getDigitalSignal()==1){    //gets the first 1 that identifies a command 
0758 120100    2026            lcall   _getDigitalSignal
075B AA82      2027            mov     r2,dpl
075D AB83      2028            mov     r3,dph
075F BA0188    2029            cjne    r2,#0x01,L022010?
0762 BB0088    2030            cjne    r3,#0x00,L022010?
0765           2031   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:464: command[0]=1;
0765 75A001    2032            mov     _command,#0x01
0768 75A100    2033            mov     (_command + 1),#0x00
076B           2034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:465: for( i=1; i<4; i++){
076B 7A01      2035            mov     r2,#0x01
076D 7B00      2036            mov     r3,#0x00
076F           2037   L022006?:
076F C3        2038            clr     c
0770 EA        2039            mov     a,r2
0771 9404      2040            subb    a,#0x04
0773 EB        2041            mov     a,r3
0774 6480      2042            xrl     a,#0x80
0776 9480      2043            subb    a,#0x80
0778 5001      2044            jnc     L022009?
077A           2045   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:466: waitms(constant_delay_time);
077A 90000A    2046            mov     dptr,#0x000A
077D C002      2047            push    ar2
077F C003      2048            push    ar3
0781 120100    2049            lcall   _waitms
0784 D003      2050            pop     ar3
0786 D002      2051            pop     ar2
0788           2052   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:467: command[i]=getDigitalSignal();         
0788 8A04      2053            mov     ar4,r2
078A EB        2054            mov     a,r3
078B CC        2055            xch     a,r4
078C 25E0      2056            add     a,acc
078E CC        2057            xch     a,r4
078F 33        2058            rlc     a
0790 EC        2059            mov     a,r4
0791 24A0      2060            add     a,#_command
0793 F8        2061            mov     r0,a
0794 C002      2062            push    ar2
0796 C003      2063            push    ar3
0798 C000      2064            push    ar0
079A 120100    2065            lcall   _getDigitalSignal
079D E582      2066            mov     a,dpl
079F 8583F0    2067            mov     b,dph
07A2 D000      2068            pop     ar0
07A4 D003      2069            pop     ar3
07A6 D002      2070            pop     ar2
07A8 F6        2071            mov     @r0,a
07A9 08        2072            inc     r0
07AA A6F0      2073            mov     @r0,b
07AC 18        2074            dec     r0
07AD           2075   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:465: for( i=1; i<4; i++){
07AD 0A        2076            inc     r2
07AE BA00C8    2077            cjne    r2,#0x00,L022006?
07B1 0B        2078            inc     r3
07B2 8001      2079            sjmp    L022006?
07B4           2080   L022009?:
07B4           2081   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:470: checkCommands();                               //does activity depending on the command given 
07B4 020100    2082            ljmp    _checkCommands
07B7           2083   L022010?:
07B7 22        2084            ret
07B8           2085   ;------------------------------------------------------------
07B8           2086   ;Allocation info for local variables in function 'checkMode'
07B8           2087   ;------------------------------------------------------------
07B8           2088   ;------------------------------------------------------------
07B8           2089   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:476: int checkMode(){
07B8           2090   ;        -----------------------------------------
07B8           2091   ;         function checkMode
07B8           2092   ;        -----------------------------------------
07B8           2093   _checkMode:
07B8           2094   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:477: if(!BUTTON1 || x == 0){
07B8 30B248    2095            jnb     _P3_2,L023001?
07BB E560      2096            mov     a,_x
07BD 4561      2097            orl     a,(_x + 1)
07BF 7001      2098            jnz     L023012?
07C1           2099   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:478: while(!BUTTON1);
07C1           2100   L023001?:
07C1 30B248    2101            jnb     _P3_2,L023001?
07C4           2102   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:479: x= 0;
07C4           2103   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:480: return 0;
07C4 E4        2104            clr     a
07C5 F560      2105            mov     _x,a
07C7 F561      2106            mov     (_x + 1),a
07C9 F582      2107            mov     dpl,a
07CB F583      2108            mov     dph,a
07CD 22        2109            ret
07CE           2110   L023012?:
07CE           2111   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:482: else if(!BUTTON2 || x == 1){
07CE 30B3C8    2112            jnb     _P3_3,L023004?
07D1 7401      2113            mov     a,#0x01
07D3 B56008    2114            cjne    a,_x,L023027?
07D6 E4        2115            clr     a
07D7 B56108    2116            cjne    a,(_x + 1),L023027?
07DA 8001      2117            sjmp    L023028?
07DC           2118   L023027?:
07DC 8001      2119            sjmp    L023008?
07DE           2120   L023028?:
07DE           2121   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:483: while(!BUTTON2);
07DE           2122   L023004?:
07DE 30B3C8    2123            jnb     _P3_3,L023004?
07E1           2124   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:484: x = 1;
07E1 756001    2125            mov     _x,#0x01
07E4 E4        2126            clr     a
07E5 F561      2127            mov     (_x + 1),a
07E7           2128   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:485: return 1;
07E7 900001    2129            mov     dptr,#0x0001
07EA 22        2130            ret
07EB           2131   L023008?:
07EB           2132   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:488: x = 2;
07EB 756002    2133            mov     _x,#0x02
07EE E4        2134            clr     a
07EF F561      2135            mov     (_x + 1),a
07F1           2136   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:489: return 2;
07F1 900002    2137            mov     dptr,#0x0002
07F4 22        2138            ret
07F5           2139   ;------------------------------------------------------------
07F5           2140   ;Allocation info for local variables in function 'detectobstacle'
07F5           2141   ;------------------------------------------------------------
07F5           2142   ;threshold                 Allocated to registers r2 r3 r4 r5 
07F5           2143   ;------------------------------------------------------------
07F5           2144   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:494: void detectobstacle(float threshold){
07F5           2145   ;        -----------------------------------------
07F5           2146   ;         function detectobstacle
07F5           2147   ;        -----------------------------------------
07F5           2148   _detectobstacle:
07F5 AA82      2149            mov     r2,dpl
07F7 AB83      2150            mov     r3,dph
07F9 ACF0      2151            mov     r4,b
07FB FD        2152            mov     r5,a
07FC           2153   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:505: if(threshold <= 0.6 ){
07FC 749A      2154            mov     a,#0x9A
07FE C0E0      2155            push    acc
0800 7499      2156            mov     a,#0x99
0802 C0E0      2157            push    acc
0804 7419      2158            mov     a,#0x19
0806 C0E0      2159            push    acc
0808 743F      2160            mov     a,#0x3F
080A C0E0      2161            push    acc
080C 8A82      2162            mov     dpl,r2
080E 8B83      2163            mov     dph,r3
0810 8CF0      2164            mov     b,r4
0812 ED        2165            mov     a,r5
0813 120100    2166            lcall   ___fsgt
0816 AA82      2167            mov     r2,dpl
0818 E581      2168            mov     a,sp
081A 24FC      2169            add     a,#0xfc
081C F581      2170            mov     sp,a
081E EA        2171            mov     a,r2
081F 7001      2172            jnz     L024002?
0821           2173   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:507: printf("Turn right \r\n");
0821 7408      2174            mov     a,#__str_2
0823 C0E0      2175            push    acc
0825 74CE      2176            mov     a,#(__str_2 >> 8)
0827 C0E0      2177            push    acc
0829 7480      2178            mov     a,#0x80
082B C0E0      2179            push    acc
082D 120100    2180            lcall   _printf
0830 1581      2181            dec     sp
0832 1581      2182            dec     sp
0834 1581      2183            dec     sp
0836           2184   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:508: PWMRight();
0836 120100    2185            lcall   _PWMRight
0839           2186   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:509: waitms(500); //Make waits longer
0839 9001F4    2187            mov     dptr,#0x01F4
083C 120100    2188            lcall   _waitms
083F           2189   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:510: waitms(500); 
083F 9001F4    2190            mov     dptr,#0x01F4
0842 120100    2191            lcall   _waitms
0845           2192   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:511: waitms(300); 
0845 90012C    2193            mov     dptr,#0x012C
0848 120100    2194            lcall   _waitms
084B           2195   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:513: PWMStop();
084B 120100    2196            lcall   _PWMStop
084E           2197   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:514: waitms(500);
084E 9001F4    2198            mov     dptr,#0x01F4
0851 120100    2199            lcall   _waitms
0854           2200   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:515: waitms(250);
0854 9000FA    2201            mov     dptr,#0x00FA
0857 020100    2202            ljmp    _waitms
085A           2203   L024002?:
085A           2204   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:520: printf("Go Straight \r\n");
085A 7448      2205            mov     a,#__str_3
085C C0E0      2206            push    acc
085E 74CE      2207            mov     a,#(__str_3 >> 8)
0860 C0E0      2208            push    acc
0862 7480      2209            mov     a,#0x80
0864 C0E0      2210            push    acc
0866 120100    2211            lcall   _printf
0869 1581      2212            dec     sp
086B 1581      2213            dec     sp
086D 1581      2214            dec     sp
086F           2215   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:522: PWMforward();
086F 020100    2216            ljmp    _PWMforward
0872           2217   ;------------------------------------------------------------
0872           2218   ;Allocation info for local variables in function 'main'
0872           2219   ;------------------------------------------------------------
0872           2220   ;checkcommand              Allocated to registers 
0872           2221   ;sig1                      Allocated to registers 
0872           2222   ;sig2                      Allocated to registers 
0872           2223   ;peak                      Allocated to registers 
0872           2224   ;voltspeak                 Allocated to registers 
0872           2225   ;periodpwm                 Allocated to registers 
0872           2226   ;time                      Allocated to registers r2 r3 r4 r5 
0872           2227   ;period                    Allocated to registers r4 r5 r6 r7 
0872           2228   ;overflow_count            Allocated to registers r4 r5 
0872           2229   ;mode_toggle               Allocated to registers r2 r3 
0872           2230   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0872           2231   ;------------------------------------------------------------
0872           2232   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:529: void main(void)
0872           2233   ;        -----------------------------------------
0872           2234   ;         function main
0872           2235   ;        -----------------------------------------
0872           2236   _main:
0872           2237   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:543: TL0=0;
0872 758A00    2238            mov     _TL0,#0x00
0875           2239   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:544: TH0=0;
0875 758C00    2240            mov     _TH0,#0x00
0878           2241   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:545: TF0=0;         
0878 C28D      2242            clr     _TF0
087A           2243   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:546: TIMER0_Init();
087A 120100    2244            lcall   _TIMER0_Init
087D           2245   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:548: InitPinADC(1, 6); // Configure P2.5 as analog input
087D 75F006    2246            mov     _InitPinADC_PARM_2,#0x06
0880 758201    2247            mov     dpl,#0x01
0883 120100    2248            lcall   _InitPinADC
0886           2249   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:550: InitADC();
0886 120100    2250            lcall   _InitADC
0889           2251   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:551: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0889 7488      2252            mov     a,#__str_4
088B C0E0      2253            push    acc
088D 74CE      2254            mov     a,#(__str_4 >> 8)
088F C0E0      2255            push    acc
0891 7480      2256            mov     a,#0x80
0893 C0E0      2257            push    acc
0895 120100    2258            lcall   _printf
0898 1581      2259            dec     sp
089A 1581      2260            dec     sp
089C 1581      2261            dec     sp
089E           2262   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:553: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
089E 74C8      2263            mov     a,#__str_5
08A0 C0E0      2264            push    acc
08A2 74CE      2265            mov     a,#(__str_5 >> 8)
08A4 C0E0      2266            push    acc
08A6 7480      2267            mov     a,#0x80
08A8 C0E0      2268            push    acc
08AA 120100    2269            lcall   _printf
08AD 1581      2270            dec     sp
08AF 1581      2271            dec     sp
08B1 1581      2272            dec     sp
08B3           2273   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:555: printf("\n\r");
08B3 7408      2274            mov     a,#__str_6
08B5 C0E0      2275            push    acc
08B7 74CF      2276            mov     a,#(__str_6 >> 8)
08B9 C0E0      2277            push    acc
08BB 7480      2278            mov     a,#0x80
08BD C0E0      2279            push    acc
08BF 120100    2280            lcall   _printf
08C2 1581      2281            dec     sp
08C4 1581      2282            dec     sp
08C6 1581      2283            dec     sp
08C8           2284   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:558: PWMStop();
08C8 120100    2285            lcall   _PWMStop
08CB           2286   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:560: while (1)
08CB           2287   L025045?:
08CB           2288   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:562: mode_toggle = checkMode();
08CB 120100    2289            lcall   _checkMode
08CE AA82      2290            mov     r2,dpl
08D0 AB83      2291            mov     r3,dph
08D2           2292   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:565: if(mode_toggle == 0){
08D2 EA        2293            mov     a,r2
08D3 4B        2294            orl     a,r3
08D4 6001      2295            jz      L025072?
08D6 020100    2296            ljmp    L025042?
08D9           2297   L025072?:
08D9           2298   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:566: printf("auto \r\n");
08D9 7408      2299            mov     a,#__str_7
08DB C0E0      2300            push    acc
08DD 74D0      2301            mov     a,#(__str_7 >> 8)
08DF C0E0      2302            push    acc
08E1 7480      2303            mov     a,#0x80
08E3 C0E0      2304            push    acc
08E5 120100    2305            lcall   _printf
08E8 1581      2306            dec     sp
08EA 1581      2307            dec     sp
08EC 1581      2308            dec     sp
08EE           2309   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:568: TL0=0; 
08EE 758A00    2310            mov     _TL0,#0x00
08F1           2311   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:569: TH0=0;
08F1 758C00    2312            mov     _TH0,#0x00
08F4           2313   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:570: TF0=0;
08F4 C28D      2314            clr     _TF0
08F6           2315   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:572: while(P2_1!=0); // Wait for the signal to be zero
08F6           2316   L025001?:
08F6 20A148    2317            jb      _P2_1,L025001?
08F9           2318   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:573: while(P2_1!=1); // Wait for the signal to be one
08F9           2319   L025004?:
08F9 30A188    2320            jnb     _P2_1,L025004?
08FC           2321   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:574: TR0=1; // Start the timer
08FC D28C      2322            setb    _TR0
08FE           2323   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:575: while(P2_1!=0) // Wait for the signal to be zero
08FE 7C00      2324            mov     r4,#0x00
0900 7D00      2325            mov     r5,#0x00
0902           2326   L025009?:
0902 30A108    2327            jnb     _P2_1,L025011?
0905           2328   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:577: if(TF0==1) // Did the 16-bit timer overflow?
0905           2329   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:579: TF0=0;
0905 108D48    2330            jbc     _TF0,L025076?
0908 8001      2331            sjmp    L025009?
090A           2332   L025076?:
090A           2333   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:580: overflow_count++;
090A 0C        2334            inc     r4
090B BC00C8    2335            cjne    r4,#0x00,L025009?
090E 0D        2336            inc     r5
090F 8001      2337            sjmp    L025009?
0911           2338   L025011?:
0911           2339   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:591: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0911 C28C      2340            clr     _TR0
0913           2341   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:592: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0913 8C82      2342            mov     dpl,r4
0915 8D83      2343            mov     dph,r5
0917 120100    2344            lcall   ___sint2fs
091A AC82      2345            mov     r4,dpl
091C AD83      2346            mov     r5,dph
091E AEF0      2347            mov     r6,b
0920 FF        2348            mov     r7,a
0921 C004      2349            push    ar4
0923 C005      2350            push    ar5
0925 C006      2351            push    ar6
0927 C007      2352            push    ar7
0929 900000    2353            mov     dptr,#0x0000
092C 75F080    2354            mov     b,#0x80
092F 7447      2355            mov     a,#0x47
0931 120100    2356            lcall   ___fsmul
0934 858268    2357            mov     _main_sloc0_1_0,dpl
0937 858369    2358            mov     (_main_sloc0_1_0 + 1),dph
093A 85F06A    2359            mov     (_main_sloc0_1_0 + 2),b
093D F56B      2360            mov     (_main_sloc0_1_0 + 3),a
093F E581      2361            mov     a,sp
0941 24FC      2362            add     a,#0xfc
0943 F581      2363            mov     sp,a
0945 858C82    2364            mov     dpl,_TH0
0948 120100    2365            lcall   ___uchar2fs
094B A882      2366            mov     r0,dpl
094D A983      2367            mov     r1,dph
094F ACF0      2368            mov     r4,b
0951 FD        2369            mov     r5,a
0952 C000      2370            push    ar0
0954 C001      2371            push    ar1
0956 C004      2372            push    ar4
0958 C005      2373            push    ar5
095A 900000    2374            mov     dptr,#0x0000
095D 75F080    2375            mov     b,#0x80
0960 7443      2376            mov     a,#0x43
0962 120100    2377            lcall   ___fsmul
0965 AC82      2378            mov     r4,dpl
0967 AD83      2379            mov     r5,dph
0969 AEF0      2380            mov     r6,b
096B FF        2381            mov     r7,a
096C E581      2382            mov     a,sp
096E 24FC      2383            add     a,#0xfc
0970 F581      2384            mov     sp,a
0972 C004      2385            push    ar4
0974 C005      2386            push    ar5
0976 C006      2387            push    ar6
0978 C007      2388            push    ar7
097A 856882    2389            mov     dpl,_main_sloc0_1_0
097D 856983    2390            mov     dph,(_main_sloc0_1_0 + 1)
0980 856AF0    2391            mov     b,(_main_sloc0_1_0 + 2)
0983 E56B      2392            mov     a,(_main_sloc0_1_0 + 3)
0985 120100    2393            lcall   ___fsadd
0988 858268    2394            mov     _main_sloc0_1_0,dpl
098B 858369    2395            mov     (_main_sloc0_1_0 + 1),dph
098E 85F06A    2396            mov     (_main_sloc0_1_0 + 2),b
0991 F56B      2397            mov     (_main_sloc0_1_0 + 3),a
0993 E581      2398            mov     a,sp
0995 24FC      2399            add     a,#0xfc
0997 F581      2400            mov     sp,a
0999 A88A      2401            mov     r0,_TL0
099B 7900      2402            mov     r1,#0x00
099D 8882      2403            mov     dpl,r0
099F 8983      2404            mov     dph,r1
09A1 120100    2405            lcall   ___sint2fs
09A4 A882      2406            mov     r0,dpl
09A6 A983      2407            mov     r1,dph
09A8 ACF0      2408            mov     r4,b
09AA FD        2409            mov     r5,a
09AB C000      2410            push    ar0
09AD C001      2411            push    ar1
09AF C004      2412            push    ar4
09B1 C005      2413            push    ar5
09B3 856882    2414            mov     dpl,_main_sloc0_1_0
09B6 856983    2415            mov     dph,(_main_sloc0_1_0 + 1)
09B9 856AF0    2416            mov     b,(_main_sloc0_1_0 + 2)
09BC E56B      2417            mov     a,(_main_sloc0_1_0 + 3)
09BE 120100    2418            lcall   ___fsadd
09C1 AC82      2419            mov     r4,dpl
09C3 AD83      2420            mov     r5,dph
09C5 AEF0      2421            mov     r6,b
09C7 FF        2422            mov     r7,a
09C8 E581      2423            mov     a,sp
09CA 24FC      2424            add     a,#0xfc
09CC F581      2425            mov     sp,a
09CE C004      2426            push    ar4
09D0 C005      2427            push    ar5
09D2 C006      2428            push    ar6
09D4 C007      2429            push    ar7
09D6 90F4FC    2430            mov     dptr,#0xF4FC
09D9 75F032    2431            mov     b,#0x32
09DC 7434      2432            mov     a,#0x34
09DE 120100    2433            lcall   ___fsmul
09E1 AC82      2434            mov     r4,dpl
09E3 AD83      2435            mov     r5,dph
09E5 AEF0      2436            mov     r6,b
09E7 FF        2437            mov     r7,a
09E8 E581      2438            mov     a,sp
09EA 24FC      2439            add     a,#0xfc
09EC F581      2440            mov     sp,a
09EE           2441   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:594: printf( "\rT=%f ms   \n ", period*1000.0);
09EE C004      2442            push    ar4
09F0 C005      2443            push    ar5
09F2 C006      2444            push    ar6
09F4 C007      2445            push    ar7
09F6 900000    2446            mov     dptr,#0x0000
09F9 75F07A    2447            mov     b,#0x7A
09FC 7444      2448            mov     a,#0x44
09FE 120100    2449            lcall   ___fsmul
0A01 AC82      2450            mov     r4,dpl
0A03 AD83      2451            mov     r5,dph
0A05 AEF0      2452            mov     r6,b
0A07 FF        2453            mov     r7,a
0A08 E581      2454            mov     a,sp
0A0A 24FC      2455            add     a,#0xfc
0A0C F581      2456            mov     sp,a
0A0E C004      2457            push    ar4
0A10 C005      2458            push    ar5
0A12 C006      2459            push    ar6
0A14 C007      2460            push    ar7
0A16 C004      2461            push    ar4
0A18 C005      2462            push    ar5
0A1A C006      2463            push    ar6
0A1C C007      2464            push    ar7
0A1E 7488      2465            mov     a,#__str_8
0A20 C0E0      2466            push    acc
0A22 74D1      2467            mov     a,#(__str_8 >> 8)
0A24 C0E0      2468            push    acc
0A26 7480      2469            mov     a,#0x80
0A28 C0E0      2470            push    acc
0A2A 120100    2471            lcall   _printf
0A2D E581      2472            mov     a,sp
0A2F 24F9      2473            add     a,#0xf9
0A31 F581      2474            mov     sp,a
0A33           2475   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:595: waitms(50);
0A33 900032    2476            mov     dptr,#0x0032
0A36 120100    2477            lcall   _waitms
0A39 D007      2478            pop     ar7
0A3B D006      2479            pop     ar6
0A3D D005      2480            pop     ar5
0A3F D004      2481            pop     ar4
0A41           2482   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:596: detectobstacle(period*1000.0);
0A41 8C82      2483            mov     dpl,r4
0A43 8D83      2484            mov     dph,r5
0A45 8EF0      2485            mov     b,r6
0A47 EF        2486            mov     a,r7
0A48 120100    2487            lcall   _detectobstacle
0A4B           2488   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:605: waitms(50);    
0A4B 900032    2489            mov     dptr,#0x0032
0A4E 120100    2490            lcall   _waitms
0A51 020100    2491            ljmp    L025045?
0A54           2492   L025042?:
0A54           2493   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:609: else if(mode_toggle == 1){
0A54 BA01C8    2494            cjne    r2,#0x01,L025077?
0A57 BB00C8    2495            cjne    r3,#0x00,L025077?
0A5A 8001      2496            sjmp    L025078?
0A5C           2497   L025077?:
0A5C 020100    2498            ljmp    L025039?
0A5F           2499   L025078?:
0A5F           2500   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:610: printf("manual \r\n");
0A5F 7488      2501            mov     a,#__str_9
0A61 C0E0      2502            push    acc
0A63 74D2      2503            mov     a,#(__str_9 >> 8)
0A65 C0E0      2504            push    acc
0A67 7480      2505            mov     a,#0x80
0A69 C0E0      2506            push    acc
0A6B 120100    2507            lcall   _printf
0A6E 1581      2508            dec     sp
0A70 1581      2509            dec     sp
0A72 1581      2510            dec     sp
0A74           2511   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:617: time=zero_time_calc(); 
0A74 120100    2512            lcall   _zero_time_calc
0A77 AA82      2513            mov     r2,dpl
0A79 AB83      2514            mov     r3,dph
0A7B ACF0      2515            mov     r4,b
0A7D FD        2516            mov     r5,a
0A7E           2517   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:618: printf("Time: %f\n\t\r", time);
0A7E C002      2518            push    ar2
0A80 C003      2519            push    ar3
0A82 C004      2520            push    ar4
0A84 C005      2521            push    ar5
0A86 C002      2522            push    ar2
0A88 C003      2523            push    ar3
0A8A C004      2524            push    ar4
0A8C C005      2525            push    ar5
0A8E 74C8      2526            mov     a,#__str_10
0A90 C0E0      2527            push    acc
0A92 74D2      2528            mov     a,#(__str_10 >> 8)
0A94 C0E0      2529            push    acc
0A96 7480      2530            mov     a,#0x80
0A98 C0E0      2531            push    acc
0A9A 120100    2532            lcall   _printf
0A9D E581      2533            mov     a,sp
0A9F 24F9      2534            add     a,#0xf9
0AA1 F581      2535            mov     sp,a
0AA3 D005      2536            pop     ar5
0AA5 D004      2537            pop     ar4
0AA7 D003      2538            pop     ar3
0AA9 D002      2539            pop     ar2
0AAB           2540   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:621: if((time>=300 && time<=450)||(time>=1400 && time<=1500)||
0AAB C002      2541            push    ar2
0AAD C003      2542            push    ar3
0AAF C004      2543            push    ar4
0AB1 C005      2544            push    ar5
0AB3 E4        2545            clr     a
0AB4 C0E0      2546            push    acc
0AB6 C0E0      2547            push    acc
0AB8 7496      2548            mov     a,#0x96
0ABA C0E0      2549            push    acc
0ABC 7443      2550            mov     a,#0x43
0ABE C0E0      2551            push    acc
0AC0 8A82      2552            mov     dpl,r2
0AC2 8B83      2553            mov     dph,r3
0AC4 8CF0      2554            mov     b,r4
0AC6 ED        2555            mov     a,r5
0AC7 120100    2556            lcall   ___fslt
0ACA AE82      2557            mov     r6,dpl
0ACC E581      2558            mov     a,sp
0ACE 24FC      2559            add     a,#0xfc
0AD0 F581      2560            mov     sp,a
0AD2 D005      2561            pop     ar5
0AD4 D004      2562            pop     ar4
0AD6 D003      2563            pop     ar3
0AD8 D002      2564            pop     ar2
0ADA EE        2565            mov     a,r6
0ADB 7001      2566            jnz     L025032?
0ADD C002      2567            push    ar2
0ADF C003      2568            push    ar3
0AE1 C004      2569            push    ar4
0AE3 C005      2570            push    ar5
0AE5 C006      2571            push    ar6
0AE7 E4        2572            clr     a
0AE8 C0E0      2573            push    acc
0AEA C0E0      2574            push    acc
0AEC 74E1      2575            mov     a,#0xE1
0AEE C0E0      2576            push    acc
0AF0 7443      2577            mov     a,#0x43
0AF2 C0E0      2578            push    acc
0AF4 8A82      2579            mov     dpl,r2
0AF6 8B83      2580            mov     dph,r3
0AF8 8CF0      2581            mov     b,r4
0AFA ED        2582            mov     a,r5
0AFB 120100    2583            lcall   ___fsgt
0AFE AF82      2584            mov     r7,dpl
0B00 E581      2585            mov     a,sp
0B02 24FC      2586            add     a,#0xfc
0B04 F581      2587            mov     sp,a
0B06 D006      2588            pop     ar6
0B08 D005      2589            pop     ar5
0B0A D004      2590            pop     ar4
0B0C D003      2591            pop     ar3
0B0E D002      2592            pop     ar2
0B10 EF        2593            mov     a,r7
0B11 7001      2594            jnz     L025080?
0B13 020100    2595            ljmp    L025028?
0B16           2596   L025080?:
0B16           2597   L025032?:
0B16 C002      2598            push    ar2
0B18 C003      2599            push    ar3
0B1A C004      2600            push    ar4
0B1C C005      2601            push    ar5
0B1E C006      2602            push    ar6
0B20 E4        2603            clr     a
0B21 C0E0      2604            push    acc
0B23 C0E0      2605            push    acc
0B25 74AF      2606            mov     a,#0xAF
0B27 C0E0      2607            push    acc
0B29 7444      2608            mov     a,#0x44
0B2B C0E0      2609            push    acc
0B2D 8A82      2610            mov     dpl,r2
0B2F 8B83      2611            mov     dph,r3
0B31 8CF0      2612            mov     b,r4
0B33 ED        2613            mov     a,r5
0B34 120100    2614            lcall   ___fslt
0B37 AF82      2615            mov     r7,dpl
0B39 E581      2616            mov     a,sp
0B3B 24FC      2617            add     a,#0xfc
0B3D F581      2618            mov     sp,a
0B3F D006      2619            pop     ar6
0B41 D005      2620            pop     ar5
0B43 D004      2621            pop     ar4
0B45 D003      2622            pop     ar3
0B47 D002      2623            pop     ar2
0B49 EF        2624            mov     a,r7
0B4A 7001      2625            jnz     L025034?
0B4C C002      2626            push    ar2
0B4E C003      2627            push    ar3
0B50 C004      2628            push    ar4
0B52 C005      2629            push    ar5
0B54 C006      2630            push    ar6
0B56 E4        2631            clr     a
0B57 C0E0      2632            push    acc
0B59 7480      2633            mov     a,#0x80
0B5B C0E0      2634            push    acc
0B5D 74BB      2635            mov     a,#0xBB
0B5F C0E0      2636            push    acc
0B61 7444      2637            mov     a,#0x44
0B63 C0E0      2638            push    acc
0B65 8A82      2639            mov     dpl,r2
0B67 8B83      2640            mov     dph,r3
0B69 8CF0      2641            mov     b,r4
0B6B ED        2642            mov     a,r5
0B6C 120100    2643            lcall   ___fsgt
0B6F AF82      2644            mov     r7,dpl
0B71 E581      2645            mov     a,sp
0B73 24FC      2646            add     a,#0xfc
0B75 F581      2647            mov     sp,a
0B77 D006      2648            pop     ar6
0B79 D005      2649            pop     ar5
0B7B D004      2650            pop     ar4
0B7D D003      2651            pop     ar3
0B7F D002      2652            pop     ar2
0B81 EF        2653            mov     a,r7
0B82 7001      2654            jnz     L025082?
0B84 020100    2655            ljmp    L025028?
0B87           2656   L025082?:
0B87           2657   L025034?:
0B87           2658   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:622: (time>=1060 && time<=1090)||(time>=1780) || (time>=600 && time<=750) ){
0B87 C002      2659            push    ar2
0B89 C003      2660            push    ar3
0B8B C004      2661            push    ar4
0B8D C005      2662            push    ar5
0B8F C006      2663            push    ar6
0B91 E4        2664            clr     a
0B92 C0E0      2665            push    acc
0B94 7480      2666            mov     a,#0x80
0B96 C0E0      2667            push    acc
0B98 7484      2668            mov     a,#0x84
0B9A C0E0      2669            push    acc
0B9C 7444      2670            mov     a,#0x44
0B9E C0E0      2671            push    acc
0BA0 8A82      2672            mov     dpl,r2
0BA2 8B83      2673            mov     dph,r3
0BA4 8CF0      2674            mov     b,r4
0BA6 ED        2675            mov     a,r5
0BA7 120100    2676            lcall   ___fslt
0BAA AF82      2677            mov     r7,dpl
0BAC E581      2678            mov     a,sp
0BAE 24FC      2679            add     a,#0xfc
0BB0 F581      2680            mov     sp,a
0BB2 D006      2681            pop     ar6
0BB4 D005      2682            pop     ar5
0BB6 D004      2683            pop     ar4
0BB8 D003      2684            pop     ar3
0BBA D002      2685            pop     ar2
0BBC EF        2686            mov     a,r7
0BBD 7001      2687            jnz     L025035?
0BBF C002      2688            push    ar2
0BC1 C003      2689            push    ar3
0BC3 C004      2690            push    ar4
0BC5 C005      2691            push    ar5
0BC7 C006      2692            push    ar6
0BC9 E4        2693            clr     a
0BCA C0E0      2694            push    acc
0BCC 7440      2695            mov     a,#0x40
0BCE C0E0      2696            push    acc
0BD0 7488      2697            mov     a,#0x88
0BD2 C0E0      2698            push    acc
0BD4 7444      2699            mov     a,#0x44
0BD6 C0E0      2700            push    acc
0BD8 8A82      2701            mov     dpl,r2
0BDA 8B83      2702            mov     dph,r3
0BDC 8CF0      2703            mov     b,r4
0BDE ED        2704            mov     a,r5
0BDF 120100    2705            lcall   ___fsgt
0BE2 AF82      2706            mov     r7,dpl
0BE4 E581      2707            mov     a,sp
0BE6 24FC      2708            add     a,#0xfc
0BE8 F581      2709            mov     sp,a
0BEA D006      2710            pop     ar6
0BEC D005      2711            pop     ar5
0BEE D004      2712            pop     ar4
0BF0 D003      2713            pop     ar3
0BF2 D002      2714            pop     ar2
0BF4 EF        2715            mov     a,r7
0BF5 7001      2716            jnz     L025084?
0BF7 020100    2717            ljmp    L025028?
0BFA           2718   L025084?:
0BFA           2719   L025035?:
0BFA C002      2720            push    ar2
0BFC C003      2721            push    ar3
0BFE C004      2722            push    ar4
0C00 C005      2723            push    ar5
0C02 C006      2724            push    ar6
0C04 E4        2725            clr     a
0C05 C0E0      2726            push    acc
0C07 7480      2727            mov     a,#0x80
0C09 C0E0      2728            push    acc
0C0B 74DE      2729            mov     a,#0xDE
0C0D C0E0      2730            push    acc
0C0F 7444      2731            mov     a,#0x44
0C11 C0E0      2732            push    acc
0C13 8A82      2733            mov     dpl,r2
0C15 8B83      2734            mov     dph,r3
0C17 8CF0      2735            mov     b,r4
0C19 ED        2736            mov     a,r5
0C1A 120100    2737            lcall   ___fslt
0C1D AF82      2738            mov     r7,dpl
0C1F E581      2739            mov     a,sp
0C21 24FC      2740            add     a,#0xfc
0C23 F581      2741            mov     sp,a
0C25 D006      2742            pop     ar6
0C27 D005      2743            pop     ar5
0C29 D004      2744            pop     ar4
0C2B D003      2745            pop     ar3
0C2D D002      2746            pop     ar2
0C2F EF        2747            mov     a,r7
0C30 6001      2748            jz      L025028?
0C32 C002      2749            push    ar2
0C34 C003      2750            push    ar3
0C36 C004      2751            push    ar4
0C38 C005      2752            push    ar5
0C3A C006      2753            push    ar6
0C3C E4        2754            clr     a
0C3D C0E0      2755            push    acc
0C3F C0E0      2756            push    acc
0C41 7416      2757            mov     a,#0x16
0C43 C0E0      2758            push    acc
0C45 7444      2759            mov     a,#0x44
0C47 C0E0      2760            push    acc
0C49 8A82      2761            mov     dpl,r2
0C4B 8B83      2762            mov     dph,r3
0C4D 8CF0      2763            mov     b,r4
0C4F ED        2764            mov     a,r5
0C50 120100    2765            lcall   ___fslt
0C53 AF82      2766            mov     r7,dpl
0C55 E581      2767            mov     a,sp
0C57 24FC      2768            add     a,#0xfc
0C59 F581      2769            mov     sp,a
0C5B D006      2770            pop     ar6
0C5D D005      2771            pop     ar5
0C5F D004      2772            pop     ar4
0C61 D003      2773            pop     ar3
0C63 D002      2774            pop     ar2
0C65 EF        2775            mov     a,r7
0C66 6001      2776            jz      L025086?
0C68 020100    2777            ljmp    L025045?
0C6B           2778   L025086?:
0C6B C002      2779            push    ar2
0C6D C003      2780            push    ar3
0C6F C004      2781            push    ar4
0C71 C005      2782            push    ar5
0C73 C006      2783            push    ar6
0C75 E4        2784            clr     a
0C76 C0E0      2785            push    acc
0C78 7480      2786            mov     a,#0x80
0C7A C0E0      2787            push    acc
0C7C 743B      2788            mov     a,#0x3B
0C7E C0E0      2789            push    acc
0C80 7444      2790            mov     a,#0x44
0C82 C0E0      2791            push    acc
0C84 8A82      2792            mov     dpl,r2
0C86 8B83      2793            mov     dph,r3
0C88 8CF0      2794            mov     b,r4
0C8A ED        2795            mov     a,r5
0C8B 120100    2796            lcall   ___fsgt
0C8E AF82      2797            mov     r7,dpl
0C90 E581      2798            mov     a,sp
0C92 24FC      2799            add     a,#0xfc
0C94 F581      2800            mov     sp,a
0C96 D006      2801            pop     ar6
0C98 D005      2802            pop     ar5
0C9A D004      2803            pop     ar4
0C9C D003      2804            pop     ar3
0C9E D002      2805            pop     ar2
0CA0 EF        2806            mov     a,r7
0CA1 6001      2807            jz      L025087?
0CA3 020100    2808            ljmp    L025045?
0CA6           2809   L025087?:
0CA6           2810   L025028?:
0CA6           2811   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:623: if(time>=1400 && time<=1500){
0CA6 C002      2812            push    ar2
0CA8 C003      2813            push    ar3
0CAA C004      2814            push    ar4
0CAC C005      2815            push    ar5
0CAE C006      2816            push    ar6
0CB0 E4        2817            clr     a
0CB1 C0E0      2818            push    acc
0CB3 C0E0      2819            push    acc
0CB5 74AF      2820            mov     a,#0xAF
0CB7 C0E0      2821            push    acc
0CB9 7444      2822            mov     a,#0x44
0CBB C0E0      2823            push    acc
0CBD 8A82      2824            mov     dpl,r2
0CBF 8B83      2825            mov     dph,r3
0CC1 8CF0      2826            mov     b,r4
0CC3 ED        2827            mov     a,r5
0CC4 120100    2828            lcall   ___fslt
0CC7 AF82      2829            mov     r7,dpl
0CC9 E581      2830            mov     a,sp
0CCB 24FC      2831            add     a,#0xfc
0CCD F581      2832            mov     sp,a
0CCF D006      2833            pop     ar6
0CD1 D005      2834            pop     ar5
0CD3 D004      2835            pop     ar4
0CD5 D003      2836            pop     ar3
0CD7 D002      2837            pop     ar2
0CD9 EF        2838            mov     a,r7
0CDA 7001      2839            jnz     L025025?
0CDC C002      2840            push    ar2
0CDE C003      2841            push    ar3
0CE0 C004      2842            push    ar4
0CE2 C005      2843            push    ar5
0CE4 C006      2844            push    ar6
0CE6 E4        2845            clr     a
0CE7 C0E0      2846            push    acc
0CE9 7480      2847            mov     a,#0x80
0CEB C0E0      2848            push    acc
0CED 74BB      2849            mov     a,#0xBB
0CEF C0E0      2850            push    acc
0CF1 7444      2851            mov     a,#0x44
0CF3 C0E0      2852            push    acc
0CF5 8A82      2853            mov     dpl,r2
0CF7 8B83      2854            mov     dph,r3
0CF9 8CF0      2855            mov     b,r4
0CFB ED        2856            mov     a,r5
0CFC 120100    2857            lcall   ___fsgt
0CFF AF82      2858            mov     r7,dpl
0D01 E581      2859            mov     a,sp
0D03 24FC      2860            add     a,#0xfc
0D05 F581      2861            mov     sp,a
0D07 D006      2862            pop     ar6
0D09 D005      2863            pop     ar5
0D0B D004      2864            pop     ar4
0D0D D003      2865            pop     ar3
0D0F D002      2866            pop     ar2
0D11 EF        2867            mov     a,r7
0D12 7001      2868            jnz     L025025?
0D14           2869   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:624: printf("RIGHT\n\r");
0D14 7488      2870            mov     a,#__str_11
0D16 C0E0      2871            push    acc
0D18 74D5      2872            mov     a,#(__str_11 >> 8)
0D1A C0E0      2873            push    acc
0D1C 7480      2874            mov     a,#0x80
0D1E C0E0      2875            push    acc
0D20 120100    2876            lcall   _printf
0D23 1581      2877            dec     sp
0D25 1581      2878            dec     sp
0D27 1581      2879            dec     sp
0D29           2880   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:625: PWMRight();
0D29 120100    2881            lcall   _PWMRight
0D2C 020100    2882            ljmp    L025045?
0D2F           2883   L025025?:
0D2F           2884   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:627: else if(time>=300 && time<=450){
0D2F EE        2885            mov     a,r6
0D30 7001      2886            jnz     L025021?
0D32 C002      2887            push    ar2
0D34 C003      2888            push    ar3
0D36 C004      2889            push    ar4
0D38 C005      2890            push    ar5
0D3A E4        2891            clr     a
0D3B C0E0      2892            push    acc
0D3D C0E0      2893            push    acc
0D3F 74E1      2894            mov     a,#0xE1
0D41 C0E0      2895            push    acc
0D43 7443      2896            mov     a,#0x43
0D45 C0E0      2897            push    acc
0D47 8A82      2898            mov     dpl,r2
0D49 8B83      2899            mov     dph,r3
0D4B 8CF0      2900            mov     b,r4
0D4D ED        2901            mov     a,r5
0D4E 120100    2902            lcall   ___fsgt
0D51 AE82      2903            mov     r6,dpl
0D53 E581      2904            mov     a,sp
0D55 24FC      2905            add     a,#0xfc
0D57 F581      2906            mov     sp,a
0D59 D005      2907            pop     ar5
0D5B D004      2908            pop     ar4
0D5D D003      2909            pop     ar3
0D5F D002      2910            pop     ar2
0D61 EE        2911            mov     a,r6
0D62 7001      2912            jnz     L025021?
0D64           2913   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:628: printf("FORWARD\n\r");
0D64 7408      2914            mov     a,#__str_12
0D66 C0E0      2915            push    acc
0D68 74D6      2916            mov     a,#(__str_12 >> 8)
0D6A C0E0      2917            push    acc
0D6C 7480      2918            mov     a,#0x80
0D6E C0E0      2919            push    acc
0D70 120100    2920            lcall   _printf
0D73 1581      2921            dec     sp
0D75 1581      2922            dec     sp
0D77 1581      2923            dec     sp
0D79           2924   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:629: PWMforward();
0D79 120100    2925            lcall   _PWMforward
0D7C 020100    2926            ljmp    L025045?
0D7F           2927   L025021?:
0D7F           2928   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:631: else if(time>=600 && time<=750){
0D7F C002      2929            push    ar2
0D81 C003      2930            push    ar3
0D83 C004      2931            push    ar4
0D85 C005      2932            push    ar5
0D87 E4        2933            clr     a
0D88 C0E0      2934            push    acc
0D8A C0E0      2935            push    acc
0D8C 7416      2936            mov     a,#0x16
0D8E C0E0      2937            push    acc
0D90 7444      2938            mov     a,#0x44
0D92 C0E0      2939            push    acc
0D94 8A82      2940            mov     dpl,r2
0D96 8B83      2941            mov     dph,r3
0D98 8CF0      2942            mov     b,r4
0D9A ED        2943            mov     a,r5
0D9B 120100    2944            lcall   ___fslt
0D9E AE82      2945            mov     r6,dpl
0DA0 E581      2946            mov     a,sp
0DA2 24FC      2947            add     a,#0xfc
0DA4 F581      2948            mov     sp,a
0DA6 D005      2949            pop     ar5
0DA8 D004      2950            pop     ar4
0DAA D003      2951            pop     ar3
0DAC D002      2952            pop     ar2
0DAE EE        2953            mov     a,r6
0DAF 7001      2954            jnz     L025017?
0DB1 C002      2955            push    ar2
0DB3 C003      2956            push    ar3
0DB5 C004      2957            push    ar4
0DB7 C005      2958            push    ar5
0DB9 E4        2959            clr     a
0DBA C0E0      2960            push    acc
0DBC 7480      2961            mov     a,#0x80
0DBE C0E0      2962            push    acc
0DC0 743B      2963            mov     a,#0x3B
0DC2 C0E0      2964            push    acc
0DC4 7444      2965            mov     a,#0x44
0DC6 C0E0      2966            push    acc
0DC8 8A82      2967            mov     dpl,r2
0DCA 8B83      2968            mov     dph,r3
0DCC 8CF0      2969            mov     b,r4
0DCE ED        2970            mov     a,r5
0DCF 120100    2971            lcall   ___fsgt
0DD2 AE82      2972            mov     r6,dpl
0DD4 E581      2973            mov     a,sp
0DD6 24FC      2974            add     a,#0xfc
0DD8 F581      2975            mov     sp,a
0DDA D005      2976            pop     ar5
0DDC D004      2977            pop     ar4
0DDE D003      2978            pop     ar3
0DE0 D002      2979            pop     ar2
0DE2 EE        2980            mov     a,r6
0DE3 7001      2981            jnz     L025017?
0DE5           2982   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:632: printf("BACKWARD\n\r");
0DE5 7488      2983            mov     a,#__str_13
0DE7 C0E0      2984            push    acc
0DE9 74D6      2985            mov     a,#(__str_13 >> 8)
0DEB C0E0      2986            push    acc
0DED 7480      2987            mov     a,#0x80
0DEF C0E0      2988            push    acc
0DF1 120100    2989            lcall   _printf
0DF4 1581      2990            dec     sp
0DF6 1581      2991            dec     sp
0DF8 1581      2992            dec     sp
0DFA           2993   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:633: PWMbackward();
0DFA 120100    2994            lcall   _PWMbackward
0DFD 020100    2995            ljmp    L025045?
0E00           2996   L025017?:
0E00           2997   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:635: else if(time>=1060 && time<=1090){
0E00 C002      2998            push    ar2
0E02 C003      2999            push    ar3
0E04 C004      3000            push    ar4
0E06 C005      3001            push    ar5
0E08 E4        3002            clr     a
0E09 C0E0      3003            push    acc
0E0B 7480      3004            mov     a,#0x80
0E0D C0E0      3005            push    acc
0E0F 7484      3006            mov     a,#0x84
0E11 C0E0      3007            push    acc
0E13 7444      3008            mov     a,#0x44
0E15 C0E0      3009            push    acc
0E17 8A82      3010            mov     dpl,r2
0E19 8B83      3011            mov     dph,r3
0E1B 8CF0      3012            mov     b,r4
0E1D ED        3013            mov     a,r5
0E1E 120100    3014            lcall   ___fslt
0E21 AE82      3015            mov     r6,dpl
0E23 E581      3016            mov     a,sp
0E25 24FC      3017            add     a,#0xfc
0E27 F581      3018            mov     sp,a
0E29 D005      3019            pop     ar5
0E2B D004      3020            pop     ar4
0E2D D003      3021            pop     ar3
0E2F D002      3022            pop     ar2
0E31 EE        3023            mov     a,r6
0E32 7001      3024            jnz     L025013?
0E34 C0E0      3025            push    acc
0E36 7440      3026            mov     a,#0x40
0E38 C0E0      3027            push    acc
0E3A 7488      3028            mov     a,#0x88
0E3C C0E0      3029            push    acc
0E3E 7444      3030            mov     a,#0x44
0E40 C0E0      3031            push    acc
0E42 8A82      3032            mov     dpl,r2
0E44 8B83      3033            mov     dph,r3
0E46 8CF0      3034            mov     b,r4
0E48 ED        3035            mov     a,r5
0E49 120100    3036            lcall   ___fsgt
0E4C AA82      3037            mov     r2,dpl
0E4E E581      3038            mov     a,sp
0E50 24FC      3039            add     a,#0xfc
0E52 F581      3040            mov     sp,a
0E54 EA        3041            mov     a,r2
0E55 7001      3042            jnz     L025013?
0E57           3043   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:636: printf("LEFT\n\r");
0E57 7408      3044            mov     a,#__str_14
0E59 C0E0      3045            push    acc
0E5B 74D7      3046            mov     a,#(__str_14 >> 8)
0E5D C0E0      3047            push    acc
0E5F 7480      3048            mov     a,#0x80
0E61 C0E0      3049            push    acc
0E63 120100    3050            lcall   _printf
0E66 1581      3051            dec     sp
0E68 1581      3052            dec     sp
0E6A 1581      3053            dec     sp
0E6C           3054   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:637: PWMLeft();
0E6C 120100    3055            lcall   _PWMLeft
0E6F 020100    3056            ljmp    L025045?
0E72           3057   L025013?:
0E72           3058   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:640: {      printf("STOP\n\r");
0E72 7448      3059            mov     a,#__str_15
0E74 C0E0      3060            push    acc
0E76 74D7      3061            mov     a,#(__str_15 >> 8)
0E78 C0E0      3062            push    acc
0E7A 7480      3063            mov     a,#0x80
0E7C C0E0      3064            push    acc
0E7E 120100    3065            lcall   _printf
0E81 1581      3066            dec     sp
0E83 1581      3067            dec     sp
0E85 1581      3068            dec     sp
0E87           3069   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:641: PWMStop();
0E87 120100    3070            lcall   _PWMStop
0E8A 020100    3071            ljmp    L025045?
0E8D           3072   L025039?:
0E8D           3073   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon.c:651: printf("Do nothing\r\n");      
0E8D 7488      3074            mov     a,#__str_16
0E8F C0E0      3075            push    acc
0E91 74D7      3076            mov     a,#(__str_16 >> 8)
0E93 C0E0      3077            push    acc
0E95 7480      3078            mov     a,#0x80
0E97 C0E0      3079            push    acc
0E99 120100    3080            lcall   _printf
0E9C 1581      3081            dec     sp
0E9E 1581      3082            dec     sp
0EA0 1581      3083            dec     sp
0EA2 020100    3084            ljmp    L025045?
0EA5           3085            rseg R_CSEG
0EA5           3086   
0000           3087            rseg R_XINIT
0000           3088   
0000           3089            rseg R_CONST
0000           3090   __str_0:
0000 0A        3091            db 0x0A
0001 72656164  3092            db 'read 1:  at pin 1.6: %f'
     20313A20
     20617420
     70696E20
     312E363A
     202566
0018 0D        3093            db 0x0D
0019 00        3094            db 0x00
001A           3095   __str_1:
001A 0A        3096            db 0x0A
001B 72656164  3097            db 'read 0: Volt at pin 1.6: %f'
     20303A20
     566F6C74
     20617420
     70696E20
     312E363A
     202566
0036 0D        3098            db 0x0D
0037 00        3099            db 0x00
0038           3100   __str_2:
0038 5475726E  3101            db 'Turn right '
     20726967
     687420
0043 0D        3102            db 0x0D
0044 0A        3103            db 0x0A
0045 00        3104            db 0x00
0046           3105   __str_3:
0046 476F2053  3106            db 'Go Straight '
     74726169
     67687420
0052 0D        3107            db 0x0D
0053 0A        3108            db 0x0A
0054 00        3109            db 0x00
0055           3110   __str_4:
0055 1B        3111            db 0x1B
0056 5B324A    3112            db '[2J'
0059 00        3113            db 0x00
005A           3114   __str_5:
005A 53717561  3115            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0080 0D        3116            db 0x0D
0081 0A        3117            db 0x0A
0082 43686563  3118            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0096 50322E31  3119            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00B1 0D        3120            db 0x0D
00B2 0A        3121            db 0x0A
00B3 00        3122            db 0x00
00B4           3123   __str_6:
00B4 0A        3124            db 0x0A
00B5 0D        3125            db 0x0D
00B6 00        3126            db 0x00
00B7           3127   __str_7:
00B7 6175746F  3128            db 'auto '
     20
00BC 0D        3129            db 0x0D
00BD 0A        3130            db 0x0A
00BE 00        3131            db 0x00
00BF           3132   __str_8:
00BF 0D        3133            db 0x0D
00C0 543D2566  3134            db 'T=%f ms   '
     206D7320
     2020
00CA 0A        3135            db 0x0A
00CB 20        3136            db ' '
00CC 00        3137            db 0x00
00CD           3138   __str_9:
00CD 6D616E75  3139            db 'manual '
     616C20
00D4 0D        3140            db 0x0D
00D5 0A        3141            db 0x0A
00D6 00        3142            db 0x00
00D7           3143   __str_10:
00D7 54696D65  3144            db 'Time: %f'
     3A202566
00DF 0A        3145            db 0x0A
00E0 09        3146            db 0x09
00E1 0D        3147            db 0x0D
00E2 00        3148            db 0x00
00E3           3149   __str_11:
00E3 52494748  3150            db 'RIGHT'
     54
00E8 0A        3151            db 0x0A
00E9 0D        3152            db 0x0D
00EA 00        3153            db 0x00
00EB           3154   __str_12:
00EB 464F5257  3155            db 'FORWARD'
     415244
00F2 0A        3156            db 0x0A
00F3 0D        3157            db 0x0D
00F4 00        3158            db 0x00
00F5           3159   __str_13:
00F5 4241434B  3160            db 'BACKWARD'
     57415244
00FD 0A        3161            db 0x0A
00FE 0D        3162            db 0x0D
00FF 00        3163            db 0x00
0100           3164   __str_14:
0100 4C454654  3165            db 'LEFT'
0104 0A        3166            db 0x0A
0105 0D        3167            db 0x0D
0106 00        3168            db 0x00
0107           3169   __str_15:
0107 53544F50  3170            db 'STOP'
010B 0A        3171            db 0x0A
010C 0D        3172            db 0x0D
010D 00        3173            db 0x00
010E           3174   __str_16:
010E 446F206E  3175            db 'Do nothing'
     6F746869
     6E67
0118 0D        3176            db 0x0D
0119 0A        3177            db 0x0A
011A 00        3178            db 0x00
011B           3179   
002E           3180            CSEG
002E           3181   
002E           3182   end
