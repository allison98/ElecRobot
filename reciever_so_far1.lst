0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 02 15:24:13 2018
0000              5   ;--------------------------------------------------------
                  5   $name reciever_so_far1
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _recieveData
0000             32            public _waitquarterperiod
0000             33            public _getDigitalSignal
0000             34            public _voltsAtPeak
0000             35            public _commandtimecheck
0000             36            public _checkTime
0000             37            public _checkCommands
0000             38            public _arrayEqual
0000             39            public _PWMStop
0000             40            public _PWMRight
0000             41            public _PWMLeft
0000             42            public _PWMbackward
0000             43            public _PWMforward
0000             44            public _InitPinADC
0000             45            public _Volts_at_Pin
0000             46            public _TIMER0_Init
0000             47            public _InitADC
0000             48            public _Timer2_ISR
0000             49            public _ADC_at_Pin
0000             50            public _waitms
0000             51            public _Timer3us
0000             52            public __c51_external_startup
0000             53            public _command
0000             54            public _right
0000             55            public _left
0000             56            public _backward
0000             57            public _forward
0000             58            public _stop
0000             59            public _claw_flag
0000             60            public _flag
0000             61            public _cartMoveB
0000             62            public _cartMoveF
0000             63            public _pwmSig6
0000             64            public _pwmSig5
0000             65            public _pwmSig4
0000             66            public _pwmSig3
0000             67            public _pwmSig2
0000             68            public _pwmSig1
0000             69            public _pwm_count3
0000             70            public _pwm_count2
0000             71            public _pwm_count1
0000             72            public _pwm_count
0000             73   ;--------------------------------------------------------
0000             74   ; Special Function Registers
0000             75   ;--------------------------------------------------------
0000             76   _ACC            DATA 0xe0
0000             77   _ADC0ASAH       DATA 0xb6
0000             78   _ADC0ASAL       DATA 0xb5
0000             79   _ADC0ASCF       DATA 0xa1
0000             80   _ADC0ASCT       DATA 0xc7
0000             81   _ADC0CF0        DATA 0xbc
0000             82   _ADC0CF1        DATA 0xb9
0000             83   _ADC0CF2        DATA 0xdf
0000             84   _ADC0CN0        DATA 0xe8
0000             85   _ADC0CN1        DATA 0xb2
0000             86   _ADC0CN2        DATA 0xb3
0000             87   _ADC0GTH        DATA 0xc4
0000             88   _ADC0GTL        DATA 0xc3
0000             89   _ADC0H          DATA 0xbe
0000             90   _ADC0L          DATA 0xbd
0000             91   _ADC0LTH        DATA 0xc6
0000             92   _ADC0LTL        DATA 0xc5
0000             93   _ADC0MX         DATA 0xbb
0000             94   _B              DATA 0xf0
0000             95   _CKCON0         DATA 0x8e
0000             96   _CKCON1         DATA 0xa6
0000             97   _CLEN0          DATA 0xc6
0000             98   _CLIE0          DATA 0xc7
0000             99   _CLIF0          DATA 0xe8
0000            100   _CLKSEL         DATA 0xa9
0000            101   _CLOUT0         DATA 0xd1
0000            102   _CLU0CF         DATA 0xb1
0000            103   _CLU0FN         DATA 0xaf
0000            104   _CLU0MX         DATA 0x84
0000            105   _CLU1CF         DATA 0xb3
0000            106   _CLU1FN         DATA 0xb2
0000            107   _CLU1MX         DATA 0x85
0000            108   _CLU2CF         DATA 0xb6
0000            109   _CLU2FN         DATA 0xb5
0000            110   _CLU2MX         DATA 0x91
0000            111   _CLU3CF         DATA 0xbf
0000            112   _CLU3FN         DATA 0xbe
0000            113   _CLU3MX         DATA 0xae
0000            114   _CMP0CN0        DATA 0x9b
0000            115   _CMP0CN1        DATA 0x99
0000            116   _CMP0MD         DATA 0x9d
0000            117   _CMP0MX         DATA 0x9f
0000            118   _CMP1CN0        DATA 0xbf
0000            119   _CMP1CN1        DATA 0xac
0000            120   _CMP1MD         DATA 0xab
0000            121   _CMP1MX         DATA 0xaa
0000            122   _CRC0CN0        DATA 0xce
0000            123   _CRC0CN1        DATA 0x86
0000            124   _CRC0CNT        DATA 0xd3
0000            125   _CRC0DAT        DATA 0xcb
0000            126   _CRC0FLIP       DATA 0xcf
0000            127   _CRC0IN         DATA 0xca
0000            128   _CRC0ST         DATA 0xd2
0000            129   _DAC0CF0        DATA 0x91
0000            130   _DAC0CF1        DATA 0x92
0000            131   _DAC0H          DATA 0x85
0000            132   _DAC0L          DATA 0x84
0000            133   _DAC1CF0        DATA 0x93
0000            134   _DAC1CF1        DATA 0x94
0000            135   _DAC1H          DATA 0x8a
0000            136   _DAC1L          DATA 0x89
0000            137   _DAC2CF0        DATA 0x95
0000            138   _DAC2CF1        DATA 0x96
0000            139   _DAC2H          DATA 0x8c
0000            140   _DAC2L          DATA 0x8b
0000            141   _DAC3CF0        DATA 0x9a
0000            142   _DAC3CF1        DATA 0x9c
0000            143   _DAC3H          DATA 0x8e
0000            144   _DAC3L          DATA 0x8d
0000            145   _DACGCF0        DATA 0x88
0000            146   _DACGCF1        DATA 0x98
0000            147   _DACGCF2        DATA 0xa2
0000            148   _DERIVID        DATA 0xad
0000            149   _DEVICEID       DATA 0xb5
0000            150   _DPH            DATA 0x83
0000            151   _DPL            DATA 0x82
0000            152   _EIE1           DATA 0xe6
0000            153   _EIE2           DATA 0xf3
0000            154   _EIP1           DATA 0xbb
0000            155   _EIP1H          DATA 0xee
0000            156   _EIP2           DATA 0xed
0000            157   _EIP2H          DATA 0xf6
0000            158   _EMI0CN         DATA 0xe7
0000            159   _FLKEY          DATA 0xb7
0000            160   _HFO0CAL        DATA 0xc7
0000            161   _HFO1CAL        DATA 0xd6
0000            162   _HFOCN          DATA 0xef
0000            163   _I2C0ADM        DATA 0xff
0000            164   _I2C0CN0        DATA 0xba
0000            165   _I2C0DIN        DATA 0xbc
0000            166   _I2C0DOUT       DATA 0xbb
0000            167   _I2C0FCN0       DATA 0xad
0000            168   _I2C0FCN1       DATA 0xab
0000            169   _I2C0FCT        DATA 0xf5
0000            170   _I2C0SLAD       DATA 0xbd
0000            171   _I2C0STAT       DATA 0xb9
0000            172   _IE             DATA 0xa8
0000            173   _IP             DATA 0xb8
0000            174   _IPH            DATA 0xf2
0000            175   _IT01CF         DATA 0xe4
0000            176   _LFO0CN         DATA 0xb1
0000            177   _P0             DATA 0x80
0000            178   _P0MASK         DATA 0xfe
0000            179   _P0MAT          DATA 0xfd
0000            180   _P0MDIN         DATA 0xf1
0000            181   _P0MDOUT        DATA 0xa4
0000            182   _P0SKIP         DATA 0xd4
0000            183   _P1             DATA 0x90
0000            184   _P1MASK         DATA 0xee
0000            185   _P1MAT          DATA 0xed
0000            186   _P1MDIN         DATA 0xf2
0000            187   _P1MDOUT        DATA 0xa5
0000            188   _P1SKIP         DATA 0xd5
0000            189   _P2             DATA 0xa0
0000            190   _P2MASK         DATA 0xfc
0000            191   _P2MAT          DATA 0xfb
0000            192   _P2MDIN         DATA 0xf3
0000            193   _P2MDOUT        DATA 0xa6
0000            194   _P2SKIP         DATA 0xcc
0000            195   _P3             DATA 0xb0
0000            196   _P3MDIN         DATA 0xf4
0000            197   _P3MDOUT        DATA 0x9c
0000            198   _PCA0CENT       DATA 0x9e
0000            199   _PCA0CLR        DATA 0x9c
0000            200   _PCA0CN0        DATA 0xd8
0000            201   _PCA0CPH0       DATA 0xfc
0000            202   _PCA0CPH1       DATA 0xea
0000            203   _PCA0CPH2       DATA 0xec
0000            204   _PCA0CPH3       DATA 0xf5
0000            205   _PCA0CPH4       DATA 0x85
0000            206   _PCA0CPH5       DATA 0xde
0000            207   _PCA0CPL0       DATA 0xfb
0000            208   _PCA0CPL1       DATA 0xe9
0000            209   _PCA0CPL2       DATA 0xeb
0000            210   _PCA0CPL3       DATA 0xf4
0000            211   _PCA0CPL4       DATA 0x84
0000            212   _PCA0CPL5       DATA 0xdd
0000            213   _PCA0CPM0       DATA 0xda
0000            214   _PCA0CPM1       DATA 0xdb
0000            215   _PCA0CPM2       DATA 0xdc
0000            216   _PCA0CPM3       DATA 0xae
0000            217   _PCA0CPM4       DATA 0xaf
0000            218   _PCA0CPM5       DATA 0xcc
0000            219   _PCA0H          DATA 0xfa
0000            220   _PCA0L          DATA 0xf9
0000            221   _PCA0MD         DATA 0xd9
0000            222   _PCA0POL        DATA 0x96
0000            223   _PCA0PWM        DATA 0xf7
0000            224   _PCON0          DATA 0x87
0000            225   _PCON1          DATA 0xcd
0000            226   _PFE0CN         DATA 0xc1
0000            227   _PRTDRV         DATA 0xf6
0000            228   _PSCTL          DATA 0x8f
0000            229   _PSTAT0         DATA 0xaa
0000            230   _PSW            DATA 0xd0
0000            231   _REF0CN         DATA 0xd1
0000            232   _REG0CN         DATA 0xc9
0000            233   _REVID          DATA 0xb6
0000            234   _RSTSRC         DATA 0xef
0000            235   _SBCON1         DATA 0x94
0000            236   _SBRLH1         DATA 0x96
0000            237   _SBRLL1         DATA 0x95
0000            238   _SBUF           DATA 0x99
0000            239   _SBUF0          DATA 0x99
0000            240   _SBUF1          DATA 0x92
0000            241   _SCON           DATA 0x98
0000            242   _SCON0          DATA 0x98
0000            243   _SCON1          DATA 0xc8
0000            244   _SFRPAGE        DATA 0xa7
0000            245   _SFRPGCN        DATA 0xbc
0000            246   _SFRSTACK       DATA 0xd7
0000            247   _SMB0ADM        DATA 0xd6
0000            248   _SMB0ADR        DATA 0xd7
0000            249   _SMB0CF         DATA 0xc1
0000            250   _SMB0CN0        DATA 0xc0
0000            251   _SMB0DAT        DATA 0xc2
0000            252   _SMB0FCN0       DATA 0xc3
0000            253   _SMB0FCN1       DATA 0xc4
0000            254   _SMB0FCT        DATA 0xef
0000            255   _SMB0RXLN       DATA 0xc5
0000            256   _SMB0TC         DATA 0xac
0000            257   _SMOD1          DATA 0x93
0000            258   _SP             DATA 0x81
0000            259   _SPI0CFG        DATA 0xa1
0000            260   _SPI0CKR        DATA 0xa2
0000            261   _SPI0CN0        DATA 0xf8
0000            262   _SPI0DAT        DATA 0xa3
0000            263   _SPI0FCN0       DATA 0x9a
0000            264   _SPI0FCN1       DATA 0x9b
0000            265   _SPI0FCT        DATA 0xf7
0000            266   _SPI0PCF        DATA 0xdf
0000            267   _TCON           DATA 0x88
0000            268   _TH0            DATA 0x8c
0000            269   _TH1            DATA 0x8d
0000            270   _TL0            DATA 0x8a
0000            271   _TL1            DATA 0x8b
0000            272   _TMOD           DATA 0x89
0000            273   _TMR2CN0        DATA 0xc8
0000            274   _TMR2CN1        DATA 0xfd
0000            275   _TMR2H          DATA 0xcf
0000            276   _TMR2L          DATA 0xce
0000            277   _TMR2RLH        DATA 0xcb
0000            278   _TMR2RLL        DATA 0xca
0000            279   _TMR3CN0        DATA 0x91
0000            280   _TMR3CN1        DATA 0xfe
0000            281   _TMR3H          DATA 0x95
0000            282   _TMR3L          DATA 0x94
0000            283   _TMR3RLH        DATA 0x93
0000            284   _TMR3RLL        DATA 0x92
0000            285   _TMR4CN0        DATA 0x98
0000            286   _TMR4CN1        DATA 0xff
0000            287   _TMR4H          DATA 0xa5
0000            288   _TMR4L          DATA 0xa4
0000            289   _TMR4RLH        DATA 0xa3
0000            290   _TMR4RLL        DATA 0xa2
0000            291   _TMR5CN0        DATA 0xc0
0000            292   _TMR5CN1        DATA 0xf1
0000            293   _TMR5H          DATA 0xd5
0000            294   _TMR5L          DATA 0xd4
0000            295   _TMR5RLH        DATA 0xd3
0000            296   _TMR5RLL        DATA 0xd2
0000            297   _UART0PCF       DATA 0xd9
0000            298   _UART1FCN0      DATA 0x9d
0000            299   _UART1FCN1      DATA 0xd8
0000            300   _UART1FCT       DATA 0xfa
0000            301   _UART1LIN       DATA 0x9e
0000            302   _UART1PCF       DATA 0xda
0000            303   _VDM0CN         DATA 0xff
0000            304   _WDTCN          DATA 0x97
0000            305   _XBR0           DATA 0xe1
0000            306   _XBR1           DATA 0xe2
0000            307   _XBR2           DATA 0xe3
0000            308   _XOSC0CN        DATA 0x86
0000            309   _DPTR           DATA 0x8382
0000            310   _TMR2RL         DATA 0xcbca
0000            311   _TMR3RL         DATA 0x9392
0000            312   _TMR4RL         DATA 0xa3a2
0000            313   _TMR5RL         DATA 0xd3d2
0000            314   _TMR0           DATA 0x8c8a
0000            315   _TMR1           DATA 0x8d8b
0000            316   _TMR2           DATA 0xcfce
0000            317   _TMR3           DATA 0x9594
0000            318   _TMR4           DATA 0xa5a4
0000            319   _TMR5           DATA 0xd5d4
0000            320   _SBRL1          DATA 0x9695
0000            321   _PCA0           DATA 0xfaf9
0000            322   _PCA0CP0        DATA 0xfcfb
0000            323   _PCA0CP1        DATA 0xeae9
0000            324   _PCA0CP2        DATA 0xeceb
0000            325   _PCA0CP3        DATA 0xf5f4
0000            326   _PCA0CP4        DATA 0x8584
0000            327   _PCA0CP5        DATA 0xdedd
0000            328   _ADC0ASA        DATA 0xb6b5
0000            329   _ADC0GT         DATA 0xc4c3
0000            330   _ADC0           DATA 0xbebd
0000            331   _ADC0LT         DATA 0xc6c5
0000            332   _DAC0           DATA 0x8584
0000            333   _DAC1           DATA 0x8a89
0000            334   _DAC2           DATA 0x8c8b
0000            335   _DAC3           DATA 0x8e8d
0000            336   ;--------------------------------------------------------
0000            337   ; special function bits
0000            338   ;--------------------------------------------------------
0000            339   _ACC_0          BIT 0xe0
0000            340   _ACC_1          BIT 0xe1
0000            341   _ACC_2          BIT 0xe2
0000            342   _ACC_3          BIT 0xe3
0000            343   _ACC_4          BIT 0xe4
0000            344   _ACC_5          BIT 0xe5
0000            345   _ACC_6          BIT 0xe6
0000            346   _ACC_7          BIT 0xe7
0000            347   _TEMPE          BIT 0xe8
0000            348   _ADGN0          BIT 0xe9
0000            349   _ADGN1          BIT 0xea
0000            350   _ADWINT         BIT 0xeb
0000            351   _ADBUSY         BIT 0xec
0000            352   _ADINT          BIT 0xed
0000            353   _IPOEN          BIT 0xee
0000            354   _ADEN           BIT 0xef
0000            355   _B_0            BIT 0xf0
0000            356   _B_1            BIT 0xf1
0000            357   _B_2            BIT 0xf2
0000            358   _B_3            BIT 0xf3
0000            359   _B_4            BIT 0xf4
0000            360   _B_5            BIT 0xf5
0000            361   _B_6            BIT 0xf6
0000            362   _B_7            BIT 0xf7
0000            363   _C0FIF          BIT 0xe8
0000            364   _C0RIF          BIT 0xe9
0000            365   _C1FIF          BIT 0xea
0000            366   _C1RIF          BIT 0xeb
0000            367   _C2FIF          BIT 0xec
0000            368   _C2RIF          BIT 0xed
0000            369   _C3FIF          BIT 0xee
0000            370   _C3RIF          BIT 0xef
0000            371   _D1SRC0         BIT 0x88
0000            372   _D1SRC1         BIT 0x89
0000            373   _D1AMEN         BIT 0x8a
0000            374   _D01REFSL       BIT 0x8b
0000            375   _D3SRC0         BIT 0x8c
0000            376   _D3SRC1         BIT 0x8d
0000            377   _D3AMEN         BIT 0x8e
0000            378   _D23REFSL       BIT 0x8f
0000            379   _D0UDIS         BIT 0x98
0000            380   _D1UDIS         BIT 0x99
0000            381   _D2UDIS         BIT 0x9a
0000            382   _D3UDIS         BIT 0x9b
0000            383   _EX0            BIT 0xa8
0000            384   _ET0            BIT 0xa9
0000            385   _EX1            BIT 0xaa
0000            386   _ET1            BIT 0xab
0000            387   _ES0            BIT 0xac
0000            388   _ET2            BIT 0xad
0000            389   _ESPI0          BIT 0xae
0000            390   _EA             BIT 0xaf
0000            391   _PX0            BIT 0xb8
0000            392   _PT0            BIT 0xb9
0000            393   _PX1            BIT 0xba
0000            394   _PT1            BIT 0xbb
0000            395   _PS0            BIT 0xbc
0000            396   _PT2            BIT 0xbd
0000            397   _PSPI0          BIT 0xbe
0000            398   _P0_0           BIT 0x80
0000            399   _P0_1           BIT 0x81
0000            400   _P0_2           BIT 0x82
0000            401   _P0_3           BIT 0x83
0000            402   _P0_4           BIT 0x84
0000            403   _P0_5           BIT 0x85
0000            404   _P0_6           BIT 0x86
0000            405   _P0_7           BIT 0x87
0000            406   _P1_0           BIT 0x90
0000            407   _P1_1           BIT 0x91
0000            408   _P1_2           BIT 0x92
0000            409   _P1_3           BIT 0x93
0000            410   _P1_4           BIT 0x94
0000            411   _P1_5           BIT 0x95
0000            412   _P1_6           BIT 0x96
0000            413   _P1_7           BIT 0x97
0000            414   _P2_0           BIT 0xa0
0000            415   _P2_1           BIT 0xa1
0000            416   _P2_2           BIT 0xa2
0000            417   _P2_3           BIT 0xa3
0000            418   _P2_4           BIT 0xa4
0000            419   _P2_5           BIT 0xa5
0000            420   _P2_6           BIT 0xa6
0000            421   _P3_0           BIT 0xb0
0000            422   _P3_1           BIT 0xb1
0000            423   _P3_2           BIT 0xb2
0000            424   _P3_3           BIT 0xb3
0000            425   _P3_4           BIT 0xb4
0000            426   _P3_7           BIT 0xb7
0000            427   _CCF0           BIT 0xd8
0000            428   _CCF1           BIT 0xd9
0000            429   _CCF2           BIT 0xda
0000            430   _CCF3           BIT 0xdb
0000            431   _CCF4           BIT 0xdc
0000            432   _CCF5           BIT 0xdd
0000            433   _CR             BIT 0xde
0000            434   _CF             BIT 0xdf
0000            435   _PARITY         BIT 0xd0
0000            436   _F1             BIT 0xd1
0000            437   _OV             BIT 0xd2
0000            438   _RS0            BIT 0xd3
0000            439   _RS1            BIT 0xd4
0000            440   _F0             BIT 0xd5
0000            441   _AC             BIT 0xd6
0000            442   _CY             BIT 0xd7
0000            443   _RI             BIT 0x98
0000            444   _TI             BIT 0x99
0000            445   _RB8            BIT 0x9a
0000            446   _TB8            BIT 0x9b
0000            447   _REN            BIT 0x9c
0000            448   _CE             BIT 0x9d
0000            449   _SMODE          BIT 0x9e
0000            450   _RI1            BIT 0xc8
0000            451   _TI1            BIT 0xc9
0000            452   _RBX1           BIT 0xca
0000            453   _TBX1           BIT 0xcb
0000            454   _REN1           BIT 0xcc
0000            455   _PERR1          BIT 0xcd
0000            456   _OVR1           BIT 0xce
0000            457   _SI             BIT 0xc0
0000            458   _ACK            BIT 0xc1
0000            459   _ARBLOST        BIT 0xc2
0000            460   _ACKRQ          BIT 0xc3
0000            461   _STO            BIT 0xc4
0000            462   _STA            BIT 0xc5
0000            463   _TXMODE         BIT 0xc6
0000            464   _MASTER         BIT 0xc7
0000            465   _SPIEN          BIT 0xf8
0000            466   _TXNF           BIT 0xf9
0000            467   _NSSMD0         BIT 0xfa
0000            468   _NSSMD1         BIT 0xfb
0000            469   _RXOVRN         BIT 0xfc
0000            470   _MODF           BIT 0xfd
0000            471   _WCOL           BIT 0xfe
0000            472   _SPIF           BIT 0xff
0000            473   _IT0            BIT 0x88
0000            474   _IE0            BIT 0x89
0000            475   _IT1            BIT 0x8a
0000            476   _IE1            BIT 0x8b
0000            477   _TR0            BIT 0x8c
0000            478   _TF0            BIT 0x8d
0000            479   _TR1            BIT 0x8e
0000            480   _TF1            BIT 0x8f
0000            481   _T2XCLK0        BIT 0xc8
0000            482   _T2XCLK1        BIT 0xc9
0000            483   _TR2            BIT 0xca
0000            484   _T2SPLIT        BIT 0xcb
0000            485   _TF2CEN         BIT 0xcc
0000            486   _TF2LEN         BIT 0xcd
0000            487   _TF2L           BIT 0xce
0000            488   _TF2H           BIT 0xcf
0000            489   _T4XCLK0        BIT 0x98
0000            490   _T4XCLK1        BIT 0x99
0000            491   _TR4            BIT 0x9a
0000            492   _T4SPLIT        BIT 0x9b
0000            493   _TF4CEN         BIT 0x9c
0000            494   _TF4LEN         BIT 0x9d
0000            495   _TF4L           BIT 0x9e
0000            496   _TF4H           BIT 0x9f
0000            497   _T5XCLK0        BIT 0xc0
0000            498   _T5XCLK1        BIT 0xc1
0000            499   _TR5            BIT 0xc2
0000            500   _T5SPLIT        BIT 0xc3
0000            501   _TF5CEN         BIT 0xc4
0000            502   _TF5LEN         BIT 0xc5
0000            503   _TF5L           BIT 0xc6
0000            504   _TF5H           BIT 0xc7
0000            505   _RIE            BIT 0xd8
0000            506   _RXTO0          BIT 0xd9
0000            507   _RXTO1          BIT 0xda
0000            508   _RFRQ           BIT 0xdb
0000            509   _TIE            BIT 0xdc
0000            510   _TXHOLD         BIT 0xdd
0000            511   _TXNF1          BIT 0xde
0000            512   _TFRQ           BIT 0xdf
0000            513   ;--------------------------------------------------------
0000            514   ; overlayable register banks
0000            515   ;--------------------------------------------------------
0000            516            rbank0 segment data overlay
0000            517   ;--------------------------------------------------------
0000            518   ; internal ram data
0000            519   ;--------------------------------------------------------
0000            520            rseg R_DSEG
0000            521   _pwm_count:
0000            522            ds 1
0001            523   _pwm_count1:
0001            524            ds 1
0002            525   _pwm_count2:
0002            526            ds 1
0003            527   _pwm_count3:
0003            528            ds 1
0004            529   _pwmSig1:
0004            530            ds 2
0006            531   _pwmSig2:
0006            532            ds 2
0008            533   _pwmSig3:
0008            534            ds 2
000A            535   _pwmSig4:
000A            536            ds 2
000C            537   _pwmSig5:
000C            538            ds 2
000E            539   _pwmSig6:
000E            540            ds 2
0010            541   _cartMoveF:
0010            542            ds 2
0012            543   _cartMoveB:
0012            544            ds 2
0014            545   _flag:
0014            546            ds 2
0016            547   _claw_flag:
0016            548            ds 2
0018            549   _stop:
0018            550            ds 8
0020            551   _forward:
0020            552            ds 8
0028            553   _backward:
0028            554            ds 8
0030            555   _left:
0030            556            ds 8
0038            557   _right:
0038            558            ds 8
0040            559   _command:
0040            560            ds 8
0048            561   _checkTime_overflow_count_1_78:
0048            562            ds 2
004A            563   ;--------------------------------------------------------
004A            564   ; overlayable items in internal ram 
004A            565   ;--------------------------------------------------------
0000            566            rseg    R_OSEG
0000            567            rseg    R_OSEG
0000            568            rseg    R_OSEG
0000            569   _InitPinADC_PARM_2:
0000            570            ds 1
0001            571            rseg    R_OSEG
0001            572   _arrayEqual_PARM_2:
0001            573            ds 2
0003            574   _arrayEqual_PARM_3:
0003            575            ds 3
0006            576   _arrayEqual_arr1_1_72:
0006            577            ds 3
0009            578   ;--------------------------------------------------------
0009            579   ; indirectly addressable internal ram data
0009            580   ;--------------------------------------------------------
0000            581            rseg R_ISEG
0000            582   ;--------------------------------------------------------
0000            583   ; absolute internal ram data
0000            584   ;--------------------------------------------------------
0000            585            DSEG
0000            586   ;--------------------------------------------------------
0000            587   ; bit data
0000            588   ;--------------------------------------------------------
0000            589            rseg R_BSEG
0000            590   _Timer2_ISR_sloc0_1_0:
0000            591            DBIT    1
0001            592   ;--------------------------------------------------------
0001            593   ; paged external ram data
0001            594   ;--------------------------------------------------------
0000            595            rseg R_PSEG
0000            596   ;--------------------------------------------------------
0000            597   ; external ram data
0000            598   ;--------------------------------------------------------
0000            599            rseg R_XSEG
0000            600   ;--------------------------------------------------------
0000            601   ; absolute external ram data
0000            602   ;--------------------------------------------------------
0000            603            XSEG
0000            604   ;--------------------------------------------------------
0000            605   ; external initialized ram data
0000            606   ;--------------------------------------------------------
0000            607            rseg R_IXSEG
0000            608            rseg R_HOME
0000            609            rseg R_GSINIT
0000            610            rseg R_CSEG
0000            611   ;--------------------------------------------------------
0000            612   ; Reset entry point and interrupt vectors
0000            613   ;--------------------------------------------------------
0000            614            CSEG at 0x0000
0000 020100     615            ljmp    _crt0
002B            616            CSEG at 0x002b
002B 020100     617            ljmp    _Timer2_ISR
002E            618   ;--------------------------------------------------------
002E            619   ; global & static initialisations
002E            620   ;--------------------------------------------------------
0000            621            rseg R_HOME
0000            622            rseg R_GSINIT
0000            623            rseg R_GSINIT
0000            624   ;--------------------------------------------------------
0000            625   ; data variables initialization
0000            626   ;--------------------------------------------------------
0000            627            rseg R_DINIT
0000            628   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:50: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 758800     629            mov     _pwm_count,#0x00
0003            630   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:51: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 754800     631            mov     _pwm_count1,#0x00
0006            632   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:52: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 750800     633            mov     _pwm_count2,#0x00
0009            634   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:53: volatile unsigned char pwm_count3 = 0; //
0009 75C800     635            mov     _pwm_count3,#0x00
000C            636   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:68: volatile int flag = 0;
000C E4         637            clr     a
000D F588       638            mov     _flag,a
000F F589       639            mov     (_flag + 1),a
0011            640   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:69: volatile int claw_flag = 0;
0011 E4         641            clr     a
0012 F548       642            mov     _claw_flag,a
0014 F549       643            mov     (_claw_flag + 1),a
0016            644   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:70: int stop[]={1,0,0,0};
0016 750801     645            mov     _stop,#0x01
0019 750900     646            mov     (_stop + 1),#0x00
001C 750A00     647            mov     (_stop + 0x0002),#0x00
001F 750B00     648            mov     ((_stop + 0x0002) + 1),#0x00
0022 750C00     649            mov     (_stop + 0x0004),#0x00
0025 750D00     650            mov     ((_stop + 0x0004) + 1),#0x00
0028 750E00     651            mov     (_stop + 0x0006),#0x00
002B 750F00     652            mov     ((_stop + 0x0006) + 1),#0x00
002E            653   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:71: int forward[]={1,1,1,1};
002E 75C801     654            mov     _forward,#0x01
0031 75C900     655            mov     (_forward + 1),#0x00
0034 75CA01     656            mov     (_forward + 0x0002),#0x01
0037 75CB00     657            mov     ((_forward + 0x0002) + 1),#0x00
003A 75CC01     658            mov     (_forward + 0x0004),#0x01
003D 75CD00     659            mov     ((_forward + 0x0004) + 1),#0x00
0040 75CE01     660            mov     (_forward + 0x0006),#0x01
0043 75CF00     661            mov     ((_forward + 0x0006) + 1),#0x00
0046            662   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:72: int backward[]={1,0,0,0};
0046 75F001     663            mov     _backward,#0x01
0049 75F100     664            mov     (_backward + 1),#0x00
004C 75F200     665            mov     (_backward + 0x0002),#0x00
004F 75F300     666            mov     ((_backward + 0x0002) + 1),#0x00
0052 75F400     667            mov     (_backward + 0x0004),#0x00
0055 75F500     668            mov     ((_backward + 0x0004) + 1),#0x00
0058 75F600     669            mov     (_backward + 0x0006),#0x00
005B 75F700     670            mov     ((_backward + 0x0006) + 1),#0x00
005E            671   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:73: int left[]={1,0,1,0};
005E 75B001     672            mov     _left,#0x01
0061 75B100     673            mov     (_left + 1),#0x00
0064 75B200     674            mov     (_left + 0x0002),#0x00
0067 75B300     675            mov     ((_left + 0x0002) + 1),#0x00
006A 75B401     676            mov     (_left + 0x0004),#0x01
006D 75B500     677            mov     ((_left + 0x0004) + 1),#0x00
0070 75B600     678            mov     (_left + 0x0006),#0x00
0073 75B700     679            mov     ((_left + 0x0006) + 1),#0x00
0076            680   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:74: int right[]={1,1,0,1};
0076 757001     681            mov     _right,#0x01
0079 757100     682            mov     (_right + 1),#0x00
007C 757201     683            mov     (_right + 0x0002),#0x01
007F 757300     684            mov     ((_right + 0x0002) + 1),#0x00
0082 757400     685            mov     (_right + 0x0004),#0x00
0085 757500     686            mov     ((_right + 0x0004) + 1),#0x00
0088 757601     687            mov     (_right + 0x0006),#0x01
008B 757700     688            mov     ((_right + 0x0006) + 1),#0x00
008E            689   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:76: int command[4] = {0,0,0,0};
008E 753000     690            mov     _command,#0x00
0091 753100     691            mov     (_command + 1),#0x00
0094 753200     692            mov     (_command + 0x0002),#0x00
0097 753300     693            mov     ((_command + 0x0002) + 1),#0x00
009A 753400     694            mov     (_command + 0x0004),#0x00
009D 753500     695            mov     ((_command + 0x0004) + 1),#0x00
00A0 753600     696            mov     (_command + 0x0006),#0x00
00A3 753700     697            mov     ((_command + 0x0006) + 1),#0x00
00A6            698            ; The linker places a 'ret' at the end of segment R_DINIT.
00A6            699   ;--------------------------------------------------------
00A6            700   ; code
00A6            701   ;--------------------------------------------------------
0000            702            rseg R_CSEG
0000            703   ;------------------------------------------------------------
0000            704   ;Allocation info for local variables in function '_c51_external_startup'
0000            705   ;------------------------------------------------------------
0000            706   ;------------------------------------------------------------
0000            707   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:78: char _c51_external_startup(void)
0000            708   ;        -----------------------------------------
0000            709   ;         function _c51_external_startup
0000            710   ;        -----------------------------------------
0000            711   __c51_external_startup:
0000            712            using   0
0000            713   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:81: SFRPAGE = 0x00;
0000 75A700     714            mov     _SFRPAGE,#0x00
0003            715   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:82: WDTCN = 0xDE; //First key
0003 7597DE     716            mov     _WDTCN,#0xDE
0006            717   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:83: WDTCN = 0xAD; //Second key
0006 7597AD     718            mov     _WDTCN,#0xAD
0009            719   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:85: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     720            mov     _VDM0CN,#0x80
000C            721   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:86: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     722            mov     _RSTSRC,#0x06
000F            723   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:93: SFRPAGE = 0x10;
000F 75A710     724            mov     _SFRPAGE,#0x10
0012            725   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:94: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     726            mov     _PFE0CN,#0x20
0015            727   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:95: SFRPAGE = 0x00;
0015 75A700     728            mov     _SFRPAGE,#0x00
0018            729   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:116: CLKSEL = 0x00;
0018 75A900     730            mov     _CLKSEL,#0x00
001B            731   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:117: CLKSEL = 0x00;
001B 75A900     732            mov     _CLKSEL,#0x00
001E            733   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:118: while ((CLKSEL & 0x80) == 0);
001E            734   L002001?:
001E E5A9       735            mov     a,_CLKSEL
0020 30E7B8     736            jnb     acc.7,L002001?
0023            737   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:119: CLKSEL = 0x03;
0023 75A903     738            mov     _CLKSEL,#0x03
0026            739   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:120: CLKSEL = 0x03;
0026 75A903     740            mov     _CLKSEL,#0x03
0029            741   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:121: while ((CLKSEL & 0x80) == 0);
0029            742   L002004?:
0029 E5A9       743            mov     a,_CLKSEL
002B 30E738     744            jnb     acc.7,L002004?
002E            745   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:126: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     746            orl     _P0MDOUT,#0x10
0031            747   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:127: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     748            mov     _XBR0,#0x01
0034            749   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:128: XBR1 = 0X00;
0034 75E200     750            mov     _XBR1,#0x00
0037            751   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:129: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     752            mov     _XBR2,#0x40
003A            753   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:135: SCON0 = 0x10;
003A 759810     754            mov     _SCON0,#0x10
003D            755   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:136: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     756            mov     _TH1,#0xE6
0040            757   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:137: TL1 = TH1;      // Init Timer1
0040 858D8B     758            mov     _TL1,_TH1
0043            759   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:138: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     760            anl     _TMOD,#0x0F
0046            761   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:139: TMOD |= 0x20;
0046 438920     762            orl     _TMOD,#0x20
0049            763   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:140: TR1 = 1; // START Timer1
0049 D28E       764            setb    _TR1
004B            765   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:141: TI = 1;  // Indicate TX0 ready
004B D299       766            setb    _TI
004D            767   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:144: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     768            mov     _TMR2CN0,#0x00
0050            769   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:145: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     770            orl     _CKCON0,#0x10
0053            771   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:146: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     772            mov     _TMR2RL,#0xE0
0056 75CBE3     773            mov     (_TMR2RL >> 8),#0xE3
0059            774   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:147: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     775            mov     _TMR2,#0xFF
005C 75CFFF     776            mov     (_TMR2 >> 8),#0xFF
005F            777   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:148: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       778            setb    _ET2
0061            779   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:149: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       780            setb    _TR2
0063            781   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:166: EA = 1; // Enable interrupts
0063 D2AF       782            setb    _EA
0065            783   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:169: return 0;
0065 758200     784            mov     dpl,#0x00
0068 22         785            ret
0069            786   ;------------------------------------------------------------
0069            787   ;Allocation info for local variables in function 'Timer3us'
0069            788   ;------------------------------------------------------------
0069            789   ;us                        Allocated to registers r2 r3 
0069            790   ;i                         Allocated to registers r4 r5 
0069            791   ;------------------------------------------------------------
0069            792   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:171: void Timer3us(unsigned int us)
0069            793   ;        -----------------------------------------
0069            794   ;         function Timer3us
0069            795   ;        -----------------------------------------
0069            796   _Timer3us:
0069 AA82       797            mov     r2,dpl
006B AB83       798            mov     r3,dph
006D            799   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:176: CKCON0|=0b_0100_0000;
006D 438E40     800            orl     _CKCON0,#0x40
0070            801   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:178: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     802            mov     _TMR3RL,#0xB8
0073 7593FF     803            mov     (_TMR3RL >> 8),#0xFF
0076            804   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:179: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     805            mov     _TMR3,_TMR3RL
0079 859395     806            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            807   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:181: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     808            mov     _TMR3CN0,#0x04
007F            809   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:182: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       810            mov     r4,#0x00
0081 7D00       811            mov     r5,#0x00
0083            812   L003004?:
0083 C3         813            clr     c
0084 EC         814            mov     a,r4
0085 9A         815            subb    a,r2
0086 ED         816            mov     a,r5
0087 9B         817            subb    a,r3
0088 5001       818            jnc     L003007?
008A            819   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:184: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            820   L003001?:
008A E591       821            mov     a,_TMR3CN0
008C 30E778     822            jnb     acc.7,L003001?
008F            823   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:185: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     824            anl     _TMR3CN0,#0x7F
0092            825   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:182: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         826            inc     r4
0093 BC00F8     827            cjne    r4,#0x00,L003004?
0096 0D         828            inc     r5
0097 8001       829            sjmp    L003004?
0099            830   L003007?:
0099            831   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:187: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     832            mov     _TMR3CN0,#0x00
009C 22         833            ret
009D            834   ;------------------------------------------------------------
009D            835   ;Allocation info for local variables in function 'waitms'
009D            836   ;------------------------------------------------------------
009D            837   ;ms                        Allocated to registers r2 r3 
009D            838   ;j                         Allocated to registers r4 r5 
009D            839   ;k                         Allocated to registers r6 
009D            840   ;------------------------------------------------------------
009D            841   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:189: void waitms (unsigned int ms)
009D            842   ;        -----------------------------------------
009D            843   ;         function waitms
009D            844   ;        -----------------------------------------
009D            845   _waitms:
009D AA82       846            mov     r2,dpl
009F AB83       847            mov     r3,dph
00A1            848   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:193: for(j=0; j<ms; j++)
00A1 7C00       849            mov     r4,#0x00
00A3 7D00       850            mov     r5,#0x00
00A5            851   L004005?:
00A5 C3         852            clr     c
00A6 EC         853            mov     a,r4
00A7 9A         854            subb    a,r2
00A8 ED         855            mov     a,r5
00A9 9B         856            subb    a,r3
00AA 5001       857            jnc     L004009?
00AC            858   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:194: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       859            mov     r6,#0x00
00AE            860   L004001?:
00AE BE0478     861            cjne    r6,#0x04,L004018?
00B1            862   L004018?:
00B1 5001       863            jnc     L004007?
00B3 9000FA     864            mov     dptr,#0x00FA
00B6 C002       865            push    ar2
00B8 C003       866            push    ar3
00BA C004       867            push    ar4
00BC C005       868            push    ar5
00BE C006       869            push    ar6
00C0 120100     870            lcall   _Timer3us
00C3 D006       871            pop     ar6
00C5 D005       872            pop     ar5
00C7 D004       873            pop     ar4
00C9 D003       874            pop     ar3
00CB D002       875            pop     ar2
00CD 0E         876            inc     r6
00CE 8001       877            sjmp    L004001?
00D0            878   L004007?:
00D0            879   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:193: for(j=0; j<ms; j++)
00D0 0C         880            inc     r4
00D1 BC00B8     881            cjne    r4,#0x00,L004005?
00D4 0D         882            inc     r5
00D5 8001       883            sjmp    L004005?
00D7            884   L004009?:
00D7 22         885            ret
00D8            886   ;------------------------------------------------------------
00D8            887   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            888   ;------------------------------------------------------------
00D8            889   ;pin                       Allocated to registers 
00D8            890   ;------------------------------------------------------------
00D8            891   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:197: unsigned int ADC_at_Pin(unsigned char pin)
00D8            892   ;        -----------------------------------------
00D8            893   ;         function ADC_at_Pin
00D8            894   ;        -----------------------------------------
00D8            895   _ADC_at_Pin:
00D8 8582BB     896            mov     _ADC0MX,dpl
00DB            897   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:200: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       898            setb    _ADBUSY
00DD            899   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:201: while (ADBUSY); // Wait for dummy conversion to finish
00DD            900   L005001?:
00DD 20ECF8     901            jb      _ADBUSY,L005001?
00E0            902   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:202: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       903            setb    _ADBUSY
00E2            904   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:203: while (ADBUSY); // Wait for conversion to complete
00E2            905   L005004?:
00E2 20EC38     906            jb      _ADBUSY,L005004?
00E5            907   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:204: return (ADC0);
00E5 85BD82     908            mov     dpl,_ADC0
00E8 85BE83     909            mov     dph,(_ADC0 >> 8)
00EB 22         910            ret
00EC            911   ;------------------------------------------------------------
00EC            912   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            913   ;------------------------------------------------------------
00EC            914   ;------------------------------------------------------------
00EC            915   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:208: void Timer2_ISR(void) interrupt 5
00EC            916   ;        -----------------------------------------
00EC            917   ;         function Timer2_ISR
00EC            918   ;        -----------------------------------------
00EC            919   _Timer2_ISR:
00EC C0E0       920            push    acc
00EE C002       921            push    ar2
00F0 C003       922            push    ar3
00F2 C0D0       923            push    psw
00F4 75D000     924            mov     psw,#0x00
00F7            925   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:210: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       926            clr     _TF2H
00F9            927   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:212: pwm_count++;
00F9 0588       928            inc     _pwm_count
00FB            929   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:213: if (pwm_count>100)
00FB E588       930            mov     a,_pwm_count
00FD 249B       931            add     a,#0xff - 0x64
00FF 5001       932            jnc     L006002?
0101            933   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:214: pwm_count = 0;
0101 758800     934            mov     _pwm_count,#0x00
0104            935   L006002?:
0104            936   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:217: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AA88       937            mov     r2,_pwm_count
0106 7B00       938            mov     r3,#0x00
0108 C3         939            clr     c
0109 E588       940            mov     a,_pwmSig1
010B 9A         941            subb    a,r2
010C E589       942            mov     a,(_pwmSig1 + 1)
010E 9B         943            subb    a,r3
010F 9238       944            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         945            cpl     c
0112 9294       946            mov     _P1_4,c
0114            947   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:218: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AA88       948            mov     r2,_pwm_count
0116 7B00       949            mov     r3,#0x00
0118 C3         950            clr     c
0119 E548       951            mov     a,_pwmSig2
011B 9A         952            subb    a,r2
011C E549       953            mov     a,(_pwmSig2 + 1)
011E 9B         954            subb    a,r3
011F 9238       955            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         956            cpl     c
0122 9293       957            mov     _P1_3,c
0124            958   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:220: motorL1 = pwm_count>pwmSig1 ? 0 : 1;
0124 AA88       959            mov     r2,_pwm_count
0126 7B00       960            mov     r3,#0x00
0128 C3         961            clr     c
0129 E588       962            mov     a,_pwmSig1
012B 9A         963            subb    a,r2
012C E589       964            mov     a,(_pwmSig1 + 1)
012E 9B         965            subb    a,r3
012F 9238       966            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         967            cpl     c
0132 9296       968            mov     _P1_6,c
0134            969   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:221: motorL2 = pwm_count>pwmSig2 ? 0 : 1;
0134 AA88       970            mov     r2,_pwm_count
0136 7B00       971            mov     r3,#0x00
0138 C3         972            clr     c
0139 E548       973            mov     a,_pwmSig2
013B 9A         974            subb    a,r2
013C E549       975            mov     a,(_pwmSig2 + 1)
013E 9B         976            subb    a,r3
013F 9238       977            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         978            cpl     c
0142 9295       979            mov     _P1_5,c
0144 D0D0       980            pop     psw
0146 D003       981            pop     ar3
0148 D002       982            pop     ar2
014A D0E0       983            pop     acc
014C 32         984            reti
014D            985   ;        eliminated unneeded push/pop dpl
014D            986   ;        eliminated unneeded push/pop dph
014D            987   ;        eliminated unneeded push/pop b
014D            988   ;------------------------------------------------------------
014D            989   ;Allocation info for local variables in function 'InitADC'
014D            990   ;------------------------------------------------------------
014D            991   ;------------------------------------------------------------
014D            992   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:253: void InitADC(void)
014D            993   ;        -----------------------------------------
014D            994   ;         function InitADC
014D            995   ;        -----------------------------------------
014D            996   _InitADC:
014D            997   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:255: SFRPAGE = 0x00;
014D 75A700     998            mov     _SFRPAGE,#0x00
0150            999   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:256: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0150 75B280    1000            mov     _ADC0CN1,#0x80
0153           1001   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:257: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0153 75BCF8    1002            mov     _ADC0CF0,#0xF8
0156           1003   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:258: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0156 75B91E    1004            mov     _ADC0CF1,#0x1E
0159           1005   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:259: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0159 75E800    1006            mov     _ADC0CN0,#0x00
015C           1007   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:260: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
015C 75DF3F    1008            mov     _ADC0CF2,#0x3F
015F           1009   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:261: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
015F 75B300    1010            mov     _ADC0CN2,#0x00
0162           1011   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:262: ADEN = 1; // Enable ADC
0162 D2EF      1012            setb    _ADEN
0164 22        1013            ret
0165           1014   ;------------------------------------------------------------
0165           1015   ;Allocation info for local variables in function 'TIMER0_Init'
0165           1016   ;------------------------------------------------------------
0165           1017   ;------------------------------------------------------------
0165           1018   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:264: void TIMER0_Init(void)
0165           1019   ;        -----------------------------------------
0165           1020   ;         function TIMER0_Init
0165           1021   ;        -----------------------------------------
0165           1022   _TIMER0_Init:
0165           1023   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:266: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0165 5389F0    1024            anl     _TMOD,#0xF0
0168           1025   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:267: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0168 438901    1026            orl     _TMOD,#0x01
016B           1027   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:268: TR0 = 0; // Stop Timer/Counter 0
016B C28C      1028            clr     _TR0
016D 22        1029            ret
016E           1030   ;------------------------------------------------------------
016E           1031   ;Allocation info for local variables in function 'Volts_at_Pin'
016E           1032   ;------------------------------------------------------------
016E           1033   ;pin                       Allocated to registers r2 
016E           1034   ;------------------------------------------------------------
016E           1035   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:273: float Volts_at_Pin(unsigned char pin)
016E           1036   ;        -----------------------------------------
016E           1037   ;         function Volts_at_Pin
016E           1038   ;        -----------------------------------------
016E           1039   _Volts_at_Pin:
016E           1040   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:275: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
016E 120100    1041            lcall   _ADC_at_Pin
0171 120100    1042            lcall   ___uint2fs
0174 AA82      1043            mov     r2,dpl
0176 AB83      1044            mov     r3,dph
0178 ACF0      1045            mov     r4,b
017A FD        1046            mov     r5,a
017B C002      1047            push    ar2
017D C003      1048            push    ar3
017F C004      1049            push    ar4
0181 C005      1050            push    ar5
0183 906C8B    1051            mov     dptr,#0x6C8B
0186 75F053    1052            mov     b,#0x53
0189 7440      1053            mov     a,#0x40
018B 120100    1054            lcall   ___fsmul
018E AA82      1055            mov     r2,dpl
0190 AB83      1056            mov     r3,dph
0192 ACF0      1057            mov     r4,b
0194 FD        1058            mov     r5,a
0195 E581      1059            mov     a,sp
0197 24FC      1060            add     a,#0xfc
0199 F581      1061            mov     sp,a
019B E4        1062            clr     a
019C C0E0      1063            push    acc
019E 74FC      1064            mov     a,#0xFC
01A0 C0E0      1065            push    acc
01A2 747F      1066            mov     a,#0x7F
01A4 C0E0      1067            push    acc
01A6 7446      1068            mov     a,#0x46
01A8 C0E0      1069            push    acc
01AA 8A82      1070            mov     dpl,r2
01AC 8B83      1071            mov     dph,r3
01AE 8CF0      1072            mov     b,r4
01B0 ED        1073            mov     a,r5
01B1 120100    1074            lcall   ___fsdiv
01B4 AA82      1075            mov     r2,dpl
01B6 AB83      1076            mov     r3,dph
01B8 ACF0      1077            mov     r4,b
01BA FD        1078            mov     r5,a
01BB E581      1079            mov     a,sp
01BD 24FC      1080            add     a,#0xfc
01BF F581      1081            mov     sp,a
01C1 8A82      1082            mov     dpl,r2
01C3 8B83      1083            mov     dph,r3
01C5 8CF0      1084            mov     b,r4
01C7 ED        1085            mov     a,r5
01C8 22        1086            ret
01C9           1087   ;------------------------------------------------------------
01C9           1088   ;Allocation info for local variables in function 'InitPinADC'
01C9           1089   ;------------------------------------------------------------
01C9           1090   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01C9           1091   ;portno                    Allocated to registers r2 
01C9           1092   ;mask                      Allocated to registers r3 
01C9           1093   ;------------------------------------------------------------
01C9           1094   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:277: void InitPinADC(unsigned char portno, unsigned char pinno)
01C9           1095   ;        -----------------------------------------
01C9           1096   ;         function InitPinADC
01C9           1097   ;        -----------------------------------------
01C9           1098   _InitPinADC:
01C9 AA82      1099            mov     r2,dpl
01CB           1100   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:281: mask = 1 << pinno;
01CB 85F0F0    1101            mov     b,_InitPinADC_PARM_2
01CE 05F0      1102            inc     b
01D0 7401      1103            mov     a,#0x01
01D2 8001      1104            sjmp    L010013?
01D4           1105   L010011?:
01D4 25E0      1106            add     a,acc
01D6           1107   L010013?:
01D6 D5F080    1108            djnz    b,L010011?
01D9 FB        1109            mov     r3,a
01DA           1110   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:283: SFRPAGE = 0x20;
01DA 75A720    1111            mov     _SFRPAGE,#0x20
01DD           1112   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:284: switch (portno)
01DD BA00C0    1113            cjne    r2,#0x00,L010014?
01E0 8001      1114            sjmp    L010001?
01E2           1115   L010014?:
01E2 BA0140    1116            cjne    r2,#0x01,L010015?
01E5 8001      1117            sjmp    L010002?
01E7           1118   L010015?:
01E7           1119   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:286: case 0:
01E7 BA02C0    1120            cjne    r2,#0x02,L010005?
01EA 8001      1121            sjmp    L010003?
01EC           1122   L010001?:
01EC           1123   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:287: P0MDIN &= (~mask); // Set pin as analog input
01EC EB        1124            mov     a,r3
01ED F4        1125            cpl     a
01EE FA        1126            mov     r2,a
01EF 52F1      1127            anl     _P0MDIN,a
01F1           1128   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:288: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01F1 EB        1129            mov     a,r3
01F2 42D4      1130            orl     _P0SKIP,a
01F4           1131   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:289: break;
01F4           1132   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:290: case 1:
01F4 8001      1133            sjmp    L010005?
01F6           1134   L010002?:
01F6           1135   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:291: P1MDIN &= (~mask); // Set pin as analog input
01F6 EB        1136            mov     a,r3
01F7 F4        1137            cpl     a
01F8 FA        1138            mov     r2,a
01F9 52F2      1139            anl     _P1MDIN,a
01FB           1140   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:292: P1SKIP |= mask; // Skip Crossbar decoding for this pin
01FB EB        1141            mov     a,r3
01FC 42D5      1142            orl     _P1SKIP,a
01FE           1143   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:293: break;
01FE           1144   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:294: case 2:
01FE 8001      1145            sjmp    L010005?
0200           1146   L010003?:
0200           1147   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:295: P2MDIN &= (~mask); // Set pin as analog input
0200 EB        1148            mov     a,r3
0201 F4        1149            cpl     a
0202 FA        1150            mov     r2,a
0203 52F3      1151            anl     _P2MDIN,a
0205           1152   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:296: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0205 EB        1153            mov     a,r3
0206 42CC      1154            orl     _P2SKIP,a
0208           1155   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:300: }
0208           1156   L010005?:
0208           1157   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:301: SFRPAGE = 0x00;
0208 75A700    1158            mov     _SFRPAGE,#0x00
020B 22        1159            ret
020C           1160   ;------------------------------------------------------------
020C           1161   ;Allocation info for local variables in function 'PWMforward'
020C           1162   ;------------------------------------------------------------
020C           1163   ;------------------------------------------------------------
020C           1164   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:310: void PWMforward(void) {
020C           1165   ;        -----------------------------------------
020C           1166   ;         function PWMforward
020C           1167   ;        -----------------------------------------
020C           1168   _PWMforward:
020C           1169   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:311: pwmSig1 = 99;
020C 758863    1170            mov     _pwmSig1,#0x63
020F E4        1171            clr     a
0210 F589      1172            mov     (_pwmSig1 + 1),a
0212           1173   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:312: pwmSig2 = 0;
0212           1174   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:314: pwmSig3 = 0;
0212 E4        1175            clr     a
0213 F548      1176            mov     _pwmSig2,a
0215 F549      1177            mov     (_pwmSig2 + 1),a
0217 F508      1178            mov     _pwmSig3,a
0219 F509      1179            mov     (_pwmSig3 + 1),a
021B           1180   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:315: pwmSig4 =99;
021B 75C863    1181            mov     _pwmSig4,#0x63
021E E4        1182            clr     a
021F F5C9      1183            mov     (_pwmSig4 + 1),a
0221           1184   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:316: printf("Forward\n\r");
0221 7440      1185            mov     a,#__str_0
0223 C0E0      1186            push    acc
0225 74C3      1187            mov     a,#(__str_0 >> 8)
0227 C0E0      1188            push    acc
0229 7480      1189            mov     a,#0x80
022B C0E0      1190            push    acc
022D 120100    1191            lcall   _printf
0230 1581      1192            dec     sp
0232 1581      1193            dec     sp
0234 1581      1194            dec     sp
0236 22        1195            ret
0237           1196   ;------------------------------------------------------------
0237           1197   ;Allocation info for local variables in function 'PWMbackward'
0237           1198   ;------------------------------------------------------------
0237           1199   ;------------------------------------------------------------
0237           1200   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:319: void PWMbackward(void) {
0237           1201   ;        -----------------------------------------
0237           1202   ;         function PWMbackward
0237           1203   ;        -----------------------------------------
0237           1204   _PWMbackward:
0237           1205   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:320: pwmSig1 = 0;
0237 E4        1206            clr     a
0238 F588      1207            mov     _pwmSig1,a
023A F589      1208            mov     (_pwmSig1 + 1),a
023C           1209   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:321: pwmSig2 = 99;
023C 754863    1210            mov     _pwmSig2,#0x63
023F E4        1211            clr     a
0240 F549      1212            mov     (_pwmSig2 + 1),a
0242           1213   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:323: pwmSig3 = 99;
0242 750863    1214            mov     _pwmSig3,#0x63
0245 E4        1215            clr     a
0246 F509      1216            mov     (_pwmSig3 + 1),a
0248           1217   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:324: pwmSig4 = 0;
0248 E4        1218            clr     a
0249 F5C8      1219            mov     _pwmSig4,a
024B F5C9      1220            mov     (_pwmSig4 + 1),a
024D           1221   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:325: printf("Backward\n\r");
024D 74C0      1222            mov     a,#__str_1
024F C0E0      1223            push    acc
0251 74C3      1224            mov     a,#(__str_1 >> 8)
0253 C0E0      1225            push    acc
0255 7480      1226            mov     a,#0x80
0257 C0E0      1227            push    acc
0259 120100    1228            lcall   _printf
025C 1581      1229            dec     sp
025E 1581      1230            dec     sp
0260 1581      1231            dec     sp
0262 22        1232            ret
0263           1233   ;------------------------------------------------------------
0263           1234   ;Allocation info for local variables in function 'PWMLeft'
0263           1235   ;------------------------------------------------------------
0263           1236   ;------------------------------------------------------------
0263           1237   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:328: void PWMLeft(void) {
0263           1238   ;        -----------------------------------------
0263           1239   ;         function PWMLeft
0263           1240   ;        -----------------------------------------
0263           1241   _PWMLeft:
0263           1242   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:329: pwmSig1 = 0;
0263           1243   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:330: pwmSig2 = 0;
0263 E4        1244            clr     a
0264 F588      1245            mov     _pwmSig1,a
0266 F589      1246            mov     (_pwmSig1 + 1),a
0268 F548      1247            mov     _pwmSig2,a
026A F549      1248            mov     (_pwmSig2 + 1),a
026C           1249   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:332: pwmSig3 = 70;
026C 750846    1250            mov     _pwmSig3,#0x46
026F E4        1251            clr     a
0270 F509      1252            mov     (_pwmSig3 + 1),a
0272           1253   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:333: pwmSig4 = 0;
0272 E4        1254            clr     a
0273 F5C8      1255            mov     _pwmSig4,a
0275 F5C9      1256            mov     (_pwmSig4 + 1),a
0277           1257   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:334: printf("Left\n\r");
0277 7400      1258            mov     a,#__str_2
0279 C0E0      1259            push    acc
027B 74C4      1260            mov     a,#(__str_2 >> 8)
027D C0E0      1261            push    acc
027F 7480      1262            mov     a,#0x80
0281 C0E0      1263            push    acc
0283 120100    1264            lcall   _printf
0286 1581      1265            dec     sp
0288 1581      1266            dec     sp
028A 1581      1267            dec     sp
028C 22        1268            ret
028D           1269   ;------------------------------------------------------------
028D           1270   ;Allocation info for local variables in function 'PWMRight'
028D           1271   ;------------------------------------------------------------
028D           1272   ;------------------------------------------------------------
028D           1273   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:337: void PWMRight(void) {
028D           1274   ;        -----------------------------------------
028D           1275   ;         function PWMRight
028D           1276   ;        -----------------------------------------
028D           1277   _PWMRight:
028D           1278   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:338: pwmSig1 = 99;
028D 758863    1279            mov     _pwmSig1,#0x63
0290 E4        1280            clr     a
0291 F589      1281            mov     (_pwmSig1 + 1),a
0293           1282   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:339: pwmSig2 = 0;
0293           1283   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:341: pwmSig3 = 0;
0293           1284   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:342: pwmSig4 = 0;
0293 E4        1285            clr     a
0294 F548      1286            mov     _pwmSig2,a
0296 F549      1287            mov     (_pwmSig2 + 1),a
0298 F508      1288            mov     _pwmSig3,a
029A F509      1289            mov     (_pwmSig3 + 1),a
029C F5C8      1290            mov     _pwmSig4,a
029E F5C9      1291            mov     (_pwmSig4 + 1),a
02A0           1292   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:343: printf("Right\n\r");
02A0 7440      1293            mov     a,#__str_3
02A2 C0E0      1294            push    acc
02A4 74C4      1295            mov     a,#(__str_3 >> 8)
02A6 C0E0      1296            push    acc
02A8 7480      1297            mov     a,#0x80
02AA C0E0      1298            push    acc
02AC 120100    1299            lcall   _printf
02AF 1581      1300            dec     sp
02B1 1581      1301            dec     sp
02B3 1581      1302            dec     sp
02B5 22        1303            ret
02B6           1304   ;------------------------------------------------------------
02B6           1305   ;Allocation info for local variables in function 'PWMStop'
02B6           1306   ;------------------------------------------------------------
02B6           1307   ;------------------------------------------------------------
02B6           1308   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:346: void PWMStop(void) {
02B6           1309   ;        -----------------------------------------
02B6           1310   ;         function PWMStop
02B6           1311   ;        -----------------------------------------
02B6           1312   _PWMStop:
02B6           1313   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:347: pwmSig1 = 0;
02B6           1314   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:348: pwmSig2 = 0;
02B6           1315   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:350: pwmSig3 = 0;
02B6           1316   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:351: pwmSig4 = 0;
02B6 E4        1317            clr     a
02B7 F588      1318            mov     _pwmSig1,a
02B9 F589      1319            mov     (_pwmSig1 + 1),a
02BB F548      1320            mov     _pwmSig2,a
02BD F549      1321            mov     (_pwmSig2 + 1),a
02BF F508      1322            mov     _pwmSig3,a
02C1 F509      1323            mov     (_pwmSig3 + 1),a
02C3 F5C8      1324            mov     _pwmSig4,a
02C5 F5C9      1325            mov     (_pwmSig4 + 1),a
02C7           1326   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:352: printf("Stop\n\r");
02C7 7480      1327            mov     a,#__str_4
02C9 C0E0      1328            push    acc
02CB 74C4      1329            mov     a,#(__str_4 >> 8)
02CD C0E0      1330            push    acc
02CF 7480      1331            mov     a,#0x80
02D1 C0E0      1332            push    acc
02D3 120100    1333            lcall   _printf
02D6 1581      1334            dec     sp
02D8 1581      1335            dec     sp
02DA 1581      1336            dec     sp
02DC 22        1337            ret
02DD           1338   ;------------------------------------------------------------
02DD           1339   ;Allocation info for local variables in function 'arrayEqual'
02DD           1340   ;------------------------------------------------------------
02DD           1341   ;size                      Allocated with name '_arrayEqual_PARM_2'
02DD           1342   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
02DD           1343   ;arr1                      Allocated with name '_arrayEqual_arr1_1_72'
02DD           1344   ;i                         Allocated to registers r5 r6 
02DD           1345   ;------------------------------------------------------------
02DD           1346   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:358: int arrayEqual (int arr1[], int size, int arr2[]){
02DD           1347   ;        -----------------------------------------
02DD           1348   ;         function arrayEqual
02DD           1349   ;        -----------------------------------------
02DD           1350   _arrayEqual:
02DD 8582E8    1351            mov     _arrayEqual_arr1_1_72,dpl
02E0 8583E9    1352            mov     (_arrayEqual_arr1_1_72 + 1),dph
02E3 85F0EA    1353            mov     (_arrayEqual_arr1_1_72 + 2),b
02E6           1354   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:360: for(i=0; i<size; i++){
02E6 7D00      1355            mov     r5,#0x00
02E8 7E00      1356            mov     r6,#0x00
02EA           1357   L016003?:
02EA C3        1358            clr     c
02EB ED        1359            mov     a,r5
02EC 95A0      1360            subb    a,_arrayEqual_PARM_2
02EE EE        1361            mov     a,r6
02EF 6480      1362            xrl     a,#0x80
02F1 85A1F0    1363            mov     b,(_arrayEqual_PARM_2 + 1)
02F4 63F080    1364            xrl     b,#0x80
02F7 95F0      1365            subb    a,b
02F9 5001      1366            jnc     L016006?
02FB           1367   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:361: if(arr1[i]!=arr2[i])
02FB 8D07      1368            mov     ar7,r5
02FD EE        1369            mov     a,r6
02FE CF        1370            xch     a,r7
02FF 25E0      1371            add     a,acc
0301 CF        1372            xch     a,r7
0302 33        1373            rlc     a
0303 F8        1374            mov     r0,a
0304 EF        1375            mov     a,r7
0305 25E8      1376            add     a,_arrayEqual_arr1_1_72
0307 F9        1377            mov     r1,a
0308 E8        1378            mov     a,r0
0309 35E9      1379            addc    a,(_arrayEqual_arr1_1_72 + 1)
030B FA        1380            mov     r2,a
030C ABEA      1381            mov     r3,(_arrayEqual_arr1_1_72 + 2)
030E 8982      1382            mov     dpl,r1
0310 8A83      1383            mov     dph,r2
0312 8BF0      1384            mov     b,r3
0314 120100    1385            lcall   __gptrget
0317 F9        1386            mov     r1,a
0318 A3        1387            inc     dptr
0319 120100    1388            lcall   __gptrget
031C FA        1389            mov     r2,a
031D EF        1390            mov     a,r7
031E 2550      1391            add     a,_arrayEqual_PARM_3
0320 FF        1392            mov     r7,a
0321 E8        1393            mov     a,r0
0322 3551      1394            addc    a,(_arrayEqual_PARM_3 + 1)
0324 F8        1395            mov     r0,a
0325 AB52      1396            mov     r3,(_arrayEqual_PARM_3 + 2)
0327 8F82      1397            mov     dpl,r7
0329 8883      1398            mov     dph,r0
032B 8BF0      1399            mov     b,r3
032D 120100    1400            lcall   __gptrget
0330 FF        1401            mov     r7,a
0331 A3        1402            inc     dptr
0332 120100    1403            lcall   __gptrget
0335 F8        1404            mov     r0,a
0336 E9        1405            mov     a,r1
0337 B50780    1406            cjne    a,ar7,L016013?
033A EA        1407            mov     a,r2
033B B50080    1408            cjne    a,ar0,L016013?
033E 8001      1409            sjmp    L016005?
0340           1410   L016013?:
0340           1411   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:362: return 0; 
0340 900000    1412            mov     dptr,#0x0000
0343 22        1413            ret
0344           1414   L016005?:
0344           1415   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:360: for(i=0; i<size; i++){
0344 0D        1416            inc     r5
0345 BD00C0    1417            cjne    r5,#0x00,L016003?
0348 0E        1418            inc     r6
0349 8001      1419            sjmp    L016003?
034B           1420   L016006?:
034B           1421   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:364: return 1; 
034B 900001    1422            mov     dptr,#0x0001
034E 22        1423            ret
034F           1424   ;------------------------------------------------------------
034F           1425   ;Allocation info for local variables in function 'checkCommands'
034F           1426   ;------------------------------------------------------------
034F           1427   ;------------------------------------------------------------
034F           1428   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:370: void checkCommands (void){
034F           1429   ;        -----------------------------------------
034F           1430   ;         function checkCommands
034F           1431   ;        -----------------------------------------
034F           1432   _checkCommands:
034F           1433   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:371: if(arrayEqual(command, 4, stop)) PWMStop();
034F 755008    1434            mov     _arrayEqual_PARM_3,#_stop
0352 755100    1435            mov     (_arrayEqual_PARM_3 + 1),#0x00
0355 755240    1436            mov     (_arrayEqual_PARM_3 + 2),#0x40
0358 75A004    1437            mov     _arrayEqual_PARM_2,#0x04
035B E4        1438            clr     a
035C F5A1      1439            mov     (_arrayEqual_PARM_2 + 1),a
035E 901830    1440            mov     dptr,#_command
0361 75F040    1441            mov     b,#0x40
0364 120100    1442            lcall   _arrayEqual
0367 E582      1443            mov     a,dpl
0369 8583F0    1444            mov     b,dph
036C 45F0      1445            orl     a,b
036E 6001      1446            jz      L017014?
0370 020100    1447            ljmp    _PWMStop
0373           1448   L017014?:
0373           1449   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:372: else if (arrayEqual(command,4,forward)) PWMforward(); 
0373 7550C8    1450            mov     _arrayEqual_PARM_3,#_forward
0376 755100    1451            mov     (_arrayEqual_PARM_3 + 1),#0x00
0379 755240    1452            mov     (_arrayEqual_PARM_3 + 2),#0x40
037C 75A004    1453            mov     _arrayEqual_PARM_2,#0x04
037F E4        1454            clr     a
0380 F5A1      1455            mov     (_arrayEqual_PARM_2 + 1),a
0382 901830    1456            mov     dptr,#_command
0385 75F040    1457            mov     b,#0x40
0388 120100    1458            lcall   _arrayEqual
038B E582      1459            mov     a,dpl
038D 8583F0    1460            mov     b,dph
0390 45F0      1461            orl     a,b
0392 6001      1462            jz      L017011?
0394 020100    1463            ljmp    _PWMforward
0397           1464   L017011?:
0397           1465   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:373: else if (arrayEqual(command,4,backward)) PWMbackward(); 
0397 7550F0    1466            mov     _arrayEqual_PARM_3,#_backward
039A 755100    1467            mov     (_arrayEqual_PARM_3 + 1),#0x00
039D 755240    1468            mov     (_arrayEqual_PARM_3 + 2),#0x40
03A0 75A004    1469            mov     _arrayEqual_PARM_2,#0x04
03A3 E4        1470            clr     a
03A4 F5A1      1471            mov     (_arrayEqual_PARM_2 + 1),a
03A6 901830    1472            mov     dptr,#_command
03A9 75F040    1473            mov     b,#0x40
03AC 120100    1474            lcall   _arrayEqual
03AF E582      1475            mov     a,dpl
03B1 8583F0    1476            mov     b,dph
03B4 45F0      1477            orl     a,b
03B6 6001      1478            jz      L017008?
03B8 020100    1479            ljmp    _PWMbackward
03BB           1480   L017008?:
03BB           1481   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:374: else if (arrayEqual(command,4, left)) PWMLeft(); 
03BB 7550B0    1482            mov     _arrayEqual_PARM_3,#_left
03BE 755100    1483            mov     (_arrayEqual_PARM_3 + 1),#0x00
03C1 755240    1484            mov     (_arrayEqual_PARM_3 + 2),#0x40
03C4 75A004    1485            mov     _arrayEqual_PARM_2,#0x04
03C7 E4        1486            clr     a
03C8 F5A1      1487            mov     (_arrayEqual_PARM_2 + 1),a
03CA 901830    1488            mov     dptr,#_command
03CD 75F040    1489            mov     b,#0x40
03D0 120100    1490            lcall   _arrayEqual
03D3 E582      1491            mov     a,dpl
03D5 8583F0    1492            mov     b,dph
03D8 45F0      1493            orl     a,b
03DA 6001      1494            jz      L017005?
03DC 020100    1495            ljmp    _PWMLeft
03DF           1496   L017005?:
03DF           1497   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:375: else if (arrayEqual(command,4, right)) PWMRight(); 
03DF 755070    1498            mov     _arrayEqual_PARM_3,#_right
03E2 755100    1499            mov     (_arrayEqual_PARM_3 + 1),#0x00
03E5 755240    1500            mov     (_arrayEqual_PARM_3 + 2),#0x40
03E8 75A004    1501            mov     _arrayEqual_PARM_2,#0x04
03EB E4        1502            clr     a
03EC F5A1      1503            mov     (_arrayEqual_PARM_2 + 1),a
03EE 901830    1504            mov     dptr,#_command
03F1 75F040    1505            mov     b,#0x40
03F4 120100    1506            lcall   _arrayEqual
03F7 E582      1507            mov     a,dpl
03F9 8583F0    1508            mov     b,dph
03FC 45F0      1509            orl     a,b
03FE 6001      1510            jz      L017002?
0400 020100    1511            ljmp    _PWMRight
0403           1512   L017002?:
0403           1513   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:376: else PWMStop(); //defaults to a halt (redundant)
0403 020100    1514            ljmp    _PWMStop
0406           1515   ;------------------------------------------------------------
0406           1516   ;Allocation info for local variables in function 'checkTime'
0406           1517   ;------------------------------------------------------------
0406           1518   ;time                      Allocated to registers r2 r3 r4 r5 
0406           1519   ;overflow_count            Allocated with name '_checkTime_overflow_count_1_78'
0406           1520   ;------------------------------------------------------------
0406           1521   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:379: float checkTime (void) {
0406           1522   ;        -----------------------------------------
0406           1523   ;         function checkTime
0406           1524   ;        -----------------------------------------
0406           1525   _checkTime:
0406           1526   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:383: TL0=0; 
0406 758A00    1527            mov     _TL0,#0x00
0409           1528   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:384: TH0=0;
0409 758C00    1529            mov     _TH0,#0x00
040C           1530   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:385: TF0=0;
040C C28D      1531            clr     _TF0
040E           1532   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:386: overflow_count=0;
040E E4        1533            clr     a
040F F598      1534            mov     _checkTime_overflow_count_1_78,a
0411 F599      1535            mov     (_checkTime_overflow_count_1_78 + 1),a
0413           1536   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:387: TR0=0;
0413 C28C      1537            clr     _TR0
0415           1538   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:391: while(Volts_at_Pin(QFP32_MUX_P1_6) >= thresholdVolt); //wait for the signal to be 0
0415           1539   L018001?:
0415 75820C    1540            mov     dpl,#0x0C
0418 120100    1541            lcall   _Volts_at_Pin
041B AC82      1542            mov     r4,dpl
041D AD83      1543            mov     r5,dph
041F AEF0      1544            mov     r6,b
0421 FF        1545            mov     r7,a
0422 E4        1546            clr     a
0423 C0E0      1547            push    acc
0425 C0E0      1548            push    acc
0427 C0E0      1549            push    acc
0429 743F      1550            mov     a,#0x3F
042B C0E0      1551            push    acc
042D 8C82      1552            mov     dpl,r4
042F 8D83      1553            mov     dph,r5
0431 8EF0      1554            mov     b,r6
0433 EF        1555            mov     a,r7
0434 120100    1556            lcall   ___fslt
0437 AC82      1557            mov     r4,dpl
0439 E581      1558            mov     a,sp
043B 24FC      1559            add     a,#0xfc
043D F581      1560            mov     sp,a
043F EC        1561            mov     a,r4
0440 6001      1562            jz      L018001?
0442           1563   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:393: while (Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt) {        // wait for signal to be 1
0442           1564   L018011?:
0442 75820C    1565            mov     dpl,#0x0C
0445 120100    1566            lcall   _Volts_at_Pin
0448 AC82      1567            mov     r4,dpl
044A AD83      1568            mov     r5,dph
044C AEF0      1569            mov     r6,b
044E FF        1570            mov     r7,a
044F E4        1571            clr     a
0450 C0E0      1572            push    acc
0452 C0E0      1573            push    acc
0454 C0E0      1574            push    acc
0456 743F      1575            mov     a,#0x3F
0458 C0E0      1576            push    acc
045A 8C82      1577            mov     dpl,r4
045C 8D83      1578            mov     dph,r5
045E 8EF0      1579            mov     b,r6
0460 EF        1580            mov     a,r7
0461 120100    1581            lcall   ___fslt
0464 AC82      1582            mov     r4,dpl
0466 E581      1583            mov     a,sp
0468 24FC      1584            add     a,#0xfc
046A F581      1585            mov     sp,a
046C EC        1586            mov     a,r4
046D 7001      1587            jnz     L018023?
046F 020100    1588            ljmp    L018013?
0472           1589   L018023?:
0472           1590   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:394: TR0=1; // Start the timer
0472 D28C      1591            setb    _TR0
0474           1592   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:395: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >= STOPTIME)
0474 859882    1593            mov     dpl,_checkTime_overflow_count_1_78
0477 859983    1594            mov     dph,(_checkTime_overflow_count_1_78 + 1)
047A 120100    1595            lcall   ___sint2fs
047D AC82      1596            mov     r4,dpl
047F AD83      1597            mov     r5,dph
0481 AEF0      1598            mov     r6,b
0483 FF        1599            mov     r7,a
0484 C004      1600            push    ar4
0486 C005      1601            push    ar5
0488 C006      1602            push    ar6
048A C007      1603            push    ar7
048C 900000    1604            mov     dptr,#0x0000
048F 75F080    1605            mov     b,#0x80
0492 7447      1606            mov     a,#0x47
0494 120100    1607            lcall   ___fsmul
0497 AC82      1608            mov     r4,dpl
0499 AD83      1609            mov     r5,dph
049B AEF0      1610            mov     r6,b
049D FF        1611            mov     r7,a
049E E581      1612            mov     a,sp
04A0 24FC      1613            add     a,#0xfc
04A2 F581      1614            mov     sp,a
04A4 858C82    1615            mov     dpl,_TH0
04A7 C004      1616            push    ar4
04A9 C005      1617            push    ar5
04AB C006      1618            push    ar6
04AD C007      1619            push    ar7
04AF 120100    1620            lcall   ___uchar2fs
04B2 A882      1621            mov     r0,dpl
04B4 A983      1622            mov     r1,dph
04B6 AAF0      1623            mov     r2,b
04B8 FB        1624            mov     r3,a
04B9 C000      1625            push    ar0
04BB C001      1626            push    ar1
04BD C002      1627            push    ar2
04BF C003      1628            push    ar3
04C1 900000    1629            mov     dptr,#0x0000
04C4 75F080    1630            mov     b,#0x80
04C7 7443      1631            mov     a,#0x43
04C9 120100    1632            lcall   ___fsmul
04CC AA82      1633            mov     r2,dpl
04CE AB83      1634            mov     r3,dph
04D0 A8F0      1635            mov     r0,b
04D2 F9        1636            mov     r1,a
04D3 E581      1637            mov     a,sp
04D5 24FC      1638            add     a,#0xfc
04D7 F581      1639            mov     sp,a
04D9 D007      1640            pop     ar7
04DB D006      1641            pop     ar6
04DD D005      1642            pop     ar5
04DF D004      1643            pop     ar4
04E1 C002      1644            push    ar2
04E3 C003      1645            push    ar3
04E5 C000      1646            push    ar0
04E7 C001      1647            push    ar1
04E9 8C82      1648            mov     dpl,r4
04EB 8D83      1649            mov     dph,r5
04ED 8EF0      1650            mov     b,r6
04EF EF        1651            mov     a,r7
04F0 120100    1652            lcall   ___fsadd
04F3 AA82      1653            mov     r2,dpl
04F5 AB83      1654            mov     r3,dph
04F7 ACF0      1655            mov     r4,b
04F9 FD        1656            mov     r5,a
04FA E581      1657            mov     a,sp
04FC 24FC      1658            add     a,#0xfc
04FE F581      1659            mov     sp,a
0500 AE8A      1660            mov     r6,_TL0
0502 7F00      1661            mov     r7,#0x00
0504 8E82      1662            mov     dpl,r6
0506 8F83      1663            mov     dph,r7
0508 C002      1664            push    ar2
050A C003      1665            push    ar3
050C C004      1666            push    ar4
050E C005      1667            push    ar5
0510 120100    1668            lcall   ___sint2fs
0513 AE82      1669            mov     r6,dpl
0515 AF83      1670            mov     r7,dph
0517 A8F0      1671            mov     r0,b
0519 F9        1672            mov     r1,a
051A D005      1673            pop     ar5
051C D004      1674            pop     ar4
051E D003      1675            pop     ar3
0520 D002      1676            pop     ar2
0522 C006      1677            push    ar6
0524 C007      1678            push    ar7
0526 C000      1679            push    ar0
0528 C001      1680            push    ar1
052A 8A82      1681            mov     dpl,r2
052C 8B83      1682            mov     dph,r3
052E 8CF0      1683            mov     b,r4
0530 ED        1684            mov     a,r5
0531 120100    1685            lcall   ___fsadd
0534 AA82      1686            mov     r2,dpl
0536 AB83      1687            mov     r3,dph
0538 ACF0      1688            mov     r4,b
053A FD        1689            mov     r5,a
053B E581      1690            mov     a,sp
053D 24FC      1691            add     a,#0xfc
053F F581      1692            mov     sp,a
0541 C002      1693            push    ar2
0543 C003      1694            push    ar3
0545 C004      1695            push    ar4
0547 C005      1696            push    ar5
0549 90C33E    1697            mov     dptr,#0xC33E
054C 75F02E    1698            mov     b,#0x2E
054F 7439      1699            mov     a,#0x39
0551 120100    1700            lcall   ___fsmul
0554 AA82      1701            mov     r2,dpl
0556 AB83      1702            mov     r3,dph
0558 ACF0      1703            mov     r4,b
055A FD        1704            mov     r5,a
055B E581      1705            mov     a,sp
055D 24FC      1706            add     a,#0xfc
055F F581      1707            mov     sp,a
0561 E4        1708            clr     a
0562 C0E0      1709            push    acc
0564 C0E0      1710            push    acc
0566 74C8      1711            mov     a,#0xC8
0568 C0E0      1712            push    acc
056A 7442      1713            mov     a,#0x42
056C C0E0      1714            push    acc
056E 8A82      1715            mov     dpl,r2
0570 8B83      1716            mov     dph,r3
0572 8CF0      1717            mov     b,r4
0574 ED        1718            mov     a,r5
0575 120100    1719            lcall   ___fslt
0578 AA82      1720            mov     r2,dpl
057A E581      1721            mov     a,sp
057C 24FC      1722            add     a,#0xfc
057E F581      1723            mov     sp,a
0580 EA        1724            mov     a,r2
0581 6001      1725            jz      L018024?
0583 020100    1726            ljmp    L018011?
0586           1727   L018024?:
0586           1728   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:397: while(Volts_at_Pin(QFP32_MUX_P1_6) >= thresholdVolt){ // Wait for the signal to be 0
0586 AA98      1729            mov     r2,_checkTime_overflow_count_1_78
0588 AB99      1730            mov     r3,(_checkTime_overflow_count_1_78 + 1)
058A           1731   L018006?:
058A 75820C    1732            mov     dpl,#0x0C
058D C002      1733            push    ar2
058F C003      1734            push    ar3
0591 120100    1735            lcall   _Volts_at_Pin
0594 AC82      1736            mov     r4,dpl
0596 AD83      1737            mov     r5,dph
0598 AEF0      1738            mov     r6,b
059A FF        1739            mov     r7,a
059B E4        1740            clr     a
059C C0E0      1741            push    acc
059E C0E0      1742            push    acc
05A0 C0E0      1743            push    acc
05A2 743F      1744            mov     a,#0x3F
05A4 C0E0      1745            push    acc
05A6 8C82      1746            mov     dpl,r4
05A8 8D83      1747            mov     dph,r5
05AA 8EF0      1748            mov     b,r6
05AC EF        1749            mov     a,r7
05AD 120100    1750            lcall   ___fslt
05B0 AC82      1751            mov     r4,dpl
05B2 E581      1752            mov     a,sp
05B4 24FC      1753            add     a,#0xfc
05B6 F581      1754            mov     sp,a
05B8 D003      1755            pop     ar3
05BA D002      1756            pop     ar2
05BC EC        1757            mov     a,r4
05BD 6001      1758            jz      L018025?
05BF 020100    1759            ljmp    L018011?
05C2           1760   L018025?:
05C2           1761   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:399: if(TF0==1) { // Did the 16-bit timer overflow                         {
05C2           1762   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:400: TF0=0;
05C2 108D00    1763            jbc     _TF0,L018026?
05C5 8001      1764            sjmp    L018006?
05C7           1765   L018026?:
05C7           1766   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:401: overflow_count++;
05C7 0A        1767            inc     r2
05C8 BA0040    1768            cjne    r2,#0x00,L018027?
05CB 0B        1769            inc     r3
05CC           1770   L018027?:
05CC 8A98      1771            mov     _checkTime_overflow_count_1_78,r2
05CE 8B99      1772            mov     (_checkTime_overflow_count_1_78 + 1),r3
05D0 8001      1773            sjmp    L018006?
05D2           1774   L018013?:
05D2           1775   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:407: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
05D2 C28C      1776            clr     _TR0
05D4           1777   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:408: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
05D4 859882    1778            mov     dpl,_checkTime_overflow_count_1_78
05D7 859983    1779            mov     dph,(_checkTime_overflow_count_1_78 + 1)
05DA 120100    1780            lcall   ___sint2fs
05DD AA82      1781            mov     r2,dpl
05DF AB83      1782            mov     r3,dph
05E1 ACF0      1783            mov     r4,b
05E3 FD        1784            mov     r5,a
05E4 C002      1785            push    ar2
05E6 C003      1786            push    ar3
05E8 C004      1787            push    ar4
05EA C005      1788            push    ar5
05EC 900000    1789            mov     dptr,#0x0000
05EF 75F080    1790            mov     b,#0x80
05F2 7447      1791            mov     a,#0x47
05F4 120100    1792            lcall   ___fsmul
05F7 AA82      1793            mov     r2,dpl
05F9 AB83      1794            mov     r3,dph
05FB ACF0      1795            mov     r4,b
05FD FD        1796            mov     r5,a
05FE E581      1797            mov     a,sp
0600 24FC      1798            add     a,#0xfc
0602 F581      1799            mov     sp,a
0604 858C82    1800            mov     dpl,_TH0
0607 C002      1801            push    ar2
0609 C003      1802            push    ar3
060B C004      1803            push    ar4
060D C005      1804            push    ar5
060F 120100    1805            lcall   ___uchar2fs
0612 AE82      1806            mov     r6,dpl
0614 AF83      1807            mov     r7,dph
0616 A8F0      1808            mov     r0,b
0618 F9        1809            mov     r1,a
0619 C006      1810            push    ar6
061B C007      1811            push    ar7
061D C000      1812            push    ar0
061F C001      1813            push    ar1
0621 900000    1814            mov     dptr,#0x0000
0624 75F080    1815            mov     b,#0x80
0627 7443      1816            mov     a,#0x43
0629 120100    1817            lcall   ___fsmul
062C AE82      1818            mov     r6,dpl
062E AF83      1819            mov     r7,dph
0630 A8F0      1820            mov     r0,b
0632 F9        1821            mov     r1,a
0633 E581      1822            mov     a,sp
0635 24FC      1823            add     a,#0xfc
0637 F581      1824            mov     sp,a
0639 D005      1825            pop     ar5
063B D004      1826            pop     ar4
063D D003      1827            pop     ar3
063F D002      1828            pop     ar2
0641 C006      1829            push    ar6
0643 C007      1830            push    ar7
0645 C000      1831            push    ar0
0647 C001      1832            push    ar1
0649 8A82      1833            mov     dpl,r2
064B 8B83      1834            mov     dph,r3
064D 8CF0      1835            mov     b,r4
064F ED        1836            mov     a,r5
0650 120100    1837            lcall   ___fsadd
0653 AA82      1838            mov     r2,dpl
0655 AB83      1839            mov     r3,dph
0657 ACF0      1840            mov     r4,b
0659 FD        1841            mov     r5,a
065A E581      1842            mov     a,sp
065C 24FC      1843            add     a,#0xfc
065E F581      1844            mov     sp,a
0660 AE8A      1845            mov     r6,_TL0
0662 7F00      1846            mov     r7,#0x00
0664 8E82      1847            mov     dpl,r6
0666 8F83      1848            mov     dph,r7
0668 C002      1849            push    ar2
066A C003      1850            push    ar3
066C C004      1851            push    ar4
066E C005      1852            push    ar5
0670 120100    1853            lcall   ___sint2fs
0673 AE82      1854            mov     r6,dpl
0675 AF83      1855            mov     r7,dph
0677 A8F0      1856            mov     r0,b
0679 F9        1857            mov     r1,a
067A D005      1858            pop     ar5
067C D004      1859            pop     ar4
067E D003      1860            pop     ar3
0680 D002      1861            pop     ar2
0682 C006      1862            push    ar6
0684 C007      1863            push    ar7
0686 C000      1864            push    ar0
0688 C001      1865            push    ar1
068A 8A82      1866            mov     dpl,r2
068C 8B83      1867            mov     dph,r3
068E 8CF0      1868            mov     b,r4
0690 ED        1869            mov     a,r5
0691 120100    1870            lcall   ___fsadd
0694 AA82      1871            mov     r2,dpl
0696 AB83      1872            mov     r3,dph
0698 ACF0      1873            mov     r4,b
069A FD        1874            mov     r5,a
069B E581      1875            mov     a,sp
069D 24FC      1876            add     a,#0xfc
069F F581      1877            mov     sp,a
06A1 C002      1878            push    ar2
06A3 C003      1879            push    ar3
06A5 C004      1880            push    ar4
06A7 C005      1881            push    ar5
06A9 90F4FC    1882            mov     dptr,#0xF4FC
06AC 75F032    1883            mov     b,#0x32
06AF 7434      1884            mov     a,#0x34
06B1 120100    1885            lcall   ___fsmul
06B4 AA82      1886            mov     r2,dpl
06B6 AB83      1887            mov     r3,dph
06B8 ACF0      1888            mov     r4,b
06BA FD        1889            mov     r5,a
06BB E581      1890            mov     a,sp
06BD 24FC      1891            add     a,#0xfc
06BF F581      1892            mov     sp,a
06C1           1893   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:410: return time*1000; //return period of high pulse in seconds            
06C1 C002      1894            push    ar2
06C3 C003      1895            push    ar3
06C5 C004      1896            push    ar4
06C7 C005      1897            push    ar5
06C9 900000    1898            mov     dptr,#0x0000
06CC 75F07A    1899            mov     b,#0x7A
06CF 7444      1900            mov     a,#0x44
06D1 120100    1901            lcall   ___fsmul
06D4 AA82      1902            mov     r2,dpl
06D6 AB83      1903            mov     r3,dph
06D8 ACF0      1904            mov     r4,b
06DA FD        1905            mov     r5,a
06DB E581      1906            mov     a,sp
06DD 24FC      1907            add     a,#0xfc
06DF F581      1908            mov     sp,a
06E1 8A82      1909            mov     dpl,r2
06E3 8B83      1910            mov     dph,r3
06E5 8CF0      1911            mov     b,r4
06E7 ED        1912            mov     a,r5
06E8 22        1913            ret
06E9           1914   ;------------------------------------------------------------
06E9           1915   ;Allocation info for local variables in function 'commandtimecheck'
06E9           1916   ;------------------------------------------------------------
06E9           1917   ;lowtime                   Allocated to registers r2 r3 r4 r5 
06E9           1918   ;------------------------------------------------------------
06E9           1919   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:413: int commandtimecheck(float lowtime) {
06E9           1920   ;        -----------------------------------------
06E9           1921   ;         function commandtimecheck
06E9           1922   ;        -----------------------------------------
06E9           1923   _commandtimecheck:
06E9 AA82      1924            mov     r2,dpl
06EB AB83      1925            mov     r3,dph
06ED ACF0      1926            mov     r4,b
06EF FD        1927            mov     r5,a
06F0           1928   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:414: if(lowtime==FORWARDTIME) 
06F0 C002      1929            push    ar2
06F2 C003      1930            push    ar3
06F4 C004      1931            push    ar4
06F6 C005      1932            push    ar5
06F8 E4        1933            clr     a
06F9 C0E0      1934            push    acc
06FB C0E0      1935            push    acc
06FD 7420      1936            mov     a,#0x20
06FF C0E0      1937            push    acc
0701 7441      1938            mov     a,#0x41
0703 C0E0      1939            push    acc
0705 8A82      1940            mov     dpl,r2
0707 8B83      1941            mov     dph,r3
0709 8CF0      1942            mov     b,r4
070B ED        1943            mov     a,r5
070C 120100    1944            lcall   ___fseq
070F AE82      1945            mov     r6,dpl
0711 E581      1946            mov     a,sp
0713 24FC      1947            add     a,#0xfc
0715 F581      1948            mov     sp,a
0717 D005      1949            pop     ar5
0719 D004      1950            pop     ar4
071B D003      1951            pop     ar3
071D D002      1952            pop     ar2
071F EE        1953            mov     a,r6
0720 6001      1954            jz      L019011?
0722           1955   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:415: PWMforward();
0722 020100    1956            ljmp    _PWMforward
0725           1957   L019011?:
0725           1958   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:416: else if (lowtime==BACKTIME)
0725 C002      1959            push    ar2
0727 C003      1960            push    ar3
0729 C004      1961            push    ar4
072B C005      1962            push    ar5
072D E4        1963            clr     a
072E C0E0      1964            push    acc
0730 C0E0      1965            push    acc
0732 74A0      1966            mov     a,#0xA0
0734 C0E0      1967            push    acc
0736 7441      1968            mov     a,#0x41
0738 C0E0      1969            push    acc
073A 8A82      1970            mov     dpl,r2
073C 8B83      1971            mov     dph,r3
073E 8CF0      1972            mov     b,r4
0740 ED        1973            mov     a,r5
0741 120100    1974            lcall   ___fseq
0744 AE82      1975            mov     r6,dpl
0746 E581      1976            mov     a,sp
0748 24FC      1977            add     a,#0xfc
074A F581      1978            mov     sp,a
074C D005      1979            pop     ar5
074E D004      1980            pop     ar4
0750 D003      1981            pop     ar3
0752 D002      1982            pop     ar2
0754 EE        1983            mov     a,r6
0755 6001      1984            jz      L019008?
0757           1985   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:417: PWMbackward();
0757 020100    1986            ljmp    _PWMbackward
075A           1987   L019008?:
075A           1988   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:418: else if (lowtime==RIGHTTIME)
075A C002      1989            push    ar2
075C C003      1990            push    ar3
075E C004      1991            push    ar4
0760 C005      1992            push    ar5
0762 E4        1993            clr     a
0763 C0E0      1994            push    acc
0765 C0E0      1995            push    acc
0767 74F0      1996            mov     a,#0xF0
0769 C0E0      1997            push    acc
076B 7441      1998            mov     a,#0x41
076D C0E0      1999            push    acc
076F 8A82      2000            mov     dpl,r2
0771 8B83      2001            mov     dph,r3
0773 8CF0      2002            mov     b,r4
0775 ED        2003            mov     a,r5
0776 120100    2004            lcall   ___fseq
0779 AE82      2005            mov     r6,dpl
077B E581      2006            mov     a,sp
077D 24FC      2007            add     a,#0xfc
077F F581      2008            mov     sp,a
0781 D005      2009            pop     ar5
0783 D004      2010            pop     ar4
0785 D003      2011            pop     ar3
0787 D002      2012            pop     ar2
0789 EE        2013            mov     a,r6
078A 6001      2014            jz      L019005?
078C           2015   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:419: PWMRight();
078C 020100    2016            ljmp    _PWMRight
078F           2017   L019005?:
078F           2018   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:420: else if (lowtime==LEFTTIME)
078F E4        2019            clr     a
0790 C0E0      2020            push    acc
0792 C0E0      2021            push    acc
0794 7420      2022            mov     a,#0x20
0796 C0E0      2023            push    acc
0798 7442      2024            mov     a,#0x42
079A C0E0      2025            push    acc
079C 8A82      2026            mov     dpl,r2
079E 8B83      2027            mov     dph,r3
07A0 8CF0      2028            mov     b,r4
07A2 ED        2029            mov     a,r5
07A3 120100    2030            lcall   ___fseq
07A6 AA82      2031            mov     r2,dpl
07A8 E581      2032            mov     a,sp
07AA 24FC      2033            add     a,#0xfc
07AC F581      2034            mov     sp,a
07AE EA        2035            mov     a,r2
07AF 6001      2036            jz      L019002?
07B1           2037   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:421: PWMLeft();
07B1 020100    2038            ljmp    _PWMLeft
07B4           2039   L019002?:
07B4           2040   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:423: PWMStop();
07B4 020100    2041            ljmp    _PWMStop
07B7           2042   ;------------------------------------------------------------
07B7           2043   ;Allocation info for local variables in function 'voltsAtPeak'
07B7           2044   ;------------------------------------------------------------
07B7           2045   ;------------------------------------------------------------
07B7           2046   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:429: float voltsAtPeak(void) {
07B7           2047   ;        -----------------------------------------
07B7           2048   ;         function voltsAtPeak
07B7           2049   ;        -----------------------------------------
07B7           2050   _voltsAtPeak:
07B7           2051   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:431: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
07B7           2052   L020001?:
07B7 75820C    2053            mov     dpl,#0x0C
07BA 120100    2054            lcall   _ADC_at_Pin
07BD E582      2055            mov     a,dpl
07BF 8583F0    2056            mov     b,dph
07C2 45F0      2057            orl     a,b
07C4 6001      2058            jz      L020001?
07C6           2059   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:432: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
07C6 900000    2060            mov     dptr,#0x0000
07C9 120100    2061            lcall   _Timer3us
07CC           2062   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:433: return(Volts_at_Pin(QFP32_MUX_P1_6));
07CC 75820C    2063            mov     dpl,#0x0C
07CF 020100    2064            ljmp    _Volts_at_Pin
07D2           2065   ;------------------------------------------------------------
07D2           2066   ;Allocation info for local variables in function 'getDigitalSignal'
07D2           2067   ;------------------------------------------------------------
07D2           2068   ;------------------------------------------------------------
07D2           2069   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:446: int getDigitalSignal (void){
07D2           2070   ;        -----------------------------------------
07D2           2071   ;         function getDigitalSignal
07D2           2072   ;        -----------------------------------------
07D2           2073   _getDigitalSignal:
07D2           2074   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:448: if (voltsAtPeak()>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
07D2 120100    2075            lcall   _voltsAtPeak
07D5 AA82      2076            mov     r2,dpl
07D7 AB83      2077            mov     r3,dph
07D9 ACF0      2078            mov     r4,b
07DB FD        2079            mov     r5,a
07DC E4        2080            clr     a
07DD C0E0      2081            push    acc
07DF C0E0      2082            push    acc
07E1 C0E0      2083            push    acc
07E3 743F      2084            mov     a,#0x3F
07E5 C0E0      2085            push    acc
07E7 8A82      2086            mov     dpl,r2
07E9 8B83      2087            mov     dph,r3
07EB 8CF0      2088            mov     b,r4
07ED ED        2089            mov     a,r5
07EE 120100    2090            lcall   ___fslt
07F1 AA82      2091            mov     r2,dpl
07F3 E581      2092            mov     a,sp
07F5 24FC      2093            add     a,#0xfc
07F7 F581      2094            mov     sp,a
07F9 EA        2095            mov     a,r2
07FA 7001      2096            jnz     L021002?
07FC           2097   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:450: printf("\nread 1:  at pin 1.6: %f\r", voltsAtPeak());
07FC 120100    2098            lcall   _voltsAtPeak
07FF AA82      2099            mov     r2,dpl
0801 AB83      2100            mov     r3,dph
0803 ACF0      2101            mov     r4,b
0805 FD        2102            mov     r5,a
0806 C002      2103            push    ar2
0808 C003      2104            push    ar3
080A C004      2105            push    ar4
080C C005      2106            push    ar5
080E 7440      2107            mov     a,#__str_5
0810 C0E0      2108            push    acc
0812 74CC      2109            mov     a,#(__str_5 >> 8)
0814 C0E0      2110            push    acc
0816 7480      2111            mov     a,#0x80
0818 C0E0      2112            push    acc
081A 120100    2113            lcall   _printf
081D E581      2114            mov     a,sp
081F 24F9      2115            add     a,#0xf9
0821 F581      2116            mov     sp,a
0823           2117   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:451: return 1;
0823 900001    2118            mov     dptr,#0x0001
0826 22        2119            ret
0827           2120   L021002?:
0827           2121   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:454: printf("\nread 0: Volt at pin 1.6: %f\r", voltsAtPeak());
0827 120100    2122            lcall   _voltsAtPeak
082A AA82      2123            mov     r2,dpl
082C AB83      2124            mov     r3,dph
082E ACF0      2125            mov     r4,b
0830 FD        2126            mov     r5,a
0831 C002      2127            push    ar2
0833 C003      2128            push    ar3
0835 C004      2129            push    ar4
0837 C005      2130            push    ar5
0839 7480      2131            mov     a,#__str_6
083B C0E0      2132            push    acc
083D 74CC      2133            mov     a,#(__str_6 >> 8)
083F C0E0      2134            push    acc
0841 7480      2135            mov     a,#0x80
0843 C0E0      2136            push    acc
0845 120100    2137            lcall   _printf
0848 E581      2138            mov     a,sp
084A 24F9      2139            add     a,#0xf9
084C F581      2140            mov     sp,a
084E           2141   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:455: return 0; 
084E 900000    2142            mov     dptr,#0x0000
0851 22        2143            ret
0852           2144   ;------------------------------------------------------------
0852           2145   ;Allocation info for local variables in function 'waitquarterperiod'
0852           2146   ;------------------------------------------------------------
0852           2147   ;------------------------------------------------------------
0852           2148   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:463: void waitquarterperiod(void){
0852           2149   ;        -----------------------------------------
0852           2150   ;         function waitquarterperiod
0852           2151   ;        -----------------------------------------
0852           2152   _waitquarterperiod:
0852           2153   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:464: waitms(constant_delay_time);
0852 90000A    2154            mov     dptr,#0x000A
0855 020100    2155            ljmp    _waitms
0858           2156   ;------------------------------------------------------------
0858           2157   ;Allocation info for local variables in function 'recieveData'
0858           2158   ;------------------------------------------------------------
0858           2159   ;checkcomm                 Allocated to registers 
0858           2160   ;i                         Allocated to registers r2 r3 
0858           2161   ;------------------------------------------------------------
0858           2162   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:470: void recieveData (){
0858           2163   ;        -----------------------------------------
0858           2164   ;         function recieveData
0858           2165   ;        -----------------------------------------
0858           2166   _recieveData:
0858           2167   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:474: while(getDigitalSignal()==0);         //wait for the signal to be 1 
0858           2168   L023001?:
0858 120100    2169            lcall   _getDigitalSignal
085B E582      2170            mov     a,dpl
085D 8583F0    2171            mov     b,dph
0860 45F0      2172            orl     a,b
0862 6001      2173            jz      L023001?
0864           2174   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:475: if (getDigitalSignal()==1){   //gets the first 1 that identifies a command 
0864 120100    2175            lcall   _getDigitalSignal
0867 AA82      2176            mov     r2,dpl
0869 AB83      2177            mov     r3,dph
086B BA0100    2178            cjne    r2,#0x01,L023010?
086E BB0000    2179            cjne    r3,#0x00,L023010?
0871           2180   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:476: command[0]=1;
0871 753001    2181            mov     _command,#0x01
0874 753100    2182            mov     (_command + 1),#0x00
0877           2183   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:477: for( i=1; i<4; i++){
0877 7A01      2184            mov     r2,#0x01
0879 7B00      2185            mov     r3,#0x00
087B           2186   L023006?:
087B C3        2187            clr     c
087C EA        2188            mov     a,r2
087D 9404      2189            subb    a,#0x04
087F EB        2190            mov     a,r3
0880 6480      2191            xrl     a,#0x80
0882 9480      2192            subb    a,#0x80
0884 5001      2193            jnc     L023009?
0886           2194   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:478: waitms(constant_delay_time);
0886 90000A    2195            mov     dptr,#0x000A
0889 C002      2196            push    ar2
088B C003      2197            push    ar3
088D 120100    2198            lcall   _waitms
0890 D003      2199            pop     ar3
0892 D002      2200            pop     ar2
0894           2201   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:479: command[i]=getDigitalSignal();        
0894 8A04      2202            mov     ar4,r2
0896 EB        2203            mov     a,r3
0897 CC        2204            xch     a,r4
0898 25E0      2205            add     a,acc
089A CC        2206            xch     a,r4
089B 33        2207            rlc     a
089C EC        2208            mov     a,r4
089D 2430      2209            add     a,#_command
089F F8        2210            mov     r0,a
08A0 C002      2211            push    ar2
08A2 C003      2212            push    ar3
08A4 C000      2213            push    ar0
08A6 120100    2214            lcall   _getDigitalSignal
08A9 E582      2215            mov     a,dpl
08AB 8583F0    2216            mov     b,dph
08AE D000      2217            pop     ar0
08B0 D003      2218            pop     ar3
08B2 D002      2219            pop     ar2
08B4 F6        2220            mov     @r0,a
08B5 08        2221            inc     r0
08B6 A6F0      2222            mov     @r0,b
08B8 18        2223            dec     r0
08B9           2224   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:477: for( i=1; i<4; i++){
08B9 0A        2225            inc     r2
08BA BA0040    2226            cjne    r2,#0x00,L023006?
08BD 0B        2227            inc     r3
08BE 8001      2228            sjmp    L023006?
08C0           2229   L023009?:
08C0           2230   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:482: checkCommands();                              //does activity depending on the command given 
08C0 020100    2231            ljmp    _checkCommands
08C3           2232   L023010?:
08C3 22        2233            ret
08C4           2234   ;------------------------------------------------------------
08C4           2235   ;Allocation info for local variables in function 'main'
08C4           2236   ;------------------------------------------------------------
08C4           2237   ;checkcommand              Allocated to registers 
08C4           2238   ;i                         Allocated with name '_main_i_1_96'
08C4           2239   ;sig1                      Allocated to registers 
08C4           2240   ;sig2                      Allocated to registers 
08C4           2241   ;peak                      Allocated to registers 
08C4           2242   ;voltspeak                 Allocated to registers 
08C4           2243   ;periodpwm                 Allocated to registers 
08C4           2244   ;time                      Allocated to registers r2 r3 r4 r5 
08C4           2245   ;period                    Allocated to registers 
08C4           2246   ;overflow_count            Allocated to registers 
08C4           2247   ;------------------------------------------------------------
08C4           2248   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:512: void main(void)
08C4           2249   ;        -----------------------------------------
08C4           2250   ;         function main
08C4           2251   ;        -----------------------------------------
08C4           2252   _main:
08C4           2253   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:524: TIMER0_Init();
08C4 120100    2254            lcall   _TIMER0_Init
08C7           2255   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:526: InitPinADC(1, 6); // Configure P2.5 as analog input
08C7 75F006    2256            mov     _InitPinADC_PARM_2,#0x06
08CA 758201    2257            mov     dpl,#0x01
08CD 120100    2258            lcall   _InitPinADC
08D0           2259   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:528: InitADC();
08D0 120100    2260            lcall   _InitADC
08D3           2261   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:529: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
08D3 74C0      2262            mov     a,#__str_7
08D5 C0E0      2263            push    acc
08D7 74CD      2264            mov     a,#(__str_7 >> 8)
08D9 C0E0      2265            push    acc
08DB 7480      2266            mov     a,#0x80
08DD C0E0      2267            push    acc
08DF 120100    2268            lcall   _printf
08E2 1581      2269            dec     sp
08E4 1581      2270            dec     sp
08E6 1581      2271            dec     sp
08E8           2272   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:531: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
08E8 7400      2273            mov     a,#__str_8
08EA C0E0      2274            push    acc
08EC 74CE      2275            mov     a,#(__str_8 >> 8)
08EE C0E0      2276            push    acc
08F0 7480      2277            mov     a,#0x80
08F2 C0E0      2278            push    acc
08F4 120100    2279            lcall   _printf
08F7 1581      2280            dec     sp
08F9 1581      2281            dec     sp
08FB 1581      2282            dec     sp
08FD           2283   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:533: printf("\n\r");
08FD 7440      2284            mov     a,#__str_9
08FF C0E0      2285            push    acc
0901 74CE      2286            mov     a,#(__str_9 >> 8)
0903 C0E0      2287            push    acc
0905 7480      2288            mov     a,#0x80
0907 C0E0      2289            push    acc
0909 120100    2290            lcall   _printf
090C 1581      2291            dec     sp
090E 1581      2292            dec     sp
0910 1581      2293            dec     sp
0912           2294   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:534: P2_1=0;
0912 C2A1      2295            clr     _P2_1
0914           2296   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:535: while (1)
0914           2297   L024002?:
0914           2298   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:538: recieveData();        //keep reading data continously 
0914 120100    2299            lcall   _recieveData
0917           2300   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:549: time = checkTime();
0917 120100    2301            lcall   _checkTime
091A AA82      2302            mov     r2,dpl
091C AB83      2303            mov     r3,dph
091E ACF0      2304            mov     r4,b
0920 FD        2305            mov     r5,a
0921           2306   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\reciever_so_far1.c:550: printf("%f\t\n\r", time);
0921 C002      2307            push    ar2
0923 C003      2308            push    ar3
0925 C004      2309            push    ar4
0927 C005      2310            push    ar5
0929 74C0      2311            mov     a,#__str_10
092B C0E0      2312            push    acc
092D 74CE      2313            mov     a,#(__str_10 >> 8)
092F C0E0      2314            push    acc
0931 7480      2315            mov     a,#0x80
0933 C0E0      2316            push    acc
0935 120100    2317            lcall   _printf
0938 E581      2318            mov     a,sp
093A 24F9      2319            add     a,#0xf9
093C F581      2320            mov     sp,a
093E 8001      2321            sjmp    L024002?
0940           2322            rseg R_CSEG
0940           2323   
0000           2324            rseg R_XINIT
0000           2325   
0000           2326            rseg R_CONST
0000           2327   __str_0:
0000 466F7277  2328            db 'Forward'
     617264
0007 0A        2329            db 0x0A
0008 0D        2330            db 0x0D
0009 00        2331            db 0x00
000A           2332   __str_1:
000A 4261636B  2333            db 'Backward'
     77617264
0012 0A        2334            db 0x0A
0013 0D        2335            db 0x0D
0014 00        2336            db 0x00
0015           2337   __str_2:
0015 4C656674  2338            db 'Left'
0019 0A        2339            db 0x0A
001A 0D        2340            db 0x0D
001B 00        2341            db 0x00
001C           2342   __str_3:
001C 52696768  2343            db 'Right'
     74
0021 0A        2344            db 0x0A
0022 0D        2345            db 0x0D
0023 00        2346            db 0x00
0024           2347   __str_4:
0024 53746F70  2348            db 'Stop'
0028 0A        2349            db 0x0A
0029 0D        2350            db 0x0D
002A 00        2351            db 0x00
002B           2352   __str_5:
002B 0A        2353            db 0x0A
002C 72656164  2354            db 'read 1:  at pin 1.6: %f'
     20313A20
     20617420
     70696E20
     312E363A
     202566
0043 0D        2355            db 0x0D
0044 00        2356            db 0x00
0045           2357   __str_6:
0045 0A        2358            db 0x0A
0046 72656164  2359            db 'read 0: Volt at pin 1.6: %f'
     20303A20
     566F6C74
     20617420
     70696E20
     312E363A
     202566
0061 0D        2360            db 0x0D
0062 00        2361            db 0x00
0063           2362   __str_7:
0063 1B        2363            db 0x1B
0064 5B324A    2364            db '[2J'
0067 00        2365            db 0x00
0068           2366   __str_8:
0068 53717561  2367            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
008E 0D        2368            db 0x0D
008F 0A        2369            db 0x0A
0090 43686563  2370            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
00A4 50322E31  2371            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00BF 0D        2372            db 0x0D
00C0 0A        2373            db 0x0A
00C1 00        2374            db 0x00
00C2           2375   __str_9:
00C2 0A        2376            db 0x0A
00C3 0D        2377            db 0x0D
00C4 00        2378            db 0x00
00C5           2379   __str_10:
00C5 2566      2380            db '%f'
00C7 09        2381            db 0x09
00C8 0A        2382            db 0x0A
00C9 0D        2383            db 0x0D
00CA 00        2384            db 0x00
00CB           2385   
002E           2386            CSEG
002E           2387   
002E           2388   end
