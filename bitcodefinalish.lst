0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 10:53:24 2018
0000              5   ;--------------------------------------------------------
                  5   $name bitcodefinalish
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _recieveData
0000             32            public _waitquarterperiod
0000             33            public _getDigitalSignal
0000             34            public _voltsAtPeak
0000             35            public _checkCommands
0000             36            public _arrayEqual
0000             37            public _periodcalc
0000             38            public _PWMStop
0000             39            public _PWMRight
0000             40            public _PWMLeft
0000             41            public _PWMbackward
0000             42            public _PWMforward
0000             43            public _InitPinADC
0000             44            public _Volts_at_Pin
0000             45            public _TIMER0_Init
0000             46            public _InitADC
0000             47            public _Timer2_ISR
0000             48            public _ADC_at_Pin
0000             49            public _waitms
0000             50            public _Timer3us
0000             51            public __c51_external_startup
0000             52            public _command
0000             53            public _right
0000             54            public _left
0000             55            public _backward
0000             56            public _forward
0000             57            public _stop
0000             58            public _claw_flag
0000             59            public _flag
0000             60            public _cartMoveB
0000             61            public _cartMoveF
0000             62            public _pwmSig6
0000             63            public _pwmSig5
0000             64            public _pwmSig4
0000             65            public _pwmSig3
0000             66            public _pwmSig2
0000             67            public _pwmSig1
0000             68            public _pwm_count3
0000             69            public _pwm_count2
0000             70            public _pwm_count1
0000             71            public _pwm_count
0000             72   ;--------------------------------------------------------
0000             73   ; Special Function Registers
0000             74   ;--------------------------------------------------------
0000             75   _ACC            DATA 0xe0
0000             76   _ADC0ASAH       DATA 0xb6
0000             77   _ADC0ASAL       DATA 0xb5
0000             78   _ADC0ASCF       DATA 0xa1
0000             79   _ADC0ASCT       DATA 0xc7
0000             80   _ADC0CF0        DATA 0xbc
0000             81   _ADC0CF1        DATA 0xb9
0000             82   _ADC0CF2        DATA 0xdf
0000             83   _ADC0CN0        DATA 0xe8
0000             84   _ADC0CN1        DATA 0xb2
0000             85   _ADC0CN2        DATA 0xb3
0000             86   _ADC0GTH        DATA 0xc4
0000             87   _ADC0GTL        DATA 0xc3
0000             88   _ADC0H          DATA 0xbe
0000             89   _ADC0L          DATA 0xbd
0000             90   _ADC0LTH        DATA 0xc6
0000             91   _ADC0LTL        DATA 0xc5
0000             92   _ADC0MX         DATA 0xbb
0000             93   _B              DATA 0xf0
0000             94   _CKCON0         DATA 0x8e
0000             95   _CKCON1         DATA 0xa6
0000             96   _CLEN0          DATA 0xc6
0000             97   _CLIE0          DATA 0xc7
0000             98   _CLIF0          DATA 0xe8
0000             99   _CLKSEL         DATA 0xa9
0000            100   _CLOUT0         DATA 0xd1
0000            101   _CLU0CF         DATA 0xb1
0000            102   _CLU0FN         DATA 0xaf
0000            103   _CLU0MX         DATA 0x84
0000            104   _CLU1CF         DATA 0xb3
0000            105   _CLU1FN         DATA 0xb2
0000            106   _CLU1MX         DATA 0x85
0000            107   _CLU2CF         DATA 0xb6
0000            108   _CLU2FN         DATA 0xb5
0000            109   _CLU2MX         DATA 0x91
0000            110   _CLU3CF         DATA 0xbf
0000            111   _CLU3FN         DATA 0xbe
0000            112   _CLU3MX         DATA 0xae
0000            113   _CMP0CN0        DATA 0x9b
0000            114   _CMP0CN1        DATA 0x99
0000            115   _CMP0MD         DATA 0x9d
0000            116   _CMP0MX         DATA 0x9f
0000            117   _CMP1CN0        DATA 0xbf
0000            118   _CMP1CN1        DATA 0xac
0000            119   _CMP1MD         DATA 0xab
0000            120   _CMP1MX         DATA 0xaa
0000            121   _CRC0CN0        DATA 0xce
0000            122   _CRC0CN1        DATA 0x86
0000            123   _CRC0CNT        DATA 0xd3
0000            124   _CRC0DAT        DATA 0xcb
0000            125   _CRC0FLIP       DATA 0xcf
0000            126   _CRC0IN         DATA 0xca
0000            127   _CRC0ST         DATA 0xd2
0000            128   _DAC0CF0        DATA 0x91
0000            129   _DAC0CF1        DATA 0x92
0000            130   _DAC0H          DATA 0x85
0000            131   _DAC0L          DATA 0x84
0000            132   _DAC1CF0        DATA 0x93
0000            133   _DAC1CF1        DATA 0x94
0000            134   _DAC1H          DATA 0x8a
0000            135   _DAC1L          DATA 0x89
0000            136   _DAC2CF0        DATA 0x95
0000            137   _DAC2CF1        DATA 0x96
0000            138   _DAC2H          DATA 0x8c
0000            139   _DAC2L          DATA 0x8b
0000            140   _DAC3CF0        DATA 0x9a
0000            141   _DAC3CF1        DATA 0x9c
0000            142   _DAC3H          DATA 0x8e
0000            143   _DAC3L          DATA 0x8d
0000            144   _DACGCF0        DATA 0x88
0000            145   _DACGCF1        DATA 0x98
0000            146   _DACGCF2        DATA 0xa2
0000            147   _DERIVID        DATA 0xad
0000            148   _DEVICEID       DATA 0xb5
0000            149   _DPH            DATA 0x83
0000            150   _DPL            DATA 0x82
0000            151   _EIE1           DATA 0xe6
0000            152   _EIE2           DATA 0xf3
0000            153   _EIP1           DATA 0xbb
0000            154   _EIP1H          DATA 0xee
0000            155   _EIP2           DATA 0xed
0000            156   _EIP2H          DATA 0xf6
0000            157   _EMI0CN         DATA 0xe7
0000            158   _FLKEY          DATA 0xb7
0000            159   _HFO0CAL        DATA 0xc7
0000            160   _HFO1CAL        DATA 0xd6
0000            161   _HFOCN          DATA 0xef
0000            162   _I2C0ADM        DATA 0xff
0000            163   _I2C0CN0        DATA 0xba
0000            164   _I2C0DIN        DATA 0xbc
0000            165   _I2C0DOUT       DATA 0xbb
0000            166   _I2C0FCN0       DATA 0xad
0000            167   _I2C0FCN1       DATA 0xab
0000            168   _I2C0FCT        DATA 0xf5
0000            169   _I2C0SLAD       DATA 0xbd
0000            170   _I2C0STAT       DATA 0xb9
0000            171   _IE             DATA 0xa8
0000            172   _IP             DATA 0xb8
0000            173   _IPH            DATA 0xf2
0000            174   _IT01CF         DATA 0xe4
0000            175   _LFO0CN         DATA 0xb1
0000            176   _P0             DATA 0x80
0000            177   _P0MASK         DATA 0xfe
0000            178   _P0MAT          DATA 0xfd
0000            179   _P0MDIN         DATA 0xf1
0000            180   _P0MDOUT        DATA 0xa4
0000            181   _P0SKIP         DATA 0xd4
0000            182   _P1             DATA 0x90
0000            183   _P1MASK         DATA 0xee
0000            184   _P1MAT          DATA 0xed
0000            185   _P1MDIN         DATA 0xf2
0000            186   _P1MDOUT        DATA 0xa5
0000            187   _P1SKIP         DATA 0xd5
0000            188   _P2             DATA 0xa0
0000            189   _P2MASK         DATA 0xfc
0000            190   _P2MAT          DATA 0xfb
0000            191   _P2MDIN         DATA 0xf3
0000            192   _P2MDOUT        DATA 0xa6
0000            193   _P2SKIP         DATA 0xcc
0000            194   _P3             DATA 0xb0
0000            195   _P3MDIN         DATA 0xf4
0000            196   _P3MDOUT        DATA 0x9c
0000            197   _PCA0CENT       DATA 0x9e
0000            198   _PCA0CLR        DATA 0x9c
0000            199   _PCA0CN0        DATA 0xd8
0000            200   _PCA0CPH0       DATA 0xfc
0000            201   _PCA0CPH1       DATA 0xea
0000            202   _PCA0CPH2       DATA 0xec
0000            203   _PCA0CPH3       DATA 0xf5
0000            204   _PCA0CPH4       DATA 0x85
0000            205   _PCA0CPH5       DATA 0xde
0000            206   _PCA0CPL0       DATA 0xfb
0000            207   _PCA0CPL1       DATA 0xe9
0000            208   _PCA0CPL2       DATA 0xeb
0000            209   _PCA0CPL3       DATA 0xf4
0000            210   _PCA0CPL4       DATA 0x84
0000            211   _PCA0CPL5       DATA 0xdd
0000            212   _PCA0CPM0       DATA 0xda
0000            213   _PCA0CPM1       DATA 0xdb
0000            214   _PCA0CPM2       DATA 0xdc
0000            215   _PCA0CPM3       DATA 0xae
0000            216   _PCA0CPM4       DATA 0xaf
0000            217   _PCA0CPM5       DATA 0xcc
0000            218   _PCA0H          DATA 0xfa
0000            219   _PCA0L          DATA 0xf9
0000            220   _PCA0MD         DATA 0xd9
0000            221   _PCA0POL        DATA 0x96
0000            222   _PCA0PWM        DATA 0xf7
0000            223   _PCON0          DATA 0x87
0000            224   _PCON1          DATA 0xcd
0000            225   _PFE0CN         DATA 0xc1
0000            226   _PRTDRV         DATA 0xf6
0000            227   _PSCTL          DATA 0x8f
0000            228   _PSTAT0         DATA 0xaa
0000            229   _PSW            DATA 0xd0
0000            230   _REF0CN         DATA 0xd1
0000            231   _REG0CN         DATA 0xc9
0000            232   _REVID          DATA 0xb6
0000            233   _RSTSRC         DATA 0xef
0000            234   _SBCON1         DATA 0x94
0000            235   _SBRLH1         DATA 0x96
0000            236   _SBRLL1         DATA 0x95
0000            237   _SBUF           DATA 0x99
0000            238   _SBUF0          DATA 0x99
0000            239   _SBUF1          DATA 0x92
0000            240   _SCON           DATA 0x98
0000            241   _SCON0          DATA 0x98
0000            242   _SCON1          DATA 0xc8
0000            243   _SFRPAGE        DATA 0xa7
0000            244   _SFRPGCN        DATA 0xbc
0000            245   _SFRSTACK       DATA 0xd7
0000            246   _SMB0ADM        DATA 0xd6
0000            247   _SMB0ADR        DATA 0xd7
0000            248   _SMB0CF         DATA 0xc1
0000            249   _SMB0CN0        DATA 0xc0
0000            250   _SMB0DAT        DATA 0xc2
0000            251   _SMB0FCN0       DATA 0xc3
0000            252   _SMB0FCN1       DATA 0xc4
0000            253   _SMB0FCT        DATA 0xef
0000            254   _SMB0RXLN       DATA 0xc5
0000            255   _SMB0TC         DATA 0xac
0000            256   _SMOD1          DATA 0x93
0000            257   _SP             DATA 0x81
0000            258   _SPI0CFG        DATA 0xa1
0000            259   _SPI0CKR        DATA 0xa2
0000            260   _SPI0CN0        DATA 0xf8
0000            261   _SPI0DAT        DATA 0xa3
0000            262   _SPI0FCN0       DATA 0x9a
0000            263   _SPI0FCN1       DATA 0x9b
0000            264   _SPI0FCT        DATA 0xf7
0000            265   _SPI0PCF        DATA 0xdf
0000            266   _TCON           DATA 0x88
0000            267   _TH0            DATA 0x8c
0000            268   _TH1            DATA 0x8d
0000            269   _TL0            DATA 0x8a
0000            270   _TL1            DATA 0x8b
0000            271   _TMOD           DATA 0x89
0000            272   _TMR2CN0        DATA 0xc8
0000            273   _TMR2CN1        DATA 0xfd
0000            274   _TMR2H          DATA 0xcf
0000            275   _TMR2L          DATA 0xce
0000            276   _TMR2RLH        DATA 0xcb
0000            277   _TMR2RLL        DATA 0xca
0000            278   _TMR3CN0        DATA 0x91
0000            279   _TMR3CN1        DATA 0xfe
0000            280   _TMR3H          DATA 0x95
0000            281   _TMR3L          DATA 0x94
0000            282   _TMR3RLH        DATA 0x93
0000            283   _TMR3RLL        DATA 0x92
0000            284   _TMR4CN0        DATA 0x98
0000            285   _TMR4CN1        DATA 0xff
0000            286   _TMR4H          DATA 0xa5
0000            287   _TMR4L          DATA 0xa4
0000            288   _TMR4RLH        DATA 0xa3
0000            289   _TMR4RLL        DATA 0xa2
0000            290   _TMR5CN0        DATA 0xc0
0000            291   _TMR5CN1        DATA 0xf1
0000            292   _TMR5H          DATA 0xd5
0000            293   _TMR5L          DATA 0xd4
0000            294   _TMR5RLH        DATA 0xd3
0000            295   _TMR5RLL        DATA 0xd2
0000            296   _UART0PCF       DATA 0xd9
0000            297   _UART1FCN0      DATA 0x9d
0000            298   _UART1FCN1      DATA 0xd8
0000            299   _UART1FCT       DATA 0xfa
0000            300   _UART1LIN       DATA 0x9e
0000            301   _UART1PCF       DATA 0xda
0000            302   _VDM0CN         DATA 0xff
0000            303   _WDTCN          DATA 0x97
0000            304   _XBR0           DATA 0xe1
0000            305   _XBR1           DATA 0xe2
0000            306   _XBR2           DATA 0xe3
0000            307   _XOSC0CN        DATA 0x86
0000            308   _DPTR           DATA 0x8382
0000            309   _TMR2RL         DATA 0xcbca
0000            310   _TMR3RL         DATA 0x9392
0000            311   _TMR4RL         DATA 0xa3a2
0000            312   _TMR5RL         DATA 0xd3d2
0000            313   _TMR0           DATA 0x8c8a
0000            314   _TMR1           DATA 0x8d8b
0000            315   _TMR2           DATA 0xcfce
0000            316   _TMR3           DATA 0x9594
0000            317   _TMR4           DATA 0xa5a4
0000            318   _TMR5           DATA 0xd5d4
0000            319   _SBRL1          DATA 0x9695
0000            320   _PCA0           DATA 0xfaf9
0000            321   _PCA0CP0        DATA 0xfcfb
0000            322   _PCA0CP1        DATA 0xeae9
0000            323   _PCA0CP2        DATA 0xeceb
0000            324   _PCA0CP3        DATA 0xf5f4
0000            325   _PCA0CP4        DATA 0x8584
0000            326   _PCA0CP5        DATA 0xdedd
0000            327   _ADC0ASA        DATA 0xb6b5
0000            328   _ADC0GT         DATA 0xc4c3
0000            329   _ADC0           DATA 0xbebd
0000            330   _ADC0LT         DATA 0xc6c5
0000            331   _DAC0           DATA 0x8584
0000            332   _DAC1           DATA 0x8a89
0000            333   _DAC2           DATA 0x8c8b
0000            334   _DAC3           DATA 0x8e8d
0000            335   ;--------------------------------------------------------
0000            336   ; special function bits
0000            337   ;--------------------------------------------------------
0000            338   _ACC_0          BIT 0xe0
0000            339   _ACC_1          BIT 0xe1
0000            340   _ACC_2          BIT 0xe2
0000            341   _ACC_3          BIT 0xe3
0000            342   _ACC_4          BIT 0xe4
0000            343   _ACC_5          BIT 0xe5
0000            344   _ACC_6          BIT 0xe6
0000            345   _ACC_7          BIT 0xe7
0000            346   _TEMPE          BIT 0xe8
0000            347   _ADGN0          BIT 0xe9
0000            348   _ADGN1          BIT 0xea
0000            349   _ADWINT         BIT 0xeb
0000            350   _ADBUSY         BIT 0xec
0000            351   _ADINT          BIT 0xed
0000            352   _IPOEN          BIT 0xee
0000            353   _ADEN           BIT 0xef
0000            354   _B_0            BIT 0xf0
0000            355   _B_1            BIT 0xf1
0000            356   _B_2            BIT 0xf2
0000            357   _B_3            BIT 0xf3
0000            358   _B_4            BIT 0xf4
0000            359   _B_5            BIT 0xf5
0000            360   _B_6            BIT 0xf6
0000            361   _B_7            BIT 0xf7
0000            362   _C0FIF          BIT 0xe8
0000            363   _C0RIF          BIT 0xe9
0000            364   _C1FIF          BIT 0xea
0000            365   _C1RIF          BIT 0xeb
0000            366   _C2FIF          BIT 0xec
0000            367   _C2RIF          BIT 0xed
0000            368   _C3FIF          BIT 0xee
0000            369   _C3RIF          BIT 0xef
0000            370   _D1SRC0         BIT 0x88
0000            371   _D1SRC1         BIT 0x89
0000            372   _D1AMEN         BIT 0x8a
0000            373   _D01REFSL       BIT 0x8b
0000            374   _D3SRC0         BIT 0x8c
0000            375   _D3SRC1         BIT 0x8d
0000            376   _D3AMEN         BIT 0x8e
0000            377   _D23REFSL       BIT 0x8f
0000            378   _D0UDIS         BIT 0x98
0000            379   _D1UDIS         BIT 0x99
0000            380   _D2UDIS         BIT 0x9a
0000            381   _D3UDIS         BIT 0x9b
0000            382   _EX0            BIT 0xa8
0000            383   _ET0            BIT 0xa9
0000            384   _EX1            BIT 0xaa
0000            385   _ET1            BIT 0xab
0000            386   _ES0            BIT 0xac
0000            387   _ET2            BIT 0xad
0000            388   _ESPI0          BIT 0xae
0000            389   _EA             BIT 0xaf
0000            390   _PX0            BIT 0xb8
0000            391   _PT0            BIT 0xb9
0000            392   _PX1            BIT 0xba
0000            393   _PT1            BIT 0xbb
0000            394   _PS0            BIT 0xbc
0000            395   _PT2            BIT 0xbd
0000            396   _PSPI0          BIT 0xbe
0000            397   _P0_0           BIT 0x80
0000            398   _P0_1           BIT 0x81
0000            399   _P0_2           BIT 0x82
0000            400   _P0_3           BIT 0x83
0000            401   _P0_4           BIT 0x84
0000            402   _P0_5           BIT 0x85
0000            403   _P0_6           BIT 0x86
0000            404   _P0_7           BIT 0x87
0000            405   _P1_0           BIT 0x90
0000            406   _P1_1           BIT 0x91
0000            407   _P1_2           BIT 0x92
0000            408   _P1_3           BIT 0x93
0000            409   _P1_4           BIT 0x94
0000            410   _P1_5           BIT 0x95
0000            411   _P1_6           BIT 0x96
0000            412   _P1_7           BIT 0x97
0000            413   _P2_0           BIT 0xa0
0000            414   _P2_1           BIT 0xa1
0000            415   _P2_2           BIT 0xa2
0000            416   _P2_3           BIT 0xa3
0000            417   _P2_4           BIT 0xa4
0000            418   _P2_5           BIT 0xa5
0000            419   _P2_6           BIT 0xa6
0000            420   _P3_0           BIT 0xb0
0000            421   _P3_1           BIT 0xb1
0000            422   _P3_2           BIT 0xb2
0000            423   _P3_3           BIT 0xb3
0000            424   _P3_4           BIT 0xb4
0000            425   _P3_7           BIT 0xb7
0000            426   _CCF0           BIT 0xd8
0000            427   _CCF1           BIT 0xd9
0000            428   _CCF2           BIT 0xda
0000            429   _CCF3           BIT 0xdb
0000            430   _CCF4           BIT 0xdc
0000            431   _CCF5           BIT 0xdd
0000            432   _CR             BIT 0xde
0000            433   _CF             BIT 0xdf
0000            434   _PARITY         BIT 0xd0
0000            435   _F1             BIT 0xd1
0000            436   _OV             BIT 0xd2
0000            437   _RS0            BIT 0xd3
0000            438   _RS1            BIT 0xd4
0000            439   _F0             BIT 0xd5
0000            440   _AC             BIT 0xd6
0000            441   _CY             BIT 0xd7
0000            442   _RI             BIT 0x98
0000            443   _TI             BIT 0x99
0000            444   _RB8            BIT 0x9a
0000            445   _TB8            BIT 0x9b
0000            446   _REN            BIT 0x9c
0000            447   _CE             BIT 0x9d
0000            448   _SMODE          BIT 0x9e
0000            449   _RI1            BIT 0xc8
0000            450   _TI1            BIT 0xc9
0000            451   _RBX1           BIT 0xca
0000            452   _TBX1           BIT 0xcb
0000            453   _REN1           BIT 0xcc
0000            454   _PERR1          BIT 0xcd
0000            455   _OVR1           BIT 0xce
0000            456   _SI             BIT 0xc0
0000            457   _ACK            BIT 0xc1
0000            458   _ARBLOST        BIT 0xc2
0000            459   _ACKRQ          BIT 0xc3
0000            460   _STO            BIT 0xc4
0000            461   _STA            BIT 0xc5
0000            462   _TXMODE         BIT 0xc6
0000            463   _MASTER         BIT 0xc7
0000            464   _SPIEN          BIT 0xf8
0000            465   _TXNF           BIT 0xf9
0000            466   _NSSMD0         BIT 0xfa
0000            467   _NSSMD1         BIT 0xfb
0000            468   _RXOVRN         BIT 0xfc
0000            469   _MODF           BIT 0xfd
0000            470   _WCOL           BIT 0xfe
0000            471   _SPIF           BIT 0xff
0000            472   _IT0            BIT 0x88
0000            473   _IE0            BIT 0x89
0000            474   _IT1            BIT 0x8a
0000            475   _IE1            BIT 0x8b
0000            476   _TR0            BIT 0x8c
0000            477   _TF0            BIT 0x8d
0000            478   _TR1            BIT 0x8e
0000            479   _TF1            BIT 0x8f
0000            480   _T2XCLK0        BIT 0xc8
0000            481   _T2XCLK1        BIT 0xc9
0000            482   _TR2            BIT 0xca
0000            483   _T2SPLIT        BIT 0xcb
0000            484   _TF2CEN         BIT 0xcc
0000            485   _TF2LEN         BIT 0xcd
0000            486   _TF2L           BIT 0xce
0000            487   _TF2H           BIT 0xcf
0000            488   _T4XCLK0        BIT 0x98
0000            489   _T4XCLK1        BIT 0x99
0000            490   _TR4            BIT 0x9a
0000            491   _T4SPLIT        BIT 0x9b
0000            492   _TF4CEN         BIT 0x9c
0000            493   _TF4LEN         BIT 0x9d
0000            494   _TF4L           BIT 0x9e
0000            495   _TF4H           BIT 0x9f
0000            496   _T5XCLK0        BIT 0xc0
0000            497   _T5XCLK1        BIT 0xc1
0000            498   _TR5            BIT 0xc2
0000            499   _T5SPLIT        BIT 0xc3
0000            500   _TF5CEN         BIT 0xc4
0000            501   _TF5LEN         BIT 0xc5
0000            502   _TF5L           BIT 0xc6
0000            503   _TF5H           BIT 0xc7
0000            504   _RIE            BIT 0xd8
0000            505   _RXTO0          BIT 0xd9
0000            506   _RXTO1          BIT 0xda
0000            507   _RFRQ           BIT 0xdb
0000            508   _TIE            BIT 0xdc
0000            509   _TXHOLD         BIT 0xdd
0000            510   _TXNF1          BIT 0xde
0000            511   _TFRQ           BIT 0xdf
0000            512   ;--------------------------------------------------------
0000            513   ; overlayable register banks
0000            514   ;--------------------------------------------------------
0000            515            rbank0 segment data overlay
0000            516   ;--------------------------------------------------------
0000            517   ; internal ram data
0000            518   ;--------------------------------------------------------
0000            519            rseg R_DSEG
0000            520   _pwm_count:
0000            521            ds 1
0001            522   _pwm_count1:
0001            523            ds 1
0002            524   _pwm_count2:
0002            525            ds 1
0003            526   _pwm_count3:
0003            527            ds 1
0004            528   _pwmSig1:
0004            529            ds 2
0006            530   _pwmSig2:
0006            531            ds 2
0008            532   _pwmSig3:
0008            533            ds 2
000A            534   _pwmSig4:
000A            535            ds 2
000C            536   _pwmSig5:
000C            537            ds 2
000E            538   _pwmSig6:
000E            539            ds 2
0010            540   _cartMoveF:
0010            541            ds 2
0012            542   _cartMoveB:
0012            543            ds 2
0014            544   _flag:
0014            545            ds 2
0016            546   _claw_flag:
0016            547            ds 2
0018            548   _stop:
0018            549            ds 8
0020            550   _forward:
0020            551            ds 8
0028            552   _backward:
0028            553            ds 8
0030            554   _left:
0030            555            ds 8
0038            556   _right:
0038            557            ds 8
0040            558   _command:
0040            559            ds 8
0048            560   ;--------------------------------------------------------
0048            561   ; overlayable items in internal ram 
0048            562   ;--------------------------------------------------------
0000            563            rseg    R_OSEG
0000            564            rseg    R_OSEG
0000            565            rseg    R_OSEG
0000            566   _InitPinADC_PARM_2:
0000            567            ds 1
0001            568            rseg    R_OSEG
0001            569   _arrayEqual_PARM_2:
0001            570            ds 2
0003            571   _arrayEqual_PARM_3:
0003            572            ds 3
0006            573   _arrayEqual_arr1_1_76:
0006            574            ds 3
0009            575   ;--------------------------------------------------------
0009            576   ; indirectly addressable internal ram data
0009            577   ;--------------------------------------------------------
0000            578            rseg R_ISEG
0000            579   ;--------------------------------------------------------
0000            580   ; absolute internal ram data
0000            581   ;--------------------------------------------------------
0000            582            DSEG
0000            583   ;--------------------------------------------------------
0000            584   ; bit data
0000            585   ;--------------------------------------------------------
0000            586            rseg R_BSEG
0000            587   _Timer2_ISR_sloc0_1_0:
0000            588            DBIT    1
0001            589   ;--------------------------------------------------------
0001            590   ; paged external ram data
0001            591   ;--------------------------------------------------------
0000            592            rseg R_PSEG
0000            593   ;--------------------------------------------------------
0000            594   ; external ram data
0000            595   ;--------------------------------------------------------
0000            596            rseg R_XSEG
0000            597   ;--------------------------------------------------------
0000            598   ; absolute external ram data
0000            599   ;--------------------------------------------------------
0000            600            XSEG
0000            601   ;--------------------------------------------------------
0000            602   ; external initialized ram data
0000            603   ;--------------------------------------------------------
0000            604            rseg R_IXSEG
0000            605            rseg R_HOME
0000            606            rseg R_GSINIT
0000            607            rseg R_CSEG
0000            608   ;--------------------------------------------------------
0000            609   ; Reset entry point and interrupt vectors
0000            610   ;--------------------------------------------------------
0000            611            CSEG at 0x0000
0000 020100     612            ljmp    _crt0
002B            613            CSEG at 0x002b
002B 020100     614            ljmp    _Timer2_ISR
002E            615   ;--------------------------------------------------------
002E            616   ; global & static initialisations
002E            617   ;--------------------------------------------------------
0000            618            rseg R_HOME
0000            619            rseg R_GSINIT
0000            620            rseg R_GSINIT
0000            621   ;--------------------------------------------------------
0000            622   ; data variables initialization
0000            623   ;--------------------------------------------------------
0000            624            rseg R_DINIT
0000            625   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:44: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 75D000     626            mov     _pwm_count,#0x00
0003            627   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:45: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 759000     628            mov     _pwm_count1,#0x00
0006            629   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:46: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 755000     630            mov     _pwm_count2,#0x00
0009            631   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:47: volatile unsigned char pwm_count3 = 0; //
0009 751000     632            mov     _pwm_count3,#0x00
000C            633   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:62: volatile int flag = 0;
000C E4         634            clr     a
000D F5D0       635            mov     _flag,a
000F F5D1       636            mov     (_flag + 1),a
0011            637   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:63: volatile int claw_flag = 0;
0011 E4         638            clr     a
0012 F590       639            mov     _claw_flag,a
0014 F591       640            mov     (_claw_flag + 1),a
0016            641   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:64: int stop[]={1,0,0,0};
0016 752001     642            mov     _stop,#0x01
0019 752100     643            mov     (_stop + 1),#0x00
001C 752200     644            mov     (_stop + 0x0002),#0x00
001F 752300     645            mov     ((_stop + 0x0002) + 1),#0x00
0022 752400     646            mov     (_stop + 0x0004),#0x00
0025 752500     647            mov     ((_stop + 0x0004) + 1),#0x00
0028 752600     648            mov     (_stop + 0x0006),#0x00
002B 752700     649            mov     ((_stop + 0x0006) + 1),#0x00
002E            650   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:65: int forward[]={1,1,1,1};
002E 75E001     651            mov     _forward,#0x01
0031 75E100     652            mov     (_forward + 1),#0x00
0034 75E201     653            mov     (_forward + 0x0002),#0x01
0037 75E300     654            mov     ((_forward + 0x0002) + 1),#0x00
003A 75E401     655            mov     (_forward + 0x0004),#0x01
003D 75E500     656            mov     ((_forward + 0x0004) + 1),#0x00
0040 75E601     657            mov     (_forward + 0x0006),#0x01
0043 75E700     658            mov     ((_forward + 0x0006) + 1),#0x00
0046            659   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:66: int backward[]={1,0,0,0};
0046 75A001     660            mov     _backward,#0x01
0049 75A100     661            mov     (_backward + 1),#0x00
004C 75A200     662            mov     (_backward + 0x0002),#0x00
004F 75A300     663            mov     ((_backward + 0x0002) + 1),#0x00
0052 75A400     664            mov     (_backward + 0x0004),#0x00
0055 75A500     665            mov     ((_backward + 0x0004) + 1),#0x00
0058 75A600     666            mov     (_backward + 0x0006),#0x00
005B 75A700     667            mov     ((_backward + 0x0006) + 1),#0x00
005E            668   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:67: int left[]={1,0,1,0};
005E 756001     669            mov     _left,#0x01
0061 756100     670            mov     (_left + 1),#0x00
0064 756200     671            mov     (_left + 0x0002),#0x00
0067 756300     672            mov     ((_left + 0x0002) + 1),#0x00
006A 756401     673            mov     (_left + 0x0004),#0x01
006D 756500     674            mov     ((_left + 0x0004) + 1),#0x00
0070 756600     675            mov     (_left + 0x0006),#0x00
0073 756700     676            mov     ((_left + 0x0006) + 1),#0x00
0076            677   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:68: int right[]={1,1,0,1};
0076 752001     678            mov     _right,#0x01
0079 752100     679            mov     (_right + 1),#0x00
007C 752201     680            mov     (_right + 0x0002),#0x01
007F 752300     681            mov     ((_right + 0x0002) + 1),#0x00
0082 752400     682            mov     (_right + 0x0004),#0x00
0085 752500     683            mov     ((_right + 0x0004) + 1),#0x00
0088 752601     684            mov     (_right + 0x0006),#0x01
008B 752700     685            mov     ((_right + 0x0006) + 1),#0x00
008E            686   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:70: int command[4] = {0,0,0,0};
008E 75E000     687            mov     _command,#0x00
0091 75E100     688            mov     (_command + 1),#0x00
0094 75E200     689            mov     (_command + 0x0002),#0x00
0097 75E300     690            mov     ((_command + 0x0002) + 1),#0x00
009A 75E400     691            mov     (_command + 0x0004),#0x00
009D 75E500     692            mov     ((_command + 0x0004) + 1),#0x00
00A0 75E600     693            mov     (_command + 0x0006),#0x00
00A3 75E700     694            mov     ((_command + 0x0006) + 1),#0x00
00A6            695            ; The linker places a 'ret' at the end of segment R_DINIT.
00A6            696   ;--------------------------------------------------------
00A6            697   ; code
00A6            698   ;--------------------------------------------------------
0000            699            rseg R_CSEG
0000            700   ;------------------------------------------------------------
0000            701   ;Allocation info for local variables in function '_c51_external_startup'
0000            702   ;------------------------------------------------------------
0000            703   ;------------------------------------------------------------
0000            704   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:72: char _c51_external_startup(void)
0000            705   ;        -----------------------------------------
0000            706   ;         function _c51_external_startup
0000            707   ;        -----------------------------------------
0000            708   __c51_external_startup:
0000            709            using   0
0000            710   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:75: SFRPAGE = 0x00;
0000 75A700     711            mov     _SFRPAGE,#0x00
0003            712   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:76: WDTCN = 0xDE; //First key
0003 7597DE     713            mov     _WDTCN,#0xDE
0006            714   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:77: WDTCN = 0xAD; //Second key
0006 7597AD     715            mov     _WDTCN,#0xAD
0009            716   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:79: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     717            mov     _VDM0CN,#0x80
000C            718   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:80: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     719            mov     _RSTSRC,#0x06
000F            720   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:87: SFRPAGE = 0x10;
000F 75A710     721            mov     _SFRPAGE,#0x10
0012            722   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:88: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     723            mov     _PFE0CN,#0x20
0015            724   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:89: SFRPAGE = 0x00;
0015 75A700     725            mov     _SFRPAGE,#0x00
0018            726   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:110: CLKSEL = 0x00;
0018 75A900     727            mov     _CLKSEL,#0x00
001B            728   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:111: CLKSEL = 0x00;
001B 75A900     729            mov     _CLKSEL,#0x00
001E            730   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:112: while ((CLKSEL & 0x80) == 0);
001E            731   L002001?:
001E E5A9       732            mov     a,_CLKSEL
0020 30E7B0     733            jnb     acc.7,L002001?
0023            734   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:113: CLKSEL = 0x03;
0023 75A903     735            mov     _CLKSEL,#0x03
0026            736   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:114: CLKSEL = 0x03;
0026 75A903     737            mov     _CLKSEL,#0x03
0029            738   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:115: while ((CLKSEL & 0x80) == 0);
0029            739   L002004?:
0029 E5A9       740            mov     a,_CLKSEL
002B 30E730     741            jnb     acc.7,L002004?
002E            742   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:120: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     743            orl     _P0MDOUT,#0x10
0031            744   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:121: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     745            mov     _XBR0,#0x01
0034            746   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:122: XBR1 = 0X00;
0034 75E200     747            mov     _XBR1,#0x00
0037            748   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:123: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     749            mov     _XBR2,#0x40
003A            750   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:129: SCON0 = 0x10;
003A 759810     751            mov     _SCON0,#0x10
003D            752   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:130: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     753            mov     _TH1,#0xE6
0040            754   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:131: TL1 = TH1;      // Init Timer1
0040 858D8B     755            mov     _TL1,_TH1
0043            756   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:132: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     757            anl     _TMOD,#0x0F
0046            758   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:133: TMOD |= 0x20;
0046 438920     759            orl     _TMOD,#0x20
0049            760   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:134: TR1 = 1; // START Timer1
0049 D28E       761            setb    _TR1
004B            762   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:135: TI = 1;  // Indicate TX0 ready
004B D299       763            setb    _TI
004D            764   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:138: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     765            mov     _TMR2CN0,#0x00
0050            766   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:139: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     767            orl     _CKCON0,#0x10
0053            768   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:140: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     769            mov     _TMR2RL,#0xE0
0056 75CBE3     770            mov     (_TMR2RL >> 8),#0xE3
0059            771   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:141: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     772            mov     _TMR2,#0xFF
005C 75CFFF     773            mov     (_TMR2 >> 8),#0xFF
005F            774   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:142: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       775            setb    _ET2
0061            776   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:143: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       777            setb    _TR2
0063            778   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:160: EA = 1; // Enable interrupts
0063 D2AF       779            setb    _EA
0065            780   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:163: return 0;
0065 758200     781            mov     dpl,#0x00
0068 22         782            ret
0069            783   ;------------------------------------------------------------
0069            784   ;Allocation info for local variables in function 'Timer3us'
0069            785   ;------------------------------------------------------------
0069            786   ;us                        Allocated to registers r2 r3 
0069            787   ;i                         Allocated to registers r4 r5 
0069            788   ;------------------------------------------------------------
0069            789   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:165: void Timer3us(unsigned int us)
0069            790   ;        -----------------------------------------
0069            791   ;         function Timer3us
0069            792   ;        -----------------------------------------
0069            793   _Timer3us:
0069 AA82       794            mov     r2,dpl
006B AB83       795            mov     r3,dph
006D            796   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:170: CKCON0|=0b_0100_0000;
006D 438E40     797            orl     _CKCON0,#0x40
0070            798   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:172: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     799            mov     _TMR3RL,#0xB8
0073 7593FF     800            mov     (_TMR3RL >> 8),#0xFF
0076            801   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:173: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     802            mov     _TMR3,_TMR3RL
0079 859395     803            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            804   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:175: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     805            mov     _TMR3CN0,#0x04
007F            806   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:176: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       807            mov     r4,#0x00
0081 7D00       808            mov     r5,#0x00
0083            809   L003004?:
0083 C3         810            clr     c
0084 EC         811            mov     a,r4
0085 9A         812            subb    a,r2
0086 ED         813            mov     a,r5
0087 9B         814            subb    a,r3
0088 5001       815            jnc     L003007?
008A            816   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:178: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            817   L003001?:
008A E591       818            mov     a,_TMR3CN0
008C 30E770     819            jnb     acc.7,L003001?
008F            820   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:179: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     821            anl     _TMR3CN0,#0x7F
0092            822   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:176: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         823            inc     r4
0093 BC00F0     824            cjne    r4,#0x00,L003004?
0096 0D         825            inc     r5
0097 8001       826            sjmp    L003004?
0099            827   L003007?:
0099            828   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:181: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     829            mov     _TMR3CN0,#0x00
009C 22         830            ret
009D            831   ;------------------------------------------------------------
009D            832   ;Allocation info for local variables in function 'waitms'
009D            833   ;------------------------------------------------------------
009D            834   ;ms                        Allocated to registers r2 r3 
009D            835   ;j                         Allocated to registers r4 r5 
009D            836   ;k                         Allocated to registers r6 
009D            837   ;------------------------------------------------------------
009D            838   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:183: void waitms (unsigned int ms)
009D            839   ;        -----------------------------------------
009D            840   ;         function waitms
009D            841   ;        -----------------------------------------
009D            842   _waitms:
009D AA82       843            mov     r2,dpl
009F AB83       844            mov     r3,dph
00A1            845   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:189: for(j=0; j<ms; j++)
00A1 7C00       846            mov     r4,#0x00
00A3 7D00       847            mov     r5,#0x00
00A5            848   L004005?:
00A5 C3         849            clr     c
00A6 EC         850            mov     a,r4
00A7 9A         851            subb    a,r2
00A8 ED         852            mov     a,r5
00A9 9B         853            subb    a,r3
00AA 5001       854            jnc     L004009?
00AC            855   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:190: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       856            mov     r6,#0x00
00AE            857   L004001?:
00AE BE0470     858            cjne    r6,#0x04,L004018?
00B1            859   L004018?:
00B1 5001       860            jnc     L004007?
00B3 9000FA     861            mov     dptr,#0x00FA
00B6 C002       862            push    ar2
00B8 C003       863            push    ar3
00BA C004       864            push    ar4
00BC C005       865            push    ar5
00BE C006       866            push    ar6
00C0 120100     867            lcall   _Timer3us
00C3 D006       868            pop     ar6
00C5 D005       869            pop     ar5
00C7 D004       870            pop     ar4
00C9 D003       871            pop     ar3
00CB D002       872            pop     ar2
00CD 0E         873            inc     r6
00CE 8001       874            sjmp    L004001?
00D0            875   L004007?:
00D0            876   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:189: for(j=0; j<ms; j++)
00D0 0C         877            inc     r4
00D1 BC00B0     878            cjne    r4,#0x00,L004005?
00D4 0D         879            inc     r5
00D5 8001       880            sjmp    L004005?
00D7            881   L004009?:
00D7 22         882            ret
00D8            883   ;------------------------------------------------------------
00D8            884   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            885   ;------------------------------------------------------------
00D8            886   ;pin                       Allocated to registers 
00D8            887   ;------------------------------------------------------------
00D8            888   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:193: unsigned int ADC_at_Pin(unsigned char pin)
00D8            889   ;        -----------------------------------------
00D8            890   ;         function ADC_at_Pin
00D8            891   ;        -----------------------------------------
00D8            892   _ADC_at_Pin:
00D8 8582BB     893            mov     _ADC0MX,dpl
00DB            894   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:196: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       895            setb    _ADBUSY
00DD            896   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:197: while (ADBUSY); // Wait for dummy conversion to finish
00DD            897   L005001?:
00DD 20ECF0     898            jb      _ADBUSY,L005001?
00E0            899   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:198: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       900            setb    _ADBUSY
00E2            901   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:199: while (ADBUSY); // Wait for conversion to complete
00E2            902   L005004?:
00E2 20EC30     903            jb      _ADBUSY,L005004?
00E5            904   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:200: return (ADC0);
00E5 85BD82     905            mov     dpl,_ADC0
00E8 85BE83     906            mov     dph,(_ADC0 >> 8)
00EB 22         907            ret
00EC            908   ;------------------------------------------------------------
00EC            909   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            910   ;------------------------------------------------------------
00EC            911   ;------------------------------------------------------------
00EC            912   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:204: void Timer2_ISR(void) interrupt 5
00EC            913   ;        -----------------------------------------
00EC            914   ;         function Timer2_ISR
00EC            915   ;        -----------------------------------------
00EC            916   _Timer2_ISR:
00EC C0E0       917            push    acc
00EE C002       918            push    ar2
00F0 C003       919            push    ar3
00F2 C0D0       920            push    psw
00F4 75D000     921            mov     psw,#0x00
00F7            922   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:206: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       923            clr     _TF2H
00F9            924   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:208: pwm_count++;
00F9 05D0       925            inc     _pwm_count
00FB            926   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:209: if (pwm_count>100)
00FB E5D0       927            mov     a,_pwm_count
00FD 249B       928            add     a,#0xff - 0x64
00FF 5001       929            jnc     L006002?
0101            930   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:210: pwm_count = 0;
0101 75D000     931            mov     _pwm_count,#0x00
0104            932   L006002?:
0104            933   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:213: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AAD0       934            mov     r2,_pwm_count
0106 7B00       935            mov     r3,#0x00
0108 C3         936            clr     c
0109 E5D0       937            mov     a,_pwmSig1
010B 9A         938            subb    a,r2
010C E5D1       939            mov     a,(_pwmSig1 + 1)
010E 9B         940            subb    a,r3
010F 9230       941            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         942            cpl     c
0112 9294       943            mov     _P1_4,c
0114            944   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:214: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AAD0       945            mov     r2,_pwm_count
0116 7B00       946            mov     r3,#0x00
0118 C3         947            clr     c
0119 E590       948            mov     a,_pwmSig2
011B 9A         949            subb    a,r2
011C E591       950            mov     a,(_pwmSig2 + 1)
011E 9B         951            subb    a,r3
011F 9230       952            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         953            cpl     c
0122 9295       954            mov     _P1_5,c
0124            955   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:216: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AAD0       956            mov     r2,_pwm_count
0126 7B00       957            mov     r3,#0x00
0128 C3         958            clr     c
0129 E550       959            mov     a,_pwmSig3
012B 9A         960            subb    a,r2
012C E551       961            mov     a,(_pwmSig3 + 1)
012E 9B         962            subb    a,r3
012F 9230       963            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         964            cpl     c
0132 9292       965            mov     _P1_2,c
0134            966   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:217: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AAD0       967            mov     r2,_pwm_count
0136 7B00       968            mov     r3,#0x00
0138 C3         969            clr     c
0139 E510       970            mov     a,_pwmSig4
013B 9A         971            subb    a,r2
013C E511       972            mov     a,(_pwmSig4 + 1)
013E 9B         973            subb    a,r3
013F 9230       974            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         975            cpl     c
0142 9293       976            mov     _P1_3,c
0144 D0D0       977            pop     psw
0146 D003       978            pop     ar3
0148 D002       979            pop     ar2
014A D0E0       980            pop     acc
014C 32         981            reti
014D            982   ;        eliminated unneeded push/pop dpl
014D            983   ;        eliminated unneeded push/pop dph
014D            984   ;        eliminated unneeded push/pop b
014D            985   ;------------------------------------------------------------
014D            986   ;Allocation info for local variables in function 'InitADC'
014D            987   ;------------------------------------------------------------
014D            988   ;------------------------------------------------------------
014D            989   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:249: void InitADC(void)
014D            990   ;        -----------------------------------------
014D            991   ;         function InitADC
014D            992   ;        -----------------------------------------
014D            993   _InitADC:
014D            994   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:251: SFRPAGE = 0x00;
014D 75A700     995            mov     _SFRPAGE,#0x00
0150            996   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:252: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0150 75B280     997            mov     _ADC0CN1,#0x80
0153            998   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:253: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0153 75BCF8     999            mov     _ADC0CF0,#0xF8
0156           1000   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:254: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0156 75B91E    1001            mov     _ADC0CF1,#0x1E
0159           1002   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:255: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0159 75E800    1003            mov     _ADC0CN0,#0x00
015C           1004   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:256: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
015C 75DF3F    1005            mov     _ADC0CF2,#0x3F
015F           1006   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:257: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
015F 75B300    1007            mov     _ADC0CN2,#0x00
0162           1008   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:258: ADEN = 1; // Enable ADC
0162 D2EF      1009            setb    _ADEN
0164 22        1010            ret
0165           1011   ;------------------------------------------------------------
0165           1012   ;Allocation info for local variables in function 'TIMER0_Init'
0165           1013   ;------------------------------------------------------------
0165           1014   ;------------------------------------------------------------
0165           1015   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:260: void TIMER0_Init(void)
0165           1016   ;        -----------------------------------------
0165           1017   ;         function TIMER0_Init
0165           1018   ;        -----------------------------------------
0165           1019   _TIMER0_Init:
0165           1020   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:262: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0165 5389F0    1021            anl     _TMOD,#0xF0
0168           1022   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:263: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0168 438901    1023            orl     _TMOD,#0x01
016B           1024   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:264: TR0 = 0; // Stop Timer/Counter 0
016B C28C      1025            clr     _TR0
016D 22        1026            ret
016E           1027   ;------------------------------------------------------------
016E           1028   ;Allocation info for local variables in function 'Volts_at_Pin'
016E           1029   ;------------------------------------------------------------
016E           1030   ;pin                       Allocated to registers r2 
016E           1031   ;------------------------------------------------------------
016E           1032   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:269: float Volts_at_Pin(unsigned char pin)
016E           1033   ;        -----------------------------------------
016E           1034   ;         function Volts_at_Pin
016E           1035   ;        -----------------------------------------
016E           1036   _Volts_at_Pin:
016E           1037   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:271: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
016E 120100    1038            lcall   _ADC_at_Pin
0171 120100    1039            lcall   ___uint2fs
0174 AA82      1040            mov     r2,dpl
0176 AB83      1041            mov     r3,dph
0178 ACF0      1042            mov     r4,b
017A FD        1043            mov     r5,a
017B C002      1044            push    ar2
017D C003      1045            push    ar3
017F C004      1046            push    ar4
0181 C005      1047            push    ar5
0183 906C8B    1048            mov     dptr,#0x6C8B
0186 75F053    1049            mov     b,#0x53
0189 7440      1050            mov     a,#0x40
018B 120100    1051            lcall   ___fsmul
018E AA82      1052            mov     r2,dpl
0190 AB83      1053            mov     r3,dph
0192 ACF0      1054            mov     r4,b
0194 FD        1055            mov     r5,a
0195 E581      1056            mov     a,sp
0197 24FC      1057            add     a,#0xfc
0199 F581      1058            mov     sp,a
019B E4        1059            clr     a
019C C0E0      1060            push    acc
019E 74FC      1061            mov     a,#0xFC
01A0 C0E0      1062            push    acc
01A2 747F      1063            mov     a,#0x7F
01A4 C0E0      1064            push    acc
01A6 7446      1065            mov     a,#0x46
01A8 C0E0      1066            push    acc
01AA 8A82      1067            mov     dpl,r2
01AC 8B83      1068            mov     dph,r3
01AE 8CF0      1069            mov     b,r4
01B0 ED        1070            mov     a,r5
01B1 120100    1071            lcall   ___fsdiv
01B4 AA82      1072            mov     r2,dpl
01B6 AB83      1073            mov     r3,dph
01B8 ACF0      1074            mov     r4,b
01BA FD        1075            mov     r5,a
01BB E581      1076            mov     a,sp
01BD 24FC      1077            add     a,#0xfc
01BF F581      1078            mov     sp,a
01C1 8A82      1079            mov     dpl,r2
01C3 8B83      1080            mov     dph,r3
01C5 8CF0      1081            mov     b,r4
01C7 ED        1082            mov     a,r5
01C8 22        1083            ret
01C9           1084   ;------------------------------------------------------------
01C9           1085   ;Allocation info for local variables in function 'InitPinADC'
01C9           1086   ;------------------------------------------------------------
01C9           1087   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01C9           1088   ;portno                    Allocated to registers r2 
01C9           1089   ;mask                      Allocated to registers r3 
01C9           1090   ;------------------------------------------------------------
01C9           1091   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:273: void InitPinADC(unsigned char portno, unsigned char pinno)
01C9           1092   ;        -----------------------------------------
01C9           1093   ;         function InitPinADC
01C9           1094   ;        -----------------------------------------
01C9           1095   _InitPinADC:
01C9 AA82      1096            mov     r2,dpl
01CB           1097   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:277: mask = 1 << pinno;
01CB 85F0F0    1098            mov     b,_InitPinADC_PARM_2
01CE 05F0      1099            inc     b
01D0 7401      1100            mov     a,#0x01
01D2 8001      1101            sjmp    L010013?
01D4           1102   L010011?:
01D4 25E0      1103            add     a,acc
01D6           1104   L010013?:
01D6 D5F070    1105            djnz    b,L010011?
01D9 FB        1106            mov     r3,a
01DA           1107   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:279: SFRPAGE = 0x20;
01DA 75A720    1108            mov     _SFRPAGE,#0x20
01DD           1109   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:280: switch (portno)
01DD BA00B0    1110            cjne    r2,#0x00,L010014?
01E0 8001      1111            sjmp    L010001?
01E2           1112   L010014?:
01E2 BA0130    1113            cjne    r2,#0x01,L010015?
01E5 8001      1114            sjmp    L010002?
01E7           1115   L010015?:
01E7           1116   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:282: case 0:
01E7 BA02B0    1117            cjne    r2,#0x02,L010005?
01EA 8001      1118            sjmp    L010003?
01EC           1119   L010001?:
01EC           1120   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:283: P0MDIN &= (~mask); // Set pin as analog input
01EC EB        1121            mov     a,r3
01ED F4        1122            cpl     a
01EE FA        1123            mov     r2,a
01EF 52F1      1124            anl     _P0MDIN,a
01F1           1125   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:284: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01F1 EB        1126            mov     a,r3
01F2 42D4      1127            orl     _P0SKIP,a
01F4           1128   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:285: break;
01F4           1129   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:286: case 1:
01F4 8001      1130            sjmp    L010005?
01F6           1131   L010002?:
01F6           1132   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:287: P1MDIN &= (~mask); // Set pin as analog input
01F6 EB        1133            mov     a,r3
01F7 F4        1134            cpl     a
01F8 FA        1135            mov     r2,a
01F9 52F2      1136            anl     _P1MDIN,a
01FB           1137   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:288: P1SKIP |= mask; // Skip Crossbar decoding for this pin
01FB EB        1138            mov     a,r3
01FC 42D5      1139            orl     _P1SKIP,a
01FE           1140   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:289: break;
01FE           1141   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:290: case 2:
01FE 8001      1142            sjmp    L010005?
0200           1143   L010003?:
0200           1144   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:291: P2MDIN &= (~mask); // Set pin as analog input
0200 EB        1145            mov     a,r3
0201 F4        1146            cpl     a
0202 FA        1147            mov     r2,a
0203 52F3      1148            anl     _P2MDIN,a
0205           1149   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:292: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0205 EB        1150            mov     a,r3
0206 42CC      1151            orl     _P2SKIP,a
0208           1152   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:296: }
0208           1153   L010005?:
0208           1154   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:297: SFRPAGE = 0x00;
0208 75A700    1155            mov     _SFRPAGE,#0x00
020B 22        1156            ret
020C           1157   ;------------------------------------------------------------
020C           1158   ;Allocation info for local variables in function 'PWMforward'
020C           1159   ;------------------------------------------------------------
020C           1160   ;------------------------------------------------------------
020C           1161   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:306: void PWMforward(void) {
020C           1162   ;        -----------------------------------------
020C           1163   ;         function PWMforward
020C           1164   ;        -----------------------------------------
020C           1165   _PWMforward:
020C           1166   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:307: pwmSig1 = 99;
020C 75D063    1167            mov     _pwmSig1,#0x63
020F E4        1168            clr     a
0210 F5D1      1169            mov     (_pwmSig1 + 1),a
0212           1170   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:308: pwmSig2 = 0;
0212           1171   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:310: pwmSig3 = 0;
0212 E4        1172            clr     a
0213 F590      1173            mov     _pwmSig2,a
0215 F591      1174            mov     (_pwmSig2 + 1),a
0217 F550      1175            mov     _pwmSig3,a
0219 F551      1176            mov     (_pwmSig3 + 1),a
021B           1177   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:311: pwmSig4 =99;
021B 751063    1178            mov     _pwmSig4,#0x63
021E E4        1179            clr     a
021F F511      1180            mov     (_pwmSig4 + 1),a
0221           1181   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:312: printf("Forward\n\r");
0221 7430      1182            mov     a,#__str_0
0223 C0E0      1183            push    acc
0225 74C3      1184            mov     a,#(__str_0 >> 8)
0227 C0E0      1185            push    acc
0229 7480      1186            mov     a,#0x80
022B C0E0      1187            push    acc
022D 120100    1188            lcall   _printf
0230 1581      1189            dec     sp
0232 1581      1190            dec     sp
0234 1581      1191            dec     sp
0236 22        1192            ret
0237           1193   ;------------------------------------------------------------
0237           1194   ;Allocation info for local variables in function 'PWMbackward'
0237           1195   ;------------------------------------------------------------
0237           1196   ;------------------------------------------------------------
0237           1197   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:315: void PWMbackward(void) {
0237           1198   ;        -----------------------------------------
0237           1199   ;         function PWMbackward
0237           1200   ;        -----------------------------------------
0237           1201   _PWMbackward:
0237           1202   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:316: pwmSig1 = 0;
0237 E4        1203            clr     a
0238 F5D0      1204            mov     _pwmSig1,a
023A F5D1      1205            mov     (_pwmSig1 + 1),a
023C           1206   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:317: pwmSig2 = 99;
023C 759063    1207            mov     _pwmSig2,#0x63
023F E4        1208            clr     a
0240 F591      1209            mov     (_pwmSig2 + 1),a
0242           1210   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:319: pwmSig3 = 99;
0242 755063    1211            mov     _pwmSig3,#0x63
0245 E4        1212            clr     a
0246 F551      1213            mov     (_pwmSig3 + 1),a
0248           1214   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:320: pwmSig4 = 0;
0248 E4        1215            clr     a
0249 F510      1216            mov     _pwmSig4,a
024B F511      1217            mov     (_pwmSig4 + 1),a
024D           1218   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:321: printf("Backward\n\r");
024D 74B0      1219            mov     a,#__str_1
024F C0E0      1220            push    acc
0251 74C3      1221            mov     a,#(__str_1 >> 8)
0253 C0E0      1222            push    acc
0255 7480      1223            mov     a,#0x80
0257 C0E0      1224            push    acc
0259 120100    1225            lcall   _printf
025C 1581      1226            dec     sp
025E 1581      1227            dec     sp
0260 1581      1228            dec     sp
0262 22        1229            ret
0263           1230   ;------------------------------------------------------------
0263           1231   ;Allocation info for local variables in function 'PWMLeft'
0263           1232   ;------------------------------------------------------------
0263           1233   ;------------------------------------------------------------
0263           1234   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:324: void PWMLeft(void) {
0263           1235   ;        -----------------------------------------
0263           1236   ;         function PWMLeft
0263           1237   ;        -----------------------------------------
0263           1238   _PWMLeft:
0263           1239   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:325: pwmSig1 = 0;
0263           1240   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:326: pwmSig2 = 0;
0263 E4        1241            clr     a
0264 F5D0      1242            mov     _pwmSig1,a
0266 F5D1      1243            mov     (_pwmSig1 + 1),a
0268 F590      1244            mov     _pwmSig2,a
026A F591      1245            mov     (_pwmSig2 + 1),a
026C           1246   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:328: pwmSig3 = 70;
026C 755046    1247            mov     _pwmSig3,#0x46
026F E4        1248            clr     a
0270 F551      1249            mov     (_pwmSig3 + 1),a
0272           1250   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:329: pwmSig4 = 0;
0272 E4        1251            clr     a
0273 F510      1252            mov     _pwmSig4,a
0275 F511      1253            mov     (_pwmSig4 + 1),a
0277           1254   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:330: printf("Left\n\r");
0277 74F0      1255            mov     a,#__str_2
0279 C0E0      1256            push    acc
027B 74C3      1257            mov     a,#(__str_2 >> 8)
027D C0E0      1258            push    acc
027F 7480      1259            mov     a,#0x80
0281 C0E0      1260            push    acc
0283 120100    1261            lcall   _printf
0286 1581      1262            dec     sp
0288 1581      1263            dec     sp
028A 1581      1264            dec     sp
028C 22        1265            ret
028D           1266   ;------------------------------------------------------------
028D           1267   ;Allocation info for local variables in function 'PWMRight'
028D           1268   ;------------------------------------------------------------
028D           1269   ;------------------------------------------------------------
028D           1270   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:333: void PWMRight(void) {
028D           1271   ;        -----------------------------------------
028D           1272   ;         function PWMRight
028D           1273   ;        -----------------------------------------
028D           1274   _PWMRight:
028D           1275   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:334: pwmSig1 = 99;
028D 75D063    1276            mov     _pwmSig1,#0x63
0290 E4        1277            clr     a
0291 F5D1      1278            mov     (_pwmSig1 + 1),a
0293           1279   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:335: pwmSig2 = 0;
0293           1280   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:337: pwmSig3 = 0;
0293           1281   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:338: pwmSig4 = 0;
0293 E4        1282            clr     a
0294 F590      1283            mov     _pwmSig2,a
0296 F591      1284            mov     (_pwmSig2 + 1),a
0298 F550      1285            mov     _pwmSig3,a
029A F551      1286            mov     (_pwmSig3 + 1),a
029C F510      1287            mov     _pwmSig4,a
029E F511      1288            mov     (_pwmSig4 + 1),a
02A0           1289   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:339: printf("Right\n\r");
02A0 7430      1290            mov     a,#__str_3
02A2 C0E0      1291            push    acc
02A4 74C4      1292            mov     a,#(__str_3 >> 8)
02A6 C0E0      1293            push    acc
02A8 7480      1294            mov     a,#0x80
02AA C0E0      1295            push    acc
02AC 120100    1296            lcall   _printf
02AF 1581      1297            dec     sp
02B1 1581      1298            dec     sp
02B3 1581      1299            dec     sp
02B5 22        1300            ret
02B6           1301   ;------------------------------------------------------------
02B6           1302   ;Allocation info for local variables in function 'PWMStop'
02B6           1303   ;------------------------------------------------------------
02B6           1304   ;------------------------------------------------------------
02B6           1305   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:342: void PWMStop(void) {
02B6           1306   ;        -----------------------------------------
02B6           1307   ;         function PWMStop
02B6           1308   ;        -----------------------------------------
02B6           1309   _PWMStop:
02B6           1310   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:343: pwmSig1 = 0;
02B6           1311   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:344: pwmSig2 = 0;
02B6           1312   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:346: pwmSig3 = 0;
02B6           1313   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:347: pwmSig4 = 0;
02B6 E4        1314            clr     a
02B7 F5D0      1315            mov     _pwmSig1,a
02B9 F5D1      1316            mov     (_pwmSig1 + 1),a
02BB F590      1317            mov     _pwmSig2,a
02BD F591      1318            mov     (_pwmSig2 + 1),a
02BF F550      1319            mov     _pwmSig3,a
02C1 F551      1320            mov     (_pwmSig3 + 1),a
02C3 F510      1321            mov     _pwmSig4,a
02C5 F511      1322            mov     (_pwmSig4 + 1),a
02C7           1323   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:348: printf("Stop\n\r");
02C7 7470      1324            mov     a,#__str_4
02C9 C0E0      1325            push    acc
02CB 74C4      1326            mov     a,#(__str_4 >> 8)
02CD C0E0      1327            push    acc
02CF 7480      1328            mov     a,#0x80
02D1 C0E0      1329            push    acc
02D3 120100    1330            lcall   _printf
02D6 1581      1331            dec     sp
02D8 1581      1332            dec     sp
02DA 1581      1333            dec     sp
02DC 22        1334            ret
02DD           1335   ;------------------------------------------------------------
02DD           1336   ;Allocation info for local variables in function 'periodcalc'
02DD           1337   ;------------------------------------------------------------
02DD           1338   ;period1                   Allocated to registers r2 r3 r4 r5 
02DD           1339   ;overflow_count            Allocated to registers r2 r3 
02DD           1340   ;------------------------------------------------------------
02DD           1341   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:351: float periodcalc(void) {
02DD           1342   ;        -----------------------------------------
02DD           1343   ;         function periodcalc
02DD           1344   ;        -----------------------------------------
02DD           1345   _periodcalc:
02DD           1346   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:355: TL0=0; 
02DD 758A00    1347            mov     _TL0,#0x00
02E0           1348   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:356: TH0=0;
02E0 758C00    1349            mov     _TH0,#0x00
02E3           1350   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:357: TF0=0;
02E3 C28D      1351            clr     _TF0
02E5           1352   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:359: TR0=0;
02E5 C28C      1353            clr     _TR0
02E7           1354   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:361: while(P1_7!=0); // Wait for the signal to be zero
02E7           1355   L016001?:
02E7 2097B0    1356            jb      _P1_7,L016001?
02EA           1357   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:362: while(P1_7!=1); // Wait for the signal to be one
02EA           1358   L016004?:
02EA 3097F0    1359            jnb     _P1_7,L016004?
02ED           1360   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:363: TR0=1; // Start the timer
02ED D28C      1361            setb    _TR0
02EF           1362   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:364: while(P1_7!=0) // Wait for the signal to be zero
02EF 7A00      1363            mov     r2,#0x00
02F1 7B00      1364            mov     r3,#0x00
02F3           1365   L016009?:
02F3 309770    1366            jnb     _P1_7,L016011?
02F6           1367   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:366: if(TF0==1) // Did the 16-bit timer overflow?
02F6           1368   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:368: TF0=0;
02F6 108DB0    1369            jbc     _TF0,L016024?
02F9 8001      1370            sjmp    L016009?
02FB           1371   L016024?:
02FB           1372   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:369: overflow_count++;
02FB 0A        1373            inc     r2
02FC BA0030    1374            cjne    r2,#0x00,L016009?
02FF 0B        1375            inc     r3
0300 8001      1376            sjmp    L016009?
0302           1377   L016011?:
0302           1378   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:374: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0302 C28C      1379            clr     _TR0
0304           1380   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:375: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0304 8A82      1381            mov     dpl,r2
0306 8B83      1382            mov     dph,r3
0308 120100    1383            lcall   ___sint2fs
030B AA82      1384            mov     r2,dpl
030D AB83      1385            mov     r3,dph
030F ACF0      1386            mov     r4,b
0311 FD        1387            mov     r5,a
0312 C002      1388            push    ar2
0314 C003      1389            push    ar3
0316 C004      1390            push    ar4
0318 C005      1391            push    ar5
031A 900000    1392            mov     dptr,#0x0000
031D 75F080    1393            mov     b,#0x80
0320 7447      1394            mov     a,#0x47
0322 120100    1395            lcall   ___fsmul
0325 AA82      1396            mov     r2,dpl
0327 AB83      1397            mov     r3,dph
0329 ACF0      1398            mov     r4,b
032B FD        1399            mov     r5,a
032C E581      1400            mov     a,sp
032E 24FC      1401            add     a,#0xfc
0330 F581      1402            mov     sp,a
0332 858C82    1403            mov     dpl,_TH0
0335 C002      1404            push    ar2
0337 C003      1405            push    ar3
0339 C004      1406            push    ar4
033B C005      1407            push    ar5
033D 120100    1408            lcall   ___uchar2fs
0340 AE82      1409            mov     r6,dpl
0342 AF83      1410            mov     r7,dph
0344 A8F0      1411            mov     r0,b
0346 F9        1412            mov     r1,a
0347 C006      1413            push    ar6
0349 C007      1414            push    ar7
034B C000      1415            push    ar0
034D C001      1416            push    ar1
034F 900000    1417            mov     dptr,#0x0000
0352 75F080    1418            mov     b,#0x80
0355 7443      1419            mov     a,#0x43
0357 120100    1420            lcall   ___fsmul
035A AE82      1421            mov     r6,dpl
035C AF83      1422            mov     r7,dph
035E A8F0      1423            mov     r0,b
0360 F9        1424            mov     r1,a
0361 E581      1425            mov     a,sp
0363 24FC      1426            add     a,#0xfc
0365 F581      1427            mov     sp,a
0367 D005      1428            pop     ar5
0369 D004      1429            pop     ar4
036B D003      1430            pop     ar3
036D D002      1431            pop     ar2
036F C006      1432            push    ar6
0371 C007      1433            push    ar7
0373 C000      1434            push    ar0
0375 C001      1435            push    ar1
0377 8A82      1436            mov     dpl,r2
0379 8B83      1437            mov     dph,r3
037B 8CF0      1438            mov     b,r4
037D ED        1439            mov     a,r5
037E 120100    1440            lcall   ___fsadd
0381 AA82      1441            mov     r2,dpl
0383 AB83      1442            mov     r3,dph
0385 ACF0      1443            mov     r4,b
0387 FD        1444            mov     r5,a
0388 E581      1445            mov     a,sp
038A 24FC      1446            add     a,#0xfc
038C F581      1447            mov     sp,a
038E AE8A      1448            mov     r6,_TL0
0390 7F00      1449            mov     r7,#0x00
0392 8E82      1450            mov     dpl,r6
0394 8F83      1451            mov     dph,r7
0396 C002      1452            push    ar2
0398 C003      1453            push    ar3
039A C004      1454            push    ar4
039C C005      1455            push    ar5
039E 120100    1456            lcall   ___sint2fs
03A1 AE82      1457            mov     r6,dpl
03A3 AF83      1458            mov     r7,dph
03A5 A8F0      1459            mov     r0,b
03A7 F9        1460            mov     r1,a
03A8 D005      1461            pop     ar5
03AA D004      1462            pop     ar4
03AC D003      1463            pop     ar3
03AE D002      1464            pop     ar2
03B0 C006      1465            push    ar6
03B2 C007      1466            push    ar7
03B4 C000      1467            push    ar0
03B6 C001      1468            push    ar1
03B8 8A82      1469            mov     dpl,r2
03BA 8B83      1470            mov     dph,r3
03BC 8CF0      1471            mov     b,r4
03BE ED        1472            mov     a,r5
03BF 120100    1473            lcall   ___fsadd
03C2 AA82      1474            mov     r2,dpl
03C4 AB83      1475            mov     r3,dph
03C6 ACF0      1476            mov     r4,b
03C8 FD        1477            mov     r5,a
03C9 E581      1478            mov     a,sp
03CB 24FC      1479            add     a,#0xfc
03CD F581      1480            mov     sp,a
03CF C002      1481            push    ar2
03D1 C003      1482            push    ar3
03D3 C004      1483            push    ar4
03D5 C005      1484            push    ar5
03D7 90F4FC    1485            mov     dptr,#0xF4FC
03DA 75F032    1486            mov     b,#0x32
03DD 7434      1487            mov     a,#0x34
03DF 120100    1488            lcall   ___fsmul
03E2 AA82      1489            mov     r2,dpl
03E4 AB83      1490            mov     r3,dph
03E6 ACF0      1491            mov     r4,b
03E8 FD        1492            mov     r5,a
03E9 E581      1493            mov     a,sp
03EB 24FC      1494            add     a,#0xfc
03ED F581      1495            mov     sp,a
03EF           1496   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:377: return period1*1000; //return period of high pulse in seconds
03EF C002      1497            push    ar2
03F1 C003      1498            push    ar3
03F3 C004      1499            push    ar4
03F5 C005      1500            push    ar5
03F7 900000    1501            mov     dptr,#0x0000
03FA 75F07A    1502            mov     b,#0x7A
03FD 7444      1503            mov     a,#0x44
03FF 120100    1504            lcall   ___fsmul
0402 AA82      1505            mov     r2,dpl
0404 AB83      1506            mov     r3,dph
0406 ACF0      1507            mov     r4,b
0408 FD        1508            mov     r5,a
0409 E581      1509            mov     a,sp
040B 24FC      1510            add     a,#0xfc
040D F581      1511            mov     sp,a
040F 8A82      1512            mov     dpl,r2
0411 8B83      1513            mov     dph,r3
0413 8CF0      1514            mov     b,r4
0415 ED        1515            mov     a,r5
0416 22        1516            ret
0417           1517   ;------------------------------------------------------------
0417           1518   ;Allocation info for local variables in function 'arrayEqual'
0417           1519   ;------------------------------------------------------------
0417           1520   ;size                      Allocated with name '_arrayEqual_PARM_2'
0417           1521   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
0417           1522   ;arr1                      Allocated with name '_arrayEqual_arr1_1_76'
0417           1523   ;i                         Allocated to registers r5 r6 
0417           1524   ;------------------------------------------------------------
0417           1525   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:381: int arrayEqual (int arr1[], int size, int arr2[]){
0417           1526   ;        -----------------------------------------
0417           1527   ;         function arrayEqual
0417           1528   ;        -----------------------------------------
0417           1529   _arrayEqual:
0417 8582E0    1530            mov     _arrayEqual_arr1_1_76,dpl
041A 8583E1    1531            mov     (_arrayEqual_arr1_1_76 + 1),dph
041D 85F0E2    1532            mov     (_arrayEqual_arr1_1_76 + 2),b
0420           1533   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:383: for(i=0; i<size; i++){
0420 7D00      1534            mov     r5,#0x00
0422 7E00      1535            mov     r6,#0x00
0424           1536   L017003?:
0424 C3        1537            clr     c
0425 ED        1538            mov     a,r5
0426 95A0      1539            subb    a,_arrayEqual_PARM_2
0428 EE        1540            mov     a,r6
0429 6480      1541            xrl     a,#0x80
042B 85A1F0    1542            mov     b,(_arrayEqual_PARM_2 + 1)
042E 63F080    1543            xrl     b,#0x80
0431 95F0      1544            subb    a,b
0433 5001      1545            jnc     L017006?
0435           1546   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:384: if(arr1[i]!=arr2[i])
0435 8D07      1547            mov     ar7,r5
0437 EE        1548            mov     a,r6
0438 CF        1549            xch     a,r7
0439 25E0      1550            add     a,acc
043B CF        1551            xch     a,r7
043C 33        1552            rlc     a
043D F8        1553            mov     r0,a
043E EF        1554            mov     a,r7
043F 25E0      1555            add     a,_arrayEqual_arr1_1_76
0441 F9        1556            mov     r1,a
0442 E8        1557            mov     a,r0
0443 35E1      1558            addc    a,(_arrayEqual_arr1_1_76 + 1)
0445 FA        1559            mov     r2,a
0446 ABE2      1560            mov     r3,(_arrayEqual_arr1_1_76 + 2)
0448 8982      1561            mov     dpl,r1
044A 8A83      1562            mov     dph,r2
044C 8BF0      1563            mov     b,r3
044E 120100    1564            lcall   __gptrget
0451 F9        1565            mov     r1,a
0452 A3        1566            inc     dptr
0453 120100    1567            lcall   __gptrget
0456 FA        1568            mov     r2,a
0457 EF        1569            mov     a,r7
0458 2550      1570            add     a,_arrayEqual_PARM_3
045A FF        1571            mov     r7,a
045B E8        1572            mov     a,r0
045C 3551      1573            addc    a,(_arrayEqual_PARM_3 + 1)
045E F8        1574            mov     r0,a
045F AB52      1575            mov     r3,(_arrayEqual_PARM_3 + 2)
0461 8F82      1576            mov     dpl,r7
0463 8883      1577            mov     dph,r0
0465 8BF0      1578            mov     b,r3
0467 120100    1579            lcall   __gptrget
046A FF        1580            mov     r7,a
046B A3        1581            inc     dptr
046C 120100    1582            lcall   __gptrget
046F F8        1583            mov     r0,a
0470 E9        1584            mov     a,r1
0471 B50770    1585            cjne    a,ar7,L017013?
0474 EA        1586            mov     a,r2
0475 B50070    1587            cjne    a,ar0,L017013?
0478 8001      1588            sjmp    L017005?
047A           1589   L017013?:
047A           1590   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:385: return 0; 
047A 900000    1591            mov     dptr,#0x0000
047D 22        1592            ret
047E           1593   L017005?:
047E           1594   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:383: for(i=0; i<size; i++){
047E 0D        1595            inc     r5
047F BD00B0    1596            cjne    r5,#0x00,L017003?
0482 0E        1597            inc     r6
0483 8001      1598            sjmp    L017003?
0485           1599   L017006?:
0485           1600   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:387: return 1; 
0485 900001    1601            mov     dptr,#0x0001
0488 22        1602            ret
0489           1603   ;------------------------------------------------------------
0489           1604   ;Allocation info for local variables in function 'checkCommands'
0489           1605   ;------------------------------------------------------------
0489           1606   ;------------------------------------------------------------
0489           1607   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:393: void checkCommands (void){
0489           1608   ;        -----------------------------------------
0489           1609   ;         function checkCommands
0489           1610   ;        -----------------------------------------
0489           1611   _checkCommands:
0489           1612   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:394: if(arrayEqual(command, 4, stop)) PWMStop();
0489 755020    1613            mov     _arrayEqual_PARM_3,#_stop
048C 755100    1614            mov     (_arrayEqual_PARM_3 + 1),#0x00
048F 755240    1615            mov     (_arrayEqual_PARM_3 + 2),#0x40
0492 75A004    1616            mov     _arrayEqual_PARM_2,#0x04
0495 E4        1617            clr     a
0496 F5A1      1618            mov     (_arrayEqual_PARM_2 + 1),a
0498 9017E0    1619            mov     dptr,#_command
049B 75F040    1620            mov     b,#0x40
049E 120100    1621            lcall   _arrayEqual
04A1 E582      1622            mov     a,dpl
04A3 8583F0    1623            mov     b,dph
04A6 45F0      1624            orl     a,b
04A8 6001      1625            jz      L018014?
04AA 020100    1626            ljmp    _PWMStop
04AD           1627   L018014?:
04AD           1628   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:395: else if (arrayEqual(command,4,forward)) PWMforward(); 
04AD 7550E0    1629            mov     _arrayEqual_PARM_3,#_forward
04B0 755100    1630            mov     (_arrayEqual_PARM_3 + 1),#0x00
04B3 755240    1631            mov     (_arrayEqual_PARM_3 + 2),#0x40
04B6 75A004    1632            mov     _arrayEqual_PARM_2,#0x04
04B9 E4        1633            clr     a
04BA F5A1      1634            mov     (_arrayEqual_PARM_2 + 1),a
04BC 9017E0    1635            mov     dptr,#_command
04BF 75F040    1636            mov     b,#0x40
04C2 120100    1637            lcall   _arrayEqual
04C5 E582      1638            mov     a,dpl
04C7 8583F0    1639            mov     b,dph
04CA 45F0      1640            orl     a,b
04CC 6001      1641            jz      L018011?
04CE 020100    1642            ljmp    _PWMforward
04D1           1643   L018011?:
04D1           1644   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:396: else if (arrayEqual(command,4,backward)) PWMbackward(); 
04D1 7550A0    1645            mov     _arrayEqual_PARM_3,#_backward
04D4 755100    1646            mov     (_arrayEqual_PARM_3 + 1),#0x00
04D7 755240    1647            mov     (_arrayEqual_PARM_3 + 2),#0x40
04DA 75A004    1648            mov     _arrayEqual_PARM_2,#0x04
04DD E4        1649            clr     a
04DE F5A1      1650            mov     (_arrayEqual_PARM_2 + 1),a
04E0 9017E0    1651            mov     dptr,#_command
04E3 75F040    1652            mov     b,#0x40
04E6 120100    1653            lcall   _arrayEqual
04E9 E582      1654            mov     a,dpl
04EB 8583F0    1655            mov     b,dph
04EE 45F0      1656            orl     a,b
04F0 6001      1657            jz      L018008?
04F2 020100    1658            ljmp    _PWMbackward
04F5           1659   L018008?:
04F5           1660   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:397: else if (arrayEqual(command,4, left)) PWMLeft(); 
04F5 755060    1661            mov     _arrayEqual_PARM_3,#_left
04F8 755100    1662            mov     (_arrayEqual_PARM_3 + 1),#0x00
04FB 755240    1663            mov     (_arrayEqual_PARM_3 + 2),#0x40
04FE 75A004    1664            mov     _arrayEqual_PARM_2,#0x04
0501 E4        1665            clr     a
0502 F5A1      1666            mov     (_arrayEqual_PARM_2 + 1),a
0504 9017E0    1667            mov     dptr,#_command
0507 75F040    1668            mov     b,#0x40
050A 120100    1669            lcall   _arrayEqual
050D E582      1670            mov     a,dpl
050F 8583F0    1671            mov     b,dph
0512 45F0      1672            orl     a,b
0514 6001      1673            jz      L018005?
0516 020100    1674            ljmp    _PWMLeft
0519           1675   L018005?:
0519           1676   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:398: else if (arrayEqual(command,4, right)) PWMRight(); 
0519 755020    1677            mov     _arrayEqual_PARM_3,#_right
051C 755100    1678            mov     (_arrayEqual_PARM_3 + 1),#0x00
051F 755240    1679            mov     (_arrayEqual_PARM_3 + 2),#0x40
0522 75A004    1680            mov     _arrayEqual_PARM_2,#0x04
0525 E4        1681            clr     a
0526 F5A1      1682            mov     (_arrayEqual_PARM_2 + 1),a
0528 9017E0    1683            mov     dptr,#_command
052B 75F040    1684            mov     b,#0x40
052E 120100    1685            lcall   _arrayEqual
0531 E582      1686            mov     a,dpl
0533 8583F0    1687            mov     b,dph
0536 45F0      1688            orl     a,b
0538 6001      1689            jz      L018002?
053A 020100    1690            ljmp    _PWMRight
053D           1691   L018002?:
053D           1692   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:399: else PWMStop(); //defaults to a halt (redundant)
053D 020100    1693            ljmp    _PWMStop
0540           1694   ;------------------------------------------------------------
0540           1695   ;Allocation info for local variables in function 'voltsAtPeak'
0540           1696   ;------------------------------------------------------------
0540           1697   ;------------------------------------------------------------
0540           1698   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:405: float voltsAtPeak(void) {
0540           1699   ;        -----------------------------------------
0540           1700   ;         function voltsAtPeak
0540           1701   ;        -----------------------------------------
0540           1702   _voltsAtPeak:
0540           1703   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:407: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
0540           1704   L019001?:
0540 75820C    1705            mov     dpl,#0x0C
0543 120100    1706            lcall   _ADC_at_Pin
0546 E582      1707            mov     a,dpl
0548 8583F0    1708            mov     b,dph
054B 45F0      1709            orl     a,b
054D 6001      1710            jz      L019001?
054F           1711   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:408: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
054F 900000    1712            mov     dptr,#0x0000
0552 120100    1713            lcall   _Timer3us
0555           1714   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:409: return(Volts_at_Pin(QFP32_MUX_P1_6));
0555 75820C    1715            mov     dpl,#0x0C
0558 020100    1716            ljmp    _Volts_at_Pin
055B           1717   ;------------------------------------------------------------
055B           1718   ;Allocation info for local variables in function 'getDigitalSignal'
055B           1719   ;------------------------------------------------------------
055B           1720   ;------------------------------------------------------------
055B           1721   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:428: int getDigitalSignal (void){
055B           1722   ;        -----------------------------------------
055B           1723   ;         function getDigitalSignal
055B           1724   ;        -----------------------------------------
055B           1725   _getDigitalSignal:
055B           1726   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:430: if (Volts_at_Pin(QFP32_MUX_P2_3)>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
055B 758210    1727            mov     dpl,#0x10
055E 120100    1728            lcall   _Volts_at_Pin
0561 AA82      1729            mov     r2,dpl
0563 AB83      1730            mov     r3,dph
0565 ACF0      1731            mov     r4,b
0567 FD        1732            mov     r5,a
0568 E4        1733            clr     a
0569 C0E0      1734            push    acc
056B C0E0      1735            push    acc
056D C0E0      1736            push    acc
056F 743F      1737            mov     a,#0x3F
0571 C0E0      1738            push    acc
0573 8A82      1739            mov     dpl,r2
0575 8B83      1740            mov     dph,r3
0577 8CF0      1741            mov     b,r4
0579 ED        1742            mov     a,r5
057A 120100    1743            lcall   ___fslt
057D AA82      1744            mov     r2,dpl
057F E581      1745            mov     a,sp
0581 24FC      1746            add     a,#0xfc
0583 F581      1747            mov     sp,a
0585 EA        1748            mov     a,r2
0586 7001      1749            jnz     L020004?
0588           1750   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:432: printf("\nread 1:  at pin 2.3: %f\r", voltsAtPeak());
0588 120100    1751            lcall   _voltsAtPeak
058B AA82      1752            mov     r2,dpl
058D AB83      1753            mov     r3,dph
058F ACF0      1754            mov     r4,b
0591 FD        1755            mov     r5,a
0592 C002      1756            push    ar2
0594 C003      1757            push    ar3
0596 C004      1758            push    ar4
0598 C005      1759            push    ar5
059A 74F0      1760            mov     a,#__str_5
059C C0E0      1761            push    acc
059E 74C9      1762            mov     a,#(__str_5 >> 8)
05A0 C0E0      1763            push    acc
05A2 7480      1764            mov     a,#0x80
05A4 C0E0      1765            push    acc
05A6 120100    1766            lcall   _printf
05A9 E581      1767            mov     a,sp
05AB 24F9      1768            add     a,#0xf9
05AD F581      1769            mov     sp,a
05AF           1770   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:433: return 1;
05AF 900001    1771            mov     dptr,#0x0001
05B2 22        1772            ret
05B3           1773   L020004?:
05B3           1774   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:435: else if (Volts_at_Pin(QFP32_MUX_P2_3)<thresholdVolt){ //noise or too low to be recognozed as a high, 1 
05B3 758210    1775            mov     dpl,#0x10
05B6 120100    1776            lcall   _Volts_at_Pin
05B9 AA82      1777            mov     r2,dpl
05BB AB83      1778            mov     r3,dph
05BD ACF0      1779            mov     r4,b
05BF FD        1780            mov     r5,a
05C0 E4        1781            clr     a
05C1 C0E0      1782            push    acc
05C3 C0E0      1783            push    acc
05C5 C0E0      1784            push    acc
05C7 743F      1785            mov     a,#0x3F
05C9 C0E0      1786            push    acc
05CB 8A82      1787            mov     dpl,r2
05CD 8B83      1788            mov     dph,r3
05CF 8CF0      1789            mov     b,r4
05D1 ED        1790            mov     a,r5
05D2 120100    1791            lcall   ___fslt
05D5 AA82      1792            mov     r2,dpl
05D7 E581      1793            mov     a,sp
05D9 24FC      1794            add     a,#0xfc
05DB F581      1795            mov     sp,a
05DD EA        1796            mov     a,r2
05DE 6001      1797            jz      L020006?
05E0           1798   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:436: printf("\nread 0: Volt at pin 2.3: %f\r", voltsAtPeak());
05E0 120100    1799            lcall   _voltsAtPeak
05E3 AA82      1800            mov     r2,dpl
05E5 AB83      1801            mov     r3,dph
05E7 ACF0      1802            mov     r4,b
05E9 FD        1803            mov     r5,a
05EA C002      1804            push    ar2
05EC C003      1805            push    ar3
05EE C004      1806            push    ar4
05F0 C005      1807            push    ar5
05F2 7470      1808            mov     a,#__str_6
05F4 C0E0      1809            push    acc
05F6 74CA      1810            mov     a,#(__str_6 >> 8)
05F8 C0E0      1811            push    acc
05FA 7480      1812            mov     a,#0x80
05FC C0E0      1813            push    acc
05FE 120100    1814            lcall   _printf
0601 E581      1815            mov     a,sp
0603 24F9      1816            add     a,#0xf9
0605 F581      1817            mov     sp,a
0607           1818   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:437: return 0; 
0607 900000    1819            mov     dptr,#0x0000
060A           1820   L020006?:
060A 22        1821            ret
060B           1822   ;------------------------------------------------------------
060B           1823   ;Allocation info for local variables in function 'waitquarterperiod'
060B           1824   ;------------------------------------------------------------
060B           1825   ;------------------------------------------------------------
060B           1826   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:444: void waitquarterperiod(void){
060B           1827   ;        -----------------------------------------
060B           1828   ;         function waitquarterperiod
060B           1829   ;        -----------------------------------------
060B           1830   _waitquarterperiod:
060B           1831   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:445: waitms(constant_delay_time);
060B 90000A    1832            mov     dptr,#0x000A
060E 020100    1833            ljmp    _waitms
0611           1834   ;------------------------------------------------------------
0611           1835   ;Allocation info for local variables in function 'recieveData'
0611           1836   ;------------------------------------------------------------
0611           1837   ;checkcomm                 Allocated to registers 
0611           1838   ;i                         Allocated to registers r2 r3 
0611           1839   ;------------------------------------------------------------
0611           1840   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:451: void recieveData (){
0611           1841   ;        -----------------------------------------
0611           1842   ;         function recieveData
0611           1843   ;        -----------------------------------------
0611           1844   _recieveData:
0611           1845   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:455: while(getDigitalSignal()==0);          //wait for the signal to be 1 
0611           1846   L022001?:
0611 120100    1847            lcall   _getDigitalSignal
0614 E582      1848            mov     a,dpl
0616 8583F0    1849            mov     b,dph
0619 45F0      1850            orl     a,b
061B 6001      1851            jz      L022001?
061D           1852   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:456: if (getDigitalSignal()==1){    //gets the first 1 that identifies a command 
061D 120100    1853            lcall   _getDigitalSignal
0620 AA82      1854            mov     r2,dpl
0622 AB83      1855            mov     r3,dph
0624 BA01F0    1856            cjne    r2,#0x01,L022010?
0627 BB00F0    1857            cjne    r3,#0x00,L022010?
062A           1858   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:457: command[0]=1;
062A 75E001    1859            mov     _command,#0x01
062D 75E100    1860            mov     (_command + 1),#0x00
0630           1861   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:458: for( i=1; i<4; i++){
0630 7A01      1862            mov     r2,#0x01
0632 7B00      1863            mov     r3,#0x00
0634           1864   L022006?:
0634 C3        1865            clr     c
0635 EA        1866            mov     a,r2
0636 9404      1867            subb    a,#0x04
0638 EB        1868            mov     a,r3
0639 6480      1869            xrl     a,#0x80
063B 9480      1870            subb    a,#0x80
063D 5001      1871            jnc     L022009?
063F           1872   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:459: waitms(constant_delay_time);
063F 90000A    1873            mov     dptr,#0x000A
0642 C002      1874            push    ar2
0644 C003      1875            push    ar3
0646 120100    1876            lcall   _waitms
0649 D003      1877            pop     ar3
064B D002      1878            pop     ar2
064D           1879   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:460: command[i]=getDigitalSignal();         
064D 8A04      1880            mov     ar4,r2
064F EB        1881            mov     a,r3
0650 CC        1882            xch     a,r4
0651 25E0      1883            add     a,acc
0653 CC        1884            xch     a,r4
0654 33        1885            rlc     a
0655 EC        1886            mov     a,r4
0656 24E0      1887            add     a,#_command
0658 F8        1888            mov     r0,a
0659 C002      1889            push    ar2
065B C003      1890            push    ar3
065D C000      1891            push    ar0
065F 120100    1892            lcall   _getDigitalSignal
0662 E582      1893            mov     a,dpl
0664 8583F0    1894            mov     b,dph
0667 D000      1895            pop     ar0
0669 D003      1896            pop     ar3
066B D002      1897            pop     ar2
066D F6        1898            mov     @r0,a
066E 08        1899            inc     r0
066F A6F0      1900            mov     @r0,b
0671 18        1901            dec     r0
0672           1902   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:458: for( i=1; i<4; i++){
0672 0A        1903            inc     r2
0673 BA0030    1904            cjne    r2,#0x00,L022006?
0676 0B        1905            inc     r3
0677 8001      1906            sjmp    L022006?
0679           1907   L022009?:
0679           1908   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:463: checkCommands();                               //does activity depending on the command given 
0679 020100    1909            ljmp    _checkCommands
067C           1910   L022010?:
067C 22        1911            ret
067D           1912   ;------------------------------------------------------------
067D           1913   ;Allocation info for local variables in function 'main'
067D           1914   ;------------------------------------------------------------
067D           1915   ;checkcommand              Allocated to registers 
067D           1916   ;i                         Allocated to registers r2 r3 
067D           1917   ;sig1                      Allocated to registers 
067D           1918   ;sig2                      Allocated to registers 
067D           1919   ;peak                      Allocated to registers 
067D           1920   ;voltspeak                 Allocated to registers 
067D           1921   ;periodpwm                 Allocated to registers 
067D           1922   ;period                    Allocated to registers 
067D           1923   ;overflow_count            Allocated to registers 
067D           1924   ;------------------------------------------------------------
067D           1925   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:472: void main(void){
067D           1926   ;        -----------------------------------------
067D           1927   ;         function main
067D           1928   ;        -----------------------------------------
067D           1929   _main:
067D           1930   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:483: TIMER0_Init();
067D 120100    1931            lcall   _TIMER0_Init
0680           1932   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:485: InitPinADC(2, 3); // Configure P2.5 as analog input
0680 75F003    1933            mov     _InitPinADC_PARM_2,#0x03
0683 758202    1934            mov     dpl,#0x02
0686 120100    1935            lcall   _InitPinADC
0689           1936   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:487: InitADC();
0689 120100    1937            lcall   _InitADC
068C           1938   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:488: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
068C 74B0      1939            mov     a,#__str_7
068E C0E0      1940            push    acc
0690 74CB      1941            mov     a,#(__str_7 >> 8)
0692 C0E0      1942            push    acc
0694 7480      1943            mov     a,#0x80
0696 C0E0      1944            push    acc
0698 120100    1945            lcall   _printf
069B 1581      1946            dec     sp
069D 1581      1947            dec     sp
069F 1581      1948            dec     sp
06A1           1949   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:490: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
06A1 74F0      1950            mov     a,#__str_8
06A3 C0E0      1951            push    acc
06A5 74CB      1952            mov     a,#(__str_8 >> 8)
06A7 C0E0      1953            push    acc
06A9 7480      1954            mov     a,#0x80
06AB C0E0      1955            push    acc
06AD 120100    1956            lcall   _printf
06B0 1581      1957            dec     sp
06B2 1581      1958            dec     sp
06B4 1581      1959            dec     sp
06B6           1960   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:492: printf("\n\r");
06B6 7430      1961            mov     a,#__str_9
06B8 C0E0      1962            push    acc
06BA 74CC      1963            mov     a,#(__str_9 >> 8)
06BC C0E0      1964            push    acc
06BE 7480      1965            mov     a,#0x80
06C0 C0E0      1966            push    acc
06C2 120100    1967            lcall   _printf
06C5 1581      1968            dec     sp
06C7 1581      1969            dec     sp
06C9 1581      1970            dec     sp
06CB           1971   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:493: P2_1=0;
06CB C2A1      1972            clr     _P2_1
06CD           1973   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:494: PWMStop();
06CD 120100    1974            lcall   _PWMStop
06D0           1975   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:495: while (1)
06D0           1976   L023002?:
06D0           1977   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:498: recieveData();         //keep reading data continously 
06D0 120100    1978            lcall   _recieveData
06D3           1979   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:499: printf("Command: ");
06D3 74B0      1980            mov     a,#__str_10
06D5 C0E0      1981            push    acc
06D7 74CC      1982            mov     a,#(__str_10 >> 8)
06D9 C0E0      1983            push    acc
06DB 7480      1984            mov     a,#0x80
06DD C0E0      1985            push    acc
06DF 120100    1986            lcall   _printf
06E2 1581      1987            dec     sp
06E4 1581      1988            dec     sp
06E6 1581      1989            dec     sp
06E8           1990   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:500: for(i=0; i<4; i++)
06E8 7A00      1991            mov     r2,#0x00
06EA 7B00      1992            mov     r3,#0x00
06EC           1993   L023004?:
06EC C3        1994            clr     c
06ED EA        1995            mov     a,r2
06EE 9404      1996            subb    a,#0x04
06F0 EB        1997            mov     a,r3
06F1 6480      1998            xrl     a,#0x80
06F3 9480      1999            subb    a,#0x80
06F5 5001      2000            jnc     L023007?
06F7           2001   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:501: printf("%d\t", command[i]);
06F7 8A04      2002            mov     ar4,r2
06F9 EB        2003            mov     a,r3
06FA CC        2004            xch     a,r4
06FB 25E0      2005            add     a,acc
06FD CC        2006            xch     a,r4
06FE 33        2007            rlc     a
06FF EC        2008            mov     a,r4
0700 24E0      2009            add     a,#_command
0702 F8        2010            mov     r0,a
0703 8604      2011            mov     ar4,@r0
0705 08        2012            inc     r0
0706 8605      2013            mov     ar5,@r0
0708 18        2014            dec     r0
0709 C002      2015            push    ar2
070B C003      2016            push    ar3
070D C004      2017            push    ar4
070F C005      2018            push    ar5
0711 7470      2019            mov     a,#__str_11
0713 C0E0      2020            push    acc
0715 74CD      2021            mov     a,#(__str_11 >> 8)
0717 C0E0      2022            push    acc
0719 7480      2023            mov     a,#0x80
071B C0E0      2024            push    acc
071D 120100    2025            lcall   _printf
0720 E581      2026            mov     a,sp
0722 24FB      2027            add     a,#0xfb
0724 F581      2028            mov     sp,a
0726 D003      2029            pop     ar3
0728 D002      2030            pop     ar2
072A           2031   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:500: for(i=0; i<4; i++)
072A 0A        2032            inc     r2
072B BA00F0    2033            cjne    r2,#0x00,L023004?
072E 0B        2034            inc     r3
072F 8001      2035            sjmp    L023004?
0731           2036   L023007?:
0731           2037   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:502: printf("\n\r");
0731 7430      2038            mov     a,#__str_9
0733 C0E0      2039            push    acc
0735 74CC      2040            mov     a,#(__str_9 >> 8)
0737 C0E0      2041            push    acc
0739 7480      2042            mov     a,#0x80
073B C0E0      2043            push    acc
073D 120100    2044            lcall   _printf
0740 1581      2045            dec     sp
0742 1581      2046            dec     sp
0744 1581      2047            dec     sp
0746           2048   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:503: command[0] = 0;
0746 75E000    2049            mov     _command,#0x00
0749 75E100    2050            mov     (_command + 1),#0x00
074C           2051   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:504: command[1] = 0;
074C 75E200    2052            mov     (_command + 0x0002),#0x00
074F 75E300    2053            mov     ((_command + 0x0002) + 1),#0x00
0752           2054   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:505: command[2] = 0;
0752 75E400    2055            mov     (_command + 0x0004),#0x00
0755 75E500    2056            mov     ((_command + 0x0004) + 1),#0x00
0758           2057   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\bitcodefinalish.c:506: command[3] = 0;
0758 75E600    2058            mov     (_command + 0x0006),#0x00
075B 75E700    2059            mov     ((_command + 0x0006) + 1),#0x00
075E 020100    2060            ljmp    L023002?
0761           2061            rseg R_CSEG
0761           2062   
0000           2063            rseg R_XINIT
0000           2064   
0000           2065            rseg R_CONST
0000           2066   __str_0:
0000 466F7277  2067            db 'Forward'
     617264
0007 0A        2068            db 0x0A
0008 0D        2069            db 0x0D
0009 00        2070            db 0x00
000A           2071   __str_1:
000A 4261636B  2072            db 'Backward'
     77617264
0012 0A        2073            db 0x0A
0013 0D        2074            db 0x0D
0014 00        2075            db 0x00
0015           2076   __str_2:
0015 4C656674  2077            db 'Left'
0019 0A        2078            db 0x0A
001A 0D        2079            db 0x0D
001B 00        2080            db 0x00
001C           2081   __str_3:
001C 52696768  2082            db 'Right'
     74
0021 0A        2083            db 0x0A
0022 0D        2084            db 0x0D
0023 00        2085            db 0x00
0024           2086   __str_4:
0024 53746F70  2087            db 'Stop'
0028 0A        2088            db 0x0A
0029 0D        2089            db 0x0D
002A 00        2090            db 0x00
002B           2091   __str_5:
002B 0A        2092            db 0x0A
002C 72656164  2093            db 'read 1:  at pin 2.3: %f'
     20313A20
     20617420
     70696E20
     322E333A
     202566
0043 0D        2094            db 0x0D
0044 00        2095            db 0x00
0045           2096   __str_6:
0045 0A        2097            db 0x0A
0046 72656164  2098            db 'read 0: Volt at pin 2.3: %f'
     20303A20
     566F6C74
     20617420
     70696E20
     322E333A
     202566
0061 0D        2099            db 0x0D
0062 00        2100            db 0x00
0063           2101   __str_7:
0063 1B        2102            db 0x1B
0064 5B324A    2103            db '[2J'
0067 00        2104            db 0x00
0068           2105   __str_8:
0068 53717561  2106            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
008E 0D        2107            db 0x0D
008F 0A        2108            db 0x0A
0090 43686563  2109            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
00A4 50322E31  2110            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00BF 0D        2111            db 0x0D
00C0 0A        2112            db 0x0A
00C1 00        2113            db 0x00
00C2           2114   __str_9:
00C2 0A        2115            db 0x0A
00C3 0D        2116            db 0x0D
00C4 00        2117            db 0x00
00C5           2118   __str_10:
00C5 436F6D6D  2119            db 'Command: '
     616E643A
     20
00CE 00        2120            db 0x00
00CF           2121   __str_11:
00CF 2564      2122            db '%d'
00D1 09        2123            db 0x09
00D2 00        2124            db 0x00
00D3           2125   
002E           2126            CSEG
002E           2127   
002E           2128   end
