0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Fri Mar 30 15:09:41 2018
0000              5   ;--------------------------------------------------------
                  5   $name Sam_Test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _waitquarterperiod
0000             30            public _voltsAtPeak
0000             31            public _checkTime
0000             32            public _PWMStop
0000             33            public _PWMRight
0000             34            public _PWMLeft
0000             35            public _PWMbackward
0000             36            public _PWMforward
0000             37            public _InitPinADC
0000             38            public _Volts_at_Pin
0000             39            public _TIMER0_Init
0000             40            public _InitADC
0000             41            public _Timer2_ISR
0000             42            public _ADC_at_Pin
0000             43            public _waitms
0000             44            public _Timer3us
0000             45            public __c51_external_startup
0000             46            public _command
0000             47            public _right
0000             48            public _left
0000             49            public _backward
0000             50            public _forward
0000             51            public _stop
0000             52            public _claw_flag
0000             53            public _flag
0000             54            public _cartMoveB
0000             55            public _cartMoveF
0000             56            public _pwmSig6
0000             57            public _pwmSig5
0000             58            public _pwmSig4
0000             59            public _pwmSig3
0000             60            public _pwmSig2
0000             61            public _pwmSig1
0000             62            public _pwm_count3
0000             63            public _pwm_count2
0000             64            public _pwm_count1
0000             65            public _pwm_count
0000             66   ;--------------------------------------------------------
0000             67   ; Special Function Registers
0000             68   ;--------------------------------------------------------
0000             69   _ACC            DATA 0xe0
0000             70   _ADC0ASAH       DATA 0xb6
0000             71   _ADC0ASAL       DATA 0xb5
0000             72   _ADC0ASCF       DATA 0xa1
0000             73   _ADC0ASCT       DATA 0xc7
0000             74   _ADC0CF0        DATA 0xbc
0000             75   _ADC0CF1        DATA 0xb9
0000             76   _ADC0CF2        DATA 0xdf
0000             77   _ADC0CN0        DATA 0xe8
0000             78   _ADC0CN1        DATA 0xb2
0000             79   _ADC0CN2        DATA 0xb3
0000             80   _ADC0GTH        DATA 0xc4
0000             81   _ADC0GTL        DATA 0xc3
0000             82   _ADC0H          DATA 0xbe
0000             83   _ADC0L          DATA 0xbd
0000             84   _ADC0LTH        DATA 0xc6
0000             85   _ADC0LTL        DATA 0xc5
0000             86   _ADC0MX         DATA 0xbb
0000             87   _B              DATA 0xf0
0000             88   _CKCON0         DATA 0x8e
0000             89   _CKCON1         DATA 0xa6
0000             90   _CLEN0          DATA 0xc6
0000             91   _CLIE0          DATA 0xc7
0000             92   _CLIF0          DATA 0xe8
0000             93   _CLKSEL         DATA 0xa9
0000             94   _CLOUT0         DATA 0xd1
0000             95   _CLU0CF         DATA 0xb1
0000             96   _CLU0FN         DATA 0xaf
0000             97   _CLU0MX         DATA 0x84
0000             98   _CLU1CF         DATA 0xb3
0000             99   _CLU1FN         DATA 0xb2
0000            100   _CLU1MX         DATA 0x85
0000            101   _CLU2CF         DATA 0xb6
0000            102   _CLU2FN         DATA 0xb5
0000            103   _CLU2MX         DATA 0x91
0000            104   _CLU3CF         DATA 0xbf
0000            105   _CLU3FN         DATA 0xbe
0000            106   _CLU3MX         DATA 0xae
0000            107   _CMP0CN0        DATA 0x9b
0000            108   _CMP0CN1        DATA 0x99
0000            109   _CMP0MD         DATA 0x9d
0000            110   _CMP0MX         DATA 0x9f
0000            111   _CMP1CN0        DATA 0xbf
0000            112   _CMP1CN1        DATA 0xac
0000            113   _CMP1MD         DATA 0xab
0000            114   _CMP1MX         DATA 0xaa
0000            115   _CRC0CN0        DATA 0xce
0000            116   _CRC0CN1        DATA 0x86
0000            117   _CRC0CNT        DATA 0xd3
0000            118   _CRC0DAT        DATA 0xcb
0000            119   _CRC0FLIP       DATA 0xcf
0000            120   _CRC0IN         DATA 0xca
0000            121   _CRC0ST         DATA 0xd2
0000            122   _DAC0CF0        DATA 0x91
0000            123   _DAC0CF1        DATA 0x92
0000            124   _DAC0H          DATA 0x85
0000            125   _DAC0L          DATA 0x84
0000            126   _DAC1CF0        DATA 0x93
0000            127   _DAC1CF1        DATA 0x94
0000            128   _DAC1H          DATA 0x8a
0000            129   _DAC1L          DATA 0x89
0000            130   _DAC2CF0        DATA 0x95
0000            131   _DAC2CF1        DATA 0x96
0000            132   _DAC2H          DATA 0x8c
0000            133   _DAC2L          DATA 0x8b
0000            134   _DAC3CF0        DATA 0x9a
0000            135   _DAC3CF1        DATA 0x9c
0000            136   _DAC3H          DATA 0x8e
0000            137   _DAC3L          DATA 0x8d
0000            138   _DACGCF0        DATA 0x88
0000            139   _DACGCF1        DATA 0x98
0000            140   _DACGCF2        DATA 0xa2
0000            141   _DERIVID        DATA 0xad
0000            142   _DEVICEID       DATA 0xb5
0000            143   _DPH            DATA 0x83
0000            144   _DPL            DATA 0x82
0000            145   _EIE1           DATA 0xe6
0000            146   _EIE2           DATA 0xf3
0000            147   _EIP1           DATA 0xbb
0000            148   _EIP1H          DATA 0xee
0000            149   _EIP2           DATA 0xed
0000            150   _EIP2H          DATA 0xf6
0000            151   _EMI0CN         DATA 0xe7
0000            152   _FLKEY          DATA 0xb7
0000            153   _HFO0CAL        DATA 0xc7
0000            154   _HFO1CAL        DATA 0xd6
0000            155   _HFOCN          DATA 0xef
0000            156   _I2C0ADM        DATA 0xff
0000            157   _I2C0CN0        DATA 0xba
0000            158   _I2C0DIN        DATA 0xbc
0000            159   _I2C0DOUT       DATA 0xbb
0000            160   _I2C0FCN0       DATA 0xad
0000            161   _I2C0FCN1       DATA 0xab
0000            162   _I2C0FCT        DATA 0xf5
0000            163   _I2C0SLAD       DATA 0xbd
0000            164   _I2C0STAT       DATA 0xb9
0000            165   _IE             DATA 0xa8
0000            166   _IP             DATA 0xb8
0000            167   _IPH            DATA 0xf2
0000            168   _IT01CF         DATA 0xe4
0000            169   _LFO0CN         DATA 0xb1
0000            170   _P0             DATA 0x80
0000            171   _P0MASK         DATA 0xfe
0000            172   _P0MAT          DATA 0xfd
0000            173   _P0MDIN         DATA 0xf1
0000            174   _P0MDOUT        DATA 0xa4
0000            175   _P0SKIP         DATA 0xd4
0000            176   _P1             DATA 0x90
0000            177   _P1MASK         DATA 0xee
0000            178   _P1MAT          DATA 0xed
0000            179   _P1MDIN         DATA 0xf2
0000            180   _P1MDOUT        DATA 0xa5
0000            181   _P1SKIP         DATA 0xd5
0000            182   _P2             DATA 0xa0
0000            183   _P2MASK         DATA 0xfc
0000            184   _P2MAT          DATA 0xfb
0000            185   _P2MDIN         DATA 0xf3
0000            186   _P2MDOUT        DATA 0xa6
0000            187   _P2SKIP         DATA 0xcc
0000            188   _P3             DATA 0xb0
0000            189   _P3MDIN         DATA 0xf4
0000            190   _P3MDOUT        DATA 0x9c
0000            191   _PCA0CENT       DATA 0x9e
0000            192   _PCA0CLR        DATA 0x9c
0000            193   _PCA0CN0        DATA 0xd8
0000            194   _PCA0CPH0       DATA 0xfc
0000            195   _PCA0CPH1       DATA 0xea
0000            196   _PCA0CPH2       DATA 0xec
0000            197   _PCA0CPH3       DATA 0xf5
0000            198   _PCA0CPH4       DATA 0x85
0000            199   _PCA0CPH5       DATA 0xde
0000            200   _PCA0CPL0       DATA 0xfb
0000            201   _PCA0CPL1       DATA 0xe9
0000            202   _PCA0CPL2       DATA 0xeb
0000            203   _PCA0CPL3       DATA 0xf4
0000            204   _PCA0CPL4       DATA 0x84
0000            205   _PCA0CPL5       DATA 0xdd
0000            206   _PCA0CPM0       DATA 0xda
0000            207   _PCA0CPM1       DATA 0xdb
0000            208   _PCA0CPM2       DATA 0xdc
0000            209   _PCA0CPM3       DATA 0xae
0000            210   _PCA0CPM4       DATA 0xaf
0000            211   _PCA0CPM5       DATA 0xcc
0000            212   _PCA0H          DATA 0xfa
0000            213   _PCA0L          DATA 0xf9
0000            214   _PCA0MD         DATA 0xd9
0000            215   _PCA0POL        DATA 0x96
0000            216   _PCA0PWM        DATA 0xf7
0000            217   _PCON0          DATA 0x87
0000            218   _PCON1          DATA 0xcd
0000            219   _PFE0CN         DATA 0xc1
0000            220   _PRTDRV         DATA 0xf6
0000            221   _PSCTL          DATA 0x8f
0000            222   _PSTAT0         DATA 0xaa
0000            223   _PSW            DATA 0xd0
0000            224   _REF0CN         DATA 0xd1
0000            225   _REG0CN         DATA 0xc9
0000            226   _REVID          DATA 0xb6
0000            227   _RSTSRC         DATA 0xef
0000            228   _SBCON1         DATA 0x94
0000            229   _SBRLH1         DATA 0x96
0000            230   _SBRLL1         DATA 0x95
0000            231   _SBUF           DATA 0x99
0000            232   _SBUF0          DATA 0x99
0000            233   _SBUF1          DATA 0x92
0000            234   _SCON           DATA 0x98
0000            235   _SCON0          DATA 0x98
0000            236   _SCON1          DATA 0xc8
0000            237   _SFRPAGE        DATA 0xa7
0000            238   _SFRPGCN        DATA 0xbc
0000            239   _SFRSTACK       DATA 0xd7
0000            240   _SMB0ADM        DATA 0xd6
0000            241   _SMB0ADR        DATA 0xd7
0000            242   _SMB0CF         DATA 0xc1
0000            243   _SMB0CN0        DATA 0xc0
0000            244   _SMB0DAT        DATA 0xc2
0000            245   _SMB0FCN0       DATA 0xc3
0000            246   _SMB0FCN1       DATA 0xc4
0000            247   _SMB0FCT        DATA 0xef
0000            248   _SMB0RXLN       DATA 0xc5
0000            249   _SMB0TC         DATA 0xac
0000            250   _SMOD1          DATA 0x93
0000            251   _SP             DATA 0x81
0000            252   _SPI0CFG        DATA 0xa1
0000            253   _SPI0CKR        DATA 0xa2
0000            254   _SPI0CN0        DATA 0xf8
0000            255   _SPI0DAT        DATA 0xa3
0000            256   _SPI0FCN0       DATA 0x9a
0000            257   _SPI0FCN1       DATA 0x9b
0000            258   _SPI0FCT        DATA 0xf7
0000            259   _SPI0PCF        DATA 0xdf
0000            260   _TCON           DATA 0x88
0000            261   _TH0            DATA 0x8c
0000            262   _TH1            DATA 0x8d
0000            263   _TL0            DATA 0x8a
0000            264   _TL1            DATA 0x8b
0000            265   _TMOD           DATA 0x89
0000            266   _TMR2CN0        DATA 0xc8
0000            267   _TMR2CN1        DATA 0xfd
0000            268   _TMR2H          DATA 0xcf
0000            269   _TMR2L          DATA 0xce
0000            270   _TMR2RLH        DATA 0xcb
0000            271   _TMR2RLL        DATA 0xca
0000            272   _TMR3CN0        DATA 0x91
0000            273   _TMR3CN1        DATA 0xfe
0000            274   _TMR3H          DATA 0x95
0000            275   _TMR3L          DATA 0x94
0000            276   _TMR3RLH        DATA 0x93
0000            277   _TMR3RLL        DATA 0x92
0000            278   _TMR4CN0        DATA 0x98
0000            279   _TMR4CN1        DATA 0xff
0000            280   _TMR4H          DATA 0xa5
0000            281   _TMR4L          DATA 0xa4
0000            282   _TMR4RLH        DATA 0xa3
0000            283   _TMR4RLL        DATA 0xa2
0000            284   _TMR5CN0        DATA 0xc0
0000            285   _TMR5CN1        DATA 0xf1
0000            286   _TMR5H          DATA 0xd5
0000            287   _TMR5L          DATA 0xd4
0000            288   _TMR5RLH        DATA 0xd3
0000            289   _TMR5RLL        DATA 0xd2
0000            290   _UART0PCF       DATA 0xd9
0000            291   _UART1FCN0      DATA 0x9d
0000            292   _UART1FCN1      DATA 0xd8
0000            293   _UART1FCT       DATA 0xfa
0000            294   _UART1LIN       DATA 0x9e
0000            295   _UART1PCF       DATA 0xda
0000            296   _VDM0CN         DATA 0xff
0000            297   _WDTCN          DATA 0x97
0000            298   _XBR0           DATA 0xe1
0000            299   _XBR1           DATA 0xe2
0000            300   _XBR2           DATA 0xe3
0000            301   _XOSC0CN        DATA 0x86
0000            302   _DPTR           DATA 0x8382
0000            303   _TMR2RL         DATA 0xcbca
0000            304   _TMR3RL         DATA 0x9392
0000            305   _TMR4RL         DATA 0xa3a2
0000            306   _TMR5RL         DATA 0xd3d2
0000            307   _TMR0           DATA 0x8c8a
0000            308   _TMR1           DATA 0x8d8b
0000            309   _TMR2           DATA 0xcfce
0000            310   _TMR3           DATA 0x9594
0000            311   _TMR4           DATA 0xa5a4
0000            312   _TMR5           DATA 0xd5d4
0000            313   _SBRL1          DATA 0x9695
0000            314   _PCA0           DATA 0xfaf9
0000            315   _PCA0CP0        DATA 0xfcfb
0000            316   _PCA0CP1        DATA 0xeae9
0000            317   _PCA0CP2        DATA 0xeceb
0000            318   _PCA0CP3        DATA 0xf5f4
0000            319   _PCA0CP4        DATA 0x8584
0000            320   _PCA0CP5        DATA 0xdedd
0000            321   _ADC0ASA        DATA 0xb6b5
0000            322   _ADC0GT         DATA 0xc4c3
0000            323   _ADC0           DATA 0xbebd
0000            324   _ADC0LT         DATA 0xc6c5
0000            325   _DAC0           DATA 0x8584
0000            326   _DAC1           DATA 0x8a89
0000            327   _DAC2           DATA 0x8c8b
0000            328   _DAC3           DATA 0x8e8d
0000            329   ;--------------------------------------------------------
0000            330   ; special function bits
0000            331   ;--------------------------------------------------------
0000            332   _ACC_0          BIT 0xe0
0000            333   _ACC_1          BIT 0xe1
0000            334   _ACC_2          BIT 0xe2
0000            335   _ACC_3          BIT 0xe3
0000            336   _ACC_4          BIT 0xe4
0000            337   _ACC_5          BIT 0xe5
0000            338   _ACC_6          BIT 0xe6
0000            339   _ACC_7          BIT 0xe7
0000            340   _TEMPE          BIT 0xe8
0000            341   _ADGN0          BIT 0xe9
0000            342   _ADGN1          BIT 0xea
0000            343   _ADWINT         BIT 0xeb
0000            344   _ADBUSY         BIT 0xec
0000            345   _ADINT          BIT 0xed
0000            346   _IPOEN          BIT 0xee
0000            347   _ADEN           BIT 0xef
0000            348   _B_0            BIT 0xf0
0000            349   _B_1            BIT 0xf1
0000            350   _B_2            BIT 0xf2
0000            351   _B_3            BIT 0xf3
0000            352   _B_4            BIT 0xf4
0000            353   _B_5            BIT 0xf5
0000            354   _B_6            BIT 0xf6
0000            355   _B_7            BIT 0xf7
0000            356   _C0FIF          BIT 0xe8
0000            357   _C0RIF          BIT 0xe9
0000            358   _C1FIF          BIT 0xea
0000            359   _C1RIF          BIT 0xeb
0000            360   _C2FIF          BIT 0xec
0000            361   _C2RIF          BIT 0xed
0000            362   _C3FIF          BIT 0xee
0000            363   _C3RIF          BIT 0xef
0000            364   _D1SRC0         BIT 0x88
0000            365   _D1SRC1         BIT 0x89
0000            366   _D1AMEN         BIT 0x8a
0000            367   _D01REFSL       BIT 0x8b
0000            368   _D3SRC0         BIT 0x8c
0000            369   _D3SRC1         BIT 0x8d
0000            370   _D3AMEN         BIT 0x8e
0000            371   _D23REFSL       BIT 0x8f
0000            372   _D0UDIS         BIT 0x98
0000            373   _D1UDIS         BIT 0x99
0000            374   _D2UDIS         BIT 0x9a
0000            375   _D3UDIS         BIT 0x9b
0000            376   _EX0            BIT 0xa8
0000            377   _ET0            BIT 0xa9
0000            378   _EX1            BIT 0xaa
0000            379   _ET1            BIT 0xab
0000            380   _ES0            BIT 0xac
0000            381   _ET2            BIT 0xad
0000            382   _ESPI0          BIT 0xae
0000            383   _EA             BIT 0xaf
0000            384   _PX0            BIT 0xb8
0000            385   _PT0            BIT 0xb9
0000            386   _PX1            BIT 0xba
0000            387   _PT1            BIT 0xbb
0000            388   _PS0            BIT 0xbc
0000            389   _PT2            BIT 0xbd
0000            390   _PSPI0          BIT 0xbe
0000            391   _P0_0           BIT 0x80
0000            392   _P0_1           BIT 0x81
0000            393   _P0_2           BIT 0x82
0000            394   _P0_3           BIT 0x83
0000            395   _P0_4           BIT 0x84
0000            396   _P0_5           BIT 0x85
0000            397   _P0_6           BIT 0x86
0000            398   _P0_7           BIT 0x87
0000            399   _P1_0           BIT 0x90
0000            400   _P1_1           BIT 0x91
0000            401   _P1_2           BIT 0x92
0000            402   _P1_3           BIT 0x93
0000            403   _P1_4           BIT 0x94
0000            404   _P1_5           BIT 0x95
0000            405   _P1_6           BIT 0x96
0000            406   _P1_7           BIT 0x97
0000            407   _P2_0           BIT 0xa0
0000            408   _P2_1           BIT 0xa1
0000            409   _P2_2           BIT 0xa2
0000            410   _P2_3           BIT 0xa3
0000            411   _P2_4           BIT 0xa4
0000            412   _P2_5           BIT 0xa5
0000            413   _P2_6           BIT 0xa6
0000            414   _P3_0           BIT 0xb0
0000            415   _P3_1           BIT 0xb1
0000            416   _P3_2           BIT 0xb2
0000            417   _P3_3           BIT 0xb3
0000            418   _P3_4           BIT 0xb4
0000            419   _P3_7           BIT 0xb7
0000            420   _CCF0           BIT 0xd8
0000            421   _CCF1           BIT 0xd9
0000            422   _CCF2           BIT 0xda
0000            423   _CCF3           BIT 0xdb
0000            424   _CCF4           BIT 0xdc
0000            425   _CCF5           BIT 0xdd
0000            426   _CR             BIT 0xde
0000            427   _CF             BIT 0xdf
0000            428   _PARITY         BIT 0xd0
0000            429   _F1             BIT 0xd1
0000            430   _OV             BIT 0xd2
0000            431   _RS0            BIT 0xd3
0000            432   _RS1            BIT 0xd4
0000            433   _F0             BIT 0xd5
0000            434   _AC             BIT 0xd6
0000            435   _CY             BIT 0xd7
0000            436   _RI             BIT 0x98
0000            437   _TI             BIT 0x99
0000            438   _RB8            BIT 0x9a
0000            439   _TB8            BIT 0x9b
0000            440   _REN            BIT 0x9c
0000            441   _CE             BIT 0x9d
0000            442   _SMODE          BIT 0x9e
0000            443   _RI1            BIT 0xc8
0000            444   _TI1            BIT 0xc9
0000            445   _RBX1           BIT 0xca
0000            446   _TBX1           BIT 0xcb
0000            447   _REN1           BIT 0xcc
0000            448   _PERR1          BIT 0xcd
0000            449   _OVR1           BIT 0xce
0000            450   _SI             BIT 0xc0
0000            451   _ACK            BIT 0xc1
0000            452   _ARBLOST        BIT 0xc2
0000            453   _ACKRQ          BIT 0xc3
0000            454   _STO            BIT 0xc4
0000            455   _STA            BIT 0xc5
0000            456   _TXMODE         BIT 0xc6
0000            457   _MASTER         BIT 0xc7
0000            458   _SPIEN          BIT 0xf8
0000            459   _TXNF           BIT 0xf9
0000            460   _NSSMD0         BIT 0xfa
0000            461   _NSSMD1         BIT 0xfb
0000            462   _RXOVRN         BIT 0xfc
0000            463   _MODF           BIT 0xfd
0000            464   _WCOL           BIT 0xfe
0000            465   _SPIF           BIT 0xff
0000            466   _IT0            BIT 0x88
0000            467   _IE0            BIT 0x89
0000            468   _IT1            BIT 0x8a
0000            469   _IE1            BIT 0x8b
0000            470   _TR0            BIT 0x8c
0000            471   _TF0            BIT 0x8d
0000            472   _TR1            BIT 0x8e
0000            473   _TF1            BIT 0x8f
0000            474   _T2XCLK0        BIT 0xc8
0000            475   _T2XCLK1        BIT 0xc9
0000            476   _TR2            BIT 0xca
0000            477   _T2SPLIT        BIT 0xcb
0000            478   _TF2CEN         BIT 0xcc
0000            479   _TF2LEN         BIT 0xcd
0000            480   _TF2L           BIT 0xce
0000            481   _TF2H           BIT 0xcf
0000            482   _T4XCLK0        BIT 0x98
0000            483   _T4XCLK1        BIT 0x99
0000            484   _TR4            BIT 0x9a
0000            485   _T4SPLIT        BIT 0x9b
0000            486   _TF4CEN         BIT 0x9c
0000            487   _TF4LEN         BIT 0x9d
0000            488   _TF4L           BIT 0x9e
0000            489   _TF4H           BIT 0x9f
0000            490   _T5XCLK0        BIT 0xc0
0000            491   _T5XCLK1        BIT 0xc1
0000            492   _TR5            BIT 0xc2
0000            493   _T5SPLIT        BIT 0xc3
0000            494   _TF5CEN         BIT 0xc4
0000            495   _TF5LEN         BIT 0xc5
0000            496   _TF5L           BIT 0xc6
0000            497   _TF5H           BIT 0xc7
0000            498   _RIE            BIT 0xd8
0000            499   _RXTO0          BIT 0xd9
0000            500   _RXTO1          BIT 0xda
0000            501   _RFRQ           BIT 0xdb
0000            502   _TIE            BIT 0xdc
0000            503   _TXHOLD         BIT 0xdd
0000            504   _TXNF1          BIT 0xde
0000            505   _TFRQ           BIT 0xdf
0000            506   ;--------------------------------------------------------
0000            507   ; overlayable register banks
0000            508   ;--------------------------------------------------------
0000            509            rbank0 segment data overlay
0000            510   ;--------------------------------------------------------
0000            511   ; internal ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_DSEG
0000            514   _pwm_count:
0000            515            ds 1
0001            516   _pwm_count1:
0001            517            ds 1
0002            518   _pwm_count2:
0002            519            ds 1
0003            520   _pwm_count3:
0003            521            ds 1
0004            522   _pwmSig1:
0004            523            ds 2
0006            524   _pwmSig2:
0006            525            ds 2
0008            526   _pwmSig3:
0008            527            ds 2
000A            528   _pwmSig4:
000A            529            ds 2
000C            530   _pwmSig5:
000C            531            ds 2
000E            532   _pwmSig6:
000E            533            ds 2
0010            534   _cartMoveF:
0010            535            ds 2
0012            536   _cartMoveB:
0012            537            ds 2
0014            538   _flag:
0014            539            ds 2
0016            540   _claw_flag:
0016            541            ds 2
0018            542   _stop:
0018            543            ds 8
0020            544   _forward:
0020            545            ds 8
0028            546   _backward:
0028            547            ds 8
0030            548   _left:
0030            549            ds 8
0038            550   _right:
0038            551            ds 8
0040            552   _command:
0040            553            ds 8
0048            554   _checkTime_overflow_count_1_73:
0048            555            ds 2
004A            556   ;--------------------------------------------------------
004A            557   ; overlayable items in internal ram 
004A            558   ;--------------------------------------------------------
0000            559            rseg    R_OSEG
0000            560            rseg    R_OSEG
0000            561            rseg    R_OSEG
0000            562   _InitPinADC_PARM_2:
0000            563            ds 1
0001            564   ;--------------------------------------------------------
0001            565   ; indirectly addressable internal ram data
0001            566   ;--------------------------------------------------------
0000            567            rseg R_ISEG
0000            568   ;--------------------------------------------------------
0000            569   ; absolute internal ram data
0000            570   ;--------------------------------------------------------
0000            571            DSEG
0000            572   ;--------------------------------------------------------
0000            573   ; bit data
0000            574   ;--------------------------------------------------------
0000            575            rseg R_BSEG
0000            576   _Timer2_ISR_sloc0_1_0:
0000            577            DBIT    1
0001            578   ;--------------------------------------------------------
0001            579   ; paged external ram data
0001            580   ;--------------------------------------------------------
0000            581            rseg R_PSEG
0000            582   ;--------------------------------------------------------
0000            583   ; external ram data
0000            584   ;--------------------------------------------------------
0000            585            rseg R_XSEG
0000            586   ;--------------------------------------------------------
0000            587   ; absolute external ram data
0000            588   ;--------------------------------------------------------
0000            589            XSEG
0000            590   ;--------------------------------------------------------
0000            591   ; external initialized ram data
0000            592   ;--------------------------------------------------------
0000            593            rseg R_IXSEG
0000            594            rseg R_HOME
0000            595            rseg R_GSINIT
0000            596            rseg R_CSEG
0000            597   ;--------------------------------------------------------
0000            598   ; Reset entry point and interrupt vectors
0000            599   ;--------------------------------------------------------
0000            600            CSEG at 0x0000
0000 020100     601            ljmp    _crt0
002B            602            CSEG at 0x002b
002B 020100     603            ljmp    _Timer2_ISR
002E            604   ;--------------------------------------------------------
002E            605   ; global & static initialisations
002E            606   ;--------------------------------------------------------
0000            607            rseg R_HOME
0000            608            rseg R_GSINIT
0000            609            rseg R_GSINIT
0000            610   ;--------------------------------------------------------
0000            611   ; data variables initialization
0000            612   ;--------------------------------------------------------
0000            613            rseg R_DINIT
0000            614   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:50: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 752000     615            mov     _pwm_count,#0x00
0003            616   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:51: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75E000     617            mov     _pwm_count1,#0x00
0006            618   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:52: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 75A000     619            mov     _pwm_count2,#0x00
0009            620   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:53: volatile unsigned char pwm_count3 = 0; //
0009 756000     621            mov     _pwm_count3,#0x00
000C            622   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:68: volatile int flag = 0;
000C E4         623            clr     a
000D F5F0       624            mov     _flag,a
000F F5F1       625            mov     (_flag + 1),a
0011            626   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:69: volatile int claw_flag = 0;
0011 E4         627            clr     a
0012 F5B0       628            mov     _claw_flag,a
0014 F5B1       629            mov     (_claw_flag + 1),a
0016            630   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:70: int stop[]={1,0,0,0};
0016 757001     631            mov     _stop,#0x01
0019 757100     632            mov     (_stop + 1),#0x00
001C 757200     633            mov     (_stop + 0x0002),#0x00
001F 757300     634            mov     ((_stop + 0x0002) + 1),#0x00
0022 757400     635            mov     (_stop + 0x0004),#0x00
0025 757500     636            mov     ((_stop + 0x0004) + 1),#0x00
0028 757600     637            mov     (_stop + 0x0006),#0x00
002B 757700     638            mov     ((_stop + 0x0006) + 1),#0x00
002E            639   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:71: int forward[]={1,1,1,1};
002E 753001     640            mov     _forward,#0x01
0031 753100     641            mov     (_forward + 1),#0x00
0034 753201     642            mov     (_forward + 0x0002),#0x01
0037 753300     643            mov     ((_forward + 0x0002) + 1),#0x00
003A 753401     644            mov     (_forward + 0x0004),#0x01
003D 753500     645            mov     ((_forward + 0x0004) + 1),#0x00
0040 753601     646            mov     (_forward + 0x0006),#0x01
0043 753700     647            mov     ((_forward + 0x0006) + 1),#0x00
0046            648   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:72: int backward[]={1,0,0,0};
0046 75F001     649            mov     _backward,#0x01
0049 75F100     650            mov     (_backward + 1),#0x00
004C 75F200     651            mov     (_backward + 0x0002),#0x00
004F 75F300     652            mov     ((_backward + 0x0002) + 1),#0x00
0052 75F400     653            mov     (_backward + 0x0004),#0x00
0055 75F500     654            mov     ((_backward + 0x0004) + 1),#0x00
0058 75F600     655            mov     (_backward + 0x0006),#0x00
005B 75F700     656            mov     ((_backward + 0x0006) + 1),#0x00
005E            657   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:73: int left[]={1,0,1,0};
005E 75B001     658            mov     _left,#0x01
0061 75B100     659            mov     (_left + 1),#0x00
0064 75B200     660            mov     (_left + 0x0002),#0x00
0067 75B300     661            mov     ((_left + 0x0002) + 1),#0x00
006A 75B401     662            mov     (_left + 0x0004),#0x01
006D 75B500     663            mov     ((_left + 0x0004) + 1),#0x00
0070 75B600     664            mov     (_left + 0x0006),#0x00
0073 75B700     665            mov     ((_left + 0x0006) + 1),#0x00
0076            666   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:74: int right[]={1,1,0,1};
0076 757001     667            mov     _right,#0x01
0079 757100     668            mov     (_right + 1),#0x00
007C 757201     669            mov     (_right + 0x0002),#0x01
007F 757300     670            mov     ((_right + 0x0002) + 1),#0x00
0082 757400     671            mov     (_right + 0x0004),#0x00
0085 757500     672            mov     ((_right + 0x0004) + 1),#0x00
0088 757601     673            mov     (_right + 0x0006),#0x01
008B 757700     674            mov     ((_right + 0x0006) + 1),#0x00
008E            675   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:76: int command[4] = {0,0,0,0};
008E 753000     676            mov     _command,#0x00
0091 753100     677            mov     (_command + 1),#0x00
0094 753200     678            mov     (_command + 0x0002),#0x00
0097 753300     679            mov     ((_command + 0x0002) + 1),#0x00
009A 753400     680            mov     (_command + 0x0004),#0x00
009D 753500     681            mov     ((_command + 0x0004) + 1),#0x00
00A0 753600     682            mov     (_command + 0x0006),#0x00
00A3 753700     683            mov     ((_command + 0x0006) + 1),#0x00
00A6            684            ; The linker places a 'ret' at the end of segment R_DINIT.
00A6            685   ;--------------------------------------------------------
00A6            686   ; code
00A6            687   ;--------------------------------------------------------
0000            688            rseg R_CSEG
0000            689   ;------------------------------------------------------------
0000            690   ;Allocation info for local variables in function '_c51_external_startup'
0000            691   ;------------------------------------------------------------
0000            692   ;------------------------------------------------------------
0000            693   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:78: char _c51_external_startup(void)
0000            694   ;        -----------------------------------------
0000            695   ;         function _c51_external_startup
0000            696   ;        -----------------------------------------
0000            697   __c51_external_startup:
0000            698            using   0
0000            699   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:81: SFRPAGE = 0x00;
0000 75A700     700            mov     _SFRPAGE,#0x00
0003            701   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:82: WDTCN = 0xDE; //First key
0003 7597DE     702            mov     _WDTCN,#0xDE
0006            703   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:83: WDTCN = 0xAD; //Second key
0006 7597AD     704            mov     _WDTCN,#0xAD
0009            705   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:85: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     706            mov     _VDM0CN,#0x80
000C            707   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:86: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     708            mov     _RSTSRC,#0x06
000F            709   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:93: SFRPAGE = 0x10;
000F 75A710     710            mov     _SFRPAGE,#0x10
0012            711   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:94: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     712            mov     _PFE0CN,#0x20
0015            713   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:95: SFRPAGE = 0x00;
0015 75A700     714            mov     _SFRPAGE,#0x00
0018            715   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:116: CLKSEL = 0x00;
0018 75A900     716            mov     _CLKSEL,#0x00
001B            717   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:117: CLKSEL = 0x00;
001B 75A900     718            mov     _CLKSEL,#0x00
001E            719   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:118: while ((CLKSEL & 0x80) == 0);
001E            720   L002001?:
001E E5A9       721            mov     a,_CLKSEL
0020 30E708     722            jnb     acc.7,L002001?
0023            723   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:119: CLKSEL = 0x03;
0023 75A903     724            mov     _CLKSEL,#0x03
0026            725   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:120: CLKSEL = 0x03;
0026 75A903     726            mov     _CLKSEL,#0x03
0029            727   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:121: while ((CLKSEL & 0x80) == 0);
0029            728   L002004?:
0029 E5A9       729            mov     a,_CLKSEL
002B 30E788     730            jnb     acc.7,L002004?
002E            731   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:126: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     732            orl     _P0MDOUT,#0x10
0031            733   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:127: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     734            mov     _XBR0,#0x01
0034            735   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:128: XBR1 = 0X00;
0034 75E200     736            mov     _XBR1,#0x00
0037            737   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:129: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     738            mov     _XBR2,#0x40
003A            739   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:135: SCON0 = 0x10;
003A 759810     740            mov     _SCON0,#0x10
003D            741   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:136: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     742            mov     _TH1,#0xE6
0040            743   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:137: TL1 = TH1;      // Init Timer1
0040 858D8B     744            mov     _TL1,_TH1
0043            745   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:138: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     746            anl     _TMOD,#0x0F
0046            747   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:139: TMOD |= 0x20;
0046 438920     748            orl     _TMOD,#0x20
0049            749   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:140: TR1 = 1; // START Timer1
0049 D28E       750            setb    _TR1
004B            751   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:141: TI = 1;  // Indicate TX0 ready
004B D299       752            setb    _TI
004D            753   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:144: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     754            mov     _TMR2CN0,#0x00
0050            755   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:145: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     756            orl     _CKCON0,#0x10
0053            757   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:146: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     758            mov     _TMR2RL,#0xE0
0056 75CBE3     759            mov     (_TMR2RL >> 8),#0xE3
0059            760   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:147: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     761            mov     _TMR2,#0xFF
005C 75CFFF     762            mov     (_TMR2 >> 8),#0xFF
005F            763   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:148: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       764            setb    _ET2
0061            765   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:149: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       766            setb    _TR2
0063            767   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:166: EA = 1; // Enable interrupts
0063 D2AF       768            setb    _EA
0065            769   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:169: return 0;
0065 758200     770            mov     dpl,#0x00
0068 22         771            ret
0069            772   ;------------------------------------------------------------
0069            773   ;Allocation info for local variables in function 'Timer3us'
0069            774   ;------------------------------------------------------------
0069            775   ;us                        Allocated to registers r2 r3 
0069            776   ;i                         Allocated to registers r4 r5 
0069            777   ;------------------------------------------------------------
0069            778   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:171: void Timer3us(unsigned int us)
0069            779   ;        -----------------------------------------
0069            780   ;         function Timer3us
0069            781   ;        -----------------------------------------
0069            782   _Timer3us:
0069 AA82       783            mov     r2,dpl
006B AB83       784            mov     r3,dph
006D            785   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:176: CKCON0|=0b_0100_0000;
006D 438E40     786            orl     _CKCON0,#0x40
0070            787   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:178: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     788            mov     _TMR3RL,#0xB8
0073 7593FF     789            mov     (_TMR3RL >> 8),#0xFF
0076            790   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:179: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     791            mov     _TMR3,_TMR3RL
0079 859395     792            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            793   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:181: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     794            mov     _TMR3CN0,#0x04
007F            795   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:182: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       796            mov     r4,#0x00
0081 7D00       797            mov     r5,#0x00
0083            798   L003004?:
0083 C3         799            clr     c
0084 EC         800            mov     a,r4
0085 9A         801            subb    a,r2
0086 ED         802            mov     a,r5
0087 9B         803            subb    a,r3
0088 5001       804            jnc     L003007?
008A            805   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:184: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            806   L003001?:
008A E591       807            mov     a,_TMR3CN0
008C 30E7C8     808            jnb     acc.7,L003001?
008F            809   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:185: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     810            anl     _TMR3CN0,#0x7F
0092            811   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:182: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         812            inc     r4
0093 BC0048     813            cjne    r4,#0x00,L003004?
0096 0D         814            inc     r5
0097 8001       815            sjmp    L003004?
0099            816   L003007?:
0099            817   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:187: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     818            mov     _TMR3CN0,#0x00
009C 22         819            ret
009D            820   ;------------------------------------------------------------
009D            821   ;Allocation info for local variables in function 'waitms'
009D            822   ;------------------------------------------------------------
009D            823   ;ms                        Allocated to registers r2 r3 
009D            824   ;j                         Allocated to registers r4 r5 
009D            825   ;k                         Allocated to registers r6 
009D            826   ;------------------------------------------------------------
009D            827   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:189: void waitms (unsigned int ms)
009D            828   ;        -----------------------------------------
009D            829   ;         function waitms
009D            830   ;        -----------------------------------------
009D            831   _waitms:
009D AA82       832            mov     r2,dpl
009F AB83       833            mov     r3,dph
00A1            834   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:193: for(j=0; j<ms; j++)
00A1 7C00       835            mov     r4,#0x00
00A3 7D00       836            mov     r5,#0x00
00A5            837   L004005?:
00A5 C3         838            clr     c
00A6 EC         839            mov     a,r4
00A7 9A         840            subb    a,r2
00A8 ED         841            mov     a,r5
00A9 9B         842            subb    a,r3
00AA 5001       843            jnc     L004009?
00AC            844   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:194: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       845            mov     r6,#0x00
00AE            846   L004001?:
00AE BE04C8     847            cjne    r6,#0x04,L004018?
00B1            848   L004018?:
00B1 5001       849            jnc     L004007?
00B3 9000FA     850            mov     dptr,#0x00FA
00B6 C002       851            push    ar2
00B8 C003       852            push    ar3
00BA C004       853            push    ar4
00BC C005       854            push    ar5
00BE C006       855            push    ar6
00C0 120100     856            lcall   _Timer3us
00C3 D006       857            pop     ar6
00C5 D005       858            pop     ar5
00C7 D004       859            pop     ar4
00C9 D003       860            pop     ar3
00CB D002       861            pop     ar2
00CD 0E         862            inc     r6
00CE 8001       863            sjmp    L004001?
00D0            864   L004007?:
00D0            865   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:193: for(j=0; j<ms; j++)
00D0 0C         866            inc     r4
00D1 BC0008     867            cjne    r4,#0x00,L004005?
00D4 0D         868            inc     r5
00D5 8001       869            sjmp    L004005?
00D7            870   L004009?:
00D7 22         871            ret
00D8            872   ;------------------------------------------------------------
00D8            873   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            874   ;------------------------------------------------------------
00D8            875   ;pin                       Allocated to registers 
00D8            876   ;------------------------------------------------------------
00D8            877   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:197: unsigned int ADC_at_Pin(unsigned char pin)
00D8            878   ;        -----------------------------------------
00D8            879   ;         function ADC_at_Pin
00D8            880   ;        -----------------------------------------
00D8            881   _ADC_at_Pin:
00D8 8582BB     882            mov     _ADC0MX,dpl
00DB            883   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:200: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       884            setb    _ADBUSY
00DD            885   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:201: while (ADBUSY); // Wait for dummy conversion to finish
00DD            886   L005001?:
00DD 20EC48     887            jb      _ADBUSY,L005001?
00E0            888   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:202: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       889            setb    _ADBUSY
00E2            890   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:203: while (ADBUSY); // Wait for conversion to complete
00E2            891   L005004?:
00E2 20EC88     892            jb      _ADBUSY,L005004?
00E5            893   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:204: return (ADC0);
00E5 85BD82     894            mov     dpl,_ADC0
00E8 85BE83     895            mov     dph,(_ADC0 >> 8)
00EB 22         896            ret
00EC            897   ;------------------------------------------------------------
00EC            898   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            899   ;------------------------------------------------------------
00EC            900   ;------------------------------------------------------------
00EC            901   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:208: void Timer2_ISR(void) interrupt 5
00EC            902   ;        -----------------------------------------
00EC            903   ;         function Timer2_ISR
00EC            904   ;        -----------------------------------------
00EC            905   _Timer2_ISR:
00EC C0E0       906            push    acc
00EE C002       907            push    ar2
00F0 C003       908            push    ar3
00F2 C0D0       909            push    psw
00F4 75D000     910            mov     psw,#0x00
00F7            911   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:210: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       912            clr     _TF2H
00F9            913   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:212: pwm_count++;
00F9 0520       914            inc     _pwm_count
00FB            915   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:213: if (pwm_count>100)
00FB E520       916            mov     a,_pwm_count
00FD 249B       917            add     a,#0xff - 0x64
00FF 5001       918            jnc     L006002?
0101            919   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:214: pwm_count = 0;
0101 752000     920            mov     _pwm_count,#0x00
0104            921   L006002?:
0104            922   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:217: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AA20       923            mov     r2,_pwm_count
0106 7B00       924            mov     r3,#0x00
0108 C3         925            clr     c
0109 E520       926            mov     a,_pwmSig1
010B 9A         927            subb    a,r2
010C E521       928            mov     a,(_pwmSig1 + 1)
010E 9B         929            subb    a,r3
010F 9288       930            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         931            cpl     c
0112 9294       932            mov     _P1_4,c
0114            933   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:218: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AA20       934            mov     r2,_pwm_count
0116 7B00       935            mov     r3,#0x00
0118 C3         936            clr     c
0119 E5E0       937            mov     a,_pwmSig2
011B 9A         938            subb    a,r2
011C E5E1       939            mov     a,(_pwmSig2 + 1)
011E 9B         940            subb    a,r3
011F 9288       941            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         942            cpl     c
0122 9295       943            mov     _P1_5,c
0124            944   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:220: motorL1 = pwm_count>pwmSig1 ? 0 : 1;
0124 AA20       945            mov     r2,_pwm_count
0126 7B00       946            mov     r3,#0x00
0128 C3         947            clr     c
0129 E520       948            mov     a,_pwmSig1
012B 9A         949            subb    a,r2
012C E521       950            mov     a,(_pwmSig1 + 1)
012E 9B         951            subb    a,r3
012F 9288       952            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         953            cpl     c
0132 9292       954            mov     _P1_2,c
0134            955   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:221: motorL2 = pwm_count>pwmSig2 ? 0 : 1;
0134 AA20       956            mov     r2,_pwm_count
0136 7B00       957            mov     r3,#0x00
0138 C3         958            clr     c
0139 E5E0       959            mov     a,_pwmSig2
013B 9A         960            subb    a,r2
013C E5E1       961            mov     a,(_pwmSig2 + 1)
013E 9B         962            subb    a,r3
013F 9288       963            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         964            cpl     c
0142 9293       965            mov     _P1_3,c
0144 D0D0       966            pop     psw
0146 D003       967            pop     ar3
0148 D002       968            pop     ar2
014A D0E0       969            pop     acc
014C 32         970            reti
014D            971   ;        eliminated unneeded push/pop dpl
014D            972   ;        eliminated unneeded push/pop dph
014D            973   ;        eliminated unneeded push/pop b
014D            974   ;------------------------------------------------------------
014D            975   ;Allocation info for local variables in function 'InitADC'
014D            976   ;------------------------------------------------------------
014D            977   ;------------------------------------------------------------
014D            978   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:227: void InitADC(void)
014D            979   ;        -----------------------------------------
014D            980   ;         function InitADC
014D            981   ;        -----------------------------------------
014D            982   _InitADC:
014D            983   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:229: SFRPAGE = 0x00;
014D 75A700     984            mov     _SFRPAGE,#0x00
0150            985   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:230: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0150 75B280     986            mov     _ADC0CN1,#0x80
0153            987   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:231: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0153 75BCF8     988            mov     _ADC0CF0,#0xF8
0156            989   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:232: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0156 75B91E     990            mov     _ADC0CF1,#0x1E
0159            991   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:233: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0159 75E800     992            mov     _ADC0CN0,#0x00
015C            993   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:234: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
015C 75DF3F     994            mov     _ADC0CF2,#0x3F
015F            995   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:235: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
015F 75B300     996            mov     _ADC0CN2,#0x00
0162            997   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:236: ADEN = 1; // Enable ADC
0162 D2EF       998            setb    _ADEN
0164 22         999            ret
0165           1000   ;------------------------------------------------------------
0165           1001   ;Allocation info for local variables in function 'TIMER0_Init'
0165           1002   ;------------------------------------------------------------
0165           1003   ;------------------------------------------------------------
0165           1004   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:238: void TIMER0_Init(void)
0165           1005   ;        -----------------------------------------
0165           1006   ;         function TIMER0_Init
0165           1007   ;        -----------------------------------------
0165           1008   _TIMER0_Init:
0165           1009   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:240: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0165 5389F0    1010            anl     _TMOD,#0xF0
0168           1011   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:241: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0168 438901    1012            orl     _TMOD,#0x01
016B           1013   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:242: TR0 = 0; // Stop Timer/Counter 0
016B C28C      1014            clr     _TR0
016D 22        1015            ret
016E           1016   ;------------------------------------------------------------
016E           1017   ;Allocation info for local variables in function 'Volts_at_Pin'
016E           1018   ;------------------------------------------------------------
016E           1019   ;pin                       Allocated to registers r2 
016E           1020   ;------------------------------------------------------------
016E           1021   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:247: float Volts_at_Pin(unsigned char pin)
016E           1022   ;        -----------------------------------------
016E           1023   ;         function Volts_at_Pin
016E           1024   ;        -----------------------------------------
016E           1025   _Volts_at_Pin:
016E           1026   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:249: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
016E 120100    1027            lcall   _ADC_at_Pin
0171 120100    1028            lcall   ___uint2fs
0174 AA82      1029            mov     r2,dpl
0176 AB83      1030            mov     r3,dph
0178 ACF0      1031            mov     r4,b
017A FD        1032            mov     r5,a
017B C002      1033            push    ar2
017D C003      1034            push    ar3
017F C004      1035            push    ar4
0181 C005      1036            push    ar5
0183 906C8B    1037            mov     dptr,#0x6C8B
0186 75F053    1038            mov     b,#0x53
0189 7440      1039            mov     a,#0x40
018B 120100    1040            lcall   ___fsmul
018E AA82      1041            mov     r2,dpl
0190 AB83      1042            mov     r3,dph
0192 ACF0      1043            mov     r4,b
0194 FD        1044            mov     r5,a
0195 E581      1045            mov     a,sp
0197 24FC      1046            add     a,#0xfc
0199 F581      1047            mov     sp,a
019B E4        1048            clr     a
019C C0E0      1049            push    acc
019E 74FC      1050            mov     a,#0xFC
01A0 C0E0      1051            push    acc
01A2 747F      1052            mov     a,#0x7F
01A4 C0E0      1053            push    acc
01A6 7446      1054            mov     a,#0x46
01A8 C0E0      1055            push    acc
01AA 8A82      1056            mov     dpl,r2
01AC 8B83      1057            mov     dph,r3
01AE 8CF0      1058            mov     b,r4
01B0 ED        1059            mov     a,r5
01B1 120100    1060            lcall   ___fsdiv
01B4 AA82      1061            mov     r2,dpl
01B6 AB83      1062            mov     r3,dph
01B8 ACF0      1063            mov     r4,b
01BA FD        1064            mov     r5,a
01BB E581      1065            mov     a,sp
01BD 24FC      1066            add     a,#0xfc
01BF F581      1067            mov     sp,a
01C1 8A82      1068            mov     dpl,r2
01C3 8B83      1069            mov     dph,r3
01C5 8CF0      1070            mov     b,r4
01C7 ED        1071            mov     a,r5
01C8 22        1072            ret
01C9           1073   ;------------------------------------------------------------
01C9           1074   ;Allocation info for local variables in function 'InitPinADC'
01C9           1075   ;------------------------------------------------------------
01C9           1076   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01C9           1077   ;portno                    Allocated to registers r2 
01C9           1078   ;mask                      Allocated to registers r3 
01C9           1079   ;------------------------------------------------------------
01C9           1080   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:251: void InitPinADC(unsigned char portno, unsigned char pinno)
01C9           1081   ;        -----------------------------------------
01C9           1082   ;         function InitPinADC
01C9           1083   ;        -----------------------------------------
01C9           1084   _InitPinADC:
01C9 AA82      1085            mov     r2,dpl
01CB           1086   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:255: mask = 1 << pinno;
01CB 8550F0    1087            mov     b,_InitPinADC_PARM_2
01CE 05F0      1088            inc     b
01D0 7401      1089            mov     a,#0x01
01D2 8001      1090            sjmp    L010013?
01D4           1091   L010011?:
01D4 25E0      1092            add     a,acc
01D6           1093   L010013?:
01D6 D5F0C8    1094            djnz    b,L010011?
01D9 FB        1095            mov     r3,a
01DA           1096   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:257: SFRPAGE = 0x20;
01DA 75A720    1097            mov     _SFRPAGE,#0x20
01DD           1098   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:258: switch (portno)
01DD BA0008    1099            cjne    r2,#0x00,L010014?
01E0 8001      1100            sjmp    L010001?
01E2           1101   L010014?:
01E2 BA0188    1102            cjne    r2,#0x01,L010015?
01E5 8001      1103            sjmp    L010002?
01E7           1104   L010015?:
01E7           1105   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:260: case 0:
01E7 BA0208    1106            cjne    r2,#0x02,L010005?
01EA 8001      1107            sjmp    L010003?
01EC           1108   L010001?:
01EC           1109   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:261: P0MDIN &= (~mask); // Set pin as analog input
01EC EB        1110            mov     a,r3
01ED F4        1111            cpl     a
01EE FA        1112            mov     r2,a
01EF 52F1      1113            anl     _P0MDIN,a
01F1           1114   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:262: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01F1 EB        1115            mov     a,r3
01F2 42D4      1116            orl     _P0SKIP,a
01F4           1117   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:263: break;
01F4           1118   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:264: case 1:
01F4 8001      1119            sjmp    L010005?
01F6           1120   L010002?:
01F6           1121   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:265: P1MDIN &= (~mask); // Set pin as analog input
01F6 EB        1122            mov     a,r3
01F7 F4        1123            cpl     a
01F8 FA        1124            mov     r2,a
01F9 52F2      1125            anl     _P1MDIN,a
01FB           1126   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:266: P1SKIP |= mask; // Skip Crossbar decoding for this pin
01FB EB        1127            mov     a,r3
01FC 42D5      1128            orl     _P1SKIP,a
01FE           1129   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:267: break;
01FE           1130   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:268: case 2:
01FE 8001      1131            sjmp    L010005?
0200           1132   L010003?:
0200           1133   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:269: P2MDIN &= (~mask); // Set pin as analog input
0200 EB        1134            mov     a,r3
0201 F4        1135            cpl     a
0202 FA        1136            mov     r2,a
0203 52F3      1137            anl     _P2MDIN,a
0205           1138   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:270: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0205 EB        1139            mov     a,r3
0206 42CC      1140            orl     _P2SKIP,a
0208           1141   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:274: }
0208           1142   L010005?:
0208           1143   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:275: SFRPAGE = 0x00;
0208 75A700    1144            mov     _SFRPAGE,#0x00
020B 22        1145            ret
020C           1146   ;------------------------------------------------------------
020C           1147   ;Allocation info for local variables in function 'PWMforward'
020C           1148   ;------------------------------------------------------------
020C           1149   ;------------------------------------------------------------
020C           1150   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:284: void PWMforward(void) {
020C           1151   ;        -----------------------------------------
020C           1152   ;         function PWMforward
020C           1153   ;        -----------------------------------------
020C           1154   _PWMforward:
020C           1155   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:285: pwmSig1 = 99;
020C 752063    1156            mov     _pwmSig1,#0x63
020F E4        1157            clr     a
0210 F521      1158            mov     (_pwmSig1 + 1),a
0212           1159   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:286: pwmSig2 = 0;
0212           1160   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:288: pwmSig3 = 0;
0212 E4        1161            clr     a
0213 F5E0      1162            mov     _pwmSig2,a
0215 F5E1      1163            mov     (_pwmSig2 + 1),a
0217 F5A0      1164            mov     _pwmSig3,a
0219 F5A1      1165            mov     (_pwmSig3 + 1),a
021B           1166   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:289: pwmSig4 =99;
021B 757863    1167            mov     _pwmSig4,#0x63
021E E4        1168            clr     a
021F F579      1169            mov     (_pwmSig4 + 1),a
0221           1170   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:290: printf("Forward\n\r");
0221 7488      1171            mov     a,#__str_0
0223 C0E0      1172            push    acc
0225 74C1      1173            mov     a,#(__str_0 >> 8)
0227 C0E0      1174            push    acc
0229 7480      1175            mov     a,#0x80
022B C0E0      1176            push    acc
022D 120100    1177            lcall   _printf
0230 1581      1178            dec     sp
0232 1581      1179            dec     sp
0234 1581      1180            dec     sp
0236 22        1181            ret
0237           1182   ;------------------------------------------------------------
0237           1183   ;Allocation info for local variables in function 'PWMbackward'
0237           1184   ;------------------------------------------------------------
0237           1185   ;------------------------------------------------------------
0237           1186   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:293: void PWMbackward(void) {
0237           1187   ;        -----------------------------------------
0237           1188   ;         function PWMbackward
0237           1189   ;        -----------------------------------------
0237           1190   _PWMbackward:
0237           1191   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:294: pwmSig1 = 0;
0237 E4        1192            clr     a
0238 F520      1193            mov     _pwmSig1,a
023A F521      1194            mov     (_pwmSig1 + 1),a
023C           1195   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:295: pwmSig2 = 99;
023C 75E063    1196            mov     _pwmSig2,#0x63
023F E4        1197            clr     a
0240 F5E1      1198            mov     (_pwmSig2 + 1),a
0242           1199   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:297: pwmSig3 = 99;
0242 75A063    1200            mov     _pwmSig3,#0x63
0245 E4        1201            clr     a
0246 F5A1      1202            mov     (_pwmSig3 + 1),a
0248           1203   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:298: pwmSig4 = 0;
0248 E4        1204            clr     a
0249 F578      1205            mov     _pwmSig4,a
024B F579      1206            mov     (_pwmSig4 + 1),a
024D           1207   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:299: printf("Backward\n\r");
024D 7408      1208            mov     a,#__str_1
024F C0E0      1209            push    acc
0251 74C2      1210            mov     a,#(__str_1 >> 8)
0253 C0E0      1211            push    acc
0255 7480      1212            mov     a,#0x80
0257 C0E0      1213            push    acc
0259 120100    1214            lcall   _printf
025C 1581      1215            dec     sp
025E 1581      1216            dec     sp
0260 1581      1217            dec     sp
0262 22        1218            ret
0263           1219   ;------------------------------------------------------------
0263           1220   ;Allocation info for local variables in function 'PWMLeft'
0263           1221   ;------------------------------------------------------------
0263           1222   ;------------------------------------------------------------
0263           1223   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:302: void PWMLeft(void) {
0263           1224   ;        -----------------------------------------
0263           1225   ;         function PWMLeft
0263           1226   ;        -----------------------------------------
0263           1227   _PWMLeft:
0263           1228   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:303: pwmSig1 = 0;
0263           1229   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:304: pwmSig2 = 0;
0263 E4        1230            clr     a
0264 F520      1231            mov     _pwmSig1,a
0266 F521      1232            mov     (_pwmSig1 + 1),a
0268 F5E0      1233            mov     _pwmSig2,a
026A F5E1      1234            mov     (_pwmSig2 + 1),a
026C           1235   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:306: pwmSig3 = 70;
026C 75A046    1236            mov     _pwmSig3,#0x46
026F E4        1237            clr     a
0270 F5A1      1238            mov     (_pwmSig3 + 1),a
0272           1239   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:307: pwmSig4 = 0;
0272 E4        1240            clr     a
0273 F578      1241            mov     _pwmSig4,a
0275 F579      1242            mov     (_pwmSig4 + 1),a
0277           1243   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:308: printf("Left\n\r");
0277 7448      1244            mov     a,#__str_2
0279 C0E0      1245            push    acc
027B 74C2      1246            mov     a,#(__str_2 >> 8)
027D C0E0      1247            push    acc
027F 7480      1248            mov     a,#0x80
0281 C0E0      1249            push    acc
0283 120100    1250            lcall   _printf
0286 1581      1251            dec     sp
0288 1581      1252            dec     sp
028A 1581      1253            dec     sp
028C 22        1254            ret
028D           1255   ;------------------------------------------------------------
028D           1256   ;Allocation info for local variables in function 'PWMRight'
028D           1257   ;------------------------------------------------------------
028D           1258   ;------------------------------------------------------------
028D           1259   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:311: void PWMRight(void) {
028D           1260   ;        -----------------------------------------
028D           1261   ;         function PWMRight
028D           1262   ;        -----------------------------------------
028D           1263   _PWMRight:
028D           1264   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:312: pwmSig1 = 99;
028D 752063    1265            mov     _pwmSig1,#0x63
0290 E4        1266            clr     a
0291 F521      1267            mov     (_pwmSig1 + 1),a
0293           1268   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:313: pwmSig2 = 0;
0293           1269   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:315: pwmSig3 = 0;
0293           1270   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:316: pwmSig4 = 0;
0293 E4        1271            clr     a
0294 F5E0      1272            mov     _pwmSig2,a
0296 F5E1      1273            mov     (_pwmSig2 + 1),a
0298 F5A0      1274            mov     _pwmSig3,a
029A F5A1      1275            mov     (_pwmSig3 + 1),a
029C F578      1276            mov     _pwmSig4,a
029E F579      1277            mov     (_pwmSig4 + 1),a
02A0           1278   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:317: printf("Right\n\r");
02A0 7488      1279            mov     a,#__str_3
02A2 C0E0      1280            push    acc
02A4 74C2      1281            mov     a,#(__str_3 >> 8)
02A6 C0E0      1282            push    acc
02A8 7480      1283            mov     a,#0x80
02AA C0E0      1284            push    acc
02AC 120100    1285            lcall   _printf
02AF 1581      1286            dec     sp
02B1 1581      1287            dec     sp
02B3 1581      1288            dec     sp
02B5 22        1289            ret
02B6           1290   ;------------------------------------------------------------
02B6           1291   ;Allocation info for local variables in function 'PWMStop'
02B6           1292   ;------------------------------------------------------------
02B6           1293   ;------------------------------------------------------------
02B6           1294   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:320: void PWMStop(void) {
02B6           1295   ;        -----------------------------------------
02B6           1296   ;         function PWMStop
02B6           1297   ;        -----------------------------------------
02B6           1298   _PWMStop:
02B6           1299   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:321: pwmSig1 = 0;
02B6           1300   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:322: pwmSig2 = 0;
02B6           1301   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:324: pwmSig3 = 0;
02B6           1302   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:325: pwmSig4 = 0;
02B6 E4        1303            clr     a
02B7 F520      1304            mov     _pwmSig1,a
02B9 F521      1305            mov     (_pwmSig1 + 1),a
02BB F5E0      1306            mov     _pwmSig2,a
02BD F5E1      1307            mov     (_pwmSig2 + 1),a
02BF F5A0      1308            mov     _pwmSig3,a
02C1 F5A1      1309            mov     (_pwmSig3 + 1),a
02C3 F578      1310            mov     _pwmSig4,a
02C5 F579      1311            mov     (_pwmSig4 + 1),a
02C7           1312   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:326: printf("Stop\n\r");
02C7 74C8      1313            mov     a,#__str_4
02C9 C0E0      1314            push    acc
02CB 74C2      1315            mov     a,#(__str_4 >> 8)
02CD C0E0      1316            push    acc
02CF 7480      1317            mov     a,#0x80
02D1 C0E0      1318            push    acc
02D3 120100    1319            lcall   _printf
02D6 1581      1320            dec     sp
02D8 1581      1321            dec     sp
02DA 1581      1322            dec     sp
02DC 22        1323            ret
02DD           1324   ;------------------------------------------------------------
02DD           1325   ;Allocation info for local variables in function 'checkTime'
02DD           1326   ;------------------------------------------------------------
02DD           1327   ;time                      Allocated to registers r2 r3 r4 r5 
02DD           1328   ;overflow_count            Allocated with name '_checkTime_overflow_count_1_73'
02DD           1329   ;------------------------------------------------------------
02DD           1330   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:332: float checkTime (void) {
02DD           1331   ;        -----------------------------------------
02DD           1332   ;         function checkTime
02DD           1333   ;        -----------------------------------------
02DD           1334   _checkTime:
02DD           1335   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:336: TL0=0; 
02DD 758A00    1336            mov     _TL0,#0x00
02E0           1337   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:337: TH0=0;
02E0 758C00    1338            mov     _TH0,#0x00
02E3           1339   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:338: TF0=0;
02E3 C28D      1340            clr     _TF0
02E5           1341   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:339: overflow_count=0;
02E5 7A00      1342            mov     r2,#0x00
02E7 7B00      1343            mov     r3,#0x00
02E9           1344   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:340: TR0=0;
02E9 C28C      1345            clr     _TR0
02EB           1346   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:345: printf("Waiting for the signal to be 1\n\r");
02EB C002      1347            push    ar2
02ED C003      1348            push    ar3
02EF 7408      1349            mov     a,#__str_5
02F1 C0E0      1350            push    acc
02F3 74C3      1351            mov     a,#(__str_5 >> 8)
02F5 C0E0      1352            push    acc
02F7 7480      1353            mov     a,#0x80
02F9 C0E0      1354            push    acc
02FB 120100    1355            lcall   _printf
02FE 1581      1356            dec     sp
0300 1581      1357            dec     sp
0302 1581      1358            dec     sp
0304           1359   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:346: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
0304 75820C    1360            mov     dpl,#0x0C
0307 120100    1361            lcall   _Volts_at_Pin
030A AC82      1362            mov     r4,dpl
030C AD83      1363            mov     r5,dph
030E AEF0      1364            mov     r6,b
0310 FF        1365            mov     r7,a
0311 C004      1366            push    ar4
0313 C005      1367            push    ar5
0315 C006      1368            push    ar6
0317 C007      1369            push    ar7
0319 7448      1370            mov     a,#__str_6
031B C0E0      1371            push    acc
031D 74C3      1372            mov     a,#(__str_6 >> 8)
031F C0E0      1373            push    acc
0321 7480      1374            mov     a,#0x80
0323 C0E0      1375            push    acc
0325 120100    1376            lcall   _printf
0328 E581      1377            mov     a,sp
032A 24F9      1378            add     a,#0xf9
032C F581      1379            mov     sp,a
032E D003      1380            pop     ar3
0330 D002      1381            pop     ar2
0332           1382   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:347: while(Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt); //wait for the signal to be 1
0332           1383   L016001?:
0332 75820C    1384            mov     dpl,#0x0C
0335 C002      1385            push    ar2
0337 C003      1386            push    ar3
0339 120100    1387            lcall   _Volts_at_Pin
033C AC82      1388            mov     r4,dpl
033E AD83      1389            mov     r5,dph
0340 AEF0      1390            mov     r6,b
0342 FF        1391            mov     r7,a
0343 74CD      1392            mov     a,#0xCD
0345 C0E0      1393            push    acc
0347 74CC      1394            mov     a,#0xCC
0349 C0E0      1395            push    acc
034B C0E0      1396            push    acc
034D 743E      1397            mov     a,#0x3E
034F C0E0      1398            push    acc
0351 8C82      1399            mov     dpl,r4
0353 8D83      1400            mov     dph,r5
0355 8EF0      1401            mov     b,r6
0357 EF        1402            mov     a,r7
0358 120100    1403            lcall   ___fslt
035B AC82      1404            mov     r4,dpl
035D E581      1405            mov     a,sp
035F 24FC      1406            add     a,#0xfc
0361 F581      1407            mov     sp,a
0363 D003      1408            pop     ar3
0365 D002      1409            pop     ar2
0367 EC        1410            mov     a,r4
0368 7001      1411            jnz     L016001?
036A           1412   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:348: while(Volts_at_Pin(QFP32_MUX_P1_6) >= thresholdVolt); //wait for the signal to be 0
036A           1413   L016004?:
036A 75820C    1414            mov     dpl,#0x0C
036D C002      1415            push    ar2
036F C003      1416            push    ar3
0371 120100    1417            lcall   _Volts_at_Pin
0374 AC82      1418            mov     r4,dpl
0376 AD83      1419            mov     r5,dph
0378 AEF0      1420            mov     r6,b
037A FF        1421            mov     r7,a
037B 74CD      1422            mov     a,#0xCD
037D C0E0      1423            push    acc
037F 74CC      1424            mov     a,#0xCC
0381 C0E0      1425            push    acc
0383 C0E0      1426            push    acc
0385 743E      1427            mov     a,#0x3E
0387 C0E0      1428            push    acc
0389 8C82      1429            mov     dpl,r4
038B 8D83      1430            mov     dph,r5
038D 8EF0      1431            mov     b,r6
038F EF        1432            mov     a,r7
0390 120100    1433            lcall   ___fslt
0393 AC82      1434            mov     r4,dpl
0395 E581      1435            mov     a,sp
0397 24FC      1436            add     a,#0xfc
0399 F581      1437            mov     sp,a
039B D003      1438            pop     ar3
039D D002      1439            pop     ar2
039F EC        1440            mov     a,r4
03A0 6001      1441            jz      L016004?
03A2           1442   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:349: printf("Signal is 0\n\r");
03A2 C002      1443            push    ar2
03A4 C003      1444            push    ar3
03A6 7448      1445            mov     a,#__str_7
03A8 C0E0      1446            push    acc
03AA 74C4      1447            mov     a,#(__str_7 >> 8)
03AC C0E0      1448            push    acc
03AE 7480      1449            mov     a,#0x80
03B0 C0E0      1450            push    acc
03B2 120100    1451            lcall   _printf
03B5 1581      1452            dec     sp
03B7 1581      1453            dec     sp
03B9 1581      1454            dec     sp
03BB           1455   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:350: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
03BB 75820C    1456            mov     dpl,#0x0C
03BE 120100    1457            lcall   _Volts_at_Pin
03C1 AC82      1458            mov     r4,dpl
03C3 AD83      1459            mov     r5,dph
03C5 AEF0      1460            mov     r6,b
03C7 FF        1461            mov     r7,a
03C8 C004      1462            push    ar4
03CA C005      1463            push    ar5
03CC C006      1464            push    ar6
03CE C007      1465            push    ar7
03D0 7448      1466            mov     a,#__str_6
03D2 C0E0      1467            push    acc
03D4 74C3      1468            mov     a,#(__str_6 >> 8)
03D6 C0E0      1469            push    acc
03D8 7480      1470            mov     a,#0x80
03DA C0E0      1471            push    acc
03DC 120100    1472            lcall   _printf
03DF E581      1473            mov     a,sp
03E1 24F9      1474            add     a,#0xf9
03E3 F581      1475            mov     sp,a
03E5           1476   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:351: printf("Start Timer\n\r");
03E5 7488      1477            mov     a,#__str_8
03E7 C0E0      1478            push    acc
03E9 74C4      1479            mov     a,#(__str_8 >> 8)
03EB C0E0      1480            push    acc
03ED 7480      1481            mov     a,#0x80
03EF C0E0      1482            push    acc
03F1 120100    1483            lcall   _printf
03F4 1581      1484            dec     sp
03F6 1581      1485            dec     sp
03F8 1581      1486            dec     sp
03FA D003      1487            pop     ar3
03FC D002      1488            pop     ar2
03FE           1489   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:352: TR0=1; // Start the timer
03FE D28C      1490            setb    _TR0
0400           1491   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:354: while (Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt) {        // wait for signal to be 1
0400 E4        1492            clr     a
0401 F538      1493            mov     _checkTime_overflow_count_1_73,a
0403 F539      1494            mov     (_checkTime_overflow_count_1_73 + 1),a
0405           1495   L016011?:
0405 75820C    1496            mov     dpl,#0x0C
0408 C002      1497            push    ar2
040A C003      1498            push    ar3
040C 120100    1499            lcall   _Volts_at_Pin
040F AE82      1500            mov     r6,dpl
0411 AF83      1501            mov     r7,dph
0413 A8F0      1502            mov     r0,b
0415 F9        1503            mov     r1,a
0416 74CD      1504            mov     a,#0xCD
0418 C0E0      1505            push    acc
041A 74CC      1506            mov     a,#0xCC
041C C0E0      1507            push    acc
041E C0E0      1508            push    acc
0420 743E      1509            mov     a,#0x3E
0422 C0E0      1510            push    acc
0424 8E82      1511            mov     dpl,r6
0426 8F83      1512            mov     dph,r7
0428 88F0      1513            mov     b,r0
042A E9        1514            mov     a,r1
042B 120100    1515            lcall   ___fslt
042E AE82      1516            mov     r6,dpl
0430 E581      1517            mov     a,sp
0432 24FC      1518            add     a,#0xfc
0434 F581      1519            mov     sp,a
0436 D003      1520            pop     ar3
0438 D002      1521            pop     ar2
043A EE        1522            mov     a,r6
043B 7001      1523            jnz     L016025?
043D 020100    1524            ljmp    L016013?
0440           1525   L016025?:
0440           1526   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:356: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
0440 75820C    1527            mov     dpl,#0x0C
0443 C002      1528            push    ar2
0445 C003      1529            push    ar3
0447 120100    1530            lcall   _Volts_at_Pin
044A AE82      1531            mov     r6,dpl
044C AF83      1532            mov     r7,dph
044E A8F0      1533            mov     r0,b
0450 F9        1534            mov     r1,a
0451 C006      1535            push    ar6
0453 C007      1536            push    ar7
0455 C000      1537            push    ar0
0457 C001      1538            push    ar1
0459 7448      1539            mov     a,#__str_6
045B C0E0      1540            push    acc
045D 74C3      1541            mov     a,#(__str_6 >> 8)
045F C0E0      1542            push    acc
0461 7480      1543            mov     a,#0x80
0463 C0E0      1544            push    acc
0465 120100    1545            lcall   _printf
0468 E581      1546            mov     a,sp
046A 24F9      1547            add     a,#0xf9
046C F581      1548            mov     sp,a
046E D003      1549            pop     ar3
0470 D002      1550            pop     ar2
0472           1551   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:358: if(TF0==1) { // Did the 16-bit timer overflow                         {
0472           1552   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:359: TF0=0;
0472 108D88    1553            jbc     _TF0,L016026?
0475 8001      1554            sjmp    L016008?
0477           1555   L016026?:
0477           1556   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:360: overflow_count++;
0477 0538      1557            inc     _checkTime_overflow_count_1_73
0479 E4        1558            clr     a
047A B53808    1559            cjne    a,_checkTime_overflow_count_1_73,L016027?
047D 0539      1560            inc     (_checkTime_overflow_count_1_73 + 1)
047F           1561   L016027?:
047F AA38      1562            mov     r2,_checkTime_overflow_count_1_73
0481 AB39      1563            mov     r3,(_checkTime_overflow_count_1_73 + 1)
0483           1564   L016008?:
0483           1565   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:363: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >= STOPTIME){
0483 C002      1566            push    ar2
0485 C003      1567            push    ar3
0487 853882    1568            mov     dpl,_checkTime_overflow_count_1_73
048A 853983    1569            mov     dph,(_checkTime_overflow_count_1_73 + 1)
048D C002      1570            push    ar2
048F C003      1571            push    ar3
0491 120100    1572            lcall   ___sint2fs
0494 AE82      1573            mov     r6,dpl
0496 AF83      1574            mov     r7,dph
0498 A8F0      1575            mov     r0,b
049A F9        1576            mov     r1,a
049B C006      1577            push    ar6
049D C007      1578            push    ar7
049F C000      1579            push    ar0
04A1 C001      1580            push    ar1
04A3 900000    1581            mov     dptr,#0x0000
04A6 75F080    1582            mov     b,#0x80
04A9 7447      1583            mov     a,#0x47
04AB 120100    1584            lcall   ___fsmul
04AE AE82      1585            mov     r6,dpl
04B0 AF83      1586            mov     r7,dph
04B2 A8F0      1587            mov     r0,b
04B4 F9        1588            mov     r1,a
04B5 E581      1589            mov     a,sp
04B7 24FC      1590            add     a,#0xfc
04B9 F581      1591            mov     sp,a
04BB D003      1592            pop     ar3
04BD D002      1593            pop     ar2
04BF 858C82    1594            mov     dpl,_TH0
04C2 C006      1595            push    ar6
04C4 C007      1596            push    ar7
04C6 C000      1597            push    ar0
04C8 C001      1598            push    ar1
04CA 120100    1599            lcall   ___uchar2fs
04CD AC82      1600            mov     r4,dpl
04CF AD83      1601            mov     r5,dph
04D1 AAF0      1602            mov     r2,b
04D3 FB        1603            mov     r3,a
04D4 C004      1604            push    ar4
04D6 C005      1605            push    ar5
04D8 C002      1606            push    ar2
04DA C003      1607            push    ar3
04DC 900000    1608            mov     dptr,#0x0000
04DF 75F080    1609            mov     b,#0x80
04E2 7443      1610            mov     a,#0x43
04E4 120100    1611            lcall   ___fsmul
04E7 AA82      1612            mov     r2,dpl
04E9 AB83      1613            mov     r3,dph
04EB ACF0      1614            mov     r4,b
04ED FD        1615            mov     r5,a
04EE E581      1616            mov     a,sp
04F0 24FC      1617            add     a,#0xfc
04F2 F581      1618            mov     sp,a
04F4 D001      1619            pop     ar1
04F6 D000      1620            pop     ar0
04F8 D007      1621            pop     ar7
04FA D006      1622            pop     ar6
04FC C002      1623            push    ar2
04FE C003      1624            push    ar3
0500 C004      1625            push    ar4
0502 C005      1626            push    ar5
0504 8E82      1627            mov     dpl,r6
0506 8F83      1628            mov     dph,r7
0508 88F0      1629            mov     b,r0
050A E9        1630            mov     a,r1
050B 120100    1631            lcall   ___fsadd
050E AA82      1632            mov     r2,dpl
0510 AB83      1633            mov     r3,dph
0512 ACF0      1634            mov     r4,b
0514 FD        1635            mov     r5,a
0515 E581      1636            mov     a,sp
0517 24FC      1637            add     a,#0xfc
0519 F581      1638            mov     sp,a
051B AE8A      1639            mov     r6,_TL0
051D 7F00      1640            mov     r7,#0x00
051F 8E82      1641            mov     dpl,r6
0521 8F83      1642            mov     dph,r7
0523 C002      1643            push    ar2
0525 C003      1644            push    ar3
0527 C004      1645            push    ar4
0529 C005      1646            push    ar5
052B 120100    1647            lcall   ___sint2fs
052E AE82      1648            mov     r6,dpl
0530 AF83      1649            mov     r7,dph
0532 A8F0      1650            mov     r0,b
0534 F9        1651            mov     r1,a
0535 D005      1652            pop     ar5
0537 D004      1653            pop     ar4
0539 D003      1654            pop     ar3
053B D002      1655            pop     ar2
053D C006      1656            push    ar6
053F C007      1657            push    ar7
0541 C000      1658            push    ar0
0543 C001      1659            push    ar1
0545 8A82      1660            mov     dpl,r2
0547 8B83      1661            mov     dph,r3
0549 8CF0      1662            mov     b,r4
054B ED        1663            mov     a,r5
054C 120100    1664            lcall   ___fsadd
054F AA82      1665            mov     r2,dpl
0551 AB83      1666            mov     r3,dph
0553 ACF0      1667            mov     r4,b
0555 FD        1668            mov     r5,a
0556 E581      1669            mov     a,sp
0558 24FC      1670            add     a,#0xfc
055A F581      1671            mov     sp,a
055C C002      1672            push    ar2
055E C003      1673            push    ar3
0560 C004      1674            push    ar4
0562 C005      1675            push    ar5
0564 90C33E    1676            mov     dptr,#0xC33E
0567 75F02E    1677            mov     b,#0x2E
056A 7439      1678            mov     a,#0x39
056C 120100    1679            lcall   ___fsmul
056F AA82      1680            mov     r2,dpl
0571 AB83      1681            mov     r3,dph
0573 ACF0      1682            mov     r4,b
0575 FD        1683            mov     r5,a
0576 E581      1684            mov     a,sp
0578 24FC      1685            add     a,#0xfc
057A F581      1686            mov     sp,a
057C C003      1687            push    ar3
057E E4        1688            clr     a
057F C0E0      1689            push    acc
0581 7450      1690            mov     a,#0x50
0583 C0E0      1691            push    acc
0585 7443      1692            mov     a,#0x43
0587 C0E0      1693            push    acc
0589 7447      1694            mov     a,#0x47
058B C0E0      1695            push    acc
058D 8A82      1696            mov     dpl,r2
058F 8B83      1697            mov     dph,r3
0591 8CF0      1698            mov     b,r4
0593 ED        1699            mov     a,r5
0594 120100    1700            lcall   ___fslt
0597 AA82      1701            mov     r2,dpl
0599 E581      1702            mov     a,sp
059B 24FC      1703            add     a,#0xfc
059D F581      1704            mov     sp,a
059F D003      1705            pop     ar3
05A1 EA        1706            mov     a,r2
05A2 D003      1707            pop     ar3
05A4 D002      1708            pop     ar2
05A6 6001      1709            jz      L016028?
05A8 020100    1710            ljmp    L016011?
05AB           1711   L016028?:
05AB           1712   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:364: printf("Possibly a STOP. break out of the loop and stop timer. \n\r");
05AB C002      1713            push    ar2
05AD C003      1714            push    ar3
05AF 7448      1715            mov     a,#__str_9
05B1 C0E0      1716            push    acc
05B3 74C7      1717            mov     a,#(__str_9 >> 8)
05B5 C0E0      1718            push    acc
05B7 7480      1719            mov     a,#0x80
05B9 C0E0      1720            push    acc
05BB 120100    1721            lcall   _printf
05BE 1581      1722            dec     sp
05C0 1581      1723            dec     sp
05C2 1581      1724            dec     sp
05C4 D003      1725            pop     ar3
05C6 D002      1726            pop     ar2
05C8           1727   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:365: break;
05C8           1728   L016013?:
05C8           1729   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:370: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
05C8 C28C      1730            clr     _TR0
05CA           1731   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:371: printf("Stop Timer\n\r");
05CA C002      1732            push    ar2
05CC C003      1733            push    ar3
05CE 7488      1734            mov     a,#__str_10
05D0 C0E0      1735            push    acc
05D2 74C7      1736            mov     a,#(__str_10 >> 8)
05D4 C0E0      1737            push    acc
05D6 7480      1738            mov     a,#0x80
05D8 C0E0      1739            push    acc
05DA 120100    1740            lcall   _printf
05DD 1581      1741            dec     sp
05DF 1581      1742            dec     sp
05E1 1581      1743            dec     sp
05E3 D003      1744            pop     ar3
05E5 D002      1745            pop     ar2
05E7           1746   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:372: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
05E7 8A82      1747            mov     dpl,r2
05E9 8B83      1748            mov     dph,r3
05EB 120100    1749            lcall   ___sint2fs
05EE AA82      1750            mov     r2,dpl
05F0 AB83      1751            mov     r3,dph
05F2 ACF0      1752            mov     r4,b
05F4 FD        1753            mov     r5,a
05F5 C002      1754            push    ar2
05F7 C003      1755            push    ar3
05F9 C004      1756            push    ar4
05FB C005      1757            push    ar5
05FD 900000    1758            mov     dptr,#0x0000
0600 75F080    1759            mov     b,#0x80
0603 7447      1760            mov     a,#0x47
0605 120100    1761            lcall   ___fsmul
0608 AA82      1762            mov     r2,dpl
060A AB83      1763            mov     r3,dph
060C ACF0      1764            mov     r4,b
060E FD        1765            mov     r5,a
060F E581      1766            mov     a,sp
0611 24FC      1767            add     a,#0xfc
0613 F581      1768            mov     sp,a
0615 858C82    1769            mov     dpl,_TH0
0618 C002      1770            push    ar2
061A C003      1771            push    ar3
061C C004      1772            push    ar4
061E C005      1773            push    ar5
0620 120100    1774            lcall   ___uchar2fs
0623 AE82      1775            mov     r6,dpl
0625 AF83      1776            mov     r7,dph
0627 A8F0      1777            mov     r0,b
0629 F9        1778            mov     r1,a
062A C006      1779            push    ar6
062C C007      1780            push    ar7
062E C000      1781            push    ar0
0630 C001      1782            push    ar1
0632 900000    1783            mov     dptr,#0x0000
0635 75F080    1784            mov     b,#0x80
0638 7443      1785            mov     a,#0x43
063A 120100    1786            lcall   ___fsmul
063D AE82      1787            mov     r6,dpl
063F AF83      1788            mov     r7,dph
0641 A8F0      1789            mov     r0,b
0643 F9        1790            mov     r1,a
0644 E581      1791            mov     a,sp
0646 24FC      1792            add     a,#0xfc
0648 F581      1793            mov     sp,a
064A D005      1794            pop     ar5
064C D004      1795            pop     ar4
064E D003      1796            pop     ar3
0650 D002      1797            pop     ar2
0652 C006      1798            push    ar6
0654 C007      1799            push    ar7
0656 C000      1800            push    ar0
0658 C001      1801            push    ar1
065A 8A82      1802            mov     dpl,r2
065C 8B83      1803            mov     dph,r3
065E 8CF0      1804            mov     b,r4
0660 ED        1805            mov     a,r5
0661 120100    1806            lcall   ___fsadd
0664 AA82      1807            mov     r2,dpl
0666 AB83      1808            mov     r3,dph
0668 ACF0      1809            mov     r4,b
066A FD        1810            mov     r5,a
066B E581      1811            mov     a,sp
066D 24FC      1812            add     a,#0xfc
066F F581      1813            mov     sp,a
0671 AE8A      1814            mov     r6,_TL0
0673 7F00      1815            mov     r7,#0x00
0675 8E82      1816            mov     dpl,r6
0677 8F83      1817            mov     dph,r7
0679 C002      1818            push    ar2
067B C003      1819            push    ar3
067D C004      1820            push    ar4
067F C005      1821            push    ar5
0681 120100    1822            lcall   ___sint2fs
0684 AE82      1823            mov     r6,dpl
0686 AF83      1824            mov     r7,dph
0688 A8F0      1825            mov     r0,b
068A F9        1826            mov     r1,a
068B D005      1827            pop     ar5
068D D004      1828            pop     ar4
068F D003      1829            pop     ar3
0691 D002      1830            pop     ar2
0693 C006      1831            push    ar6
0695 C007      1832            push    ar7
0697 C000      1833            push    ar0
0699 C001      1834            push    ar1
069B 8A82      1835            mov     dpl,r2
069D 8B83      1836            mov     dph,r3
069F 8CF0      1837            mov     b,r4
06A1 ED        1838            mov     a,r5
06A2 120100    1839            lcall   ___fsadd
06A5 AA82      1840            mov     r2,dpl
06A7 AB83      1841            mov     r3,dph
06A9 ACF0      1842            mov     r4,b
06AB FD        1843            mov     r5,a
06AC E581      1844            mov     a,sp
06AE 24FC      1845            add     a,#0xfc
06B0 F581      1846            mov     sp,a
06B2 C002      1847            push    ar2
06B4 C003      1848            push    ar3
06B6 C004      1849            push    ar4
06B8 C005      1850            push    ar5
06BA 90F4FC    1851            mov     dptr,#0xF4FC
06BD 75F032    1852            mov     b,#0x32
06C0 7434      1853            mov     a,#0x34
06C2 120100    1854            lcall   ___fsmul
06C5 AA82      1855            mov     r2,dpl
06C7 AB83      1856            mov     r3,dph
06C9 ACF0      1857            mov     r4,b
06CB FD        1858            mov     r5,a
06CC E581      1859            mov     a,sp
06CE 24FC      1860            add     a,#0xfc
06D0 F581      1861            mov     sp,a
06D2           1862   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:373: return time*1000; //return period of high pulse in seconds            
06D2 C002      1863            push    ar2
06D4 C003      1864            push    ar3
06D6 C004      1865            push    ar4
06D8 C005      1866            push    ar5
06DA 900000    1867            mov     dptr,#0x0000
06DD 75F07A    1868            mov     b,#0x7A
06E0 7444      1869            mov     a,#0x44
06E2 120100    1870            lcall   ___fsmul
06E5 AA82      1871            mov     r2,dpl
06E7 AB83      1872            mov     r3,dph
06E9 ACF0      1873            mov     r4,b
06EB FD        1874            mov     r5,a
06EC E581      1875            mov     a,sp
06EE 24FC      1876            add     a,#0xfc
06F0 F581      1877            mov     sp,a
06F2 8A82      1878            mov     dpl,r2
06F4 8B83      1879            mov     dph,r3
06F6 8CF0      1880            mov     b,r4
06F8 ED        1881            mov     a,r5
06F9 22        1882            ret
06FA           1883   ;------------------------------------------------------------
06FA           1884   ;Allocation info for local variables in function 'voltsAtPeak'
06FA           1885   ;------------------------------------------------------------
06FA           1886   ;------------------------------------------------------------
06FA           1887   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:380: float voltsAtPeak(void) {
06FA           1888   ;        -----------------------------------------
06FA           1889   ;         function voltsAtPeak
06FA           1890   ;        -----------------------------------------
06FA           1891   _voltsAtPeak:
06FA           1892   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:381: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //input pin waiting to be  
06FA           1893   L017001?:
06FA 75820C    1894            mov     dpl,#0x0C
06FD 120100    1895            lcall   _ADC_at_Pin
0700 E582      1896            mov     a,dpl
0702 8583F0    1897            mov     b,dph
0705 45F0      1898            orl     a,b
0707 6001      1899            jz      L017001?
0709           1900   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:382: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
0709           1901   L017004?:
0709 75820C    1902            mov     dpl,#0x0C
070C 120100    1903            lcall   _ADC_at_Pin
070F E582      1904            mov     a,dpl
0711 8583F0    1905            mov     b,dph
0714 45F0      1906            orl     a,b
0716 6001      1907            jz      L017004?
0718           1908   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:383: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
0718 900000    1909            mov     dptr,#0x0000
071B 120100    1910            lcall   _Timer3us
071E           1911   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:384: return(Volts_at_Pin(QFP32_MUX_P1_6));
071E 75820C    1912            mov     dpl,#0x0C
0721 020100    1913            ljmp    _Volts_at_Pin
0724           1914   ;------------------------------------------------------------
0724           1915   ;Allocation info for local variables in function 'waitquarterperiod'
0724           1916   ;------------------------------------------------------------
0724           1917   ;------------------------------------------------------------
0724           1918   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:397: void waitquarterperiod(void){
0724           1919   ;        -----------------------------------------
0724           1920   ;         function waitquarterperiod
0724           1921   ;        -----------------------------------------
0724           1922   _waitquarterperiod:
0724           1923   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:398: waitms(constant_delay_time);
0724 90000A    1924            mov     dptr,#0x000A
0727 020100    1925            ljmp    _waitms
072A           1926   ;------------------------------------------------------------
072A           1927   ;Allocation info for local variables in function 'main'
072A           1928   ;------------------------------------------------------------
072A           1929   ;checkcommand              Allocated to registers 
072A           1930   ;i                         Allocated with name '_main_i_1_82'
072A           1931   ;sig1                      Allocated to registers 
072A           1932   ;sig2                      Allocated to registers 
072A           1933   ;peak                      Allocated to registers 
072A           1934   ;voltspeak                 Allocated to registers 
072A           1935   ;periodpwm                 Allocated to registers 
072A           1936   ;time                      Allocated to registers r2 r3 r4 r5 
072A           1937   ;pasttime                  Allocated to registers 
072A           1938   ;period                    Allocated to registers 
072A           1939   ;overflow_count            Allocated to registers 
072A           1940   ;------------------------------------------------------------
072A           1941   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:402: void main(void)
072A           1942   ;        -----------------------------------------
072A           1943   ;         function main
072A           1944   ;        -----------------------------------------
072A           1945   _main:
072A           1946   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:414: TIMER0_Init();
072A 120100    1947            lcall   _TIMER0_Init
072D           1948   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:416: InitPinADC(1, 6); // Configure P2.5 as analog input
072D 755006    1949            mov     _InitPinADC_PARM_2,#0x06
0730 758201    1950            mov     dpl,#0x01
0733 120100    1951            lcall   _InitPinADC
0736           1952   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:418: InitADC();
0736 120100    1953            lcall   _InitADC
0739           1954   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:419: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0739 7448      1955            mov     a,#__str_11
073B C0E0      1956            push    acc
073D 74C8      1957            mov     a,#(__str_11 >> 8)
073F C0E0      1958            push    acc
0741 7480      1959            mov     a,#0x80
0743 C0E0      1960            push    acc
0745 120100    1961            lcall   _printf
0748 1581      1962            dec     sp
074A 1581      1963            dec     sp
074C 1581      1964            dec     sp
074E           1965   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:421: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
074E 7488      1966            mov     a,#__str_12
0750 C0E0      1967            push    acc
0752 74C8      1968            mov     a,#(__str_12 >> 8)
0754 C0E0      1969            push    acc
0756 7480      1970            mov     a,#0x80
0758 C0E0      1971            push    acc
075A 120100    1972            lcall   _printf
075D 1581      1973            dec     sp
075F 1581      1974            dec     sp
0761 1581      1975            dec     sp
0763           1976   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:423: printf("\n\r");
0763 74C8      1977            mov     a,#__str_13
0765 C0E0      1978            push    acc
0767 74C8      1979            mov     a,#(__str_13 >> 8)
0769 C0E0      1980            push    acc
076B 7480      1981            mov     a,#0x80
076D C0E0      1982            push    acc
076F 120100    1983            lcall   _printf
0772 1581      1984            dec     sp
0774 1581      1985            dec     sp
0776 1581      1986            dec     sp
0778           1987   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:426: while (1)
0778           1988   L019018?:
0778           1989   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:431: time = checkTime();
0778 120100    1990            lcall   _checkTime
077B AA82      1991            mov     r2,dpl
077D AB83      1992            mov     r3,dph
077F ACF0      1993            mov     r4,b
0781 FD        1994            mov     r5,a
0782           1995   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:432: printf("%f\t\n\r", time);
0782 C002      1996            push    ar2
0784 C003      1997            push    ar3
0786 C004      1998            push    ar4
0788 C005      1999            push    ar5
078A C002      2000            push    ar2
078C C003      2001            push    ar3
078E C004      2002            push    ar4
0790 C005      2003            push    ar5
0792 7448      2004            mov     a,#__str_14
0794 C0E0      2005            push    acc
0796 74C9      2006            mov     a,#(__str_14 >> 8)
0798 C0E0      2007            push    acc
079A 7480      2008            mov     a,#0x80
079C C0E0      2009            push    acc
079E 120100    2010            lcall   _printf
07A1 E581      2011            mov     a,sp
07A3 24F9      2012            add     a,#0xf9
07A5 F581      2013            mov     sp,a
07A7 D005      2014            pop     ar5
07A9 D004      2015            pop     ar4
07AB D003      2016            pop     ar3
07AD D002      2017            pop     ar2
07AF           2018   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:435: if(time>=700 && time<=720){
07AF C002      2019            push    ar2
07B1 C003      2020            push    ar3
07B3 C004      2021            push    ar4
07B5 C005      2022            push    ar5
07B7 E4        2023            clr     a
07B8 C0E0      2024            push    acc
07BA C0E0      2025            push    acc
07BC 742F      2026            mov     a,#0x2F
07BE C0E0      2027            push    acc
07C0 7444      2028            mov     a,#0x44
07C2 C0E0      2029            push    acc
07C4 8A82      2030            mov     dpl,r2
07C6 8B83      2031            mov     dph,r3
07C8 8CF0      2032            mov     b,r4
07CA ED        2033            mov     a,r5
07CB 120100    2034            lcall   ___fslt
07CE AE82      2035            mov     r6,dpl
07D0 E581      2036            mov     a,sp
07D2 24FC      2037            add     a,#0xfc
07D4 F581      2038            mov     sp,a
07D6 D005      2039            pop     ar5
07D8 D004      2040            pop     ar4
07DA D003      2041            pop     ar3
07DC D002      2042            pop     ar2
07DE EE        2043            mov     a,r6
07DF 7001      2044            jnz     L019014?
07E1 C002      2045            push    ar2
07E3 C003      2046            push    ar3
07E5 C004      2047            push    ar4
07E7 C005      2048            push    ar5
07E9 E4        2049            clr     a
07EA C0E0      2050            push    acc
07EC C0E0      2051            push    acc
07EE 7434      2052            mov     a,#0x34
07F0 C0E0      2053            push    acc
07F2 7444      2054            mov     a,#0x44
07F4 C0E0      2055            push    acc
07F6 8A82      2056            mov     dpl,r2
07F8 8B83      2057            mov     dph,r3
07FA 8CF0      2058            mov     b,r4
07FC ED        2059            mov     a,r5
07FD 120100    2060            lcall   ___fsgt
0800 AE82      2061            mov     r6,dpl
0802 E581      2062            mov     a,sp
0804 24FC      2063            add     a,#0xfc
0806 F581      2064            mov     sp,a
0808 D005      2065            pop     ar5
080A D004      2066            pop     ar4
080C D003      2067            pop     ar3
080E D002      2068            pop     ar2
0810 EE        2069            mov     a,r6
0811 7001      2070            jnz     L019014?
0813           2071   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:436: PWMbackward(); 
0813 C002      2072            push    ar2
0815 C003      2073            push    ar3
0817 C004      2074            push    ar4
0819 C005      2075            push    ar5
081B 120100    2076            lcall   _PWMbackward
081E           2077   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:437: printf("%f\t\n\r", time);
081E 7448      2078            mov     a,#__str_14
0820 C0E0      2079            push    acc
0822 74C9      2080            mov     a,#(__str_14 >> 8)
0824 C0E0      2081            push    acc
0826 7480      2082            mov     a,#0x80
0828 C0E0      2083            push    acc
082A 120100    2084            lcall   _printf
082D E581      2085            mov     a,sp
082F 24F9      2086            add     a,#0xf9
0831 F581      2087            mov     sp,a
0833 020100    2088            ljmp    L019015?
0836           2089   L019014?:
0836           2090   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:439: else if(time>=340 && time<=360){
0836 C002      2091            push    ar2
0838 C003      2092            push    ar3
083A C004      2093            push    ar4
083C C005      2094            push    ar5
083E E4        2095            clr     a
083F C0E0      2096            push    acc
0841 C0E0      2097            push    acc
0843 74AA      2098            mov     a,#0xAA
0845 C0E0      2099            push    acc
0847 7443      2100            mov     a,#0x43
0849 C0E0      2101            push    acc
084B 8A82      2102            mov     dpl,r2
084D 8B83      2103            mov     dph,r3
084F 8CF0      2104            mov     b,r4
0851 ED        2105            mov     a,r5
0852 120100    2106            lcall   ___fslt
0855 AE82      2107            mov     r6,dpl
0857 E581      2108            mov     a,sp
0859 24FC      2109            add     a,#0xfc
085B F581      2110            mov     sp,a
085D D005      2111            pop     ar5
085F D004      2112            pop     ar4
0861 D003      2113            pop     ar3
0863 D002      2114            pop     ar2
0865 EE        2115            mov     a,r6
0866 7001      2116            jnz     L019010?
0868 C002      2117            push    ar2
086A C003      2118            push    ar3
086C C004      2119            push    ar4
086E C005      2120            push    ar5
0870 E4        2121            clr     a
0871 C0E0      2122            push    acc
0873 C0E0      2123            push    acc
0875 74B4      2124            mov     a,#0xB4
0877 C0E0      2125            push    acc
0879 7443      2126            mov     a,#0x43
087B C0E0      2127            push    acc
087D 8A82      2128            mov     dpl,r2
087F 8B83      2129            mov     dph,r3
0881 8CF0      2130            mov     b,r4
0883 ED        2131            mov     a,r5
0884 120100    2132            lcall   ___fsgt
0887 AE82      2133            mov     r6,dpl
0889 E581      2134            mov     a,sp
088B 24FC      2135            add     a,#0xfc
088D F581      2136            mov     sp,a
088F D005      2137            pop     ar5
0891 D004      2138            pop     ar4
0893 D003      2139            pop     ar3
0895 D002      2140            pop     ar2
0897 EE        2141            mov     a,r6
0898 7001      2142            jnz     L019010?
089A           2143   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:440: pwmSig1 = 99;
089A 752063    2144            mov     _pwmSig1,#0x63
089D E4        2145            clr     a
089E F521      2146            mov     (_pwmSig1 + 1),a
08A0           2147   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:441: pwmSig2 = 0;
08A0           2148   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:443: pwmSig3 = 0;
08A0 E4        2149            clr     a
08A1 F5E0      2150            mov     _pwmSig2,a
08A3 F5E1      2151            mov     (_pwmSig2 + 1),a
08A5 F5A0      2152            mov     _pwmSig3,a
08A7 F5A1      2153            mov     (_pwmSig3 + 1),a
08A9           2154   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:444: pwmSig4 =99;
08A9 757863    2155            mov     _pwmSig4,#0x63
08AC E4        2156            clr     a
08AD F579      2157            mov     (_pwmSig4 + 1),a
08AF           2158   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:445: printf("Forward\n\r");
08AF 7488      2159            mov     a,#__str_0
08B1 C0E0      2160            push    acc
08B3 74C1      2161            mov     a,#(__str_0 >> 8)
08B5 C0E0      2162            push    acc
08B7 7480      2163            mov     a,#0x80
08B9 C0E0      2164            push    acc
08BB 120100    2165            lcall   _printf
08BE 1581      2166            dec     sp
08C0 1581      2167            dec     sp
08C2 1581      2168            dec     sp
08C4 020100    2169            ljmp    L019015?
08C7           2170   L019010?:
08C7           2171   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:447: else if(time>=1410 && time<=1440){
08C7 C002      2172            push    ar2
08C9 C003      2173            push    ar3
08CB C004      2174            push    ar4
08CD C005      2175            push    ar5
08CF E4        2176            clr     a
08D0 C0E0      2177            push    acc
08D2 7440      2178            mov     a,#0x40
08D4 C0E0      2179            push    acc
08D6 74B0      2180            mov     a,#0xB0
08D8 C0E0      2181            push    acc
08DA 7444      2182            mov     a,#0x44
08DC C0E0      2183            push    acc
08DE 8A82      2184            mov     dpl,r2
08E0 8B83      2185            mov     dph,r3
08E2 8CF0      2186            mov     b,r4
08E4 ED        2187            mov     a,r5
08E5 120100    2188            lcall   ___fslt
08E8 AE82      2189            mov     r6,dpl
08EA E581      2190            mov     a,sp
08EC 24FC      2191            add     a,#0xfc
08EE F581      2192            mov     sp,a
08F0 D005      2193            pop     ar5
08F2 D004      2194            pop     ar4
08F4 D003      2195            pop     ar3
08F6 D002      2196            pop     ar2
08F8 EE        2197            mov     a,r6
08F9 7001      2198            jnz     L019006?
08FB C002      2199            push    ar2
08FD C003      2200            push    ar3
08FF C004      2201            push    ar4
0901 C005      2202            push    ar5
0903 E4        2203            clr     a
0904 C0E0      2204            push    acc
0906 C0E0      2205            push    acc
0908 74B4      2206            mov     a,#0xB4
090A C0E0      2207            push    acc
090C 7444      2208            mov     a,#0x44
090E C0E0      2209            push    acc
0910 8A82      2210            mov     dpl,r2
0912 8B83      2211            mov     dph,r3
0914 8CF0      2212            mov     b,r4
0916 ED        2213            mov     a,r5
0917 120100    2214            lcall   ___fsgt
091A AE82      2215            mov     r6,dpl
091C E581      2216            mov     a,sp
091E 24FC      2217            add     a,#0xfc
0920 F581      2218            mov     sp,a
0922 D005      2219            pop     ar5
0924 D004      2220            pop     ar4
0926 D003      2221            pop     ar3
0928 D002      2222            pop     ar2
092A EE        2223            mov     a,r6
092B 7001      2224            jnz     L019006?
092D           2225   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:448: PWMRight(); 
092D C002      2226            push    ar2
092F C003      2227            push    ar3
0931 C004      2228            push    ar4
0933 C005      2229            push    ar5
0935 120100    2230            lcall   _PWMRight
0938           2231   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:449: printf("%f\t\n\r", time);
0938 7448      2232            mov     a,#__str_14
093A C0E0      2233            push    acc
093C 74C9      2234            mov     a,#(__str_14 >> 8)
093E C0E0      2235            push    acc
0940 7480      2236            mov     a,#0x80
0942 C0E0      2237            push    acc
0944 120100    2238            lcall   _printf
0947 E581      2239            mov     a,sp
0949 24F9      2240            add     a,#0xf9
094B F581      2241            mov     sp,a
094D 020100    2242            ljmp    L019015?
0950           2243   L019006?:
0950           2244   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:451: else if(time>=1060 && time<=1090){
0950 C002      2245            push    ar2
0952 C003      2246            push    ar3
0954 C004      2247            push    ar4
0956 C005      2248            push    ar5
0958 E4        2249            clr     a
0959 C0E0      2250            push    acc
095B 7480      2251            mov     a,#0x80
095D C0E0      2252            push    acc
095F 7484      2253            mov     a,#0x84
0961 C0E0      2254            push    acc
0963 7444      2255            mov     a,#0x44
0965 C0E0      2256            push    acc
0967 8A82      2257            mov     dpl,r2
0969 8B83      2258            mov     dph,r3
096B 8CF0      2259            mov     b,r4
096D ED        2260            mov     a,r5
096E 120100    2261            lcall   ___fslt
0971 AE82      2262            mov     r6,dpl
0973 E581      2263            mov     a,sp
0975 24FC      2264            add     a,#0xfc
0977 F581      2265            mov     sp,a
0979 D005      2266            pop     ar5
097B D004      2267            pop     ar4
097D D003      2268            pop     ar3
097F D002      2269            pop     ar2
0981 EE        2270            mov     a,r6
0982 7001      2271            jnz     L019002?
0984 C002      2272            push    ar2
0986 C003      2273            push    ar3
0988 C004      2274            push    ar4
098A C005      2275            push    ar5
098C E4        2276            clr     a
098D C0E0      2277            push    acc
098F 7440      2278            mov     a,#0x40
0991 C0E0      2279            push    acc
0993 7488      2280            mov     a,#0x88
0995 C0E0      2281            push    acc
0997 7444      2282            mov     a,#0x44
0999 C0E0      2283            push    acc
099B 8A82      2284            mov     dpl,r2
099D 8B83      2285            mov     dph,r3
099F 8CF0      2286            mov     b,r4
09A1 ED        2287            mov     a,r5
09A2 120100    2288            lcall   ___fsgt
09A5 AE82      2289            mov     r6,dpl
09A7 E581      2290            mov     a,sp
09A9 24FC      2291            add     a,#0xfc
09AB F581      2292            mov     sp,a
09AD D005      2293            pop     ar5
09AF D004      2294            pop     ar4
09B1 D003      2295            pop     ar3
09B3 D002      2296            pop     ar2
09B5 EE        2297            mov     a,r6
09B6 7001      2298            jnz     L019002?
09B8           2299   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:452: PWMLeft(); 
09B8 C002      2300            push    ar2
09BA C003      2301            push    ar3
09BC C004      2302            push    ar4
09BE C005      2303            push    ar5
09C0 120100    2304            lcall   _PWMLeft
09C3           2305   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:453: printf("%f\t\n\r", time); } 
09C3 7448      2306            mov     a,#__str_14
09C5 C0E0      2307            push    acc
09C7 74C9      2308            mov     a,#(__str_14 >> 8)
09C9 C0E0      2309            push    acc
09CB 7480      2310            mov     a,#0x80
09CD C0E0      2311            push    acc
09CF 120100    2312            lcall   _printf
09D2 E581      2313            mov     a,sp
09D4 24F9      2314            add     a,#0xf9
09D6 F581      2315            mov     sp,a
09D8 8001      2316            sjmp    L019015?
09DA           2317   L019002?:
09DA           2318   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:455: PWMStop();
09DA 120100    2319            lcall   _PWMStop
09DD           2320   L019015?:
09DD           2321   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:458: waitms(100);
09DD 900064    2322            mov     dptr,#0x0064
09E0 120100    2323            lcall   _waitms
09E3 020100    2324            ljmp    L019018?
09E6           2325            rseg R_CSEG
09E6           2326   
0000           2327            rseg R_XINIT
0000           2328   
0000           2329            rseg R_CONST
0000           2330   __str_0:
0000 466F7277  2331            db 'Forward'
     617264
0007 0A        2332            db 0x0A
0008 0D        2333            db 0x0D
0009 00        2334            db 0x00
000A           2335   __str_1:
000A 4261636B  2336            db 'Backward'
     77617264
0012 0A        2337            db 0x0A
0013 0D        2338            db 0x0D
0014 00        2339            db 0x00
0015           2340   __str_2:
0015 4C656674  2341            db 'Left'
0019 0A        2342            db 0x0A
001A 0D        2343            db 0x0D
001B 00        2344            db 0x00
001C           2345   __str_3:
001C 52696768  2346            db 'Right'
     74
0021 0A        2347            db 0x0A
0022 0D        2348            db 0x0D
0023 00        2349            db 0x00
0024           2350   __str_4:
0024 53746F70  2351            db 'Stop'
0028 0A        2352            db 0x0A
0029 0D        2353            db 0x0D
002A 00        2354            db 0x00
002B           2355   __str_5:
002B 57616974  2356            db 'Waiting for the signal to be 1'
     696E6720
     666F7220
     74686520
     7369676E
     616C2074
     6F206265
     2031
0049 0A        2357            db 0x0A
004A 0D        2358            db 0x0D
004B 00        2359            db 0x00
004C           2360   __str_6:
004C 566F6C74  2361            db 'Volt at ADC: %f'
     20617420
     4144433A
     202566
005B 0A        2362            db 0x0A
005C 0D        2363            db 0x0D
005D 00        2364            db 0x00
005E           2365   __str_7:
005E 5369676E  2366            db 'Signal is 0'
     616C2069
     732030
0069 0A        2367            db 0x0A
006A 0D        2368            db 0x0D
006B 00        2369            db 0x00
006C           2370   __str_8:
006C 53746172  2371            db 'Start Timer'
     74205469
     6D6572
0077 0A        2372            db 0x0A
0078 0D        2373            db 0x0D
0079 00        2374            db 0x00
007A           2375   __str_9:
007A 506F7373  2376            db 'Possibly a STOP. break out of the loop and stop timer. '
     69626C79
     20612053
     544F502E
     20627265
     616B206F
     7574206F
     66207468
     65206C6F
     6F702061
     6E642073
     746F7020
     74696D65
     722E20
00B1 0A        2377            db 0x0A
00B2 0D        2378            db 0x0D
00B3 00        2379            db 0x00
00B4           2380   __str_10:
00B4 53746F70  2381            db 'Stop Timer'
     2054696D
     6572
00BE 0A        2382            db 0x0A
00BF 0D        2383            db 0x0D
00C0 00        2384            db 0x00
00C1           2385   __str_11:
00C1 1B        2386            db 0x1B
00C2 5B324A    2387            db '[2J'
00C5 00        2388            db 0x00
00C6           2389   __str_12:
00C6 53717561  2390            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
00EC 0D        2391            db 0x0D
00ED 0A        2392            db 0x0A
00EE 43686563  2393            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0102 50322E31  2394            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
011D 0D        2395            db 0x0D
011E 0A        2396            db 0x0A
011F 00        2397            db 0x00
0120           2398   __str_13:
0120 0A        2399            db 0x0A
0121 0D        2400            db 0x0D
0122 00        2401            db 0x00
0123           2402   __str_14:
0123 2566      2403            db '%f'
0125 09        2404            db 0x09
0126 0A        2405            db 0x0A
0127 0D        2406            db 0x0D
0128 00        2407            db 0x00
0129           2408   
002E           2409            CSEG
002E           2410   
002E           2411   end
