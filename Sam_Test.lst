0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Fri Mar 30 14:37:14 2018
0000              5   ;--------------------------------------------------------
                  5   $name Sam_Test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _waitquarterperiod
0000             30            public _voltsAtPeak
0000             31            public _checkTime
0000             32            public _PWMStop
0000             33            public _PWMRight
0000             34            public _PWMLeft
0000             35            public _PWMbackward
0000             36            public _PWMforward
0000             37            public _InitPinADC
0000             38            public _Volts_at_Pin
0000             39            public _TIMER0_Init
0000             40            public _InitADC
0000             41            public _Timer2_ISR
0000             42            public _ADC_at_Pin
0000             43            public _waitms
0000             44            public _Timer3us
0000             45            public __c51_external_startup
0000             46            public _command
0000             47            public _right
0000             48            public _left
0000             49            public _backward
0000             50            public _forward
0000             51            public _stop
0000             52            public _claw_flag
0000             53            public _flag
0000             54            public _cartMoveB
0000             55            public _cartMoveF
0000             56            public _pwmSig6
0000             57            public _pwmSig5
0000             58            public _pwmSig4
0000             59            public _pwmSig3
0000             60            public _pwmSig2
0000             61            public _pwmSig1
0000             62            public _pwm_count3
0000             63            public _pwm_count2
0000             64            public _pwm_count1
0000             65            public _pwm_count
0000             66   ;--------------------------------------------------------
0000             67   ; Special Function Registers
0000             68   ;--------------------------------------------------------
0000             69   _ACC            DATA 0xe0
0000             70   _ADC0ASAH       DATA 0xb6
0000             71   _ADC0ASAL       DATA 0xb5
0000             72   _ADC0ASCF       DATA 0xa1
0000             73   _ADC0ASCT       DATA 0xc7
0000             74   _ADC0CF0        DATA 0xbc
0000             75   _ADC0CF1        DATA 0xb9
0000             76   _ADC0CF2        DATA 0xdf
0000             77   _ADC0CN0        DATA 0xe8
0000             78   _ADC0CN1        DATA 0xb2
0000             79   _ADC0CN2        DATA 0xb3
0000             80   _ADC0GTH        DATA 0xc4
0000             81   _ADC0GTL        DATA 0xc3
0000             82   _ADC0H          DATA 0xbe
0000             83   _ADC0L          DATA 0xbd
0000             84   _ADC0LTH        DATA 0xc6
0000             85   _ADC0LTL        DATA 0xc5
0000             86   _ADC0MX         DATA 0xbb
0000             87   _B              DATA 0xf0
0000             88   _CKCON0         DATA 0x8e
0000             89   _CKCON1         DATA 0xa6
0000             90   _CLEN0          DATA 0xc6
0000             91   _CLIE0          DATA 0xc7
0000             92   _CLIF0          DATA 0xe8
0000             93   _CLKSEL         DATA 0xa9
0000             94   _CLOUT0         DATA 0xd1
0000             95   _CLU0CF         DATA 0xb1
0000             96   _CLU0FN         DATA 0xaf
0000             97   _CLU0MX         DATA 0x84
0000             98   _CLU1CF         DATA 0xb3
0000             99   _CLU1FN         DATA 0xb2
0000            100   _CLU1MX         DATA 0x85
0000            101   _CLU2CF         DATA 0xb6
0000            102   _CLU2FN         DATA 0xb5
0000            103   _CLU2MX         DATA 0x91
0000            104   _CLU3CF         DATA 0xbf
0000            105   _CLU3FN         DATA 0xbe
0000            106   _CLU3MX         DATA 0xae
0000            107   _CMP0CN0        DATA 0x9b
0000            108   _CMP0CN1        DATA 0x99
0000            109   _CMP0MD         DATA 0x9d
0000            110   _CMP0MX         DATA 0x9f
0000            111   _CMP1CN0        DATA 0xbf
0000            112   _CMP1CN1        DATA 0xac
0000            113   _CMP1MD         DATA 0xab
0000            114   _CMP1MX         DATA 0xaa
0000            115   _CRC0CN0        DATA 0xce
0000            116   _CRC0CN1        DATA 0x86
0000            117   _CRC0CNT        DATA 0xd3
0000            118   _CRC0DAT        DATA 0xcb
0000            119   _CRC0FLIP       DATA 0xcf
0000            120   _CRC0IN         DATA 0xca
0000            121   _CRC0ST         DATA 0xd2
0000            122   _DAC0CF0        DATA 0x91
0000            123   _DAC0CF1        DATA 0x92
0000            124   _DAC0H          DATA 0x85
0000            125   _DAC0L          DATA 0x84
0000            126   _DAC1CF0        DATA 0x93
0000            127   _DAC1CF1        DATA 0x94
0000            128   _DAC1H          DATA 0x8a
0000            129   _DAC1L          DATA 0x89
0000            130   _DAC2CF0        DATA 0x95
0000            131   _DAC2CF1        DATA 0x96
0000            132   _DAC2H          DATA 0x8c
0000            133   _DAC2L          DATA 0x8b
0000            134   _DAC3CF0        DATA 0x9a
0000            135   _DAC3CF1        DATA 0x9c
0000            136   _DAC3H          DATA 0x8e
0000            137   _DAC3L          DATA 0x8d
0000            138   _DACGCF0        DATA 0x88
0000            139   _DACGCF1        DATA 0x98
0000            140   _DACGCF2        DATA 0xa2
0000            141   _DERIVID        DATA 0xad
0000            142   _DEVICEID       DATA 0xb5
0000            143   _DPH            DATA 0x83
0000            144   _DPL            DATA 0x82
0000            145   _EIE1           DATA 0xe6
0000            146   _EIE2           DATA 0xf3
0000            147   _EIP1           DATA 0xbb
0000            148   _EIP1H          DATA 0xee
0000            149   _EIP2           DATA 0xed
0000            150   _EIP2H          DATA 0xf6
0000            151   _EMI0CN         DATA 0xe7
0000            152   _FLKEY          DATA 0xb7
0000            153   _HFO0CAL        DATA 0xc7
0000            154   _HFO1CAL        DATA 0xd6
0000            155   _HFOCN          DATA 0xef
0000            156   _I2C0ADM        DATA 0xff
0000            157   _I2C0CN0        DATA 0xba
0000            158   _I2C0DIN        DATA 0xbc
0000            159   _I2C0DOUT       DATA 0xbb
0000            160   _I2C0FCN0       DATA 0xad
0000            161   _I2C0FCN1       DATA 0xab
0000            162   _I2C0FCT        DATA 0xf5
0000            163   _I2C0SLAD       DATA 0xbd
0000            164   _I2C0STAT       DATA 0xb9
0000            165   _IE             DATA 0xa8
0000            166   _IP             DATA 0xb8
0000            167   _IPH            DATA 0xf2
0000            168   _IT01CF         DATA 0xe4
0000            169   _LFO0CN         DATA 0xb1
0000            170   _P0             DATA 0x80
0000            171   _P0MASK         DATA 0xfe
0000            172   _P0MAT          DATA 0xfd
0000            173   _P0MDIN         DATA 0xf1
0000            174   _P0MDOUT        DATA 0xa4
0000            175   _P0SKIP         DATA 0xd4
0000            176   _P1             DATA 0x90
0000            177   _P1MASK         DATA 0xee
0000            178   _P1MAT          DATA 0xed
0000            179   _P1MDIN         DATA 0xf2
0000            180   _P1MDOUT        DATA 0xa5
0000            181   _P1SKIP         DATA 0xd5
0000            182   _P2             DATA 0xa0
0000            183   _P2MASK         DATA 0xfc
0000            184   _P2MAT          DATA 0xfb
0000            185   _P2MDIN         DATA 0xf3
0000            186   _P2MDOUT        DATA 0xa6
0000            187   _P2SKIP         DATA 0xcc
0000            188   _P3             DATA 0xb0
0000            189   _P3MDIN         DATA 0xf4
0000            190   _P3MDOUT        DATA 0x9c
0000            191   _PCA0CENT       DATA 0x9e
0000            192   _PCA0CLR        DATA 0x9c
0000            193   _PCA0CN0        DATA 0xd8
0000            194   _PCA0CPH0       DATA 0xfc
0000            195   _PCA0CPH1       DATA 0xea
0000            196   _PCA0CPH2       DATA 0xec
0000            197   _PCA0CPH3       DATA 0xf5
0000            198   _PCA0CPH4       DATA 0x85
0000            199   _PCA0CPH5       DATA 0xde
0000            200   _PCA0CPL0       DATA 0xfb
0000            201   _PCA0CPL1       DATA 0xe9
0000            202   _PCA0CPL2       DATA 0xeb
0000            203   _PCA0CPL3       DATA 0xf4
0000            204   _PCA0CPL4       DATA 0x84
0000            205   _PCA0CPL5       DATA 0xdd
0000            206   _PCA0CPM0       DATA 0xda
0000            207   _PCA0CPM1       DATA 0xdb
0000            208   _PCA0CPM2       DATA 0xdc
0000            209   _PCA0CPM3       DATA 0xae
0000            210   _PCA0CPM4       DATA 0xaf
0000            211   _PCA0CPM5       DATA 0xcc
0000            212   _PCA0H          DATA 0xfa
0000            213   _PCA0L          DATA 0xf9
0000            214   _PCA0MD         DATA 0xd9
0000            215   _PCA0POL        DATA 0x96
0000            216   _PCA0PWM        DATA 0xf7
0000            217   _PCON0          DATA 0x87
0000            218   _PCON1          DATA 0xcd
0000            219   _PFE0CN         DATA 0xc1
0000            220   _PRTDRV         DATA 0xf6
0000            221   _PSCTL          DATA 0x8f
0000            222   _PSTAT0         DATA 0xaa
0000            223   _PSW            DATA 0xd0
0000            224   _REF0CN         DATA 0xd1
0000            225   _REG0CN         DATA 0xc9
0000            226   _REVID          DATA 0xb6
0000            227   _RSTSRC         DATA 0xef
0000            228   _SBCON1         DATA 0x94
0000            229   _SBRLH1         DATA 0x96
0000            230   _SBRLL1         DATA 0x95
0000            231   _SBUF           DATA 0x99
0000            232   _SBUF0          DATA 0x99
0000            233   _SBUF1          DATA 0x92
0000            234   _SCON           DATA 0x98
0000            235   _SCON0          DATA 0x98
0000            236   _SCON1          DATA 0xc8
0000            237   _SFRPAGE        DATA 0xa7
0000            238   _SFRPGCN        DATA 0xbc
0000            239   _SFRSTACK       DATA 0xd7
0000            240   _SMB0ADM        DATA 0xd6
0000            241   _SMB0ADR        DATA 0xd7
0000            242   _SMB0CF         DATA 0xc1
0000            243   _SMB0CN0        DATA 0xc0
0000            244   _SMB0DAT        DATA 0xc2
0000            245   _SMB0FCN0       DATA 0xc3
0000            246   _SMB0FCN1       DATA 0xc4
0000            247   _SMB0FCT        DATA 0xef
0000            248   _SMB0RXLN       DATA 0xc5
0000            249   _SMB0TC         DATA 0xac
0000            250   _SMOD1          DATA 0x93
0000            251   _SP             DATA 0x81
0000            252   _SPI0CFG        DATA 0xa1
0000            253   _SPI0CKR        DATA 0xa2
0000            254   _SPI0CN0        DATA 0xf8
0000            255   _SPI0DAT        DATA 0xa3
0000            256   _SPI0FCN0       DATA 0x9a
0000            257   _SPI0FCN1       DATA 0x9b
0000            258   _SPI0FCT        DATA 0xf7
0000            259   _SPI0PCF        DATA 0xdf
0000            260   _TCON           DATA 0x88
0000            261   _TH0            DATA 0x8c
0000            262   _TH1            DATA 0x8d
0000            263   _TL0            DATA 0x8a
0000            264   _TL1            DATA 0x8b
0000            265   _TMOD           DATA 0x89
0000            266   _TMR2CN0        DATA 0xc8
0000            267   _TMR2CN1        DATA 0xfd
0000            268   _TMR2H          DATA 0xcf
0000            269   _TMR2L          DATA 0xce
0000            270   _TMR2RLH        DATA 0xcb
0000            271   _TMR2RLL        DATA 0xca
0000            272   _TMR3CN0        DATA 0x91
0000            273   _TMR3CN1        DATA 0xfe
0000            274   _TMR3H          DATA 0x95
0000            275   _TMR3L          DATA 0x94
0000            276   _TMR3RLH        DATA 0x93
0000            277   _TMR3RLL        DATA 0x92
0000            278   _TMR4CN0        DATA 0x98
0000            279   _TMR4CN1        DATA 0xff
0000            280   _TMR4H          DATA 0xa5
0000            281   _TMR4L          DATA 0xa4
0000            282   _TMR4RLH        DATA 0xa3
0000            283   _TMR4RLL        DATA 0xa2
0000            284   _TMR5CN0        DATA 0xc0
0000            285   _TMR5CN1        DATA 0xf1
0000            286   _TMR5H          DATA 0xd5
0000            287   _TMR5L          DATA 0xd4
0000            288   _TMR5RLH        DATA 0xd3
0000            289   _TMR5RLL        DATA 0xd2
0000            290   _UART0PCF       DATA 0xd9
0000            291   _UART1FCN0      DATA 0x9d
0000            292   _UART1FCN1      DATA 0xd8
0000            293   _UART1FCT       DATA 0xfa
0000            294   _UART1LIN       DATA 0x9e
0000            295   _UART1PCF       DATA 0xda
0000            296   _VDM0CN         DATA 0xff
0000            297   _WDTCN          DATA 0x97
0000            298   _XBR0           DATA 0xe1
0000            299   _XBR1           DATA 0xe2
0000            300   _XBR2           DATA 0xe3
0000            301   _XOSC0CN        DATA 0x86
0000            302   _DPTR           DATA 0x8382
0000            303   _TMR2RL         DATA 0xcbca
0000            304   _TMR3RL         DATA 0x9392
0000            305   _TMR4RL         DATA 0xa3a2
0000            306   _TMR5RL         DATA 0xd3d2
0000            307   _TMR0           DATA 0x8c8a
0000            308   _TMR1           DATA 0x8d8b
0000            309   _TMR2           DATA 0xcfce
0000            310   _TMR3           DATA 0x9594
0000            311   _TMR4           DATA 0xa5a4
0000            312   _TMR5           DATA 0xd5d4
0000            313   _SBRL1          DATA 0x9695
0000            314   _PCA0           DATA 0xfaf9
0000            315   _PCA0CP0        DATA 0xfcfb
0000            316   _PCA0CP1        DATA 0xeae9
0000            317   _PCA0CP2        DATA 0xeceb
0000            318   _PCA0CP3        DATA 0xf5f4
0000            319   _PCA0CP4        DATA 0x8584
0000            320   _PCA0CP5        DATA 0xdedd
0000            321   _ADC0ASA        DATA 0xb6b5
0000            322   _ADC0GT         DATA 0xc4c3
0000            323   _ADC0           DATA 0xbebd
0000            324   _ADC0LT         DATA 0xc6c5
0000            325   _DAC0           DATA 0x8584
0000            326   _DAC1           DATA 0x8a89
0000            327   _DAC2           DATA 0x8c8b
0000            328   _DAC3           DATA 0x8e8d
0000            329   ;--------------------------------------------------------
0000            330   ; special function bits
0000            331   ;--------------------------------------------------------
0000            332   _ACC_0          BIT 0xe0
0000            333   _ACC_1          BIT 0xe1
0000            334   _ACC_2          BIT 0xe2
0000            335   _ACC_3          BIT 0xe3
0000            336   _ACC_4          BIT 0xe4
0000            337   _ACC_5          BIT 0xe5
0000            338   _ACC_6          BIT 0xe6
0000            339   _ACC_7          BIT 0xe7
0000            340   _TEMPE          BIT 0xe8
0000            341   _ADGN0          BIT 0xe9
0000            342   _ADGN1          BIT 0xea
0000            343   _ADWINT         BIT 0xeb
0000            344   _ADBUSY         BIT 0xec
0000            345   _ADINT          BIT 0xed
0000            346   _IPOEN          BIT 0xee
0000            347   _ADEN           BIT 0xef
0000            348   _B_0            BIT 0xf0
0000            349   _B_1            BIT 0xf1
0000            350   _B_2            BIT 0xf2
0000            351   _B_3            BIT 0xf3
0000            352   _B_4            BIT 0xf4
0000            353   _B_5            BIT 0xf5
0000            354   _B_6            BIT 0xf6
0000            355   _B_7            BIT 0xf7
0000            356   _C0FIF          BIT 0xe8
0000            357   _C0RIF          BIT 0xe9
0000            358   _C1FIF          BIT 0xea
0000            359   _C1RIF          BIT 0xeb
0000            360   _C2FIF          BIT 0xec
0000            361   _C2RIF          BIT 0xed
0000            362   _C3FIF          BIT 0xee
0000            363   _C3RIF          BIT 0xef
0000            364   _D1SRC0         BIT 0x88
0000            365   _D1SRC1         BIT 0x89
0000            366   _D1AMEN         BIT 0x8a
0000            367   _D01REFSL       BIT 0x8b
0000            368   _D3SRC0         BIT 0x8c
0000            369   _D3SRC1         BIT 0x8d
0000            370   _D3AMEN         BIT 0x8e
0000            371   _D23REFSL       BIT 0x8f
0000            372   _D0UDIS         BIT 0x98
0000            373   _D1UDIS         BIT 0x99
0000            374   _D2UDIS         BIT 0x9a
0000            375   _D3UDIS         BIT 0x9b
0000            376   _EX0            BIT 0xa8
0000            377   _ET0            BIT 0xa9
0000            378   _EX1            BIT 0xaa
0000            379   _ET1            BIT 0xab
0000            380   _ES0            BIT 0xac
0000            381   _ET2            BIT 0xad
0000            382   _ESPI0          BIT 0xae
0000            383   _EA             BIT 0xaf
0000            384   _PX0            BIT 0xb8
0000            385   _PT0            BIT 0xb9
0000            386   _PX1            BIT 0xba
0000            387   _PT1            BIT 0xbb
0000            388   _PS0            BIT 0xbc
0000            389   _PT2            BIT 0xbd
0000            390   _PSPI0          BIT 0xbe
0000            391   _P0_0           BIT 0x80
0000            392   _P0_1           BIT 0x81
0000            393   _P0_2           BIT 0x82
0000            394   _P0_3           BIT 0x83
0000            395   _P0_4           BIT 0x84
0000            396   _P0_5           BIT 0x85
0000            397   _P0_6           BIT 0x86
0000            398   _P0_7           BIT 0x87
0000            399   _P1_0           BIT 0x90
0000            400   _P1_1           BIT 0x91
0000            401   _P1_2           BIT 0x92
0000            402   _P1_3           BIT 0x93
0000            403   _P1_4           BIT 0x94
0000            404   _P1_5           BIT 0x95
0000            405   _P1_6           BIT 0x96
0000            406   _P1_7           BIT 0x97
0000            407   _P2_0           BIT 0xa0
0000            408   _P2_1           BIT 0xa1
0000            409   _P2_2           BIT 0xa2
0000            410   _P2_3           BIT 0xa3
0000            411   _P2_4           BIT 0xa4
0000            412   _P2_5           BIT 0xa5
0000            413   _P2_6           BIT 0xa6
0000            414   _P3_0           BIT 0xb0
0000            415   _P3_1           BIT 0xb1
0000            416   _P3_2           BIT 0xb2
0000            417   _P3_3           BIT 0xb3
0000            418   _P3_4           BIT 0xb4
0000            419   _P3_7           BIT 0xb7
0000            420   _CCF0           BIT 0xd8
0000            421   _CCF1           BIT 0xd9
0000            422   _CCF2           BIT 0xda
0000            423   _CCF3           BIT 0xdb
0000            424   _CCF4           BIT 0xdc
0000            425   _CCF5           BIT 0xdd
0000            426   _CR             BIT 0xde
0000            427   _CF             BIT 0xdf
0000            428   _PARITY         BIT 0xd0
0000            429   _F1             BIT 0xd1
0000            430   _OV             BIT 0xd2
0000            431   _RS0            BIT 0xd3
0000            432   _RS1            BIT 0xd4
0000            433   _F0             BIT 0xd5
0000            434   _AC             BIT 0xd6
0000            435   _CY             BIT 0xd7
0000            436   _RI             BIT 0x98
0000            437   _TI             BIT 0x99
0000            438   _RB8            BIT 0x9a
0000            439   _TB8            BIT 0x9b
0000            440   _REN            BIT 0x9c
0000            441   _CE             BIT 0x9d
0000            442   _SMODE          BIT 0x9e
0000            443   _RI1            BIT 0xc8
0000            444   _TI1            BIT 0xc9
0000            445   _RBX1           BIT 0xca
0000            446   _TBX1           BIT 0xcb
0000            447   _REN1           BIT 0xcc
0000            448   _PERR1          BIT 0xcd
0000            449   _OVR1           BIT 0xce
0000            450   _SI             BIT 0xc0
0000            451   _ACK            BIT 0xc1
0000            452   _ARBLOST        BIT 0xc2
0000            453   _ACKRQ          BIT 0xc3
0000            454   _STO            BIT 0xc4
0000            455   _STA            BIT 0xc5
0000            456   _TXMODE         BIT 0xc6
0000            457   _MASTER         BIT 0xc7
0000            458   _SPIEN          BIT 0xf8
0000            459   _TXNF           BIT 0xf9
0000            460   _NSSMD0         BIT 0xfa
0000            461   _NSSMD1         BIT 0xfb
0000            462   _RXOVRN         BIT 0xfc
0000            463   _MODF           BIT 0xfd
0000            464   _WCOL           BIT 0xfe
0000            465   _SPIF           BIT 0xff
0000            466   _IT0            BIT 0x88
0000            467   _IE0            BIT 0x89
0000            468   _IT1            BIT 0x8a
0000            469   _IE1            BIT 0x8b
0000            470   _TR0            BIT 0x8c
0000            471   _TF0            BIT 0x8d
0000            472   _TR1            BIT 0x8e
0000            473   _TF1            BIT 0x8f
0000            474   _T2XCLK0        BIT 0xc8
0000            475   _T2XCLK1        BIT 0xc9
0000            476   _TR2            BIT 0xca
0000            477   _T2SPLIT        BIT 0xcb
0000            478   _TF2CEN         BIT 0xcc
0000            479   _TF2LEN         BIT 0xcd
0000            480   _TF2L           BIT 0xce
0000            481   _TF2H           BIT 0xcf
0000            482   _T4XCLK0        BIT 0x98
0000            483   _T4XCLK1        BIT 0x99
0000            484   _TR4            BIT 0x9a
0000            485   _T4SPLIT        BIT 0x9b
0000            486   _TF4CEN         BIT 0x9c
0000            487   _TF4LEN         BIT 0x9d
0000            488   _TF4L           BIT 0x9e
0000            489   _TF4H           BIT 0x9f
0000            490   _T5XCLK0        BIT 0xc0
0000            491   _T5XCLK1        BIT 0xc1
0000            492   _TR5            BIT 0xc2
0000            493   _T5SPLIT        BIT 0xc3
0000            494   _TF5CEN         BIT 0xc4
0000            495   _TF5LEN         BIT 0xc5
0000            496   _TF5L           BIT 0xc6
0000            497   _TF5H           BIT 0xc7
0000            498   _RIE            BIT 0xd8
0000            499   _RXTO0          BIT 0xd9
0000            500   _RXTO1          BIT 0xda
0000            501   _RFRQ           BIT 0xdb
0000            502   _TIE            BIT 0xdc
0000            503   _TXHOLD         BIT 0xdd
0000            504   _TXNF1          BIT 0xde
0000            505   _TFRQ           BIT 0xdf
0000            506   ;--------------------------------------------------------
0000            507   ; overlayable register banks
0000            508   ;--------------------------------------------------------
0000            509            rbank0 segment data overlay
0000            510   ;--------------------------------------------------------
0000            511   ; internal ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_DSEG
0000            514   _pwm_count:
0000            515            ds 1
0001            516   _pwm_count1:
0001            517            ds 1
0002            518   _pwm_count2:
0002            519            ds 1
0003            520   _pwm_count3:
0003            521            ds 1
0004            522   _pwmSig1:
0004            523            ds 2
0006            524   _pwmSig2:
0006            525            ds 2
0008            526   _pwmSig3:
0008            527            ds 2
000A            528   _pwmSig4:
000A            529            ds 2
000C            530   _pwmSig5:
000C            531            ds 2
000E            532   _pwmSig6:
000E            533            ds 2
0010            534   _cartMoveF:
0010            535            ds 2
0012            536   _cartMoveB:
0012            537            ds 2
0014            538   _flag:
0014            539            ds 2
0016            540   _claw_flag:
0016            541            ds 2
0018            542   _stop:
0018            543            ds 8
0020            544   _forward:
0020            545            ds 8
0028            546   _backward:
0028            547            ds 8
0030            548   _left:
0030            549            ds 8
0038            550   _right:
0038            551            ds 8
0040            552   _command:
0040            553            ds 8
0048            554   _checkTime_overflow_count_1_73:
0048            555            ds 2
004A            556   _main_pasttime_1_82:
004A            557            ds 4
004E            558   ;--------------------------------------------------------
004E            559   ; overlayable items in internal ram 
004E            560   ;--------------------------------------------------------
0000            561            rseg    R_OSEG
0000            562            rseg    R_OSEG
0000            563            rseg    R_OSEG
0000            564   _InitPinADC_PARM_2:
0000            565            ds 1
0001            566   ;--------------------------------------------------------
0001            567   ; indirectly addressable internal ram data
0001            568   ;--------------------------------------------------------
0000            569            rseg R_ISEG
0000            570   ;--------------------------------------------------------
0000            571   ; absolute internal ram data
0000            572   ;--------------------------------------------------------
0000            573            DSEG
0000            574   ;--------------------------------------------------------
0000            575   ; bit data
0000            576   ;--------------------------------------------------------
0000            577            rseg R_BSEG
0000            578   _Timer2_ISR_sloc0_1_0:
0000            579            DBIT    1
0001            580   ;--------------------------------------------------------
0001            581   ; paged external ram data
0001            582   ;--------------------------------------------------------
0000            583            rseg R_PSEG
0000            584   ;--------------------------------------------------------
0000            585   ; external ram data
0000            586   ;--------------------------------------------------------
0000            587            rseg R_XSEG
0000            588   ;--------------------------------------------------------
0000            589   ; absolute external ram data
0000            590   ;--------------------------------------------------------
0000            591            XSEG
0000            592   ;--------------------------------------------------------
0000            593   ; external initialized ram data
0000            594   ;--------------------------------------------------------
0000            595            rseg R_IXSEG
0000            596            rseg R_HOME
0000            597            rseg R_GSINIT
0000            598            rseg R_CSEG
0000            599   ;--------------------------------------------------------
0000            600   ; Reset entry point and interrupt vectors
0000            601   ;--------------------------------------------------------
0000            602            CSEG at 0x0000
0000 020100     603            ljmp    _crt0
002B            604            CSEG at 0x002b
002B 020100     605            ljmp    _Timer2_ISR
002E            606   ;--------------------------------------------------------
002E            607   ; global & static initialisations
002E            608   ;--------------------------------------------------------
0000            609            rseg R_HOME
0000            610            rseg R_GSINIT
0000            611            rseg R_GSINIT
0000            612   ;--------------------------------------------------------
0000            613   ; data variables initialization
0000            614   ;--------------------------------------------------------
0000            615            rseg R_DINIT
0000            616   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:50: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 752000     617            mov     _pwm_count,#0x00
0003            618   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:51: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75E000     619            mov     _pwm_count1,#0x00
0006            620   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:52: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 75A000     621            mov     _pwm_count2,#0x00
0009            622   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:53: volatile unsigned char pwm_count3 = 0; //
0009 756000     623            mov     _pwm_count3,#0x00
000C            624   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:68: volatile int flag = 0;
000C E4         625            clr     a
000D F5F0       626            mov     _flag,a
000F F5F1       627            mov     (_flag + 1),a
0011            628   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:69: volatile int claw_flag = 0;
0011 E4         629            clr     a
0012 F5B0       630            mov     _claw_flag,a
0014 F5B1       631            mov     (_claw_flag + 1),a
0016            632   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:70: int stop[]={1,0,0,0};
0016 757001     633            mov     _stop,#0x01
0019 757100     634            mov     (_stop + 1),#0x00
001C 757200     635            mov     (_stop + 0x0002),#0x00
001F 757300     636            mov     ((_stop + 0x0002) + 1),#0x00
0022 757400     637            mov     (_stop + 0x0004),#0x00
0025 757500     638            mov     ((_stop + 0x0004) + 1),#0x00
0028 757600     639            mov     (_stop + 0x0006),#0x00
002B 757700     640            mov     ((_stop + 0x0006) + 1),#0x00
002E            641   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:71: int forward[]={1,1,1,1};
002E 753001     642            mov     _forward,#0x01
0031 753100     643            mov     (_forward + 1),#0x00
0034 753201     644            mov     (_forward + 0x0002),#0x01
0037 753300     645            mov     ((_forward + 0x0002) + 1),#0x00
003A 753401     646            mov     (_forward + 0x0004),#0x01
003D 753500     647            mov     ((_forward + 0x0004) + 1),#0x00
0040 753601     648            mov     (_forward + 0x0006),#0x01
0043 753700     649            mov     ((_forward + 0x0006) + 1),#0x00
0046            650   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:72: int backward[]={1,0,0,0};
0046 75F001     651            mov     _backward,#0x01
0049 75F100     652            mov     (_backward + 1),#0x00
004C 75F200     653            mov     (_backward + 0x0002),#0x00
004F 75F300     654            mov     ((_backward + 0x0002) + 1),#0x00
0052 75F400     655            mov     (_backward + 0x0004),#0x00
0055 75F500     656            mov     ((_backward + 0x0004) + 1),#0x00
0058 75F600     657            mov     (_backward + 0x0006),#0x00
005B 75F700     658            mov     ((_backward + 0x0006) + 1),#0x00
005E            659   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:73: int left[]={1,0,1,0};
005E 75B001     660            mov     _left,#0x01
0061 75B100     661            mov     (_left + 1),#0x00
0064 75B200     662            mov     (_left + 0x0002),#0x00
0067 75B300     663            mov     ((_left + 0x0002) + 1),#0x00
006A 75B401     664            mov     (_left + 0x0004),#0x01
006D 75B500     665            mov     ((_left + 0x0004) + 1),#0x00
0070 75B600     666            mov     (_left + 0x0006),#0x00
0073 75B700     667            mov     ((_left + 0x0006) + 1),#0x00
0076            668   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:74: int right[]={1,1,0,1};
0076 757001     669            mov     _right,#0x01
0079 757100     670            mov     (_right + 1),#0x00
007C 757201     671            mov     (_right + 0x0002),#0x01
007F 757300     672            mov     ((_right + 0x0002) + 1),#0x00
0082 757400     673            mov     (_right + 0x0004),#0x00
0085 757500     674            mov     ((_right + 0x0004) + 1),#0x00
0088 757601     675            mov     (_right + 0x0006),#0x01
008B 757700     676            mov     ((_right + 0x0006) + 1),#0x00
008E            677   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:76: int command[4] = {0,0,0,0};
008E 753000     678            mov     _command,#0x00
0091 753100     679            mov     (_command + 1),#0x00
0094 753200     680            mov     (_command + 0x0002),#0x00
0097 753300     681            mov     ((_command + 0x0002) + 1),#0x00
009A 753400     682            mov     (_command + 0x0004),#0x00
009D 753500     683            mov     ((_command + 0x0004) + 1),#0x00
00A0 753600     684            mov     (_command + 0x0006),#0x00
00A3 753700     685            mov     ((_command + 0x0006) + 1),#0x00
00A6            686            ; The linker places a 'ret' at the end of segment R_DINIT.
00A6            687   ;--------------------------------------------------------
00A6            688   ; code
00A6            689   ;--------------------------------------------------------
0000            690            rseg R_CSEG
0000            691   ;------------------------------------------------------------
0000            692   ;Allocation info for local variables in function '_c51_external_startup'
0000            693   ;------------------------------------------------------------
0000            694   ;------------------------------------------------------------
0000            695   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:78: char _c51_external_startup(void)
0000            696   ;        -----------------------------------------
0000            697   ;         function _c51_external_startup
0000            698   ;        -----------------------------------------
0000            699   __c51_external_startup:
0000            700            using   0
0000            701   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:81: SFRPAGE = 0x00;
0000 75A700     702            mov     _SFRPAGE,#0x00
0003            703   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:82: WDTCN = 0xDE; //First key
0003 7597DE     704            mov     _WDTCN,#0xDE
0006            705   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:83: WDTCN = 0xAD; //Second key
0006 7597AD     706            mov     _WDTCN,#0xAD
0009            707   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:85: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     708            mov     _VDM0CN,#0x80
000C            709   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:86: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     710            mov     _RSTSRC,#0x06
000F            711   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:93: SFRPAGE = 0x10;
000F 75A710     712            mov     _SFRPAGE,#0x10
0012            713   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:94: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     714            mov     _PFE0CN,#0x20
0015            715   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:95: SFRPAGE = 0x00;
0015 75A700     716            mov     _SFRPAGE,#0x00
0018            717   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:116: CLKSEL = 0x00;
0018 75A900     718            mov     _CLKSEL,#0x00
001B            719   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:117: CLKSEL = 0x00;
001B 75A900     720            mov     _CLKSEL,#0x00
001E            721   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:118: while ((CLKSEL & 0x80) == 0);
001E            722   L002001?:
001E E5A9       723            mov     a,_CLKSEL
0020 30E758     724            jnb     acc.7,L002001?
0023            725   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:119: CLKSEL = 0x03;
0023 75A903     726            mov     _CLKSEL,#0x03
0026            727   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:120: CLKSEL = 0x03;
0026 75A903     728            mov     _CLKSEL,#0x03
0029            729   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:121: while ((CLKSEL & 0x80) == 0);
0029            730   L002004?:
0029 E5A9       731            mov     a,_CLKSEL
002B 30E7D8     732            jnb     acc.7,L002004?
002E            733   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:126: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     734            orl     _P0MDOUT,#0x10
0031            735   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:127: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     736            mov     _XBR0,#0x01
0034            737   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:128: XBR1 = 0X00;
0034 75E200     738            mov     _XBR1,#0x00
0037            739   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:129: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     740            mov     _XBR2,#0x40
003A            741   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:135: SCON0 = 0x10;
003A 759810     742            mov     _SCON0,#0x10
003D            743   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:136: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     744            mov     _TH1,#0xE6
0040            745   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:137: TL1 = TH1;      // Init Timer1
0040 858D8B     746            mov     _TL1,_TH1
0043            747   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:138: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     748            anl     _TMOD,#0x0F
0046            749   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:139: TMOD |= 0x20;
0046 438920     750            orl     _TMOD,#0x20
0049            751   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:140: TR1 = 1; // START Timer1
0049 D28E       752            setb    _TR1
004B            753   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:141: TI = 1;  // Indicate TX0 ready
004B D299       754            setb    _TI
004D            755   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:144: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     756            mov     _TMR2CN0,#0x00
0050            757   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:145: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     758            orl     _CKCON0,#0x10
0053            759   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:146: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     760            mov     _TMR2RL,#0xE0
0056 75CBE3     761            mov     (_TMR2RL >> 8),#0xE3
0059            762   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:147: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     763            mov     _TMR2,#0xFF
005C 75CFFF     764            mov     (_TMR2 >> 8),#0xFF
005F            765   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:148: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       766            setb    _ET2
0061            767   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:149: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       768            setb    _TR2
0063            769   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:166: EA = 1; // Enable interrupts
0063 D2AF       770            setb    _EA
0065            771   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:169: return 0;
0065 758200     772            mov     dpl,#0x00
0068 22         773            ret
0069            774   ;------------------------------------------------------------
0069            775   ;Allocation info for local variables in function 'Timer3us'
0069            776   ;------------------------------------------------------------
0069            777   ;us                        Allocated to registers r2 r3 
0069            778   ;i                         Allocated to registers r4 r5 
0069            779   ;------------------------------------------------------------
0069            780   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:171: void Timer3us(unsigned int us)
0069            781   ;        -----------------------------------------
0069            782   ;         function Timer3us
0069            783   ;        -----------------------------------------
0069            784   _Timer3us:
0069 AA82       785            mov     r2,dpl
006B AB83       786            mov     r3,dph
006D            787   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:176: CKCON0|=0b_0100_0000;
006D 438E40     788            orl     _CKCON0,#0x40
0070            789   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:178: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     790            mov     _TMR3RL,#0xB8
0073 7593FF     791            mov     (_TMR3RL >> 8),#0xFF
0076            792   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:179: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     793            mov     _TMR3,_TMR3RL
0079 859395     794            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            795   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:181: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     796            mov     _TMR3CN0,#0x04
007F            797   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:182: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       798            mov     r4,#0x00
0081 7D00       799            mov     r5,#0x00
0083            800   L003004?:
0083 C3         801            clr     c
0084 EC         802            mov     a,r4
0085 9A         803            subb    a,r2
0086 ED         804            mov     a,r5
0087 9B         805            subb    a,r3
0088 5001       806            jnc     L003007?
008A            807   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:184: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            808   L003001?:
008A E591       809            mov     a,_TMR3CN0
008C 30E718     810            jnb     acc.7,L003001?
008F            811   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:185: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     812            anl     _TMR3CN0,#0x7F
0092            813   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:182: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         814            inc     r4
0093 BC0098     815            cjne    r4,#0x00,L003004?
0096 0D         816            inc     r5
0097 8001       817            sjmp    L003004?
0099            818   L003007?:
0099            819   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:187: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     820            mov     _TMR3CN0,#0x00
009C 22         821            ret
009D            822   ;------------------------------------------------------------
009D            823   ;Allocation info for local variables in function 'waitms'
009D            824   ;------------------------------------------------------------
009D            825   ;ms                        Allocated to registers r2 r3 
009D            826   ;j                         Allocated to registers r4 r5 
009D            827   ;k                         Allocated to registers r6 
009D            828   ;------------------------------------------------------------
009D            829   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:189: void waitms (unsigned int ms)
009D            830   ;        -----------------------------------------
009D            831   ;         function waitms
009D            832   ;        -----------------------------------------
009D            833   _waitms:
009D AA82       834            mov     r2,dpl
009F AB83       835            mov     r3,dph
00A1            836   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:193: for(j=0; j<ms; j++)
00A1 7C00       837            mov     r4,#0x00
00A3 7D00       838            mov     r5,#0x00
00A5            839   L004005?:
00A5 C3         840            clr     c
00A6 EC         841            mov     a,r4
00A7 9A         842            subb    a,r2
00A8 ED         843            mov     a,r5
00A9 9B         844            subb    a,r3
00AA 5001       845            jnc     L004009?
00AC            846   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:194: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       847            mov     r6,#0x00
00AE            848   L004001?:
00AE BE0418     849            cjne    r6,#0x04,L004018?
00B1            850   L004018?:
00B1 5001       851            jnc     L004007?
00B3 9000FA     852            mov     dptr,#0x00FA
00B6 C002       853            push    ar2
00B8 C003       854            push    ar3
00BA C004       855            push    ar4
00BC C005       856            push    ar5
00BE C006       857            push    ar6
00C0 120100     858            lcall   _Timer3us
00C3 D006       859            pop     ar6
00C5 D005       860            pop     ar5
00C7 D004       861            pop     ar4
00C9 D003       862            pop     ar3
00CB D002       863            pop     ar2
00CD 0E         864            inc     r6
00CE 8001       865            sjmp    L004001?
00D0            866   L004007?:
00D0            867   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:193: for(j=0; j<ms; j++)
00D0 0C         868            inc     r4
00D1 BC0058     869            cjne    r4,#0x00,L004005?
00D4 0D         870            inc     r5
00D5 8001       871            sjmp    L004005?
00D7            872   L004009?:
00D7 22         873            ret
00D8            874   ;------------------------------------------------------------
00D8            875   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            876   ;------------------------------------------------------------
00D8            877   ;pin                       Allocated to registers 
00D8            878   ;------------------------------------------------------------
00D8            879   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:197: unsigned int ADC_at_Pin(unsigned char pin)
00D8            880   ;        -----------------------------------------
00D8            881   ;         function ADC_at_Pin
00D8            882   ;        -----------------------------------------
00D8            883   _ADC_at_Pin:
00D8 8582BB     884            mov     _ADC0MX,dpl
00DB            885   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:200: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       886            setb    _ADBUSY
00DD            887   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:201: while (ADBUSY); // Wait for dummy conversion to finish
00DD            888   L005001?:
00DD 20EC98     889            jb      _ADBUSY,L005001?
00E0            890   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:202: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       891            setb    _ADBUSY
00E2            892   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:203: while (ADBUSY); // Wait for conversion to complete
00E2            893   L005004?:
00E2 20ECD8     894            jb      _ADBUSY,L005004?
00E5            895   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:204: return (ADC0);
00E5 85BD82     896            mov     dpl,_ADC0
00E8 85BE83     897            mov     dph,(_ADC0 >> 8)
00EB 22         898            ret
00EC            899   ;------------------------------------------------------------
00EC            900   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            901   ;------------------------------------------------------------
00EC            902   ;------------------------------------------------------------
00EC            903   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:208: void Timer2_ISR(void) interrupt 5
00EC            904   ;        -----------------------------------------
00EC            905   ;         function Timer2_ISR
00EC            906   ;        -----------------------------------------
00EC            907   _Timer2_ISR:
00EC C0E0       908            push    acc
00EE C002       909            push    ar2
00F0 C003       910            push    ar3
00F2 C0D0       911            push    psw
00F4 75D000     912            mov     psw,#0x00
00F7            913   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:210: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       914            clr     _TF2H
00F9            915   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:212: pwm_count++;
00F9 0520       916            inc     _pwm_count
00FB            917   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:213: if (pwm_count>100)
00FB E520       918            mov     a,_pwm_count
00FD 249B       919            add     a,#0xff - 0x64
00FF 5001       920            jnc     L006002?
0101            921   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:214: pwm_count = 0;
0101 752000     922            mov     _pwm_count,#0x00
0104            923   L006002?:
0104            924   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:217: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AA20       925            mov     r2,_pwm_count
0106 7B00       926            mov     r3,#0x00
0108 C3         927            clr     c
0109 E520       928            mov     a,_pwmSig1
010B 9A         929            subb    a,r2
010C E521       930            mov     a,(_pwmSig1 + 1)
010E 9B         931            subb    a,r3
010F 92D8       932            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         933            cpl     c
0112 9294       934            mov     _P1_4,c
0114            935   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:218: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AA20       936            mov     r2,_pwm_count
0116 7B00       937            mov     r3,#0x00
0118 C3         938            clr     c
0119 E5E0       939            mov     a,_pwmSig2
011B 9A         940            subb    a,r2
011C E5E1       941            mov     a,(_pwmSig2 + 1)
011E 9B         942            subb    a,r3
011F 92D8       943            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         944            cpl     c
0122 9295       945            mov     _P1_5,c
0124            946   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:220: motorL1 = pwm_count>pwmSig1 ? 0 : 1;
0124 AA20       947            mov     r2,_pwm_count
0126 7B00       948            mov     r3,#0x00
0128 C3         949            clr     c
0129 E520       950            mov     a,_pwmSig1
012B 9A         951            subb    a,r2
012C E521       952            mov     a,(_pwmSig1 + 1)
012E 9B         953            subb    a,r3
012F 92D8       954            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         955            cpl     c
0132 9292       956            mov     _P1_2,c
0134            957   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:221: motorL2 = pwm_count>pwmSig2 ? 0 : 1;
0134 AA20       958            mov     r2,_pwm_count
0136 7B00       959            mov     r3,#0x00
0138 C3         960            clr     c
0139 E5E0       961            mov     a,_pwmSig2
013B 9A         962            subb    a,r2
013C E5E1       963            mov     a,(_pwmSig2 + 1)
013E 9B         964            subb    a,r3
013F 92D8       965            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         966            cpl     c
0142 9293       967            mov     _P1_3,c
0144 D0D0       968            pop     psw
0146 D003       969            pop     ar3
0148 D002       970            pop     ar2
014A D0E0       971            pop     acc
014C 32         972            reti
014D            973   ;        eliminated unneeded push/pop dpl
014D            974   ;        eliminated unneeded push/pop dph
014D            975   ;        eliminated unneeded push/pop b
014D            976   ;------------------------------------------------------------
014D            977   ;Allocation info for local variables in function 'InitADC'
014D            978   ;------------------------------------------------------------
014D            979   ;------------------------------------------------------------
014D            980   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:227: void InitADC(void)
014D            981   ;        -----------------------------------------
014D            982   ;         function InitADC
014D            983   ;        -----------------------------------------
014D            984   _InitADC:
014D            985   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:229: SFRPAGE = 0x00;
014D 75A700     986            mov     _SFRPAGE,#0x00
0150            987   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:230: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0150 75B280     988            mov     _ADC0CN1,#0x80
0153            989   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:231: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0153 75BCF8     990            mov     _ADC0CF0,#0xF8
0156            991   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:232: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0156 75B91E     992            mov     _ADC0CF1,#0x1E
0159            993   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:233: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0159 75E800     994            mov     _ADC0CN0,#0x00
015C            995   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:234: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
015C 75DF3F     996            mov     _ADC0CF2,#0x3F
015F            997   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:235: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
015F 75B300     998            mov     _ADC0CN2,#0x00
0162            999   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:236: ADEN = 1; // Enable ADC
0162 D2EF      1000            setb    _ADEN
0164 22        1001            ret
0165           1002   ;------------------------------------------------------------
0165           1003   ;Allocation info for local variables in function 'TIMER0_Init'
0165           1004   ;------------------------------------------------------------
0165           1005   ;------------------------------------------------------------
0165           1006   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:238: void TIMER0_Init(void)
0165           1007   ;        -----------------------------------------
0165           1008   ;         function TIMER0_Init
0165           1009   ;        -----------------------------------------
0165           1010   _TIMER0_Init:
0165           1011   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:240: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0165 5389F0    1012            anl     _TMOD,#0xF0
0168           1013   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:241: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0168 438901    1014            orl     _TMOD,#0x01
016B           1015   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:242: TR0 = 0; // Stop Timer/Counter 0
016B C28C      1016            clr     _TR0
016D 22        1017            ret
016E           1018   ;------------------------------------------------------------
016E           1019   ;Allocation info for local variables in function 'Volts_at_Pin'
016E           1020   ;------------------------------------------------------------
016E           1021   ;pin                       Allocated to registers r2 
016E           1022   ;------------------------------------------------------------
016E           1023   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:247: float Volts_at_Pin(unsigned char pin)
016E           1024   ;        -----------------------------------------
016E           1025   ;         function Volts_at_Pin
016E           1026   ;        -----------------------------------------
016E           1027   _Volts_at_Pin:
016E           1028   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:249: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
016E 120100    1029            lcall   _ADC_at_Pin
0171 120100    1030            lcall   ___uint2fs
0174 AA82      1031            mov     r2,dpl
0176 AB83      1032            mov     r3,dph
0178 ACF0      1033            mov     r4,b
017A FD        1034            mov     r5,a
017B C002      1035            push    ar2
017D C003      1036            push    ar3
017F C004      1037            push    ar4
0181 C005      1038            push    ar5
0183 906C8B    1039            mov     dptr,#0x6C8B
0186 75F053    1040            mov     b,#0x53
0189 7440      1041            mov     a,#0x40
018B 120100    1042            lcall   ___fsmul
018E AA82      1043            mov     r2,dpl
0190 AB83      1044            mov     r3,dph
0192 ACF0      1045            mov     r4,b
0194 FD        1046            mov     r5,a
0195 E581      1047            mov     a,sp
0197 24FC      1048            add     a,#0xfc
0199 F581      1049            mov     sp,a
019B E4        1050            clr     a
019C C0E0      1051            push    acc
019E 74FC      1052            mov     a,#0xFC
01A0 C0E0      1053            push    acc
01A2 747F      1054            mov     a,#0x7F
01A4 C0E0      1055            push    acc
01A6 7446      1056            mov     a,#0x46
01A8 C0E0      1057            push    acc
01AA 8A82      1058            mov     dpl,r2
01AC 8B83      1059            mov     dph,r3
01AE 8CF0      1060            mov     b,r4
01B0 ED        1061            mov     a,r5
01B1 120100    1062            lcall   ___fsdiv
01B4 AA82      1063            mov     r2,dpl
01B6 AB83      1064            mov     r3,dph
01B8 ACF0      1065            mov     r4,b
01BA FD        1066            mov     r5,a
01BB E581      1067            mov     a,sp
01BD 24FC      1068            add     a,#0xfc
01BF F581      1069            mov     sp,a
01C1 8A82      1070            mov     dpl,r2
01C3 8B83      1071            mov     dph,r3
01C5 8CF0      1072            mov     b,r4
01C7 ED        1073            mov     a,r5
01C8 22        1074            ret
01C9           1075   ;------------------------------------------------------------
01C9           1076   ;Allocation info for local variables in function 'InitPinADC'
01C9           1077   ;------------------------------------------------------------
01C9           1078   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01C9           1079   ;portno                    Allocated to registers r2 
01C9           1080   ;mask                      Allocated to registers r3 
01C9           1081   ;------------------------------------------------------------
01C9           1082   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:251: void InitPinADC(unsigned char portno, unsigned char pinno)
01C9           1083   ;        -----------------------------------------
01C9           1084   ;         function InitPinADC
01C9           1085   ;        -----------------------------------------
01C9           1086   _InitPinADC:
01C9 AA82      1087            mov     r2,dpl
01CB           1088   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:255: mask = 1 << pinno;
01CB 8550F0    1089            mov     b,_InitPinADC_PARM_2
01CE 05F0      1090            inc     b
01D0 7401      1091            mov     a,#0x01
01D2 8001      1092            sjmp    L010013?
01D4           1093   L010011?:
01D4 25E0      1094            add     a,acc
01D6           1095   L010013?:
01D6 D5F018    1096            djnz    b,L010011?
01D9 FB        1097            mov     r3,a
01DA           1098   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:257: SFRPAGE = 0x20;
01DA 75A720    1099            mov     _SFRPAGE,#0x20
01DD           1100   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:258: switch (portno)
01DD BA0058    1101            cjne    r2,#0x00,L010014?
01E0 8001      1102            sjmp    L010001?
01E2           1103   L010014?:
01E2 BA01D8    1104            cjne    r2,#0x01,L010015?
01E5 8001      1105            sjmp    L010002?
01E7           1106   L010015?:
01E7           1107   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:260: case 0:
01E7 BA0258    1108            cjne    r2,#0x02,L010005?
01EA 8001      1109            sjmp    L010003?
01EC           1110   L010001?:
01EC           1111   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:261: P0MDIN &= (~mask); // Set pin as analog input
01EC EB        1112            mov     a,r3
01ED F4        1113            cpl     a
01EE FA        1114            mov     r2,a
01EF 52F1      1115            anl     _P0MDIN,a
01F1           1116   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:262: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01F1 EB        1117            mov     a,r3
01F2 42D4      1118            orl     _P0SKIP,a
01F4           1119   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:263: break;
01F4           1120   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:264: case 1:
01F4 8001      1121            sjmp    L010005?
01F6           1122   L010002?:
01F6           1123   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:265: P1MDIN &= (~mask); // Set pin as analog input
01F6 EB        1124            mov     a,r3
01F7 F4        1125            cpl     a
01F8 FA        1126            mov     r2,a
01F9 52F2      1127            anl     _P1MDIN,a
01FB           1128   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:266: P1SKIP |= mask; // Skip Crossbar decoding for this pin
01FB EB        1129            mov     a,r3
01FC 42D5      1130            orl     _P1SKIP,a
01FE           1131   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:267: break;
01FE           1132   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:268: case 2:
01FE 8001      1133            sjmp    L010005?
0200           1134   L010003?:
0200           1135   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:269: P2MDIN &= (~mask); // Set pin as analog input
0200 EB        1136            mov     a,r3
0201 F4        1137            cpl     a
0202 FA        1138            mov     r2,a
0203 52F3      1139            anl     _P2MDIN,a
0205           1140   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:270: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0205 EB        1141            mov     a,r3
0206 42CC      1142            orl     _P2SKIP,a
0208           1143   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:274: }
0208           1144   L010005?:
0208           1145   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:275: SFRPAGE = 0x00;
0208 75A700    1146            mov     _SFRPAGE,#0x00
020B 22        1147            ret
020C           1148   ;------------------------------------------------------------
020C           1149   ;Allocation info for local variables in function 'PWMforward'
020C           1150   ;------------------------------------------------------------
020C           1151   ;------------------------------------------------------------
020C           1152   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:284: void PWMforward(void) {
020C           1153   ;        -----------------------------------------
020C           1154   ;         function PWMforward
020C           1155   ;        -----------------------------------------
020C           1156   _PWMforward:
020C           1157   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:285: pwmSig1 = 99;
020C 752063    1158            mov     _pwmSig1,#0x63
020F E4        1159            clr     a
0210 F521      1160            mov     (_pwmSig1 + 1),a
0212           1161   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:286: pwmSig2 = 0;
0212           1162   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:288: pwmSig3 = 0;
0212 E4        1163            clr     a
0213 F5E0      1164            mov     _pwmSig2,a
0215 F5E1      1165            mov     (_pwmSig2 + 1),a
0217 F5A0      1166            mov     _pwmSig3,a
0219 F5A1      1167            mov     (_pwmSig3 + 1),a
021B           1168   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:289: pwmSig4 =99;
021B 757863    1169            mov     _pwmSig4,#0x63
021E E4        1170            clr     a
021F F579      1171            mov     (_pwmSig4 + 1),a
0221           1172   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:290: printf("Forward\n\r");
0221 74D8      1173            mov     a,#__str_0
0223 C0E0      1174            push    acc
0225 74C1      1175            mov     a,#(__str_0 >> 8)
0227 C0E0      1176            push    acc
0229 7480      1177            mov     a,#0x80
022B C0E0      1178            push    acc
022D 120100    1179            lcall   _printf
0230 1581      1180            dec     sp
0232 1581      1181            dec     sp
0234 1581      1182            dec     sp
0236 22        1183            ret
0237           1184   ;------------------------------------------------------------
0237           1185   ;Allocation info for local variables in function 'PWMbackward'
0237           1186   ;------------------------------------------------------------
0237           1187   ;------------------------------------------------------------
0237           1188   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:293: void PWMbackward(void) {
0237           1189   ;        -----------------------------------------
0237           1190   ;         function PWMbackward
0237           1191   ;        -----------------------------------------
0237           1192   _PWMbackward:
0237           1193   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:294: pwmSig1 = 0;
0237 E4        1194            clr     a
0238 F520      1195            mov     _pwmSig1,a
023A F521      1196            mov     (_pwmSig1 + 1),a
023C           1197   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:295: pwmSig2 = 99;
023C 75E063    1198            mov     _pwmSig2,#0x63
023F E4        1199            clr     a
0240 F5E1      1200            mov     (_pwmSig2 + 1),a
0242           1201   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:297: pwmSig3 = 99;
0242 75A063    1202            mov     _pwmSig3,#0x63
0245 E4        1203            clr     a
0246 F5A1      1204            mov     (_pwmSig3 + 1),a
0248           1205   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:298: pwmSig4 = 0;
0248 E4        1206            clr     a
0249 F578      1207            mov     _pwmSig4,a
024B F579      1208            mov     (_pwmSig4 + 1),a
024D           1209   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:299: printf("Backward\n\r");
024D 7458      1210            mov     a,#__str_1
024F C0E0      1211            push    acc
0251 74C2      1212            mov     a,#(__str_1 >> 8)
0253 C0E0      1213            push    acc
0255 7480      1214            mov     a,#0x80
0257 C0E0      1215            push    acc
0259 120100    1216            lcall   _printf
025C 1581      1217            dec     sp
025E 1581      1218            dec     sp
0260 1581      1219            dec     sp
0262 22        1220            ret
0263           1221   ;------------------------------------------------------------
0263           1222   ;Allocation info for local variables in function 'PWMLeft'
0263           1223   ;------------------------------------------------------------
0263           1224   ;------------------------------------------------------------
0263           1225   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:302: void PWMLeft(void) {
0263           1226   ;        -----------------------------------------
0263           1227   ;         function PWMLeft
0263           1228   ;        -----------------------------------------
0263           1229   _PWMLeft:
0263           1230   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:303: pwmSig1 = 0;
0263           1231   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:304: pwmSig2 = 0;
0263 E4        1232            clr     a
0264 F520      1233            mov     _pwmSig1,a
0266 F521      1234            mov     (_pwmSig1 + 1),a
0268 F5E0      1235            mov     _pwmSig2,a
026A F5E1      1236            mov     (_pwmSig2 + 1),a
026C           1237   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:306: pwmSig3 = 70;
026C 75A046    1238            mov     _pwmSig3,#0x46
026F E4        1239            clr     a
0270 F5A1      1240            mov     (_pwmSig3 + 1),a
0272           1241   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:307: pwmSig4 = 0;
0272 E4        1242            clr     a
0273 F578      1243            mov     _pwmSig4,a
0275 F579      1244            mov     (_pwmSig4 + 1),a
0277           1245   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:308: printf("Left\n\r");
0277 7498      1246            mov     a,#__str_2
0279 C0E0      1247            push    acc
027B 74C2      1248            mov     a,#(__str_2 >> 8)
027D C0E0      1249            push    acc
027F 7480      1250            mov     a,#0x80
0281 C0E0      1251            push    acc
0283 120100    1252            lcall   _printf
0286 1581      1253            dec     sp
0288 1581      1254            dec     sp
028A 1581      1255            dec     sp
028C 22        1256            ret
028D           1257   ;------------------------------------------------------------
028D           1258   ;Allocation info for local variables in function 'PWMRight'
028D           1259   ;------------------------------------------------------------
028D           1260   ;------------------------------------------------------------
028D           1261   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:311: void PWMRight(void) {
028D           1262   ;        -----------------------------------------
028D           1263   ;         function PWMRight
028D           1264   ;        -----------------------------------------
028D           1265   _PWMRight:
028D           1266   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:312: pwmSig1 = 99;
028D 752063    1267            mov     _pwmSig1,#0x63
0290 E4        1268            clr     a
0291 F521      1269            mov     (_pwmSig1 + 1),a
0293           1270   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:313: pwmSig2 = 0;
0293           1271   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:315: pwmSig3 = 0;
0293           1272   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:316: pwmSig4 = 0;
0293 E4        1273            clr     a
0294 F5E0      1274            mov     _pwmSig2,a
0296 F5E1      1275            mov     (_pwmSig2 + 1),a
0298 F5A0      1276            mov     _pwmSig3,a
029A F5A1      1277            mov     (_pwmSig3 + 1),a
029C F578      1278            mov     _pwmSig4,a
029E F579      1279            mov     (_pwmSig4 + 1),a
02A0           1280   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:317: printf("Right\n\r");
02A0 74D8      1281            mov     a,#__str_3
02A2 C0E0      1282            push    acc
02A4 74C2      1283            mov     a,#(__str_3 >> 8)
02A6 C0E0      1284            push    acc
02A8 7480      1285            mov     a,#0x80
02AA C0E0      1286            push    acc
02AC 120100    1287            lcall   _printf
02AF 1581      1288            dec     sp
02B1 1581      1289            dec     sp
02B3 1581      1290            dec     sp
02B5 22        1291            ret
02B6           1292   ;------------------------------------------------------------
02B6           1293   ;Allocation info for local variables in function 'PWMStop'
02B6           1294   ;------------------------------------------------------------
02B6           1295   ;------------------------------------------------------------
02B6           1296   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:320: void PWMStop(void) {
02B6           1297   ;        -----------------------------------------
02B6           1298   ;         function PWMStop
02B6           1299   ;        -----------------------------------------
02B6           1300   _PWMStop:
02B6           1301   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:321: pwmSig1 = 0;
02B6           1302   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:322: pwmSig2 = 0;
02B6           1303   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:324: pwmSig3 = 0;
02B6           1304   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:325: pwmSig4 = 0;
02B6 E4        1305            clr     a
02B7 F520      1306            mov     _pwmSig1,a
02B9 F521      1307            mov     (_pwmSig1 + 1),a
02BB F5E0      1308            mov     _pwmSig2,a
02BD F5E1      1309            mov     (_pwmSig2 + 1),a
02BF F5A0      1310            mov     _pwmSig3,a
02C1 F5A1      1311            mov     (_pwmSig3 + 1),a
02C3 F578      1312            mov     _pwmSig4,a
02C5 F579      1313            mov     (_pwmSig4 + 1),a
02C7           1314   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:326: printf("Stop\n\r");
02C7 7418      1315            mov     a,#__str_4
02C9 C0E0      1316            push    acc
02CB 74C3      1317            mov     a,#(__str_4 >> 8)
02CD C0E0      1318            push    acc
02CF 7480      1319            mov     a,#0x80
02D1 C0E0      1320            push    acc
02D3 120100    1321            lcall   _printf
02D6 1581      1322            dec     sp
02D8 1581      1323            dec     sp
02DA 1581      1324            dec     sp
02DC 22        1325            ret
02DD           1326   ;------------------------------------------------------------
02DD           1327   ;Allocation info for local variables in function 'checkTime'
02DD           1328   ;------------------------------------------------------------
02DD           1329   ;time                      Allocated to registers r2 r3 r4 r5 
02DD           1330   ;overflow_count            Allocated with name '_checkTime_overflow_count_1_73'
02DD           1331   ;------------------------------------------------------------
02DD           1332   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:332: float checkTime (void) {
02DD           1333   ;        -----------------------------------------
02DD           1334   ;         function checkTime
02DD           1335   ;        -----------------------------------------
02DD           1336   _checkTime:
02DD           1337   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:336: TL0=0; 
02DD 758A00    1338            mov     _TL0,#0x00
02E0           1339   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:337: TH0=0;
02E0 758C00    1340            mov     _TH0,#0x00
02E3           1341   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:338: TF0=0;
02E3 C28D      1342            clr     _TF0
02E5           1343   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:339: overflow_count=0;
02E5 7A00      1344            mov     r2,#0x00
02E7 7B00      1345            mov     r3,#0x00
02E9           1346   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:340: TR0=0;
02E9 C28C      1347            clr     _TR0
02EB           1348   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:345: printf("Waiting for the signal to be 1\n\r");
02EB C002      1349            push    ar2
02ED C003      1350            push    ar3
02EF 7458      1351            mov     a,#__str_5
02F1 C0E0      1352            push    acc
02F3 74C3      1353            mov     a,#(__str_5 >> 8)
02F5 C0E0      1354            push    acc
02F7 7480      1355            mov     a,#0x80
02F9 C0E0      1356            push    acc
02FB 120100    1357            lcall   _printf
02FE 1581      1358            dec     sp
0300 1581      1359            dec     sp
0302 1581      1360            dec     sp
0304           1361   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:346: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
0304 75820C    1362            mov     dpl,#0x0C
0307 120100    1363            lcall   _Volts_at_Pin
030A AC82      1364            mov     r4,dpl
030C AD83      1365            mov     r5,dph
030E AEF0      1366            mov     r6,b
0310 FF        1367            mov     r7,a
0311 C004      1368            push    ar4
0313 C005      1369            push    ar5
0315 C006      1370            push    ar6
0317 C007      1371            push    ar7
0319 7498      1372            mov     a,#__str_6
031B C0E0      1373            push    acc
031D 74C3      1374            mov     a,#(__str_6 >> 8)
031F C0E0      1375            push    acc
0321 7480      1376            mov     a,#0x80
0323 C0E0      1377            push    acc
0325 120100    1378            lcall   _printf
0328 E581      1379            mov     a,sp
032A 24F9      1380            add     a,#0xf9
032C F581      1381            mov     sp,a
032E D003      1382            pop     ar3
0330 D002      1383            pop     ar2
0332           1384   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:347: while(Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt); //wait for the signal to be 1
0332           1385   L016001?:
0332 75820C    1386            mov     dpl,#0x0C
0335 C002      1387            push    ar2
0337 C003      1388            push    ar3
0339 120100    1389            lcall   _Volts_at_Pin
033C AC82      1390            mov     r4,dpl
033E AD83      1391            mov     r5,dph
0340 AEF0      1392            mov     r6,b
0342 FF        1393            mov     r7,a
0343 74CD      1394            mov     a,#0xCD
0345 C0E0      1395            push    acc
0347 74CC      1396            mov     a,#0xCC
0349 C0E0      1397            push    acc
034B C0E0      1398            push    acc
034D 743E      1399            mov     a,#0x3E
034F C0E0      1400            push    acc
0351 8C82      1401            mov     dpl,r4
0353 8D83      1402            mov     dph,r5
0355 8EF0      1403            mov     b,r6
0357 EF        1404            mov     a,r7
0358 120100    1405            lcall   ___fslt
035B AC82      1406            mov     r4,dpl
035D E581      1407            mov     a,sp
035F 24FC      1408            add     a,#0xfc
0361 F581      1409            mov     sp,a
0363 D003      1410            pop     ar3
0365 D002      1411            pop     ar2
0367 EC        1412            mov     a,r4
0368 7001      1413            jnz     L016001?
036A           1414   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:348: while(Volts_at_Pin(QFP32_MUX_P1_6) >= thresholdVolt); //wait for the signal to be 0
036A           1415   L016004?:
036A 75820C    1416            mov     dpl,#0x0C
036D C002      1417            push    ar2
036F C003      1418            push    ar3
0371 120100    1419            lcall   _Volts_at_Pin
0374 AC82      1420            mov     r4,dpl
0376 AD83      1421            mov     r5,dph
0378 AEF0      1422            mov     r6,b
037A FF        1423            mov     r7,a
037B 74CD      1424            mov     a,#0xCD
037D C0E0      1425            push    acc
037F 74CC      1426            mov     a,#0xCC
0381 C0E0      1427            push    acc
0383 C0E0      1428            push    acc
0385 743E      1429            mov     a,#0x3E
0387 C0E0      1430            push    acc
0389 8C82      1431            mov     dpl,r4
038B 8D83      1432            mov     dph,r5
038D 8EF0      1433            mov     b,r6
038F EF        1434            mov     a,r7
0390 120100    1435            lcall   ___fslt
0393 AC82      1436            mov     r4,dpl
0395 E581      1437            mov     a,sp
0397 24FC      1438            add     a,#0xfc
0399 F581      1439            mov     sp,a
039B D003      1440            pop     ar3
039D D002      1441            pop     ar2
039F EC        1442            mov     a,r4
03A0 6001      1443            jz      L016004?
03A2           1444   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:349: printf("Signal is 0\n\r");
03A2 C002      1445            push    ar2
03A4 C003      1446            push    ar3
03A6 7498      1447            mov     a,#__str_7
03A8 C0E0      1448            push    acc
03AA 74C4      1449            mov     a,#(__str_7 >> 8)
03AC C0E0      1450            push    acc
03AE 7480      1451            mov     a,#0x80
03B0 C0E0      1452            push    acc
03B2 120100    1453            lcall   _printf
03B5 1581      1454            dec     sp
03B7 1581      1455            dec     sp
03B9 1581      1456            dec     sp
03BB           1457   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:350: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
03BB 75820C    1458            mov     dpl,#0x0C
03BE 120100    1459            lcall   _Volts_at_Pin
03C1 AC82      1460            mov     r4,dpl
03C3 AD83      1461            mov     r5,dph
03C5 AEF0      1462            mov     r6,b
03C7 FF        1463            mov     r7,a
03C8 C004      1464            push    ar4
03CA C005      1465            push    ar5
03CC C006      1466            push    ar6
03CE C007      1467            push    ar7
03D0 7498      1468            mov     a,#__str_6
03D2 C0E0      1469            push    acc
03D4 74C3      1470            mov     a,#(__str_6 >> 8)
03D6 C0E0      1471            push    acc
03D8 7480      1472            mov     a,#0x80
03DA C0E0      1473            push    acc
03DC 120100    1474            lcall   _printf
03DF E581      1475            mov     a,sp
03E1 24F9      1476            add     a,#0xf9
03E3 F581      1477            mov     sp,a
03E5           1478   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:351: printf("Start Timer\n\r");
03E5 74D8      1479            mov     a,#__str_8
03E7 C0E0      1480            push    acc
03E9 74C4      1481            mov     a,#(__str_8 >> 8)
03EB C0E0      1482            push    acc
03ED 7480      1483            mov     a,#0x80
03EF C0E0      1484            push    acc
03F1 120100    1485            lcall   _printf
03F4 1581      1486            dec     sp
03F6 1581      1487            dec     sp
03F8 1581      1488            dec     sp
03FA D003      1489            pop     ar3
03FC D002      1490            pop     ar2
03FE           1491   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:352: TR0=1; // Start the timer
03FE D28C      1492            setb    _TR0
0400           1493   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:354: while (Volts_at_Pin(QFP32_MUX_P1_6) < thresholdVolt) {        // wait for signal to be 1
0400 E4        1494            clr     a
0401 F538      1495            mov     _checkTime_overflow_count_1_73,a
0403 F539      1496            mov     (_checkTime_overflow_count_1_73 + 1),a
0405           1497   L016011?:
0405 75820C    1498            mov     dpl,#0x0C
0408 C002      1499            push    ar2
040A C003      1500            push    ar3
040C 120100    1501            lcall   _Volts_at_Pin
040F AE82      1502            mov     r6,dpl
0411 AF83      1503            mov     r7,dph
0413 A8F0      1504            mov     r0,b
0415 F9        1505            mov     r1,a
0416 74CD      1506            mov     a,#0xCD
0418 C0E0      1507            push    acc
041A 74CC      1508            mov     a,#0xCC
041C C0E0      1509            push    acc
041E C0E0      1510            push    acc
0420 743E      1511            mov     a,#0x3E
0422 C0E0      1512            push    acc
0424 8E82      1513            mov     dpl,r6
0426 8F83      1514            mov     dph,r7
0428 88F0      1515            mov     b,r0
042A E9        1516            mov     a,r1
042B 120100    1517            lcall   ___fslt
042E AE82      1518            mov     r6,dpl
0430 E581      1519            mov     a,sp
0432 24FC      1520            add     a,#0xfc
0434 F581      1521            mov     sp,a
0436 D003      1522            pop     ar3
0438 D002      1523            pop     ar2
043A EE        1524            mov     a,r6
043B 7001      1525            jnz     L016025?
043D 020100    1526            ljmp    L016013?
0440           1527   L016025?:
0440           1528   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:356: printf("Volt at ADC: %f\n\r", Volts_at_Pin(QFP32_MUX_P1_6));
0440 75820C    1529            mov     dpl,#0x0C
0443 C002      1530            push    ar2
0445 C003      1531            push    ar3
0447 120100    1532            lcall   _Volts_at_Pin
044A AE82      1533            mov     r6,dpl
044C AF83      1534            mov     r7,dph
044E A8F0      1535            mov     r0,b
0450 F9        1536            mov     r1,a
0451 C006      1537            push    ar6
0453 C007      1538            push    ar7
0455 C000      1539            push    ar0
0457 C001      1540            push    ar1
0459 7498      1541            mov     a,#__str_6
045B C0E0      1542            push    acc
045D 74C3      1543            mov     a,#(__str_6 >> 8)
045F C0E0      1544            push    acc
0461 7480      1545            mov     a,#0x80
0463 C0E0      1546            push    acc
0465 120100    1547            lcall   _printf
0468 E581      1548            mov     a,sp
046A 24F9      1549            add     a,#0xf9
046C F581      1550            mov     sp,a
046E D003      1551            pop     ar3
0470 D002      1552            pop     ar2
0472           1553   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:358: if(TF0==1) { // Did the 16-bit timer overflow                         {
0472           1554   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:359: TF0=0;
0472 108DD8    1555            jbc     _TF0,L016026?
0475 8001      1556            sjmp    L016008?
0477           1557   L016026?:
0477           1558   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:360: overflow_count++;
0477 0538      1559            inc     _checkTime_overflow_count_1_73
0479 E4        1560            clr     a
047A B53858    1561            cjne    a,_checkTime_overflow_count_1_73,L016027?
047D 0539      1562            inc     (_checkTime_overflow_count_1_73 + 1)
047F           1563   L016027?:
047F AA38      1564            mov     r2,_checkTime_overflow_count_1_73
0481 AB39      1565            mov     r3,(_checkTime_overflow_count_1_73 + 1)
0483           1566   L016008?:
0483           1567   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:363: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >= STOPTIME){
0483 C002      1568            push    ar2
0485 C003      1569            push    ar3
0487 853882    1570            mov     dpl,_checkTime_overflow_count_1_73
048A 853983    1571            mov     dph,(_checkTime_overflow_count_1_73 + 1)
048D C002      1572            push    ar2
048F C003      1573            push    ar3
0491 120100    1574            lcall   ___sint2fs
0494 AE82      1575            mov     r6,dpl
0496 AF83      1576            mov     r7,dph
0498 A8F0      1577            mov     r0,b
049A F9        1578            mov     r1,a
049B C006      1579            push    ar6
049D C007      1580            push    ar7
049F C000      1581            push    ar0
04A1 C001      1582            push    ar1
04A3 900000    1583            mov     dptr,#0x0000
04A6 75F080    1584            mov     b,#0x80
04A9 7447      1585            mov     a,#0x47
04AB 120100    1586            lcall   ___fsmul
04AE AE82      1587            mov     r6,dpl
04B0 AF83      1588            mov     r7,dph
04B2 A8F0      1589            mov     r0,b
04B4 F9        1590            mov     r1,a
04B5 E581      1591            mov     a,sp
04B7 24FC      1592            add     a,#0xfc
04B9 F581      1593            mov     sp,a
04BB D003      1594            pop     ar3
04BD D002      1595            pop     ar2
04BF 858C82    1596            mov     dpl,_TH0
04C2 C006      1597            push    ar6
04C4 C007      1598            push    ar7
04C6 C000      1599            push    ar0
04C8 C001      1600            push    ar1
04CA 120100    1601            lcall   ___uchar2fs
04CD AC82      1602            mov     r4,dpl
04CF AD83      1603            mov     r5,dph
04D1 AAF0      1604            mov     r2,b
04D3 FB        1605            mov     r3,a
04D4 C004      1606            push    ar4
04D6 C005      1607            push    ar5
04D8 C002      1608            push    ar2
04DA C003      1609            push    ar3
04DC 900000    1610            mov     dptr,#0x0000
04DF 75F080    1611            mov     b,#0x80
04E2 7443      1612            mov     a,#0x43
04E4 120100    1613            lcall   ___fsmul
04E7 AA82      1614            mov     r2,dpl
04E9 AB83      1615            mov     r3,dph
04EB ACF0      1616            mov     r4,b
04ED FD        1617            mov     r5,a
04EE E581      1618            mov     a,sp
04F0 24FC      1619            add     a,#0xfc
04F2 F581      1620            mov     sp,a
04F4 D001      1621            pop     ar1
04F6 D000      1622            pop     ar0
04F8 D007      1623            pop     ar7
04FA D006      1624            pop     ar6
04FC C002      1625            push    ar2
04FE C003      1626            push    ar3
0500 C004      1627            push    ar4
0502 C005      1628            push    ar5
0504 8E82      1629            mov     dpl,r6
0506 8F83      1630            mov     dph,r7
0508 88F0      1631            mov     b,r0
050A E9        1632            mov     a,r1
050B 120100    1633            lcall   ___fsadd
050E AA82      1634            mov     r2,dpl
0510 AB83      1635            mov     r3,dph
0512 ACF0      1636            mov     r4,b
0514 FD        1637            mov     r5,a
0515 E581      1638            mov     a,sp
0517 24FC      1639            add     a,#0xfc
0519 F581      1640            mov     sp,a
051B AE8A      1641            mov     r6,_TL0
051D 7F00      1642            mov     r7,#0x00
051F 8E82      1643            mov     dpl,r6
0521 8F83      1644            mov     dph,r7
0523 C002      1645            push    ar2
0525 C003      1646            push    ar3
0527 C004      1647            push    ar4
0529 C005      1648            push    ar5
052B 120100    1649            lcall   ___sint2fs
052E AE82      1650            mov     r6,dpl
0530 AF83      1651            mov     r7,dph
0532 A8F0      1652            mov     r0,b
0534 F9        1653            mov     r1,a
0535 D005      1654            pop     ar5
0537 D004      1655            pop     ar4
0539 D003      1656            pop     ar3
053B D002      1657            pop     ar2
053D C006      1658            push    ar6
053F C007      1659            push    ar7
0541 C000      1660            push    ar0
0543 C001      1661            push    ar1
0545 8A82      1662            mov     dpl,r2
0547 8B83      1663            mov     dph,r3
0549 8CF0      1664            mov     b,r4
054B ED        1665            mov     a,r5
054C 120100    1666            lcall   ___fsadd
054F AA82      1667            mov     r2,dpl
0551 AB83      1668            mov     r3,dph
0553 ACF0      1669            mov     r4,b
0555 FD        1670            mov     r5,a
0556 E581      1671            mov     a,sp
0558 24FC      1672            add     a,#0xfc
055A F581      1673            mov     sp,a
055C C002      1674            push    ar2
055E C003      1675            push    ar3
0560 C004      1676            push    ar4
0562 C005      1677            push    ar5
0564 90C33E    1678            mov     dptr,#0xC33E
0567 75F02E    1679            mov     b,#0x2E
056A 7439      1680            mov     a,#0x39
056C 120100    1681            lcall   ___fsmul
056F AA82      1682            mov     r2,dpl
0571 AB83      1683            mov     r3,dph
0573 ACF0      1684            mov     r4,b
0575 FD        1685            mov     r5,a
0576 E581      1686            mov     a,sp
0578 24FC      1687            add     a,#0xfc
057A F581      1688            mov     sp,a
057C C003      1689            push    ar3
057E E4        1690            clr     a
057F C0E0      1691            push    acc
0581 7450      1692            mov     a,#0x50
0583 C0E0      1693            push    acc
0585 7443      1694            mov     a,#0x43
0587 C0E0      1695            push    acc
0589 7447      1696            mov     a,#0x47
058B C0E0      1697            push    acc
058D 8A82      1698            mov     dpl,r2
058F 8B83      1699            mov     dph,r3
0591 8CF0      1700            mov     b,r4
0593 ED        1701            mov     a,r5
0594 120100    1702            lcall   ___fslt
0597 AA82      1703            mov     r2,dpl
0599 E581      1704            mov     a,sp
059B 24FC      1705            add     a,#0xfc
059D F581      1706            mov     sp,a
059F D003      1707            pop     ar3
05A1 EA        1708            mov     a,r2
05A2 D003      1709            pop     ar3
05A4 D002      1710            pop     ar2
05A6 6001      1711            jz      L016028?
05A8 020100    1712            ljmp    L016011?
05AB           1713   L016028?:
05AB           1714   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:364: printf("Possibly a STOP. break out of the loop and stop timer. \n\r");
05AB C002      1715            push    ar2
05AD C003      1716            push    ar3
05AF 7498      1717            mov     a,#__str_9
05B1 C0E0      1718            push    acc
05B3 74C7      1719            mov     a,#(__str_9 >> 8)
05B5 C0E0      1720            push    acc
05B7 7480      1721            mov     a,#0x80
05B9 C0E0      1722            push    acc
05BB 120100    1723            lcall   _printf
05BE 1581      1724            dec     sp
05C0 1581      1725            dec     sp
05C2 1581      1726            dec     sp
05C4 D003      1727            pop     ar3
05C6 D002      1728            pop     ar2
05C8           1729   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:365: break;
05C8           1730   L016013?:
05C8           1731   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:370: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
05C8 C28C      1732            clr     _TR0
05CA           1733   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:371: printf("Stop Timer\n\r");
05CA C002      1734            push    ar2
05CC C003      1735            push    ar3
05CE 74D8      1736            mov     a,#__str_10
05D0 C0E0      1737            push    acc
05D2 74C7      1738            mov     a,#(__str_10 >> 8)
05D4 C0E0      1739            push    acc
05D6 7480      1740            mov     a,#0x80
05D8 C0E0      1741            push    acc
05DA 120100    1742            lcall   _printf
05DD 1581      1743            dec     sp
05DF 1581      1744            dec     sp
05E1 1581      1745            dec     sp
05E3 D003      1746            pop     ar3
05E5 D002      1747            pop     ar2
05E7           1748   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:372: time=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
05E7 8A82      1749            mov     dpl,r2
05E9 8B83      1750            mov     dph,r3
05EB 120100    1751            lcall   ___sint2fs
05EE AA82      1752            mov     r2,dpl
05F0 AB83      1753            mov     r3,dph
05F2 ACF0      1754            mov     r4,b
05F4 FD        1755            mov     r5,a
05F5 C002      1756            push    ar2
05F7 C003      1757            push    ar3
05F9 C004      1758            push    ar4
05FB C005      1759            push    ar5
05FD 900000    1760            mov     dptr,#0x0000
0600 75F080    1761            mov     b,#0x80
0603 7447      1762            mov     a,#0x47
0605 120100    1763            lcall   ___fsmul
0608 AA82      1764            mov     r2,dpl
060A AB83      1765            mov     r3,dph
060C ACF0      1766            mov     r4,b
060E FD        1767            mov     r5,a
060F E581      1768            mov     a,sp
0611 24FC      1769            add     a,#0xfc
0613 F581      1770            mov     sp,a
0615 858C82    1771            mov     dpl,_TH0
0618 C002      1772            push    ar2
061A C003      1773            push    ar3
061C C004      1774            push    ar4
061E C005      1775            push    ar5
0620 120100    1776            lcall   ___uchar2fs
0623 AE82      1777            mov     r6,dpl
0625 AF83      1778            mov     r7,dph
0627 A8F0      1779            mov     r0,b
0629 F9        1780            mov     r1,a
062A C006      1781            push    ar6
062C C007      1782            push    ar7
062E C000      1783            push    ar0
0630 C001      1784            push    ar1
0632 900000    1785            mov     dptr,#0x0000
0635 75F080    1786            mov     b,#0x80
0638 7443      1787            mov     a,#0x43
063A 120100    1788            lcall   ___fsmul
063D AE82      1789            mov     r6,dpl
063F AF83      1790            mov     r7,dph
0641 A8F0      1791            mov     r0,b
0643 F9        1792            mov     r1,a
0644 E581      1793            mov     a,sp
0646 24FC      1794            add     a,#0xfc
0648 F581      1795            mov     sp,a
064A D005      1796            pop     ar5
064C D004      1797            pop     ar4
064E D003      1798            pop     ar3
0650 D002      1799            pop     ar2
0652 C006      1800            push    ar6
0654 C007      1801            push    ar7
0656 C000      1802            push    ar0
0658 C001      1803            push    ar1
065A 8A82      1804            mov     dpl,r2
065C 8B83      1805            mov     dph,r3
065E 8CF0      1806            mov     b,r4
0660 ED        1807            mov     a,r5
0661 120100    1808            lcall   ___fsadd
0664 AA82      1809            mov     r2,dpl
0666 AB83      1810            mov     r3,dph
0668 ACF0      1811            mov     r4,b
066A FD        1812            mov     r5,a
066B E581      1813            mov     a,sp
066D 24FC      1814            add     a,#0xfc
066F F581      1815            mov     sp,a
0671 AE8A      1816            mov     r6,_TL0
0673 7F00      1817            mov     r7,#0x00
0675 8E82      1818            mov     dpl,r6
0677 8F83      1819            mov     dph,r7
0679 C002      1820            push    ar2
067B C003      1821            push    ar3
067D C004      1822            push    ar4
067F C005      1823            push    ar5
0681 120100    1824            lcall   ___sint2fs
0684 AE82      1825            mov     r6,dpl
0686 AF83      1826            mov     r7,dph
0688 A8F0      1827            mov     r0,b
068A F9        1828            mov     r1,a
068B D005      1829            pop     ar5
068D D004      1830            pop     ar4
068F D003      1831            pop     ar3
0691 D002      1832            pop     ar2
0693 C006      1833            push    ar6
0695 C007      1834            push    ar7
0697 C000      1835            push    ar0
0699 C001      1836            push    ar1
069B 8A82      1837            mov     dpl,r2
069D 8B83      1838            mov     dph,r3
069F 8CF0      1839            mov     b,r4
06A1 ED        1840            mov     a,r5
06A2 120100    1841            lcall   ___fsadd
06A5 AA82      1842            mov     r2,dpl
06A7 AB83      1843            mov     r3,dph
06A9 ACF0      1844            mov     r4,b
06AB FD        1845            mov     r5,a
06AC E581      1846            mov     a,sp
06AE 24FC      1847            add     a,#0xfc
06B0 F581      1848            mov     sp,a
06B2 C002      1849            push    ar2
06B4 C003      1850            push    ar3
06B6 C004      1851            push    ar4
06B8 C005      1852            push    ar5
06BA 90F4FC    1853            mov     dptr,#0xF4FC
06BD 75F032    1854            mov     b,#0x32
06C0 7434      1855            mov     a,#0x34
06C2 120100    1856            lcall   ___fsmul
06C5 AA82      1857            mov     r2,dpl
06C7 AB83      1858            mov     r3,dph
06C9 ACF0      1859            mov     r4,b
06CB FD        1860            mov     r5,a
06CC E581      1861            mov     a,sp
06CE 24FC      1862            add     a,#0xfc
06D0 F581      1863            mov     sp,a
06D2           1864   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:373: return time*1000; //return period of high pulse in seconds            
06D2 C002      1865            push    ar2
06D4 C003      1866            push    ar3
06D6 C004      1867            push    ar4
06D8 C005      1868            push    ar5
06DA 900000    1869            mov     dptr,#0x0000
06DD 75F07A    1870            mov     b,#0x7A
06E0 7444      1871            mov     a,#0x44
06E2 120100    1872            lcall   ___fsmul
06E5 AA82      1873            mov     r2,dpl
06E7 AB83      1874            mov     r3,dph
06E9 ACF0      1875            mov     r4,b
06EB FD        1876            mov     r5,a
06EC E581      1877            mov     a,sp
06EE 24FC      1878            add     a,#0xfc
06F0 F581      1879            mov     sp,a
06F2 8A82      1880            mov     dpl,r2
06F4 8B83      1881            mov     dph,r3
06F6 8CF0      1882            mov     b,r4
06F8 ED        1883            mov     a,r5
06F9 22        1884            ret
06FA           1885   ;------------------------------------------------------------
06FA           1886   ;Allocation info for local variables in function 'voltsAtPeak'
06FA           1887   ;------------------------------------------------------------
06FA           1888   ;------------------------------------------------------------
06FA           1889   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:380: float voltsAtPeak(void) {
06FA           1890   ;        -----------------------------------------
06FA           1891   ;         function voltsAtPeak
06FA           1892   ;        -----------------------------------------
06FA           1893   _voltsAtPeak:
06FA           1894   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:381: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //input pin waiting to be  
06FA           1895   L017001?:
06FA 75820C    1896            mov     dpl,#0x0C
06FD 120100    1897            lcall   _ADC_at_Pin
0700 E582      1898            mov     a,dpl
0702 8583F0    1899            mov     b,dph
0705 45F0      1900            orl     a,b
0707 6001      1901            jz      L017001?
0709           1902   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:382: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
0709           1903   L017004?:
0709 75820C    1904            mov     dpl,#0x0C
070C 120100    1905            lcall   _ADC_at_Pin
070F E582      1906            mov     a,dpl
0711 8583F0    1907            mov     b,dph
0714 45F0      1908            orl     a,b
0716 6001      1909            jz      L017004?
0718           1910   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:383: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
0718 900000    1911            mov     dptr,#0x0000
071B 120100    1912            lcall   _Timer3us
071E           1913   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:384: return(Volts_at_Pin(QFP32_MUX_P1_6));
071E 75820C    1914            mov     dpl,#0x0C
0721 020100    1915            ljmp    _Volts_at_Pin
0724           1916   ;------------------------------------------------------------
0724           1917   ;Allocation info for local variables in function 'waitquarterperiod'
0724           1918   ;------------------------------------------------------------
0724           1919   ;------------------------------------------------------------
0724           1920   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:397: void waitquarterperiod(void){
0724           1921   ;        -----------------------------------------
0724           1922   ;         function waitquarterperiod
0724           1923   ;        -----------------------------------------
0724           1924   _waitquarterperiod:
0724           1925   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:398: waitms(constant_delay_time);
0724 90000A    1926            mov     dptr,#0x000A
0727 020100    1927            ljmp    _waitms
072A           1928   ;------------------------------------------------------------
072A           1929   ;Allocation info for local variables in function 'main'
072A           1930   ;------------------------------------------------------------
072A           1931   ;checkcommand              Allocated to registers 
072A           1932   ;i                         Allocated with name '_main_i_1_82'
072A           1933   ;sig1                      Allocated to registers 
072A           1934   ;sig2                      Allocated to registers 
072A           1935   ;peak                      Allocated to registers 
072A           1936   ;voltspeak                 Allocated to registers 
072A           1937   ;periodpwm                 Allocated to registers 
072A           1938   ;time                      Allocated to registers r6 r7 r0 r1 
072A           1939   ;pasttime                  Allocated with name '_main_pasttime_1_82'
072A           1940   ;period                    Allocated to registers 
072A           1941   ;overflow_count            Allocated to registers 
072A           1942   ;------------------------------------------------------------
072A           1943   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:402: void main(void)
072A           1944   ;        -----------------------------------------
072A           1945   ;         function main
072A           1946   ;        -----------------------------------------
072A           1947   _main:
072A           1948   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:414: TIMER0_Init();
072A 120100    1949            lcall   _TIMER0_Init
072D           1950   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:416: InitPinADC(1, 6); // Configure P2.5 as analog input
072D 755006    1951            mov     _InitPinADC_PARM_2,#0x06
0730 758201    1952            mov     dpl,#0x01
0733 120100    1953            lcall   _InitPinADC
0736           1954   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:418: InitADC();
0736 120100    1955            lcall   _InitADC
0739           1956   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:419: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0739 7498      1957            mov     a,#__str_11
073B C0E0      1958            push    acc
073D 74C8      1959            mov     a,#(__str_11 >> 8)
073F C0E0      1960            push    acc
0741 7480      1961            mov     a,#0x80
0743 C0E0      1962            push    acc
0745 120100    1963            lcall   _printf
0748 1581      1964            dec     sp
074A 1581      1965            dec     sp
074C 1581      1966            dec     sp
074E           1967   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:421: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
074E 74D8      1968            mov     a,#__str_12
0750 C0E0      1969            push    acc
0752 74C8      1970            mov     a,#(__str_12 >> 8)
0754 C0E0      1971            push    acc
0756 7480      1972            mov     a,#0x80
0758 C0E0      1973            push    acc
075A 120100    1974            lcall   _printf
075D 1581      1975            dec     sp
075F 1581      1976            dec     sp
0761 1581      1977            dec     sp
0763           1978   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:423: printf("\n\r");
0763 7418      1979            mov     a,#__str_13
0765 C0E0      1980            push    acc
0767 74C9      1981            mov     a,#(__str_13 >> 8)
0769 C0E0      1982            push    acc
076B 7480      1983            mov     a,#0x80
076D C0E0      1984            push    acc
076F 120100    1985            lcall   _printf
0772 1581      1986            dec     sp
0774 1581      1987            dec     sp
0776 1581      1988            dec     sp
0778           1989   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:425: pasttime=0; 
0778 758800    1990            mov     _main_pasttime_1_82,#0x00
077B 758900    1991            mov     (_main_pasttime_1_82 + 1),#0x00
077E 758A00    1992            mov     (_main_pasttime_1_82 + 2),#0x00
0781 758B00    1993            mov     (_main_pasttime_1_82 + 3),#0x00
0784           1994   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:426: P2_1=0;
0784 C2A1      1995            clr     _P2_1
0786           1996   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:427: while (1)
0786           1997   L019020?:
0786           1998   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:432: time = checkTime();
0786 120100    1999            lcall   _checkTime
0789 AE82      2000            mov     r6,dpl
078B AF83      2001            mov     r7,dph
078D A8F0      2002            mov     r0,b
078F F9        2003            mov     r1,a
0790           2004   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:433: if(time<200){
0790 C006      2005            push    ar6
0792 C007      2006            push    ar7
0794 C000      2007            push    ar0
0796 C001      2008            push    ar1
0798 E4        2009            clr     a
0799 C0E0      2010            push    acc
079B C0E0      2011            push    acc
079D 7448      2012            mov     a,#0x48
079F C0E0      2013            push    acc
07A1 7443      2014            mov     a,#0x43
07A3 C0E0      2015            push    acc
07A5 8E82      2016            mov     dpl,r6
07A7 8F83      2017            mov     dph,r7
07A9 88F0      2018            mov     b,r0
07AB E9        2019            mov     a,r1
07AC 120100    2020            lcall   ___fslt
07AF AA82      2021            mov     r2,dpl
07B1 E581      2022            mov     a,sp
07B3 24FC      2023            add     a,#0xfc
07B5 F581      2024            mov     sp,a
07B7 D001      2025            pop     ar1
07B9 D000      2026            pop     ar0
07BB D007      2027            pop     ar7
07BD D006      2028            pop     ar6
07BF EA        2029            mov     a,r2
07C0 6001      2030            jz      L019002?
07C2           2031   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:434: time = pasttime;
07C2 AE88      2032            mov     r6,_main_pasttime_1_82
07C4 AF89      2033            mov     r7,(_main_pasttime_1_82 + 1)
07C6 A88A      2034            mov     r0,(_main_pasttime_1_82 + 2)
07C8 A98B      2035            mov     r1,(_main_pasttime_1_82 + 3)
07CA           2036   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:435: printf("badtime%f\t\n\r", time);
07CA C006      2037            push    ar6
07CC C007      2038            push    ar7
07CE C000      2039            push    ar0
07D0 C001      2040            push    ar1
07D2 C088      2041            push    _main_pasttime_1_82
07D4 C089      2042            push    (_main_pasttime_1_82 + 1)
07D6 C08A      2043            push    (_main_pasttime_1_82 + 2)
07D8 C08B      2044            push    (_main_pasttime_1_82 + 3)
07DA 74D8      2045            mov     a,#__str_14
07DC C0E0      2046            push    acc
07DE 74C9      2047            mov     a,#(__str_14 >> 8)
07E0 C0E0      2048            push    acc
07E2 7480      2049            mov     a,#0x80
07E4 C0E0      2050            push    acc
07E6 120100    2051            lcall   _printf
07E9 E581      2052            mov     a,sp
07EB 24F9      2053            add     a,#0xf9
07ED F581      2054            mov     sp,a
07EF D001      2055            pop     ar1
07F1 D000      2056            pop     ar0
07F3 D007      2057            pop     ar7
07F5 D006      2058            pop     ar6
07F7           2059   L019002?:
07F7           2060   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:438: printf("%f\t\n\r", time);
07F7 C006      2061            push    ar6
07F9 C007      2062            push    ar7
07FB C000      2063            push    ar0
07FD C001      2064            push    ar1
07FF C006      2065            push    ar6
0801 C007      2066            push    ar7
0803 C000      2067            push    ar0
0805 C001      2068            push    ar1
0807 7418      2069            mov     a,#__str_15
0809 C0E0      2070            push    acc
080B 74CA      2071            mov     a,#(__str_15 >> 8)
080D C0E0      2072            push    acc
080F 7480      2073            mov     a,#0x80
0811 C0E0      2074            push    acc
0813 120100    2075            lcall   _printf
0816 E581      2076            mov     a,sp
0818 24F9      2077            add     a,#0xf9
081A F581      2078            mov     sp,a
081C D001      2079            pop     ar1
081E D000      2080            pop     ar0
0820 D007      2081            pop     ar7
0822 D006      2082            pop     ar6
0824           2083   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:439: if(time>=700 && time<=720){
0824 C006      2084            push    ar6
0826 C007      2085            push    ar7
0828 C000      2086            push    ar0
082A C001      2087            push    ar1
082C E4        2088            clr     a
082D C0E0      2089            push    acc
082F C0E0      2090            push    acc
0831 742F      2091            mov     a,#0x2F
0833 C0E0      2092            push    acc
0835 7444      2093            mov     a,#0x44
0837 C0E0      2094            push    acc
0839 8E82      2095            mov     dpl,r6
083B 8F83      2096            mov     dph,r7
083D 88F0      2097            mov     b,r0
083F E9        2098            mov     a,r1
0840 120100    2099            lcall   ___fslt
0843 AA82      2100            mov     r2,dpl
0845 E581      2101            mov     a,sp
0847 24FC      2102            add     a,#0xfc
0849 F581      2103            mov     sp,a
084B D001      2104            pop     ar1
084D D000      2105            pop     ar0
084F D007      2106            pop     ar7
0851 D006      2107            pop     ar6
0853 EA        2108            mov     a,r2
0854 7001      2109            jnz     L019016?
0856 C006      2110            push    ar6
0858 C007      2111            push    ar7
085A C000      2112            push    ar0
085C C001      2113            push    ar1
085E E4        2114            clr     a
085F C0E0      2115            push    acc
0861 C0E0      2116            push    acc
0863 7434      2117            mov     a,#0x34
0865 C0E0      2118            push    acc
0867 7444      2119            mov     a,#0x44
0869 C0E0      2120            push    acc
086B 8E82      2121            mov     dpl,r6
086D 8F83      2122            mov     dph,r7
086F 88F0      2123            mov     b,r0
0871 E9        2124            mov     a,r1
0872 120100    2125            lcall   ___fsgt
0875 AA82      2126            mov     r2,dpl
0877 E581      2127            mov     a,sp
0879 24FC      2128            add     a,#0xfc
087B F581      2129            mov     sp,a
087D D001      2130            pop     ar1
087F D000      2131            pop     ar0
0881 D007      2132            pop     ar7
0883 D006      2133            pop     ar6
0885 EA        2134            mov     a,r2
0886 7001      2135            jnz     L019016?
0888           2136   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:440: PWMbackward(); 
0888 C006      2137            push    ar6
088A C007      2138            push    ar7
088C C000      2139            push    ar0
088E C001      2140            push    ar1
0890 120100    2141            lcall   _PWMbackward
0893 D001      2142            pop     ar1
0895 D000      2143            pop     ar0
0897 D007      2144            pop     ar7
0899 D006      2145            pop     ar6
089B           2146   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:441: printf("%f\t\n\r", time);
089B C006      2147            push    ar6
089D C007      2148            push    ar7
089F C000      2149            push    ar0
08A1 C001      2150            push    ar1
08A3 C006      2151            push    ar6
08A5 C007      2152            push    ar7
08A7 C000      2153            push    ar0
08A9 C001      2154            push    ar1
08AB 7418      2155            mov     a,#__str_15
08AD C0E0      2156            push    acc
08AF 74CA      2157            mov     a,#(__str_15 >> 8)
08B1 C0E0      2158            push    acc
08B3 7480      2159            mov     a,#0x80
08B5 C0E0      2160            push    acc
08B7 120100    2161            lcall   _printf
08BA E581      2162            mov     a,sp
08BC 24F9      2163            add     a,#0xf9
08BE F581      2164            mov     sp,a
08C0 D001      2165            pop     ar1
08C2 D000      2166            pop     ar0
08C4 D007      2167            pop     ar7
08C6 D006      2168            pop     ar6
08C8 020100    2169            ljmp    L019017?
08CB           2170   L019016?:
08CB           2171   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:443: else if(time>=340 && time<=360){
08CB C006      2172            push    ar6
08CD C007      2173            push    ar7
08CF C000      2174            push    ar0
08D1 C001      2175            push    ar1
08D3 E4        2176            clr     a
08D4 C0E0      2177            push    acc
08D6 C0E0      2178            push    acc
08D8 74AA      2179            mov     a,#0xAA
08DA C0E0      2180            push    acc
08DC 7443      2181            mov     a,#0x43
08DE C0E0      2182            push    acc
08E0 8E82      2183            mov     dpl,r6
08E2 8F83      2184            mov     dph,r7
08E4 88F0      2185            mov     b,r0
08E6 E9        2186            mov     a,r1
08E7 120100    2187            lcall   ___fslt
08EA AA82      2188            mov     r2,dpl
08EC E581      2189            mov     a,sp
08EE 24FC      2190            add     a,#0xfc
08F0 F581      2191            mov     sp,a
08F2 D001      2192            pop     ar1
08F4 D000      2193            pop     ar0
08F6 D007      2194            pop     ar7
08F8 D006      2195            pop     ar6
08FA EA        2196            mov     a,r2
08FB 7001      2197            jnz     L019012?
08FD C006      2198            push    ar6
08FF C007      2199            push    ar7
0901 C000      2200            push    ar0
0903 C001      2201            push    ar1
0905 E4        2202            clr     a
0906 C0E0      2203            push    acc
0908 C0E0      2204            push    acc
090A 74B4      2205            mov     a,#0xB4
090C C0E0      2206            push    acc
090E 7443      2207            mov     a,#0x43
0910 C0E0      2208            push    acc
0912 8E82      2209            mov     dpl,r6
0914 8F83      2210            mov     dph,r7
0916 88F0      2211            mov     b,r0
0918 E9        2212            mov     a,r1
0919 120100    2213            lcall   ___fsgt
091C AA82      2214            mov     r2,dpl
091E E581      2215            mov     a,sp
0920 24FC      2216            add     a,#0xfc
0922 F581      2217            mov     sp,a
0924 D001      2218            pop     ar1
0926 D000      2219            pop     ar0
0928 D007      2220            pop     ar7
092A D006      2221            pop     ar6
092C EA        2222            mov     a,r2
092D 7001      2223            jnz     L019012?
092F           2224   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:444: pwmSig1 = 99;
092F 752063    2225            mov     _pwmSig1,#0x63
0932 E4        2226            clr     a
0933 F521      2227            mov     (_pwmSig1 + 1),a
0935           2228   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:445: pwmSig2 = 0;
0935           2229   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:447: pwmSig3 = 0;
0935 E4        2230            clr     a
0936 F5E0      2231            mov     _pwmSig2,a
0938 F5E1      2232            mov     (_pwmSig2 + 1),a
093A F5A0      2233            mov     _pwmSig3,a
093C F5A1      2234            mov     (_pwmSig3 + 1),a
093E           2235   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:448: pwmSig4 =99;
093E 757863    2236            mov     _pwmSig4,#0x63
0941 E4        2237            clr     a
0942 F579      2238            mov     (_pwmSig4 + 1),a
0944           2239   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:449: printf("Forward\n\r");
0944 C006      2240            push    ar6
0946 C007      2241            push    ar7
0948 C000      2242            push    ar0
094A C001      2243            push    ar1
094C 74D8      2244            mov     a,#__str_0
094E C0E0      2245            push    acc
0950 74C1      2246            mov     a,#(__str_0 >> 8)
0952 C0E0      2247            push    acc
0954 7480      2248            mov     a,#0x80
0956 C0E0      2249            push    acc
0958 120100    2250            lcall   _printf
095B 1581      2251            dec     sp
095D 1581      2252            dec     sp
095F 1581      2253            dec     sp
0961 D001      2254            pop     ar1
0963 D000      2255            pop     ar0
0965 D007      2256            pop     ar7
0967 D006      2257            pop     ar6
0969 020100    2258            ljmp    L019017?
096C           2259   L019012?:
096C           2260   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:451: else if(time>=1410 && time<=1440){
096C C006      2261            push    ar6
096E C007      2262            push    ar7
0970 C000      2263            push    ar0
0972 C001      2264            push    ar1
0974 E4        2265            clr     a
0975 C0E0      2266            push    acc
0977 7440      2267            mov     a,#0x40
0979 C0E0      2268            push    acc
097B 74B0      2269            mov     a,#0xB0
097D C0E0      2270            push    acc
097F 7444      2271            mov     a,#0x44
0981 C0E0      2272            push    acc
0983 8E82      2273            mov     dpl,r6
0985 8F83      2274            mov     dph,r7
0987 88F0      2275            mov     b,r0
0989 E9        2276            mov     a,r1
098A 120100    2277            lcall   ___fslt
098D AA82      2278            mov     r2,dpl
098F E581      2279            mov     a,sp
0991 24FC      2280            add     a,#0xfc
0993 F581      2281            mov     sp,a
0995 D001      2282            pop     ar1
0997 D000      2283            pop     ar0
0999 D007      2284            pop     ar7
099B D006      2285            pop     ar6
099D EA        2286            mov     a,r2
099E 7001      2287            jnz     L019008?
09A0 C006      2288            push    ar6
09A2 C007      2289            push    ar7
09A4 C000      2290            push    ar0
09A6 C001      2291            push    ar1
09A8 E4        2292            clr     a
09A9 C0E0      2293            push    acc
09AB C0E0      2294            push    acc
09AD 74B4      2295            mov     a,#0xB4
09AF C0E0      2296            push    acc
09B1 7444      2297            mov     a,#0x44
09B3 C0E0      2298            push    acc
09B5 8E82      2299            mov     dpl,r6
09B7 8F83      2300            mov     dph,r7
09B9 88F0      2301            mov     b,r0
09BB E9        2302            mov     a,r1
09BC 120100    2303            lcall   ___fsgt
09BF AA82      2304            mov     r2,dpl
09C1 E581      2305            mov     a,sp
09C3 24FC      2306            add     a,#0xfc
09C5 F581      2307            mov     sp,a
09C7 D001      2308            pop     ar1
09C9 D000      2309            pop     ar0
09CB D007      2310            pop     ar7
09CD D006      2311            pop     ar6
09CF EA        2312            mov     a,r2
09D0 7001      2313            jnz     L019008?
09D2           2314   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:452: PWMRight(); 
09D2 C006      2315            push    ar6
09D4 C007      2316            push    ar7
09D6 C000      2317            push    ar0
09D8 C001      2318            push    ar1
09DA 120100    2319            lcall   _PWMRight
09DD D001      2320            pop     ar1
09DF D000      2321            pop     ar0
09E1 D007      2322            pop     ar7
09E3 D006      2323            pop     ar6
09E5           2324   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:453: printf("%f\t\n\r", time);
09E5 C006      2325            push    ar6
09E7 C007      2326            push    ar7
09E9 C000      2327            push    ar0
09EB C001      2328            push    ar1
09ED C006      2329            push    ar6
09EF C007      2330            push    ar7
09F1 C000      2331            push    ar0
09F3 C001      2332            push    ar1
09F5 7418      2333            mov     a,#__str_15
09F7 C0E0      2334            push    acc
09F9 74CA      2335            mov     a,#(__str_15 >> 8)
09FB C0E0      2336            push    acc
09FD 7480      2337            mov     a,#0x80
09FF C0E0      2338            push    acc
0A01 120100    2339            lcall   _printf
0A04 E581      2340            mov     a,sp
0A06 24F9      2341            add     a,#0xf9
0A08 F581      2342            mov     sp,a
0A0A D001      2343            pop     ar1
0A0C D000      2344            pop     ar0
0A0E D007      2345            pop     ar7
0A10 D006      2346            pop     ar6
0A12 020100    2347            ljmp    L019017?
0A15           2348   L019008?:
0A15           2349   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:455: else if(time>=1060 && time<=1090){
0A15 C006      2350            push    ar6
0A17 C007      2351            push    ar7
0A19 C000      2352            push    ar0
0A1B C001      2353            push    ar1
0A1D E4        2354            clr     a
0A1E C0E0      2355            push    acc
0A20 7480      2356            mov     a,#0x80
0A22 C0E0      2357            push    acc
0A24 7484      2358            mov     a,#0x84
0A26 C0E0      2359            push    acc
0A28 7444      2360            mov     a,#0x44
0A2A C0E0      2361            push    acc
0A2C 8E82      2362            mov     dpl,r6
0A2E 8F83      2363            mov     dph,r7
0A30 88F0      2364            mov     b,r0
0A32 E9        2365            mov     a,r1
0A33 120100    2366            lcall   ___fslt
0A36 AA82      2367            mov     r2,dpl
0A38 E581      2368            mov     a,sp
0A3A 24FC      2369            add     a,#0xfc
0A3C F581      2370            mov     sp,a
0A3E D001      2371            pop     ar1
0A40 D000      2372            pop     ar0
0A42 D007      2373            pop     ar7
0A44 D006      2374            pop     ar6
0A46 EA        2375            mov     a,r2
0A47 7001      2376            jnz     L019004?
0A49 C006      2377            push    ar6
0A4B C007      2378            push    ar7
0A4D C000      2379            push    ar0
0A4F C001      2380            push    ar1
0A51 E4        2381            clr     a
0A52 C0E0      2382            push    acc
0A54 7440      2383            mov     a,#0x40
0A56 C0E0      2384            push    acc
0A58 7488      2385            mov     a,#0x88
0A5A C0E0      2386            push    acc
0A5C 7444      2387            mov     a,#0x44
0A5E C0E0      2388            push    acc
0A60 8E82      2389            mov     dpl,r6
0A62 8F83      2390            mov     dph,r7
0A64 88F0      2391            mov     b,r0
0A66 E9        2392            mov     a,r1
0A67 120100    2393            lcall   ___fsgt
0A6A AA82      2394            mov     r2,dpl
0A6C E581      2395            mov     a,sp
0A6E 24FC      2396            add     a,#0xfc
0A70 F581      2397            mov     sp,a
0A72 D001      2398            pop     ar1
0A74 D000      2399            pop     ar0
0A76 D007      2400            pop     ar7
0A78 D006      2401            pop     ar6
0A7A EA        2402            mov     a,r2
0A7B 7001      2403            jnz     L019004?
0A7D           2404   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:456: PWMLeft(); 
0A7D C006      2405            push    ar6
0A7F C007      2406            push    ar7
0A81 C000      2407            push    ar0
0A83 C001      2408            push    ar1
0A85 120100    2409            lcall   _PWMLeft
0A88 D001      2410            pop     ar1
0A8A D000      2411            pop     ar0
0A8C D007      2412            pop     ar7
0A8E D006      2413            pop     ar6
0A90           2414   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:457: printf("%f\t\n\r", time); } 
0A90 C006      2415            push    ar6
0A92 C007      2416            push    ar7
0A94 C000      2417            push    ar0
0A96 C001      2418            push    ar1
0A98 C006      2419            push    ar6
0A9A C007      2420            push    ar7
0A9C C000      2421            push    ar0
0A9E C001      2422            push    ar1
0AA0 7418      2423            mov     a,#__str_15
0AA2 C0E0      2424            push    acc
0AA4 74CA      2425            mov     a,#(__str_15 >> 8)
0AA6 C0E0      2426            push    acc
0AA8 7480      2427            mov     a,#0x80
0AAA C0E0      2428            push    acc
0AAC 120100    2429            lcall   _printf
0AAF E581      2430            mov     a,sp
0AB1 24F9      2431            add     a,#0xf9
0AB3 F581      2432            mov     sp,a
0AB5 D001      2433            pop     ar1
0AB7 D000      2434            pop     ar0
0AB9 D007      2435            pop     ar7
0ABB D006      2436            pop     ar6
0ABD 8001      2437            sjmp    L019017?
0ABF           2438   L019004?:
0ABF           2439   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:459: PWMStop();
0ABF C006      2440            push    ar6
0AC1 C007      2441            push    ar7
0AC3 C000      2442            push    ar0
0AC5 C001      2443            push    ar1
0AC7 120100    2444            lcall   _PWMStop
0ACA D001      2445            pop     ar1
0ACC D000      2446            pop     ar0
0ACE D007      2447            pop     ar7
0AD0 D006      2448            pop     ar6
0AD2           2449   L019017?:
0AD2           2450   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:462: waitms(1000);
0AD2 9003E8    2451            mov     dptr,#0x03E8
0AD5 C006      2452            push    ar6
0AD7 C007      2453            push    ar7
0AD9 C000      2454            push    ar0
0ADB C001      2455            push    ar1
0ADD 120100    2456            lcall   _waitms
0AE0 D001      2457            pop     ar1
0AE2 D000      2458            pop     ar0
0AE4 D007      2459            pop     ar7
0AE6 D006      2460            pop     ar6
0AE8           2461   ;        C:\Users\Binte\Documents\GitHub\ElecRobot\Sam_Test.c:463: pasttime = time;
0AE8 8E88      2462            mov     _main_pasttime_1_82,r6
0AEA 8F89      2463            mov     (_main_pasttime_1_82 + 1),r7
0AEC 888A      2464            mov     (_main_pasttime_1_82 + 2),r0
0AEE 898B      2465            mov     (_main_pasttime_1_82 + 3),r1
0AF0 020100    2466            ljmp    L019020?
0AF3           2467            rseg R_CSEG
0AF3           2468   
0000           2469            rseg R_XINIT
0000           2470   
0000           2471            rseg R_CONST
0000           2472   __str_0:
0000 466F7277  2473            db 'Forward'
     617264
0007 0A        2474            db 0x0A
0008 0D        2475            db 0x0D
0009 00        2476            db 0x00
000A           2477   __str_1:
000A 4261636B  2478            db 'Backward'
     77617264
0012 0A        2479            db 0x0A
0013 0D        2480            db 0x0D
0014 00        2481            db 0x00
0015           2482   __str_2:
0015 4C656674  2483            db 'Left'
0019 0A        2484            db 0x0A
001A 0D        2485            db 0x0D
001B 00        2486            db 0x00
001C           2487   __str_3:
001C 52696768  2488            db 'Right'
     74
0021 0A        2489            db 0x0A
0022 0D        2490            db 0x0D
0023 00        2491            db 0x00
0024           2492   __str_4:
0024 53746F70  2493            db 'Stop'
0028 0A        2494            db 0x0A
0029 0D        2495            db 0x0D
002A 00        2496            db 0x00
002B           2497   __str_5:
002B 57616974  2498            db 'Waiting for the signal to be 1'
     696E6720
     666F7220
     74686520
     7369676E
     616C2074
     6F206265
     2031
0049 0A        2499            db 0x0A
004A 0D        2500            db 0x0D
004B 00        2501            db 0x00
004C           2502   __str_6:
004C 566F6C74  2503            db 'Volt at ADC: %f'
     20617420
     4144433A
     202566
005B 0A        2504            db 0x0A
005C 0D        2505            db 0x0D
005D 00        2506            db 0x00
005E           2507   __str_7:
005E 5369676E  2508            db 'Signal is 0'
     616C2069
     732030
0069 0A        2509            db 0x0A
006A 0D        2510            db 0x0D
006B 00        2511            db 0x00
006C           2512   __str_8:
006C 53746172  2513            db 'Start Timer'
     74205469
     6D6572
0077 0A        2514            db 0x0A
0078 0D        2515            db 0x0D
0079 00        2516            db 0x00
007A           2517   __str_9:
007A 506F7373  2518            db 'Possibly a STOP. break out of the loop and stop timer. '
     69626C79
     20612053
     544F502E
     20627265
     616B206F
     7574206F
     66207468
     65206C6F
     6F702061
     6E642073
     746F7020
     74696D65
     722E20
00B1 0A        2519            db 0x0A
00B2 0D        2520            db 0x0D
00B3 00        2521            db 0x00
00B4           2522   __str_10:
00B4 53746F70  2523            db 'Stop Timer'
     2054696D
     6572
00BE 0A        2524            db 0x0A
00BF 0D        2525            db 0x0D
00C0 00        2526            db 0x00
00C1           2527   __str_11:
00C1 1B        2528            db 0x1B
00C2 5B324A    2529            db '[2J'
00C5 00        2530            db 0x00
00C6           2531   __str_12:
00C6 53717561  2532            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
00EC 0D        2533            db 0x0D
00ED 0A        2534            db 0x0A
00EE 43686563  2535            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0102 50322E31  2536            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
011D 0D        2537            db 0x0D
011E 0A        2538            db 0x0A
011F 00        2539            db 0x00
0120           2540   __str_13:
0120 0A        2541            db 0x0A
0121 0D        2542            db 0x0D
0122 00        2543            db 0x00
0123           2544   __str_14:
0123 62616474  2545            db 'badtime%f'
     696D6525
     66
012C 09        2546            db 0x09
012D 0A        2547            db 0x0A
012E 0D        2548            db 0x0D
012F 00        2549            db 0x00
0130           2550   __str_15:
0130 2566      2551            db '%f'
0132 09        2552            db 0x09
0133 0A        2553            db 0x0A
0134 0D        2554            db 0x0D
0135 00        2555            db 0x00
0136           2556   
002E           2557            CSEG
002E           2558   
002E           2559   end
