0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 02:29:54 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon_Claw
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _laserPattern
0000             32            public _detectobstacle
0000             33            public _checkMode
0000             34            public _recieveData
0000             35            public _waitquarterperiod
0000             36            public _getDigitalSignal
0000             37            public _voltsAtPeak
0000             38            public _checkCommands
0000             39            public _arrayEqual
0000             40            public _zero_time_calc
0000             41            public _PWMStop
0000             42            public _PWMRight
0000             43            public _PWMLeft
0000             44            public _PWMbackward
0000             45            public _PWMforward
0000             46            public _InitPinADC
0000             47            public _Volts_at_Pin
0000             48            public _TIMER0_Init
0000             49            public _InitADC
0000             50            public _Timer2_ISR
0000             51            public _ADC_at_Pin
0000             52            public _Timer4_ISR
0000             53            public _waitms
0000             54            public _Timer3us
0000             55            public __c51_external_startup
0000             56            public _count20ms2
0000             57            public _pwm_state2
0000             58            public _pwm_reload2
0000             59            public _x
0000             60            public _command
0000             61            public _right
0000             62            public _left
0000             63            public _backward
0000             64            public _forward
0000             65            public _stop
0000             66            public _claw_flag
0000             67            public _flag
0000             68            public _cartMoveB
0000             69            public _cartMoveF
0000             70            public _pwmSig6
0000             71            public _pwmSig5
0000             72            public _pwmSig4
0000             73            public _pwmSig3
0000             74            public _pwmSig2
0000             75            public _pwmSig1
0000             76            public _pwm_count3
0000             77            public _pwm_count2
0000             78            public _pwm_count1
0000             79            public _pwm_count
0000             80   ;--------------------------------------------------------
0000             81   ; Special Function Registers
0000             82   ;--------------------------------------------------------
0000             83   _ACC            DATA 0xe0
0000             84   _ADC0ASAH       DATA 0xb6
0000             85   _ADC0ASAL       DATA 0xb5
0000             86   _ADC0ASCF       DATA 0xa1
0000             87   _ADC0ASCT       DATA 0xc7
0000             88   _ADC0CF0        DATA 0xbc
0000             89   _ADC0CF1        DATA 0xb9
0000             90   _ADC0CF2        DATA 0xdf
0000             91   _ADC0CN0        DATA 0xe8
0000             92   _ADC0CN1        DATA 0xb2
0000             93   _ADC0CN2        DATA 0xb3
0000             94   _ADC0GTH        DATA 0xc4
0000             95   _ADC0GTL        DATA 0xc3
0000             96   _ADC0H          DATA 0xbe
0000             97   _ADC0L          DATA 0xbd
0000             98   _ADC0LTH        DATA 0xc6
0000             99   _ADC0LTL        DATA 0xc5
0000            100   _ADC0MX         DATA 0xbb
0000            101   _B              DATA 0xf0
0000            102   _CKCON0         DATA 0x8e
0000            103   _CKCON1         DATA 0xa6
0000            104   _CLEN0          DATA 0xc6
0000            105   _CLIE0          DATA 0xc7
0000            106   _CLIF0          DATA 0xe8
0000            107   _CLKSEL         DATA 0xa9
0000            108   _CLOUT0         DATA 0xd1
0000            109   _CLU0CF         DATA 0xb1
0000            110   _CLU0FN         DATA 0xaf
0000            111   _CLU0MX         DATA 0x84
0000            112   _CLU1CF         DATA 0xb3
0000            113   _CLU1FN         DATA 0xb2
0000            114   _CLU1MX         DATA 0x85
0000            115   _CLU2CF         DATA 0xb6
0000            116   _CLU2FN         DATA 0xb5
0000            117   _CLU2MX         DATA 0x91
0000            118   _CLU3CF         DATA 0xbf
0000            119   _CLU3FN         DATA 0xbe
0000            120   _CLU3MX         DATA 0xae
0000            121   _CMP0CN0        DATA 0x9b
0000            122   _CMP0CN1        DATA 0x99
0000            123   _CMP0MD         DATA 0x9d
0000            124   _CMP0MX         DATA 0x9f
0000            125   _CMP1CN0        DATA 0xbf
0000            126   _CMP1CN1        DATA 0xac
0000            127   _CMP1MD         DATA 0xab
0000            128   _CMP1MX         DATA 0xaa
0000            129   _CRC0CN0        DATA 0xce
0000            130   _CRC0CN1        DATA 0x86
0000            131   _CRC0CNT        DATA 0xd3
0000            132   _CRC0DAT        DATA 0xcb
0000            133   _CRC0FLIP       DATA 0xcf
0000            134   _CRC0IN         DATA 0xca
0000            135   _CRC0ST         DATA 0xd2
0000            136   _DAC0CF0        DATA 0x91
0000            137   _DAC0CF1        DATA 0x92
0000            138   _DAC0H          DATA 0x85
0000            139   _DAC0L          DATA 0x84
0000            140   _DAC1CF0        DATA 0x93
0000            141   _DAC1CF1        DATA 0x94
0000            142   _DAC1H          DATA 0x8a
0000            143   _DAC1L          DATA 0x89
0000            144   _DAC2CF0        DATA 0x95
0000            145   _DAC2CF1        DATA 0x96
0000            146   _DAC2H          DATA 0x8c
0000            147   _DAC2L          DATA 0x8b
0000            148   _DAC3CF0        DATA 0x9a
0000            149   _DAC3CF1        DATA 0x9c
0000            150   _DAC3H          DATA 0x8e
0000            151   _DAC3L          DATA 0x8d
0000            152   _DACGCF0        DATA 0x88
0000            153   _DACGCF1        DATA 0x98
0000            154   _DACGCF2        DATA 0xa2
0000            155   _DERIVID        DATA 0xad
0000            156   _DEVICEID       DATA 0xb5
0000            157   _DPH            DATA 0x83
0000            158   _DPL            DATA 0x82
0000            159   _EIE1           DATA 0xe6
0000            160   _EIE2           DATA 0xf3
0000            161   _EIP1           DATA 0xbb
0000            162   _EIP1H          DATA 0xee
0000            163   _EIP2           DATA 0xed
0000            164   _EIP2H          DATA 0xf6
0000            165   _EMI0CN         DATA 0xe7
0000            166   _FLKEY          DATA 0xb7
0000            167   _HFO0CAL        DATA 0xc7
0000            168   _HFO1CAL        DATA 0xd6
0000            169   _HFOCN          DATA 0xef
0000            170   _I2C0ADM        DATA 0xff
0000            171   _I2C0CN0        DATA 0xba
0000            172   _I2C0DIN        DATA 0xbc
0000            173   _I2C0DOUT       DATA 0xbb
0000            174   _I2C0FCN0       DATA 0xad
0000            175   _I2C0FCN1       DATA 0xab
0000            176   _I2C0FCT        DATA 0xf5
0000            177   _I2C0SLAD       DATA 0xbd
0000            178   _I2C0STAT       DATA 0xb9
0000            179   _IE             DATA 0xa8
0000            180   _IP             DATA 0xb8
0000            181   _IPH            DATA 0xf2
0000            182   _IT01CF         DATA 0xe4
0000            183   _LFO0CN         DATA 0xb1
0000            184   _P0             DATA 0x80
0000            185   _P0MASK         DATA 0xfe
0000            186   _P0MAT          DATA 0xfd
0000            187   _P0MDIN         DATA 0xf1
0000            188   _P0MDOUT        DATA 0xa4
0000            189   _P0SKIP         DATA 0xd4
0000            190   _P1             DATA 0x90
0000            191   _P1MASK         DATA 0xee
0000            192   _P1MAT          DATA 0xed
0000            193   _P1MDIN         DATA 0xf2
0000            194   _P1MDOUT        DATA 0xa5
0000            195   _P1SKIP         DATA 0xd5
0000            196   _P2             DATA 0xa0
0000            197   _P2MASK         DATA 0xfc
0000            198   _P2MAT          DATA 0xfb
0000            199   _P2MDIN         DATA 0xf3
0000            200   _P2MDOUT        DATA 0xa6
0000            201   _P2SKIP         DATA 0xcc
0000            202   _P3             DATA 0xb0
0000            203   _P3MDIN         DATA 0xf4
0000            204   _P3MDOUT        DATA 0x9c
0000            205   _PCA0CENT       DATA 0x9e
0000            206   _PCA0CLR        DATA 0x9c
0000            207   _PCA0CN0        DATA 0xd8
0000            208   _PCA0CPH0       DATA 0xfc
0000            209   _PCA0CPH1       DATA 0xea
0000            210   _PCA0CPH2       DATA 0xec
0000            211   _PCA0CPH3       DATA 0xf5
0000            212   _PCA0CPH4       DATA 0x85
0000            213   _PCA0CPH5       DATA 0xde
0000            214   _PCA0CPL0       DATA 0xfb
0000            215   _PCA0CPL1       DATA 0xe9
0000            216   _PCA0CPL2       DATA 0xeb
0000            217   _PCA0CPL3       DATA 0xf4
0000            218   _PCA0CPL4       DATA 0x84
0000            219   _PCA0CPL5       DATA 0xdd
0000            220   _PCA0CPM0       DATA 0xda
0000            221   _PCA0CPM1       DATA 0xdb
0000            222   _PCA0CPM2       DATA 0xdc
0000            223   _PCA0CPM3       DATA 0xae
0000            224   _PCA0CPM4       DATA 0xaf
0000            225   _PCA0CPM5       DATA 0xcc
0000            226   _PCA0H          DATA 0xfa
0000            227   _PCA0L          DATA 0xf9
0000            228   _PCA0MD         DATA 0xd9
0000            229   _PCA0POL        DATA 0x96
0000            230   _PCA0PWM        DATA 0xf7
0000            231   _PCON0          DATA 0x87
0000            232   _PCON1          DATA 0xcd
0000            233   _PFE0CN         DATA 0xc1
0000            234   _PRTDRV         DATA 0xf6
0000            235   _PSCTL          DATA 0x8f
0000            236   _PSTAT0         DATA 0xaa
0000            237   _PSW            DATA 0xd0
0000            238   _REF0CN         DATA 0xd1
0000            239   _REG0CN         DATA 0xc9
0000            240   _REVID          DATA 0xb6
0000            241   _RSTSRC         DATA 0xef
0000            242   _SBCON1         DATA 0x94
0000            243   _SBRLH1         DATA 0x96
0000            244   _SBRLL1         DATA 0x95
0000            245   _SBUF           DATA 0x99
0000            246   _SBUF0          DATA 0x99
0000            247   _SBUF1          DATA 0x92
0000            248   _SCON           DATA 0x98
0000            249   _SCON0          DATA 0x98
0000            250   _SCON1          DATA 0xc8
0000            251   _SFRPAGE        DATA 0xa7
0000            252   _SFRPGCN        DATA 0xbc
0000            253   _SFRSTACK       DATA 0xd7
0000            254   _SMB0ADM        DATA 0xd6
0000            255   _SMB0ADR        DATA 0xd7
0000            256   _SMB0CF         DATA 0xc1
0000            257   _SMB0CN0        DATA 0xc0
0000            258   _SMB0DAT        DATA 0xc2
0000            259   _SMB0FCN0       DATA 0xc3
0000            260   _SMB0FCN1       DATA 0xc4
0000            261   _SMB0FCT        DATA 0xef
0000            262   _SMB0RXLN       DATA 0xc5
0000            263   _SMB0TC         DATA 0xac
0000            264   _SMOD1          DATA 0x93
0000            265   _SP             DATA 0x81
0000            266   _SPI0CFG        DATA 0xa1
0000            267   _SPI0CKR        DATA 0xa2
0000            268   _SPI0CN0        DATA 0xf8
0000            269   _SPI0DAT        DATA 0xa3
0000            270   _SPI0FCN0       DATA 0x9a
0000            271   _SPI0FCN1       DATA 0x9b
0000            272   _SPI0FCT        DATA 0xf7
0000            273   _SPI0PCF        DATA 0xdf
0000            274   _TCON           DATA 0x88
0000            275   _TH0            DATA 0x8c
0000            276   _TH1            DATA 0x8d
0000            277   _TL0            DATA 0x8a
0000            278   _TL1            DATA 0x8b
0000            279   _TMOD           DATA 0x89
0000            280   _TMR2CN0        DATA 0xc8
0000            281   _TMR2CN1        DATA 0xfd
0000            282   _TMR2H          DATA 0xcf
0000            283   _TMR2L          DATA 0xce
0000            284   _TMR2RLH        DATA 0xcb
0000            285   _TMR2RLL        DATA 0xca
0000            286   _TMR3CN0        DATA 0x91
0000            287   _TMR3CN1        DATA 0xfe
0000            288   _TMR3H          DATA 0x95
0000            289   _TMR3L          DATA 0x94
0000            290   _TMR3RLH        DATA 0x93
0000            291   _TMR3RLL        DATA 0x92
0000            292   _TMR4CN0        DATA 0x98
0000            293   _TMR4CN1        DATA 0xff
0000            294   _TMR4H          DATA 0xa5
0000            295   _TMR4L          DATA 0xa4
0000            296   _TMR4RLH        DATA 0xa3
0000            297   _TMR4RLL        DATA 0xa2
0000            298   _TMR5CN0        DATA 0xc0
0000            299   _TMR5CN1        DATA 0xf1
0000            300   _TMR5H          DATA 0xd5
0000            301   _TMR5L          DATA 0xd4
0000            302   _TMR5RLH        DATA 0xd3
0000            303   _TMR5RLL        DATA 0xd2
0000            304   _UART0PCF       DATA 0xd9
0000            305   _UART1FCN0      DATA 0x9d
0000            306   _UART1FCN1      DATA 0xd8
0000            307   _UART1FCT       DATA 0xfa
0000            308   _UART1LIN       DATA 0x9e
0000            309   _UART1PCF       DATA 0xda
0000            310   _VDM0CN         DATA 0xff
0000            311   _WDTCN          DATA 0x97
0000            312   _XBR0           DATA 0xe1
0000            313   _XBR1           DATA 0xe2
0000            314   _XBR2           DATA 0xe3
0000            315   _XOSC0CN        DATA 0x86
0000            316   _DPTR           DATA 0x8382
0000            317   _TMR2RL         DATA 0xcbca
0000            318   _TMR3RL         DATA 0x9392
0000            319   _TMR4RL         DATA 0xa3a2
0000            320   _TMR5RL         DATA 0xd3d2
0000            321   _TMR0           DATA 0x8c8a
0000            322   _TMR1           DATA 0x8d8b
0000            323   _TMR2           DATA 0xcfce
0000            324   _TMR3           DATA 0x9594
0000            325   _TMR4           DATA 0xa5a4
0000            326   _TMR5           DATA 0xd5d4
0000            327   _SBRL1          DATA 0x9695
0000            328   _PCA0           DATA 0xfaf9
0000            329   _PCA0CP0        DATA 0xfcfb
0000            330   _PCA0CP1        DATA 0xeae9
0000            331   _PCA0CP2        DATA 0xeceb
0000            332   _PCA0CP3        DATA 0xf5f4
0000            333   _PCA0CP4        DATA 0x8584
0000            334   _PCA0CP5        DATA 0xdedd
0000            335   _ADC0ASA        DATA 0xb6b5
0000            336   _ADC0GT         DATA 0xc4c3
0000            337   _ADC0           DATA 0xbebd
0000            338   _ADC0LT         DATA 0xc6c5
0000            339   _DAC0           DATA 0x8584
0000            340   _DAC1           DATA 0x8a89
0000            341   _DAC2           DATA 0x8c8b
0000            342   _DAC3           DATA 0x8e8d
0000            343   ;--------------------------------------------------------
0000            344   ; special function bits
0000            345   ;--------------------------------------------------------
0000            346   _ACC_0          BIT 0xe0
0000            347   _ACC_1          BIT 0xe1
0000            348   _ACC_2          BIT 0xe2
0000            349   _ACC_3          BIT 0xe3
0000            350   _ACC_4          BIT 0xe4
0000            351   _ACC_5          BIT 0xe5
0000            352   _ACC_6          BIT 0xe6
0000            353   _ACC_7          BIT 0xe7
0000            354   _TEMPE          BIT 0xe8
0000            355   _ADGN0          BIT 0xe9
0000            356   _ADGN1          BIT 0xea
0000            357   _ADWINT         BIT 0xeb
0000            358   _ADBUSY         BIT 0xec
0000            359   _ADINT          BIT 0xed
0000            360   _IPOEN          BIT 0xee
0000            361   _ADEN           BIT 0xef
0000            362   _B_0            BIT 0xf0
0000            363   _B_1            BIT 0xf1
0000            364   _B_2            BIT 0xf2
0000            365   _B_3            BIT 0xf3
0000            366   _B_4            BIT 0xf4
0000            367   _B_5            BIT 0xf5
0000            368   _B_6            BIT 0xf6
0000            369   _B_7            BIT 0xf7
0000            370   _C0FIF          BIT 0xe8
0000            371   _C0RIF          BIT 0xe9
0000            372   _C1FIF          BIT 0xea
0000            373   _C1RIF          BIT 0xeb
0000            374   _C2FIF          BIT 0xec
0000            375   _C2RIF          BIT 0xed
0000            376   _C3FIF          BIT 0xee
0000            377   _C3RIF          BIT 0xef
0000            378   _D1SRC0         BIT 0x88
0000            379   _D1SRC1         BIT 0x89
0000            380   _D1AMEN         BIT 0x8a
0000            381   _D01REFSL       BIT 0x8b
0000            382   _D3SRC0         BIT 0x8c
0000            383   _D3SRC1         BIT 0x8d
0000            384   _D3AMEN         BIT 0x8e
0000            385   _D23REFSL       BIT 0x8f
0000            386   _D0UDIS         BIT 0x98
0000            387   _D1UDIS         BIT 0x99
0000            388   _D2UDIS         BIT 0x9a
0000            389   _D3UDIS         BIT 0x9b
0000            390   _EX0            BIT 0xa8
0000            391   _ET0            BIT 0xa9
0000            392   _EX1            BIT 0xaa
0000            393   _ET1            BIT 0xab
0000            394   _ES0            BIT 0xac
0000            395   _ET2            BIT 0xad
0000            396   _ESPI0          BIT 0xae
0000            397   _EA             BIT 0xaf
0000            398   _PX0            BIT 0xb8
0000            399   _PT0            BIT 0xb9
0000            400   _PX1            BIT 0xba
0000            401   _PT1            BIT 0xbb
0000            402   _PS0            BIT 0xbc
0000            403   _PT2            BIT 0xbd
0000            404   _PSPI0          BIT 0xbe
0000            405   _P0_0           BIT 0x80
0000            406   _P0_1           BIT 0x81
0000            407   _P0_2           BIT 0x82
0000            408   _P0_3           BIT 0x83
0000            409   _P0_4           BIT 0x84
0000            410   _P0_5           BIT 0x85
0000            411   _P0_6           BIT 0x86
0000            412   _P0_7           BIT 0x87
0000            413   _P1_0           BIT 0x90
0000            414   _P1_1           BIT 0x91
0000            415   _P1_2           BIT 0x92
0000            416   _P1_3           BIT 0x93
0000            417   _P1_4           BIT 0x94
0000            418   _P1_5           BIT 0x95
0000            419   _P1_6           BIT 0x96
0000            420   _P1_7           BIT 0x97
0000            421   _P2_0           BIT 0xa0
0000            422   _P2_1           BIT 0xa1
0000            423   _P2_2           BIT 0xa2
0000            424   _P2_3           BIT 0xa3
0000            425   _P2_4           BIT 0xa4
0000            426   _P2_5           BIT 0xa5
0000            427   _P2_6           BIT 0xa6
0000            428   _P3_0           BIT 0xb0
0000            429   _P3_1           BIT 0xb1
0000            430   _P3_2           BIT 0xb2
0000            431   _P3_3           BIT 0xb3
0000            432   _P3_4           BIT 0xb4
0000            433   _P3_7           BIT 0xb7
0000            434   _CCF0           BIT 0xd8
0000            435   _CCF1           BIT 0xd9
0000            436   _CCF2           BIT 0xda
0000            437   _CCF3           BIT 0xdb
0000            438   _CCF4           BIT 0xdc
0000            439   _CCF5           BIT 0xdd
0000            440   _CR             BIT 0xde
0000            441   _CF             BIT 0xdf
0000            442   _PARITY         BIT 0xd0
0000            443   _F1             BIT 0xd1
0000            444   _OV             BIT 0xd2
0000            445   _RS0            BIT 0xd3
0000            446   _RS1            BIT 0xd4
0000            447   _F0             BIT 0xd5
0000            448   _AC             BIT 0xd6
0000            449   _CY             BIT 0xd7
0000            450   _RI             BIT 0x98
0000            451   _TI             BIT 0x99
0000            452   _RB8            BIT 0x9a
0000            453   _TB8            BIT 0x9b
0000            454   _REN            BIT 0x9c
0000            455   _CE             BIT 0x9d
0000            456   _SMODE          BIT 0x9e
0000            457   _RI1            BIT 0xc8
0000            458   _TI1            BIT 0xc9
0000            459   _RBX1           BIT 0xca
0000            460   _TBX1           BIT 0xcb
0000            461   _REN1           BIT 0xcc
0000            462   _PERR1          BIT 0xcd
0000            463   _OVR1           BIT 0xce
0000            464   _SI             BIT 0xc0
0000            465   _ACK            BIT 0xc1
0000            466   _ARBLOST        BIT 0xc2
0000            467   _ACKRQ          BIT 0xc3
0000            468   _STO            BIT 0xc4
0000            469   _STA            BIT 0xc5
0000            470   _TXMODE         BIT 0xc6
0000            471   _MASTER         BIT 0xc7
0000            472   _SPIEN          BIT 0xf8
0000            473   _TXNF           BIT 0xf9
0000            474   _NSSMD0         BIT 0xfa
0000            475   _NSSMD1         BIT 0xfb
0000            476   _RXOVRN         BIT 0xfc
0000            477   _MODF           BIT 0xfd
0000            478   _WCOL           BIT 0xfe
0000            479   _SPIF           BIT 0xff
0000            480   _IT0            BIT 0x88
0000            481   _IE0            BIT 0x89
0000            482   _IT1            BIT 0x8a
0000            483   _IE1            BIT 0x8b
0000            484   _TR0            BIT 0x8c
0000            485   _TF0            BIT 0x8d
0000            486   _TR1            BIT 0x8e
0000            487   _TF1            BIT 0x8f
0000            488   _T2XCLK0        BIT 0xc8
0000            489   _T2XCLK1        BIT 0xc9
0000            490   _TR2            BIT 0xca
0000            491   _T2SPLIT        BIT 0xcb
0000            492   _TF2CEN         BIT 0xcc
0000            493   _TF2LEN         BIT 0xcd
0000            494   _TF2L           BIT 0xce
0000            495   _TF2H           BIT 0xcf
0000            496   _T4XCLK0        BIT 0x98
0000            497   _T4XCLK1        BIT 0x99
0000            498   _TR4            BIT 0x9a
0000            499   _T4SPLIT        BIT 0x9b
0000            500   _TF4CEN         BIT 0x9c
0000            501   _TF4LEN         BIT 0x9d
0000            502   _TF4L           BIT 0x9e
0000            503   _TF4H           BIT 0x9f
0000            504   _T5XCLK0        BIT 0xc0
0000            505   _T5XCLK1        BIT 0xc1
0000            506   _TR5            BIT 0xc2
0000            507   _T5SPLIT        BIT 0xc3
0000            508   _TF5CEN         BIT 0xc4
0000            509   _TF5LEN         BIT 0xc5
0000            510   _TF5L           BIT 0xc6
0000            511   _TF5H           BIT 0xc7
0000            512   _RIE            BIT 0xd8
0000            513   _RXTO0          BIT 0xd9
0000            514   _RXTO1          BIT 0xda
0000            515   _RFRQ           BIT 0xdb
0000            516   _TIE            BIT 0xdc
0000            517   _TXHOLD         BIT 0xdd
0000            518   _TXNF1          BIT 0xde
0000            519   _TFRQ           BIT 0xdf
0000            520   ;--------------------------------------------------------
0000            521   ; overlayable register banks
0000            522   ;--------------------------------------------------------
0000            523            rbank0 segment data overlay
0000            524   ;--------------------------------------------------------
0000            525   ; internal ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_DSEG
0000            528   _pwm_count:
0000            529            ds 1
0001            530   _pwm_count1:
0001            531            ds 1
0002            532   _pwm_count2:
0002            533            ds 1
0003            534   _pwm_count3:
0003            535            ds 1
0004            536   _pwmSig1:
0004            537            ds 2
0006            538   _pwmSig2:
0006            539            ds 2
0008            540   _pwmSig3:
0008            541            ds 2
000A            542   _pwmSig4:
000A            543            ds 2
000C            544   _pwmSig5:
000C            545            ds 2
000E            546   _pwmSig6:
000E            547            ds 2
0010            548   _cartMoveF:
0010            549            ds 2
0012            550   _cartMoveB:
0012            551            ds 2
0014            552   _flag:
0014            553            ds 2
0016            554   _claw_flag:
0016            555            ds 2
0018            556   _stop:
0018            557            ds 8
0020            558   _forward:
0020            559            ds 8
0028            560   _backward:
0028            561            ds 8
0030            562   _left:
0030            563            ds 8
0038            564   _right:
0038            565            ds 8
0040            566   _command:
0040            567            ds 8
0048            568   _x:
0048            569            ds 2
004A            570   _pwm_reload2:
004A            571            ds 2
004C            572   _pwm_state2:
004C            573            ds 1
004D            574   _count20ms2:
004D            575            ds 1
004E            576   _zero_time_calc_overflow_count_1_76:
004E            577            ds 2
0050            578   _main_temp_sensor_voltages_1_108:
0050            579            ds 12
005C            580   _main_pulse_width2_1_108:
005C            581            ds 4
0060            582   ;--------------------------------------------------------
0060            583   ; overlayable items in internal ram 
0060            584   ;--------------------------------------------------------
0000            585            rseg    R_OSEG
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588   _InitPinADC_PARM_2:
0000            589            ds 1
0001            590            rseg    R_OSEG
0001            591   _arrayEqual_PARM_2:
0001            592            ds 2
0003            593   _arrayEqual_PARM_3:
0003            594            ds 3
0006            595   _arrayEqual_arr1_1_79:
0006            596            ds 3
0009            597   ;--------------------------------------------------------
0009            598   ; indirectly addressable internal ram data
0009            599   ;--------------------------------------------------------
0000            600            rseg R_ISEG
0000            601   ;--------------------------------------------------------
0000            602   ; absolute internal ram data
0000            603   ;--------------------------------------------------------
0000            604            DSEG
0000            605   ;--------------------------------------------------------
0000            606   ; bit data
0000            607   ;--------------------------------------------------------
0000            608            rseg R_BSEG
0000            609   _Timer2_ISR_sloc0_1_0:
0000            610            DBIT    1
0001            611   ;--------------------------------------------------------
0001            612   ; paged external ram data
0001            613   ;--------------------------------------------------------
0000            614            rseg R_PSEG
0000            615   ;--------------------------------------------------------
0000            616   ; external ram data
0000            617   ;--------------------------------------------------------
0000            618            rseg R_XSEG
0000            619   ;--------------------------------------------------------
0000            620   ; absolute external ram data
0000            621   ;--------------------------------------------------------
0000            622            XSEG
0000            623   ;--------------------------------------------------------
0000            624   ; external initialized ram data
0000            625   ;--------------------------------------------------------
0000            626            rseg R_IXSEG
0000            627            rseg R_HOME
0000            628            rseg R_GSINIT
0000            629            rseg R_CSEG
0000            630   ;--------------------------------------------------------
0000            631   ; Reset entry point and interrupt vectors
0000            632   ;--------------------------------------------------------
0000            633            CSEG at 0x0000
0000 020100     634            ljmp    _crt0
002B            635            CSEG at 0x002b
002B 020100     636            ljmp    _Timer2_ISR
008B            637            CSEG at 0x008b
008B 020100     638            ljmp    _Timer4_ISR
008E            639   ;--------------------------------------------------------
008E            640   ; global & static initialisations
008E            641   ;--------------------------------------------------------
0000            642            rseg R_HOME
0000            643            rseg R_GSINIT
0000            644            rseg R_GSINIT
0000            645   ;--------------------------------------------------------
0000            646   ; data variables initialization
0000            647   ;--------------------------------------------------------
0000            648            rseg R_DINIT
0000            649   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:65: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 756000     650            mov     _pwm_count,#0x00
0003            651   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:66: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 752000     652            mov     _pwm_count1,#0x00
0006            653   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:67: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 75E000     654            mov     _pwm_count2,#0x00
0009            655   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:68: volatile unsigned char pwm_count3 = 0; //
0009 75A000     656            mov     _pwm_count3,#0x00
000C            657   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:83: volatile int flag = 0;
000C E4         658            clr     a
000D F560       659            mov     _flag,a
000F F561       660            mov     (_flag + 1),a
0011            661   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:84: volatile int claw_flag = 0;
0011 E4         662            clr     a
0012 F520       663            mov     _claw_flag,a
0014 F521       664            mov     (_claw_flag + 1),a
0016            665   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:85: int stop[]={1,0,0,0};
0016 75E001     666            mov     _stop,#0x01
0019 75E100     667            mov     (_stop + 1),#0x00
001C 75E200     668            mov     (_stop + 0x0002),#0x00
001F 75E300     669            mov     ((_stop + 0x0002) + 1),#0x00
0022 75E400     670            mov     (_stop + 0x0004),#0x00
0025 75E500     671            mov     ((_stop + 0x0004) + 1),#0x00
0028 75E600     672            mov     (_stop + 0x0006),#0x00
002B 75E700     673            mov     ((_stop + 0x0006) + 1),#0x00
002E            674   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:86: int forward[]={1,1,1,1};
002E 75A001     675            mov     _forward,#0x01
0031 75A100     676            mov     (_forward + 1),#0x00
0034 75A201     677            mov     (_forward + 0x0002),#0x01
0037 75A300     678            mov     ((_forward + 0x0002) + 1),#0x00
003A 75A401     679            mov     (_forward + 0x0004),#0x01
003D 75A500     680            mov     ((_forward + 0x0004) + 1),#0x00
0040 75A601     681            mov     (_forward + 0x0006),#0x01
0043 75A700     682            mov     ((_forward + 0x0006) + 1),#0x00
0046            683   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:87: int backward[]={1,0,0,0};
0046 756001     684            mov     _backward,#0x01
0049 756100     685            mov     (_backward + 1),#0x00
004C 756200     686            mov     (_backward + 0x0002),#0x00
004F 756300     687            mov     ((_backward + 0x0002) + 1),#0x00
0052 756400     688            mov     (_backward + 0x0004),#0x00
0055 756500     689            mov     ((_backward + 0x0004) + 1),#0x00
0058 756600     690            mov     (_backward + 0x0006),#0x00
005B 756700     691            mov     ((_backward + 0x0006) + 1),#0x00
005E            692   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:88: int left[]={1,0,1,0};
005E 752001     693            mov     _left,#0x01
0061 752100     694            mov     (_left + 1),#0x00
0064 752200     695            mov     (_left + 0x0002),#0x00
0067 752300     696            mov     ((_left + 0x0002) + 1),#0x00
006A 752401     697            mov     (_left + 0x0004),#0x01
006D 752500     698            mov     ((_left + 0x0004) + 1),#0x00
0070 752600     699            mov     (_left + 0x0006),#0x00
0073 752700     700            mov     ((_left + 0x0006) + 1),#0x00
0076            701   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:89: int right[]={1,1,0,1};
0076 75E001     702            mov     _right,#0x01
0079 75E100     703            mov     (_right + 1),#0x00
007C 75E201     704            mov     (_right + 0x0002),#0x01
007F 75E300     705            mov     ((_right + 0x0002) + 1),#0x00
0082 75E400     706            mov     (_right + 0x0004),#0x00
0085 75E500     707            mov     ((_right + 0x0004) + 1),#0x00
0088 75E601     708            mov     (_right + 0x0006),#0x01
008B 75E700     709            mov     ((_right + 0x0006) + 1),#0x00
008E            710   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:91: int command[4] = {0,0,0,0};
008E 75A000     711            mov     _command,#0x00
0091 75A100     712            mov     (_command + 1),#0x00
0094 75A200     713            mov     (_command + 0x0002),#0x00
0097 75A300     714            mov     ((_command + 0x0002) + 1),#0x00
009A 75A400     715            mov     (_command + 0x0004),#0x00
009D 75A500     716            mov     ((_command + 0x0004) + 1),#0x00
00A0 75A600     717            mov     (_command + 0x0006),#0x00
00A3 75A700     718            mov     ((_command + 0x0006) + 1),#0x00
00A6            719   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:93: volatile unsigned int x = 2;
00A6 756002     720            mov     _x,#0x02
00A9 E4         721            clr     a
00AA F561       722            mov     (_x + 1),a
00AC            723   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:95: volatile unsigned char pwm_state2 = 0;
00AC 75E000     724            mov     _pwm_state2,#0x00
00AF            725            ; The linker places a 'ret' at the end of segment R_DINIT.
00AF            726   ;--------------------------------------------------------
00AF            727   ; code
00AF            728   ;--------------------------------------------------------
0000            729            rseg R_CSEG
0000            730   ;------------------------------------------------------------
0000            731   ;Allocation info for local variables in function '_c51_external_startup'
0000            732   ;------------------------------------------------------------
0000            733   ;------------------------------------------------------------
0000            734   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:98: char _c51_external_startup(void)
0000            735   ;        -----------------------------------------
0000            736   ;         function _c51_external_startup
0000            737   ;        -----------------------------------------
0000            738   __c51_external_startup:
0000            739            using   0
0000            740   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:101: SFRPAGE = 0x00;
0000 75A700     741            mov     _SFRPAGE,#0x00
0003            742   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:102: WDTCN = 0xDE; //First key
0003 7597DE     743            mov     _WDTCN,#0xDE
0006            744   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:103: WDTCN = 0xAD; //Second key
0006 7597AD     745            mov     _WDTCN,#0xAD
0009            746   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:105: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     747            mov     _VDM0CN,#0x80
000C            748   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:106: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     749            mov     _RSTSRC,#0x06
000F            750   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:113: SFRPAGE = 0x10;
000F 75A710     751            mov     _SFRPAGE,#0x10
0012            752   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:114: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     753            mov     _PFE0CN,#0x20
0015            754   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:115: SFRPAGE = 0x00;
0015 75A700     755            mov     _SFRPAGE,#0x00
0018            756   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:136: CLKSEL = 0x00;
0018 75A900     757            mov     _CLKSEL,#0x00
001B            758   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:137: CLKSEL = 0x00;
001B 75A900     759            mov     _CLKSEL,#0x00
001E            760   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:138: while ((CLKSEL & 0x80) == 0);
001E            761   L002001?:
001E E5A9       762            mov     a,_CLKSEL
0020 30E758     763            jnb     acc.7,L002001?
0023            764   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:139: CLKSEL = 0x03;
0023 75A903     765            mov     _CLKSEL,#0x03
0026            766   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:140: CLKSEL = 0x03;
0026 75A903     767            mov     _CLKSEL,#0x03
0029            768   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:141: while ((CLKSEL & 0x80) == 0);
0029            769   L002004?:
0029 E5A9       770            mov     a,_CLKSEL
002B 30E7D8     771            jnb     acc.7,L002004?
002E            772   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:146: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     773            orl     _P0MDOUT,#0x10
0031            774   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:147: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     775            mov     _XBR0,#0x01
0034            776   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:148: XBR1 = 0X00;
0034 75E200     777            mov     _XBR1,#0x00
0037            778   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:149: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     779            mov     _XBR2,#0x40
003A            780   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:155: SCON0 = 0x10;
003A 759810     781            mov     _SCON0,#0x10
003D            782   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:156: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     783            mov     _TH1,#0xE6
0040            784   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:157: TL1 = TH1;      // Init Timer1
0040 858D8B     785            mov     _TL1,_TH1
0043            786   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:158: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     787            anl     _TMOD,#0x0F
0046            788   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:159: TMOD |= 0x20;
0046 438920     789            orl     _TMOD,#0x20
0049            790   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:160: TR1 = 1; // START Timer1
0049 D28E       791            setb    _TR1
004B            792   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:161: TI = 1;  // Indicate TX0 ready
004B D299       793            setb    _TI
004D            794   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:164: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     795            mov     _TMR2CN0,#0x00
0050            796   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:165: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     797            orl     _CKCON0,#0x10
0053            798   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:166: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     799            mov     _TMR2RL,#0xE0
0056 75CBE3     800            mov     (_TMR2RL >> 8),#0xE3
0059            801   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:167: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     802            mov     _TMR2,#0xFF
005C 75CFFF     803            mov     (_TMR2 >> 8),#0xFF
005F            804   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:168: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       805            setb    _ET2
0061            806   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:169: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       807            setb    _TR2
0063            808   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:171: SFRPAGE=0x10;
0063 75A710     809            mov     _SFRPAGE,#0x10
0066            810   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:172: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
0066 759800     811            mov     _TMR4CN0,#0x00
0069            812   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:173: pwm_reload2=0x10000L-(SYSCLK*1.5e-3)/12.0;
0069 7520D8     813            mov     _pwm_reload2,#0xD8
006C 7521DC     814            mov     (_pwm_reload2 + 1),#0xDC
006F            815   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:174: TMR4=0xffff;   // Set to reload immediately
006F 75A4FF     816            mov     _TMR4,#0xFF
0072 75A5FF     817            mov     (_TMR4 >> 8),#0xFF
0075            818   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:175: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
0075 43F304     819            orl     _EIE2,#0x04
0078            820   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:176: TR4=1;
0078 D29A       821            setb    _TR4
007A            822   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:194: EA = 1; // Enable interrupts
007A D2AF       823            setb    _EA
007C            824   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:197: return 0;
007C 758200     825            mov     dpl,#0x00
007F 22         826            ret
0080            827   ;------------------------------------------------------------
0080            828   ;Allocation info for local variables in function 'Timer3us'
0080            829   ;------------------------------------------------------------
0080            830   ;us                        Allocated to registers r2 r3 
0080            831   ;i                         Allocated to registers r4 r5 
0080            832   ;------------------------------------------------------------
0080            833   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:199: void Timer3us(unsigned int us)
0080            834   ;        -----------------------------------------
0080            835   ;         function Timer3us
0080            836   ;        -----------------------------------------
0080            837   _Timer3us:
0080 AA82       838            mov     r2,dpl
0082 AB83       839            mov     r3,dph
0084            840   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:204: CKCON0|=0b_0100_0000;
0084 438E40     841            orl     _CKCON0,#0x40
0087            842   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:206: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0087 7592B8     843            mov     _TMR3RL,#0xB8
008A 7593FF     844            mov     (_TMR3RL >> 8),#0xFF
008D            845   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:207: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
008D 859294     846            mov     _TMR3,_TMR3RL
0090 859395     847            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0093            848   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:209: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0093 759104     849            mov     _TMR3CN0,#0x04
0096            850   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:210: for (i = 0; i < us; i++)       // Count <us> overflows
0096 7C00       851            mov     r4,#0x00
0098 7D00       852            mov     r5,#0x00
009A            853   L003004?:
009A C3         854            clr     c
009B EC         855            mov     a,r4
009C 9A         856            subb    a,r2
009D ED         857            mov     a,r5
009E 9B         858            subb    a,r3
009F 5001       859            jnc     L003007?
00A1            860   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:212: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00A1            861   L003001?:
00A1 E591       862            mov     a,_TMR3CN0
00A3 30E718     863            jnb     acc.7,L003001?
00A6            864   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:213: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00A6 53917F     865            anl     _TMR3CN0,#0x7F
00A9            866   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:210: for (i = 0; i < us; i++)       // Count <us> overflows
00A9 0C         867            inc     r4
00AA BC0098     868            cjne    r4,#0x00,L003004?
00AD 0D         869            inc     r5
00AE 8001       870            sjmp    L003004?
00B0            871   L003007?:
00B0            872   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:215: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00B0 759100     873            mov     _TMR3CN0,#0x00
00B3 22         874            ret
00B4            875   ;------------------------------------------------------------
00B4            876   ;Allocation info for local variables in function 'waitms'
00B4            877   ;------------------------------------------------------------
00B4            878   ;ms                        Allocated to registers r2 r3 
00B4            879   ;j                         Allocated to registers r4 r5 
00B4            880   ;k                         Allocated to registers r6 
00B4            881   ;------------------------------------------------------------
00B4            882   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:217: void waitms (unsigned int ms)
00B4            883   ;        -----------------------------------------
00B4            884   ;         function waitms
00B4            885   ;        -----------------------------------------
00B4            886   _waitms:
00B4 AA82       887            mov     r2,dpl
00B6 AB83       888            mov     r3,dph
00B8            889   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:221: for(j=0; j<ms; j++)
00B8 7C00       890            mov     r4,#0x00
00BA 7D00       891            mov     r5,#0x00
00BC            892   L004005?:
00BC C3         893            clr     c
00BD EC         894            mov     a,r4
00BE 9A         895            subb    a,r2
00BF ED         896            mov     a,r5
00C0 9B         897            subb    a,r3
00C1 5001       898            jnc     L004009?
00C3            899   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:222: for (k=0; k<4; k++) Timer3us(250);
00C3 7E00       900            mov     r6,#0x00
00C5            901   L004001?:
00C5 BE0418     902            cjne    r6,#0x04,L004018?
00C8            903   L004018?:
00C8 5001       904            jnc     L004007?
00CA 9000FA     905            mov     dptr,#0x00FA
00CD C002       906            push    ar2
00CF C003       907            push    ar3
00D1 C004       908            push    ar4
00D3 C005       909            push    ar5
00D5 C006       910            push    ar6
00D7 120100     911            lcall   _Timer3us
00DA D006       912            pop     ar6
00DC D005       913            pop     ar5
00DE D004       914            pop     ar4
00E0 D003       915            pop     ar3
00E2 D002       916            pop     ar2
00E4 0E         917            inc     r6
00E5 8001       918            sjmp    L004001?
00E7            919   L004007?:
00E7            920   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:221: for(j=0; j<ms; j++)
00E7 0C         921            inc     r4
00E8 BC0058     922            cjne    r4,#0x00,L004005?
00EB 0D         923            inc     r5
00EC 8001       924            sjmp    L004005?
00EE            925   L004009?:
00EE 22         926            ret
00EF            927   ;------------------------------------------------------------
00EF            928   ;Allocation info for local variables in function 'Timer4_ISR'
00EF            929   ;------------------------------------------------------------
00EF            930   ;------------------------------------------------------------
00EF            931   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:226: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
00EF            932   ;        -----------------------------------------
00EF            933   ;         function Timer4_ISR
00EF            934   ;        -----------------------------------------
00EF            935   _Timer4_ISR:
00EF C0E0       936            push    acc
00F1 C002       937            push    ar2
00F3 C003       938            push    ar3
00F5 C004       939            push    ar4
00F7 C005       940            push    ar5
00F9 C0D0       941            push    psw
00FB 75D000     942            mov     psw,#0x00
00FE            943   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:228: SFRPAGE=0x10;
00FE 75A710     944            mov     _SFRPAGE,#0x10
0101            945   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:229: TF4H = 0; // Clear Timer4 interrupt flag
0101 C29F       946            clr     _TF4H
0103            947   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:233: switch (pwm_state2)
0103 AAE0       948            mov     r2,_pwm_state2
0105 BA00D8     949            cjne    r2,#0x00,L005009?
0108 8001       950            sjmp    L005001?
010A            951   L005009?:
010A            952   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:235: case 0:
010A BA0158     953            cjne    r2,#0x01,L005003?
010D 8001       954            sjmp    L005002?
010F            955   L005001?:
010F            956   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:236: PWMOUT2=1;
010F D2A6       957            setb    _P2_6
0111            958   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:237: TMR4RL=RELOAD_10MS;
0111 75A2A0     959            mov     _TMR4RL,#0xA0
0114 75A315     960            mov     (_TMR4RL >> 8),#0x15
0117            961   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:238: pwm_state2=1;
0117 75E001     962            mov     _pwm_state2,#0x01
011A            963   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:239: count20ms2++;
011A 05E0       964            inc     _count20ms2
011C            965   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:240: break;
011C            966   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:241: case 1:
011C 8001       967            sjmp    L005005?
011E            968   L005002?:
011E            969   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:242: PWMOUT2=0;
011E C2A6       970            clr     _P2_6
0120            971   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:243: TMR4RL=RELOAD_10MS-pwm_reload2;
0120 AA20       972            mov     r2,_pwm_reload2
0122 AB21       973            mov     r3,(_pwm_reload2 + 1)
0124 E4         974            clr     a
0125 FC         975            mov     r4,a
0126 FD         976            mov     r5,a
0127 74A0       977            mov     a,#0xA0
0129 C3         978            clr     c
012A 9A         979            subb    a,r2
012B FA         980            mov     r2,a
012C 7415       981            mov     a,#0x15
012E 9B         982            subb    a,r3
012F FB         983            mov     r3,a
0130 E4         984            clr     a
0131 9C         985            subb    a,r4
0132 FC         986            mov     r4,a
0133 E4         987            clr     a
0134 9D         988            subb    a,r5
0135 FD         989            mov     r5,a
0136 8AA2       990            mov     _TMR4RL,r2
0138 8BA3       991            mov     (_TMR4RL >> 8),r3
013A            992   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:244: pwm_state2=2;
013A 75E002     993            mov     _pwm_state2,#0x02
013D            994   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:245: break;
013D            995   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:246: default:
013D 8001       996            sjmp    L005005?
013F            997   L005003?:
013F            998   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:247: PWMOUT2=0;
013F C2A6       999            clr     _P2_6
0141           1000   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:248: TMR4RL=pwm_reload2;
0141 8520A2    1001            mov     _TMR4RL,_pwm_reload2
0144 8521A3    1002            mov     (_TMR4RL >> 8),(_pwm_reload2 + 1)
0147           1003   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:249: pwm_state2=0;
0147 75E000    1004            mov     _pwm_state2,#0x00
014A           1005   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:251: }
014A           1006   L005005?:
014A D0D0      1007            pop     psw
014C D005      1008            pop     ar5
014E D004      1009            pop     ar4
0150 D003      1010            pop     ar3
0152 D002      1011            pop     ar2
0154 D0E0      1012            pop     acc
0156 32        1013            reti
0157           1014   ;        eliminated unneeded push/pop dpl
0157           1015   ;        eliminated unneeded push/pop dph
0157           1016   ;        eliminated unneeded push/pop b
0157           1017   ;------------------------------------------------------------
0157           1018   ;Allocation info for local variables in function 'ADC_at_Pin'
0157           1019   ;------------------------------------------------------------
0157           1020   ;pin                       Allocated to registers 
0157           1021   ;------------------------------------------------------------
0157           1022   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:254: unsigned int ADC_at_Pin(unsigned char pin)
0157           1023   ;        -----------------------------------------
0157           1024   ;         function ADC_at_Pin
0157           1025   ;        -----------------------------------------
0157           1026   _ADC_at_Pin:
0157 8582BB    1027            mov     _ADC0MX,dpl
015A           1028   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:257: ADBUSY = 1;       // Dummy conversion first to select new pin
015A D2EC      1029            setb    _ADBUSY
015C           1030   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:258: while (ADBUSY); // Wait for dummy conversion to finish
015C           1031   L006001?:
015C 20EC18    1032            jb      _ADBUSY,L006001?
015F           1033   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:259: ADBUSY = 1;     // Convert voltage at the pin
015F D2EC      1034            setb    _ADBUSY
0161           1035   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:260: while (ADBUSY); // Wait for conversion to complete
0161           1036   L006004?:
0161 20EC58    1037            jb      _ADBUSY,L006004?
0164           1038   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:261: return (ADC0);
0164 85BD82    1039            mov     dpl,_ADC0
0167 85BE83    1040            mov     dph,(_ADC0 >> 8)
016A 22        1041            ret
016B           1042   ;------------------------------------------------------------
016B           1043   ;Allocation info for local variables in function 'Timer2_ISR'
016B           1044   ;------------------------------------------------------------
016B           1045   ;------------------------------------------------------------
016B           1046   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:265: void Timer2_ISR(void) interrupt 5
016B           1047   ;        -----------------------------------------
016B           1048   ;         function Timer2_ISR
016B           1049   ;        -----------------------------------------
016B           1050   _Timer2_ISR:
016B C0E0      1051            push    acc
016D C002      1052            push    ar2
016F C003      1053            push    ar3
0171 C0D0      1054            push    psw
0173 75D000    1055            mov     psw,#0x00
0176           1056   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:267: TF2H = 0; // Clear Timer2 interrupt flag
0176 C2CF      1057            clr     _TF2H
0178           1058   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:269: pwm_count++;
0178 0560      1059            inc     _pwm_count
017A           1060   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:270: if (pwm_count>100)
017A E560      1061            mov     a,_pwm_count
017C 249B      1062            add     a,#0xff - 0x64
017E 5001      1063            jnc     L007002?
0180           1064   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:271: pwm_count = 0;
0180 756000    1065            mov     _pwm_count,#0x00
0183           1066   L007002?:
0183           1067   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:274: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0183 AA60      1068            mov     r2,_pwm_count
0185 7B00      1069            mov     r3,#0x00
0187 C3        1070            clr     c
0188 E560      1071            mov     a,_pwmSig1
018A 9A        1072            subb    a,r2
018B E561      1073            mov     a,(_pwmSig1 + 1)
018D 9B        1074            subb    a,r3
018E 92D8      1075            mov  _Timer2_ISR_sloc0_1_0,c
0190 B3        1076            cpl     c
0191 9294      1077            mov     _P1_4,c
0193           1078   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:275: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0193 AA60      1079            mov     r2,_pwm_count
0195 7B00      1080            mov     r3,#0x00
0197 C3        1081            clr     c
0198 E520      1082            mov     a,_pwmSig2
019A 9A        1083            subb    a,r2
019B E521      1084            mov     a,(_pwmSig2 + 1)
019D 9B        1085            subb    a,r3
019E 92D8      1086            mov  _Timer2_ISR_sloc0_1_0,c
01A0 B3        1087            cpl     c
01A1 9295      1088            mov     _P1_5,c
01A3           1089   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:277: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
01A3 AA60      1090            mov     r2,_pwm_count
01A5 7B00      1091            mov     r3,#0x00
01A7 C3        1092            clr     c
01A8 E5E0      1093            mov     a,_pwmSig3
01AA 9A        1094            subb    a,r2
01AB E5E1      1095            mov     a,(_pwmSig3 + 1)
01AD 9B        1096            subb    a,r3
01AE 92D8      1097            mov  _Timer2_ISR_sloc0_1_0,c
01B0 B3        1098            cpl     c
01B1 9292      1099            mov     _P1_2,c
01B3           1100   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:278: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
01B3 AA60      1101            mov     r2,_pwm_count
01B5 7B00      1102            mov     r3,#0x00
01B7 C3        1103            clr     c
01B8 E5A0      1104            mov     a,_pwmSig4
01BA 9A        1105            subb    a,r2
01BB E5A1      1106            mov     a,(_pwmSig4 + 1)
01BD 9B        1107            subb    a,r3
01BE 92D8      1108            mov  _Timer2_ISR_sloc0_1_0,c
01C0 B3        1109            cpl     c
01C1 9293      1110            mov     _P1_3,c
01C3           1111   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:280: OUT0=pwm_count>80?0:1;
01C3 E560      1112            mov     a,_pwm_count
01C5 24AF      1113            add     a,#0xff - 0x50
01C7 92D8      1114            mov  _Timer2_ISR_sloc0_1_0,c
01C9 B3        1115            cpl     c
01CA 92A0      1116            mov     _P2_0,c
01CC D0D0      1117            pop     psw
01CE D003      1118            pop     ar3
01D0 D002      1119            pop     ar2
01D2 D0E0      1120            pop     acc
01D4 32        1121            reti
01D5           1122   ;        eliminated unneeded push/pop dpl
01D5           1123   ;        eliminated unneeded push/pop dph
01D5           1124   ;        eliminated unneeded push/pop b
01D5           1125   ;------------------------------------------------------------
01D5           1126   ;Allocation info for local variables in function 'InitADC'
01D5           1127   ;------------------------------------------------------------
01D5           1128   ;------------------------------------------------------------
01D5           1129   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:310: void InitADC(void)
01D5           1130   ;        -----------------------------------------
01D5           1131   ;         function InitADC
01D5           1132   ;        -----------------------------------------
01D5           1133   _InitADC:
01D5           1134   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:312: SFRPAGE = 0x00;
01D5 75A700    1135            mov     _SFRPAGE,#0x00
01D8           1136   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:313: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
01D8 75B280    1137            mov     _ADC0CN1,#0x80
01DB           1138   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:314: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
01DB 75BCF8    1139            mov     _ADC0CF0,#0xF8
01DE           1140   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:315: ADC0CF1 = 0b_0_0_011110; // Same as default for now
01DE 75B91E    1141            mov     _ADC0CF1,#0x1E
01E1           1142   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:316: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
01E1 75E800    1143            mov     _ADC0CN0,#0x00
01E4           1144   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:317: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
01E4 75DF3F    1145            mov     _ADC0CF2,#0x3F
01E7           1146   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:318: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
01E7 75B300    1147            mov     _ADC0CN2,#0x00
01EA           1148   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:319: ADEN = 1; // Enable ADC
01EA D2EF      1149            setb    _ADEN
01EC 22        1150            ret
01ED           1151   ;------------------------------------------------------------
01ED           1152   ;Allocation info for local variables in function 'TIMER0_Init'
01ED           1153   ;------------------------------------------------------------
01ED           1154   ;------------------------------------------------------------
01ED           1155   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:321: void TIMER0_Init(void)
01ED           1156   ;        -----------------------------------------
01ED           1157   ;         function TIMER0_Init
01ED           1158   ;        -----------------------------------------
01ED           1159   _TIMER0_Init:
01ED           1160   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:323: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
01ED 5389F0    1161            anl     _TMOD,#0xF0
01F0           1162   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:324: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
01F0 438901    1163            orl     _TMOD,#0x01
01F3           1164   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:325: TR0 = 0; // Stop Timer/Counter 0
01F3 C28C      1165            clr     _TR0
01F5 22        1166            ret
01F6           1167   ;------------------------------------------------------------
01F6           1168   ;Allocation info for local variables in function 'Volts_at_Pin'
01F6           1169   ;------------------------------------------------------------
01F6           1170   ;pin                       Allocated to registers r2 
01F6           1171   ;------------------------------------------------------------
01F6           1172   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:330: float Volts_at_Pin(unsigned char pin)
01F6           1173   ;        -----------------------------------------
01F6           1174   ;         function Volts_at_Pin
01F6           1175   ;        -----------------------------------------
01F6           1176   _Volts_at_Pin:
01F6           1177   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:332: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
01F6 120100    1178            lcall   _ADC_at_Pin
01F9 120100    1179            lcall   ___uint2fs
01FC AA82      1180            mov     r2,dpl
01FE AB83      1181            mov     r3,dph
0200 ACF0      1182            mov     r4,b
0202 FD        1183            mov     r5,a
0203 C002      1184            push    ar2
0205 C003      1185            push    ar3
0207 C004      1186            push    ar4
0209 C005      1187            push    ar5
020B 906C8B    1188            mov     dptr,#0x6C8B
020E 75F053    1189            mov     b,#0x53
0211 7440      1190            mov     a,#0x40
0213 120100    1191            lcall   ___fsmul
0216 AA82      1192            mov     r2,dpl
0218 AB83      1193            mov     r3,dph
021A ACF0      1194            mov     r4,b
021C FD        1195            mov     r5,a
021D E581      1196            mov     a,sp
021F 24FC      1197            add     a,#0xfc
0221 F581      1198            mov     sp,a
0223 E4        1199            clr     a
0224 C0E0      1200            push    acc
0226 74FC      1201            mov     a,#0xFC
0228 C0E0      1202            push    acc
022A 747F      1203            mov     a,#0x7F
022C C0E0      1204            push    acc
022E 7446      1205            mov     a,#0x46
0230 C0E0      1206            push    acc
0232 8A82      1207            mov     dpl,r2
0234 8B83      1208            mov     dph,r3
0236 8CF0      1209            mov     b,r4
0238 ED        1210            mov     a,r5
0239 120100    1211            lcall   ___fsdiv
023C AA82      1212            mov     r2,dpl
023E AB83      1213            mov     r3,dph
0240 ACF0      1214            mov     r4,b
0242 FD        1215            mov     r5,a
0243 E581      1216            mov     a,sp
0245 24FC      1217            add     a,#0xfc
0247 F581      1218            mov     sp,a
0249 8A82      1219            mov     dpl,r2
024B 8B83      1220            mov     dph,r3
024D 8CF0      1221            mov     b,r4
024F ED        1222            mov     a,r5
0250 22        1223            ret
0251           1224   ;------------------------------------------------------------
0251           1225   ;Allocation info for local variables in function 'InitPinADC'
0251           1226   ;------------------------------------------------------------
0251           1227   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0251           1228   ;portno                    Allocated to registers r2 
0251           1229   ;mask                      Allocated to registers r3 
0251           1230   ;------------------------------------------------------------
0251           1231   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:334: void InitPinADC(unsigned char portno, unsigned char pinno)
0251           1232   ;        -----------------------------------------
0251           1233   ;         function InitPinADC
0251           1234   ;        -----------------------------------------
0251           1235   _InitPinADC:
0251 AA82      1236            mov     r2,dpl
0253           1237   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:338: mask = 1 << pinno;
0253 85F0F0    1238            mov     b,_InitPinADC_PARM_2
0256 05F0      1239            inc     b
0258 7401      1240            mov     a,#0x01
025A 8001      1241            sjmp    L011013?
025C           1242   L011011?:
025C 25E0      1243            add     a,acc
025E           1244   L011013?:
025E D5F058    1245            djnz    b,L011011?
0261 FB        1246            mov     r3,a
0262           1247   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:340: SFRPAGE = 0x20;
0262 75A720    1248            mov     _SFRPAGE,#0x20
0265           1249   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:341: switch (portno)
0265 BA0098    1250            cjne    r2,#0x00,L011014?
0268 8001      1251            sjmp    L011001?
026A           1252   L011014?:
026A BA0118    1253            cjne    r2,#0x01,L011015?
026D 8001      1254            sjmp    L011002?
026F           1255   L011015?:
026F           1256   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:343: case 0:
026F BA0298    1257            cjne    r2,#0x02,L011005?
0272 8001      1258            sjmp    L011003?
0274           1259   L011001?:
0274           1260   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:344: P0MDIN &= (~mask); // Set pin as analog input
0274 EB        1261            mov     a,r3
0275 F4        1262            cpl     a
0276 FA        1263            mov     r2,a
0277 52F1      1264            anl     _P0MDIN,a
0279           1265   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:345: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0279 EB        1266            mov     a,r3
027A 42D4      1267            orl     _P0SKIP,a
027C           1268   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:346: break;
027C           1269   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:347: case 1:
027C 8001      1270            sjmp    L011005?
027E           1271   L011002?:
027E           1272   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:348: P1MDIN &= (~mask); // Set pin as analog input
027E EB        1273            mov     a,r3
027F F4        1274            cpl     a
0280 FA        1275            mov     r2,a
0281 52F2      1276            anl     _P1MDIN,a
0283           1277   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:349: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0283 EB        1278            mov     a,r3
0284 42D5      1279            orl     _P1SKIP,a
0286           1280   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:350: break;
0286           1281   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:351: case 2:
0286 8001      1282            sjmp    L011005?
0288           1283   L011003?:
0288           1284   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:352: P2MDIN &= (~mask); // Set pin as analog input
0288 EB        1285            mov     a,r3
0289 F4        1286            cpl     a
028A FA        1287            mov     r2,a
028B 52F3      1288            anl     _P2MDIN,a
028D           1289   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:353: P2SKIP |= mask; // Skip Crossbar decoding for this pin
028D EB        1290            mov     a,r3
028E 42CC      1291            orl     _P2SKIP,a
0290           1292   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:357: }
0290           1293   L011005?:
0290           1294   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:358: SFRPAGE = 0x00;
0290 75A700    1295            mov     _SFRPAGE,#0x00
0293 22        1296            ret
0294           1297   ;------------------------------------------------------------
0294           1298   ;Allocation info for local variables in function 'PWMforward'
0294           1299   ;------------------------------------------------------------
0294           1300   ;------------------------------------------------------------
0294           1301   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:367: void PWMforward(void) {
0294           1302   ;        -----------------------------------------
0294           1303   ;         function PWMforward
0294           1304   ;        -----------------------------------------
0294           1305   _PWMforward:
0294           1306   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:368: pwmSig1 = 99;
0294 756063    1307            mov     _pwmSig1,#0x63
0297 E4        1308            clr     a
0298 F561      1309            mov     (_pwmSig1 + 1),a
029A           1310   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:369: pwmSig2 = 0;
029A           1311   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:371: pwmSig3 = 0;
029A E4        1312            clr     a
029B F520      1313            mov     _pwmSig2,a
029D F521      1314            mov     (_pwmSig2 + 1),a
029F F5E0      1315            mov     _pwmSig3,a
02A1 F5E1      1316            mov     (_pwmSig3 + 1),a
02A3           1317   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:372: pwmSig4 =99;
02A3 75A063    1318            mov     _pwmSig4,#0x63
02A6 E4        1319            clr     a
02A7 F5A1      1320            mov     (_pwmSig4 + 1),a
02A9           1321   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:374: LEDRED = 1;
02A9 D286      1322            setb    _P0_6
02AB           1323   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:375: LEDGREEN = 1;
02AB D283      1324            setb    _P0_3
02AD           1325   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:376: LEDWHITE = 1;
02AD D281      1326            setb    _P0_1
02AF           1327   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:377: SPEAKER = 0;
02AF C2A6      1328            clr     _P2_6
02B1 22        1329            ret
02B2           1330   ;------------------------------------------------------------
02B2           1331   ;Allocation info for local variables in function 'PWMbackward'
02B2           1332   ;------------------------------------------------------------
02B2           1333   ;------------------------------------------------------------
02B2           1334   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:380: void PWMbackward(void) {
02B2           1335   ;        -----------------------------------------
02B2           1336   ;         function PWMbackward
02B2           1337   ;        -----------------------------------------
02B2           1338   _PWMbackward:
02B2           1339   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:381: pwmSig1 = 0;
02B2 E4        1340            clr     a
02B3 F560      1341            mov     _pwmSig1,a
02B5 F561      1342            mov     (_pwmSig1 + 1),a
02B7           1343   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:382: pwmSig2 = 99;
02B7 752063    1344            mov     _pwmSig2,#0x63
02BA E4        1345            clr     a
02BB F521      1346            mov     (_pwmSig2 + 1),a
02BD           1347   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:384: pwmSig3 = 99;
02BD 75E063    1348            mov     _pwmSig3,#0x63
02C0 E4        1349            clr     a
02C1 F5E1      1350            mov     (_pwmSig3 + 1),a
02C3           1351   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:385: pwmSig4 = 0;
02C3 E4        1352            clr     a
02C4 F5A0      1353            mov     _pwmSig4,a
02C6 F5A1      1354            mov     (_pwmSig4 + 1),a
02C8           1355   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:387: LEDRED = 1;
02C8 D286      1356            setb    _P0_6
02CA           1357   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:388: LEDGREEN = 1;
02CA D283      1358            setb    _P0_3
02CC           1359   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:389: LEDWHITE = 0;
02CC C281      1360            clr     _P0_1
02CE           1361   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:390: SPEAKER = 1;
02CE D2A6      1362            setb    _P2_6
02D0 22        1363            ret
02D1           1364   ;------------------------------------------------------------
02D1           1365   ;Allocation info for local variables in function 'PWMLeft'
02D1           1366   ;------------------------------------------------------------
02D1           1367   ;------------------------------------------------------------
02D1           1368   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:393: void PWMLeft(void) {
02D1           1369   ;        -----------------------------------------
02D1           1370   ;         function PWMLeft
02D1           1371   ;        -----------------------------------------
02D1           1372   _PWMLeft:
02D1           1373   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:394: pwmSig1 = 0;
02D1 E4        1374            clr     a
02D2 F560      1375            mov     _pwmSig1,a
02D4 F561      1376            mov     (_pwmSig1 + 1),a
02D6           1377   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:395: pwmSig2 = 99;
02D6 752063    1378            mov     _pwmSig2,#0x63
02D9 E4        1379            clr     a
02DA F521      1380            mov     (_pwmSig2 + 1),a
02DC           1381   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:397: pwmSig3 = 0;
02DC E4        1382            clr     a
02DD F5E0      1383            mov     _pwmSig3,a
02DF F5E1      1384            mov     (_pwmSig3 + 1),a
02E1           1385   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:398: pwmSig4 = 99;
02E1 75A063    1386            mov     _pwmSig4,#0x63
02E4 E4        1387            clr     a
02E5 F5A1      1388            mov     (_pwmSig4 + 1),a
02E7           1389   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:400: LEDRED = 1;
02E7 D286      1390            setb    _P0_6
02E9           1391   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:401: LEDGREEN = 0;
02E9 C283      1392            clr     _P0_3
02EB           1393   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:402: LEDWHITE = 1;
02EB D281      1394            setb    _P0_1
02ED           1395   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:403: SPEAKER = 0;
02ED C2A6      1396            clr     _P2_6
02EF 22        1397            ret
02F0           1398   ;------------------------------------------------------------
02F0           1399   ;Allocation info for local variables in function 'PWMRight'
02F0           1400   ;------------------------------------------------------------
02F0           1401   ;------------------------------------------------------------
02F0           1402   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:407: void PWMRight(void) {
02F0           1403   ;        -----------------------------------------
02F0           1404   ;         function PWMRight
02F0           1405   ;        -----------------------------------------
02F0           1406   _PWMRight:
02F0           1407   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:408: pwmSig1 = 99;
02F0 756063    1408            mov     _pwmSig1,#0x63
02F3 E4        1409            clr     a
02F4 F561      1410            mov     (_pwmSig1 + 1),a
02F6           1411   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:409: pwmSig2 = 0;
02F6 E4        1412            clr     a
02F7 F520      1413            mov     _pwmSig2,a
02F9 F521      1414            mov     (_pwmSig2 + 1),a
02FB           1415   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:411: pwmSig3 = 99;
02FB 75E063    1416            mov     _pwmSig3,#0x63
02FE E4        1417            clr     a
02FF F5E1      1418            mov     (_pwmSig3 + 1),a
0301           1419   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:412: pwmSig4 = 0;
0301 E4        1420            clr     a
0302 F5A0      1421            mov     _pwmSig4,a
0304 F5A1      1422            mov     (_pwmSig4 + 1),a
0306           1423   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:414: LEDRED = 1;
0306 D286      1424            setb    _P0_6
0308           1425   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:415: LEDGREEN = 0;
0308 C283      1426            clr     _P0_3
030A           1427   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:416: LEDWHITE = 1;
030A D281      1428            setb    _P0_1
030C           1429   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:417: SPEAKER = 0;      
030C C2A6      1430            clr     _P2_6
030E 22        1431            ret
030F           1432   ;------------------------------------------------------------
030F           1433   ;Allocation info for local variables in function 'PWMStop'
030F           1434   ;------------------------------------------------------------
030F           1435   ;------------------------------------------------------------
030F           1436   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:422: void PWMStop(void) {
030F           1437   ;        -----------------------------------------
030F           1438   ;         function PWMStop
030F           1439   ;        -----------------------------------------
030F           1440   _PWMStop:
030F           1441   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:423: pwmSig1 = 0;
030F           1442   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:424: pwmSig2 = 0;
030F           1443   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:426: pwmSig3 = 0;
030F           1444   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:427: pwmSig4 = 0;
030F E4        1445            clr     a
0310 F560      1446            mov     _pwmSig1,a
0312 F561      1447            mov     (_pwmSig1 + 1),a
0314 F520      1448            mov     _pwmSig2,a
0316 F521      1449            mov     (_pwmSig2 + 1),a
0318 F5E0      1450            mov     _pwmSig3,a
031A F5E1      1451            mov     (_pwmSig3 + 1),a
031C F5A0      1452            mov     _pwmSig4,a
031E F5A1      1453            mov     (_pwmSig4 + 1),a
0320           1454   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:430: LEDRED = 0;
0320 C286      1455            clr     _P0_6
0322           1456   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:431: LEDGREEN = 1;
0322 D283      1457            setb    _P0_3
0324           1458   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:432: LEDWHITE = 1;
0324 D281      1459            setb    _P0_1
0326           1460   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:433: SPEAKER = 0;
0326 C2A6      1461            clr     _P2_6
0328 22        1462            ret
0329           1463   ;------------------------------------------------------------
0329           1464   ;Allocation info for local variables in function 'zero_time_calc'
0329           1465   ;------------------------------------------------------------
0329           1466   ;period1                   Allocated to registers r2 r3 r4 r5 
0329           1467   ;overflow_count            Allocated with name '_zero_time_calc_overflow_count_1_76'
0329           1468   ;------------------------------------------------------------
0329           1469   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:436: float zero_time_calc(void) {
0329           1470   ;        -----------------------------------------
0329           1471   ;         function zero_time_calc
0329           1472   ;        -----------------------------------------
0329           1473   _zero_time_calc:
0329           1474   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:440: TL0=0; 
0329 758A00    1475            mov     _TL0,#0x00
032C           1476   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:441: TH0=0;
032C 758C00    1477            mov     _TH0,#0x00
032F           1478   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:442: TF0=0;
032F C28D      1479            clr     _TF0
0331           1480   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:443: overflow_count=0;
0331 7A00      1481            mov     r2,#0x00
0333 7B00      1482            mov     r3,#0x00
0335           1483   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:444: TR0=0;
0335 C28C      1484            clr     _TR0
0337           1485   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:449: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt);
0337           1486   L017001?:
0337 75820C    1487            mov     dpl,#0x0C
033A C002      1488            push    ar2
033C C003      1489            push    ar3
033E 120100    1490            lcall   _Volts_at_Pin
0341 AC82      1491            mov     r4,dpl
0343 AD83      1492            mov     r5,dph
0345 AEF0      1493            mov     r6,b
0347 FF        1494            mov     r7,a
0348 74CD      1495            mov     a,#0xCD
034A C0E0      1496            push    acc
034C 74CC      1497            mov     a,#0xCC
034E C0E0      1498            push    acc
0350 744C      1499            mov     a,#0x4C
0352 C0E0      1500            push    acc
0354 743D      1501            mov     a,#0x3D
0356 C0E0      1502            push    acc
0358 8C82      1503            mov     dpl,r4
035A 8D83      1504            mov     dph,r5
035C 8EF0      1505            mov     b,r6
035E EF        1506            mov     a,r7
035F 120100    1507            lcall   ___fslt
0362 AC82      1508            mov     r4,dpl
0364 E581      1509            mov     a,sp
0366 24FC      1510            add     a,#0xfc
0368 F581      1511            mov     sp,a
036A D003      1512            pop     ar3
036C D002      1513            pop     ar2
036E EC        1514            mov     a,r4
036F 7001      1515            jnz     L017001?
0371           1516   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:451: while(Volts_at_Pin(QFP32_MUX_P1_6)>=thresholdVolt);
0371           1517   L017004?:
0371 75820C    1518            mov     dpl,#0x0C
0374 C002      1519            push    ar2
0376 C003      1520            push    ar3
0378 120100    1521            lcall   _Volts_at_Pin
037B AC82      1522            mov     r4,dpl
037D AD83      1523            mov     r5,dph
037F AEF0      1524            mov     r6,b
0381 FF        1525            mov     r7,a
0382 74CD      1526            mov     a,#0xCD
0384 C0E0      1527            push    acc
0386 74CC      1528            mov     a,#0xCC
0388 C0E0      1529            push    acc
038A 744C      1530            mov     a,#0x4C
038C C0E0      1531            push    acc
038E 743D      1532            mov     a,#0x3D
0390 C0E0      1533            push    acc
0392 8C82      1534            mov     dpl,r4
0394 8D83      1535            mov     dph,r5
0396 8EF0      1536            mov     b,r6
0398 EF        1537            mov     a,r7
0399 120100    1538            lcall   ___fslt
039C AC82      1539            mov     r4,dpl
039E E581      1540            mov     a,sp
03A0 24FC      1541            add     a,#0xfc
03A2 F581      1542            mov     sp,a
03A4 D003      1543            pop     ar3
03A6 D002      1544            pop     ar2
03A8 EC        1545            mov     a,r4
03A9 6001      1546            jz      L017004?
03AB           1547   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:453: TR0=1; // Start the timer
03AB D28C      1548            setb    _TR0
03AD           1549   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:454: while(Volts_at_Pin(QFP32_MUX_P1_6)<thresholdVolt) // (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000<1000) // Wait for the signal to be zero
03AD E4        1550            clr     a
03AE F588      1551            mov     _zero_time_calc_overflow_count_1_76,a
03B0 F589      1552            mov     (_zero_time_calc_overflow_count_1_76 + 1),a
03B2           1553   L017011?:
03B2 75820C    1554            mov     dpl,#0x0C
03B5 C002      1555            push    ar2
03B7 C003      1556            push    ar3
03B9 120100    1557            lcall   _Volts_at_Pin
03BC AE82      1558            mov     r6,dpl
03BE AF83      1559            mov     r7,dph
03C0 A8F0      1560            mov     r0,b
03C2 F9        1561            mov     r1,a
03C3 74CD      1562            mov     a,#0xCD
03C5 C0E0      1563            push    acc
03C7 74CC      1564            mov     a,#0xCC
03C9 C0E0      1565            push    acc
03CB 744C      1566            mov     a,#0x4C
03CD C0E0      1567            push    acc
03CF 743D      1568            mov     a,#0x3D
03D1 C0E0      1569            push    acc
03D3 8E82      1570            mov     dpl,r6
03D5 8F83      1571            mov     dph,r7
03D7 88F0      1572            mov     b,r0
03D9 E9        1573            mov     a,r1
03DA 120100    1574            lcall   ___fslt
03DD AE82      1575            mov     r6,dpl
03DF E581      1576            mov     a,sp
03E1 24FC      1577            add     a,#0xfc
03E3 F581      1578            mov     sp,a
03E5 D003      1579            pop     ar3
03E7 D002      1580            pop     ar2
03E9 EE        1581            mov     a,r6
03EA 7001      1582            jnz     L017025?
03EC 020100    1583            ljmp    L017013?
03EF           1584   L017025?:
03EF           1585   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:456: if(TF0==1) // Did the 16-bit timer overflow?
03EF           1586   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:458: TF0=0;
03EF 108D98    1587            jbc     _TF0,L017026?
03F2 8001      1588            sjmp    L017008?
03F4           1589   L017026?:
03F4           1590   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:459: overflow_count++;
03F4 0588      1591            inc     _zero_time_calc_overflow_count_1_76
03F6 E4        1592            clr     a
03F7 B58818    1593            cjne    a,_zero_time_calc_overflow_count_1_76,L017027?
03FA 0589      1594            inc     (_zero_time_calc_overflow_count_1_76 + 1)
03FC           1595   L017027?:
03FC AA88      1596            mov     r2,_zero_time_calc_overflow_count_1_76
03FE AB89      1597            mov     r3,(_zero_time_calc_overflow_count_1_76 + 1)
0400           1598   L017008?:
0400           1599   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:461: if ((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000 >1800) 
0400 C002      1600            push    ar2
0402 C003      1601            push    ar3
0404 858882    1602            mov     dpl,_zero_time_calc_overflow_count_1_76
0407 858983    1603            mov     dph,(_zero_time_calc_overflow_count_1_76 + 1)
040A C002      1604            push    ar2
040C C003      1605            push    ar3
040E 120100    1606            lcall   ___sint2fs
0411 AE82      1607            mov     r6,dpl
0413 AF83      1608            mov     r7,dph
0415 A8F0      1609            mov     r0,b
0417 F9        1610            mov     r1,a
0418 C006      1611            push    ar6
041A C007      1612            push    ar7
041C C000      1613            push    ar0
041E C001      1614            push    ar1
0420 900000    1615            mov     dptr,#0x0000
0423 75F080    1616            mov     b,#0x80
0426 7447      1617            mov     a,#0x47
0428 120100    1618            lcall   ___fsmul
042B AE82      1619            mov     r6,dpl
042D AF83      1620            mov     r7,dph
042F A8F0      1621            mov     r0,b
0431 F9        1622            mov     r1,a
0432 E581      1623            mov     a,sp
0434 24FC      1624            add     a,#0xfc
0436 F581      1625            mov     sp,a
0438 D003      1626            pop     ar3
043A D002      1627            pop     ar2
043C 858C82    1628            mov     dpl,_TH0
043F C006      1629            push    ar6
0441 C007      1630            push    ar7
0443 C000      1631            push    ar0
0445 C001      1632            push    ar1
0447 120100    1633            lcall   ___uchar2fs
044A AC82      1634            mov     r4,dpl
044C AD83      1635            mov     r5,dph
044E AAF0      1636            mov     r2,b
0450 FB        1637            mov     r3,a
0451 C004      1638            push    ar4
0453 C005      1639            push    ar5
0455 C002      1640            push    ar2
0457 C003      1641            push    ar3
0459 900000    1642            mov     dptr,#0x0000
045C 75F080    1643            mov     b,#0x80
045F 7443      1644            mov     a,#0x43
0461 120100    1645            lcall   ___fsmul
0464 AA82      1646            mov     r2,dpl
0466 AB83      1647            mov     r3,dph
0468 ACF0      1648            mov     r4,b
046A FD        1649            mov     r5,a
046B E581      1650            mov     a,sp
046D 24FC      1651            add     a,#0xfc
046F F581      1652            mov     sp,a
0471 D001      1653            pop     ar1
0473 D000      1654            pop     ar0
0475 D007      1655            pop     ar7
0477 D006      1656            pop     ar6
0479 C002      1657            push    ar2
047B C003      1658            push    ar3
047D C004      1659            push    ar4
047F C005      1660            push    ar5
0481 8E82      1661            mov     dpl,r6
0483 8F83      1662            mov     dph,r7
0485 88F0      1663            mov     b,r0
0487 E9        1664            mov     a,r1
0488 120100    1665            lcall   ___fsadd
048B AA82      1666            mov     r2,dpl
048D AB83      1667            mov     r3,dph
048F ACF0      1668            mov     r4,b
0491 FD        1669            mov     r5,a
0492 E581      1670            mov     a,sp
0494 24FC      1671            add     a,#0xfc
0496 F581      1672            mov     sp,a
0498 AE8A      1673            mov     r6,_TL0
049A 7F00      1674            mov     r7,#0x00
049C 8E82      1675            mov     dpl,r6
049E 8F83      1676            mov     dph,r7
04A0 C002      1677            push    ar2
04A2 C003      1678            push    ar3
04A4 C004      1679            push    ar4
04A6 C005      1680            push    ar5
04A8 120100    1681            lcall   ___sint2fs
04AB AE82      1682            mov     r6,dpl
04AD AF83      1683            mov     r7,dph
04AF A8F0      1684            mov     r0,b
04B1 F9        1685            mov     r1,a
04B2 D005      1686            pop     ar5
04B4 D004      1687            pop     ar4
04B6 D003      1688            pop     ar3
04B8 D002      1689            pop     ar2
04BA C006      1690            push    ar6
04BC C007      1691            push    ar7
04BE C000      1692            push    ar0
04C0 C001      1693            push    ar1
04C2 8A82      1694            mov     dpl,r2
04C4 8B83      1695            mov     dph,r3
04C6 8CF0      1696            mov     b,r4
04C8 ED        1697            mov     a,r5
04C9 120100    1698            lcall   ___fsadd
04CC AA82      1699            mov     r2,dpl
04CE AB83      1700            mov     r3,dph
04D0 ACF0      1701            mov     r4,b
04D2 FD        1702            mov     r5,a
04D3 E581      1703            mov     a,sp
04D5 24FC      1704            add     a,#0xfc
04D7 F581      1705            mov     sp,a
04D9 C002      1706            push    ar2
04DB C003      1707            push    ar3
04DD C004      1708            push    ar4
04DF C005      1709            push    ar5
04E1 90C33E    1710            mov     dptr,#0xC33E
04E4 75F02E    1711            mov     b,#0x2E
04E7 7439      1712            mov     a,#0x39
04E9 120100    1713            lcall   ___fsmul
04EC AA82      1714            mov     r2,dpl
04EE AB83      1715            mov     r3,dph
04F0 ACF0      1716            mov     r4,b
04F2 FD        1717            mov     r5,a
04F3 E581      1718            mov     a,sp
04F5 24FC      1719            add     a,#0xfc
04F7 F581      1720            mov     sp,a
04F9 C003      1721            push    ar3
04FB E4        1722            clr     a
04FC C0E0      1723            push    acc
04FE C0E0      1724            push    acc
0500 74E1      1725            mov     a,#0xE1
0502 C0E0      1726            push    acc
0504 7444      1727            mov     a,#0x44
0506 C0E0      1728            push    acc
0508 8A82      1729            mov     dpl,r2
050A 8B83      1730            mov     dph,r3
050C 8CF0      1731            mov     b,r4
050E ED        1732            mov     a,r5
050F 120100    1733            lcall   ___fsgt
0512 AA82      1734            mov     r2,dpl
0514 E581      1735            mov     a,sp
0516 24FC      1736            add     a,#0xfc
0518 F581      1737            mov     sp,a
051A D003      1738            pop     ar3
051C EA        1739            mov     a,r2
051D D003      1740            pop     ar3
051F D002      1741            pop     ar2
0521 7001      1742            jnz     L017028?
0523 020100    1743            ljmp    L017011?
0526           1744   L017028?:
0526           1745   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:462: return 1800;
0526 900000    1746            mov     dptr,#0x0000
0529 75F0E1    1747            mov     b,#0xE1
052C 7444      1748            mov     a,#0x44
052E 22        1749            ret
052F           1750   L017013?:
052F           1751   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:465: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
052F C28C      1752            clr     _TR0
0531           1753   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:466: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000;
0531 8A82      1754            mov     dpl,r2
0533 8B83      1755            mov     dph,r3
0535 120100    1756            lcall   ___sint2fs
0538 AA82      1757            mov     r2,dpl
053A AB83      1758            mov     r3,dph
053C ACF0      1759            mov     r4,b
053E FD        1760            mov     r5,a
053F C002      1761            push    ar2
0541 C003      1762            push    ar3
0543 C004      1763            push    ar4
0545 C005      1764            push    ar5
0547 900000    1765            mov     dptr,#0x0000
054A 75F080    1766            mov     b,#0x80
054D 7447      1767            mov     a,#0x47
054F 120100    1768            lcall   ___fsmul
0552 AA82      1769            mov     r2,dpl
0554 AB83      1770            mov     r3,dph
0556 ACF0      1771            mov     r4,b
0558 FD        1772            mov     r5,a
0559 E581      1773            mov     a,sp
055B 24FC      1774            add     a,#0xfc
055D F581      1775            mov     sp,a
055F 858C82    1776            mov     dpl,_TH0
0562 C002      1777            push    ar2
0564 C003      1778            push    ar3
0566 C004      1779            push    ar4
0568 C005      1780            push    ar5
056A 120100    1781            lcall   ___uchar2fs
056D AE82      1782            mov     r6,dpl
056F AF83      1783            mov     r7,dph
0571 A8F0      1784            mov     r0,b
0573 F9        1785            mov     r1,a
0574 C006      1786            push    ar6
0576 C007      1787            push    ar7
0578 C000      1788            push    ar0
057A C001      1789            push    ar1
057C 900000    1790            mov     dptr,#0x0000
057F 75F080    1791            mov     b,#0x80
0582 7443      1792            mov     a,#0x43
0584 120100    1793            lcall   ___fsmul
0587 AE82      1794            mov     r6,dpl
0589 AF83      1795            mov     r7,dph
058B A8F0      1796            mov     r0,b
058D F9        1797            mov     r1,a
058E E581      1798            mov     a,sp
0590 24FC      1799            add     a,#0xfc
0592 F581      1800            mov     sp,a
0594 D005      1801            pop     ar5
0596 D004      1802            pop     ar4
0598 D003      1803            pop     ar3
059A D002      1804            pop     ar2
059C C006      1805            push    ar6
059E C007      1806            push    ar7
05A0 C000      1807            push    ar0
05A2 C001      1808            push    ar1
05A4 8A82      1809            mov     dpl,r2
05A6 8B83      1810            mov     dph,r3
05A8 8CF0      1811            mov     b,r4
05AA ED        1812            mov     a,r5
05AB 120100    1813            lcall   ___fsadd
05AE AA82      1814            mov     r2,dpl
05B0 AB83      1815            mov     r3,dph
05B2 ACF0      1816            mov     r4,b
05B4 FD        1817            mov     r5,a
05B5 E581      1818            mov     a,sp
05B7 24FC      1819            add     a,#0xfc
05B9 F581      1820            mov     sp,a
05BB AE8A      1821            mov     r6,_TL0
05BD 7F00      1822            mov     r7,#0x00
05BF 8E82      1823            mov     dpl,r6
05C1 8F83      1824            mov     dph,r7
05C3 C002      1825            push    ar2
05C5 C003      1826            push    ar3
05C7 C004      1827            push    ar4
05C9 C005      1828            push    ar5
05CB 120100    1829            lcall   ___sint2fs
05CE AE82      1830            mov     r6,dpl
05D0 AF83      1831            mov     r7,dph
05D2 A8F0      1832            mov     r0,b
05D4 F9        1833            mov     r1,a
05D5 D005      1834            pop     ar5
05D7 D004      1835            pop     ar4
05D9 D003      1836            pop     ar3
05DB D002      1837            pop     ar2
05DD C006      1838            push    ar6
05DF C007      1839            push    ar7
05E1 C000      1840            push    ar0
05E3 C001      1841            push    ar1
05E5 8A82      1842            mov     dpl,r2
05E7 8B83      1843            mov     dph,r3
05E9 8CF0      1844            mov     b,r4
05EB ED        1845            mov     a,r5
05EC 120100    1846            lcall   ___fsadd
05EF AA82      1847            mov     r2,dpl
05F1 AB83      1848            mov     r3,dph
05F3 ACF0      1849            mov     r4,b
05F5 FD        1850            mov     r5,a
05F6 E581      1851            mov     a,sp
05F8 24FC      1852            add     a,#0xfc
05FA F581      1853            mov     sp,a
05FC C002      1854            push    ar2
05FE C003      1855            push    ar3
0600 C004      1856            push    ar4
0602 C005      1857            push    ar5
0604 90C33E    1858            mov     dptr,#0xC33E
0607 75F02E    1859            mov     b,#0x2E
060A 7439      1860            mov     a,#0x39
060C 120100    1861            lcall   ___fsmul
060F AA82      1862            mov     r2,dpl
0611 AB83      1863            mov     r3,dph
0613 ACF0      1864            mov     r4,b
0615 FD        1865            mov     r5,a
0616 E581      1866            mov     a,sp
0618 24FC      1867            add     a,#0xfc
061A F581      1868            mov     sp,a
061C           1869   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:469: return period1; //return period of high pulse in seconds
061C 8A82      1870            mov     dpl,r2
061E 8B83      1871            mov     dph,r3
0620 8CF0      1872            mov     b,r4
0622 ED        1873            mov     a,r5
0623 22        1874            ret
0624           1875   ;------------------------------------------------------------
0624           1876   ;Allocation info for local variables in function 'arrayEqual'
0624           1877   ;------------------------------------------------------------
0624           1878   ;size                      Allocated with name '_arrayEqual_PARM_2'
0624           1879   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
0624           1880   ;arr1                      Allocated with name '_arrayEqual_arr1_1_79'
0624           1881   ;i                         Allocated to registers r5 r6 
0624           1882   ;------------------------------------------------------------
0624           1883   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:473: int arrayEqual (int arr1[], int size, int arr2[]){
0624           1884   ;        -----------------------------------------
0624           1885   ;         function arrayEqual
0624           1886   ;        -----------------------------------------
0624           1887   _arrayEqual:
0624 858288    1888            mov     _arrayEqual_arr1_1_79,dpl
0627 858389    1889            mov     (_arrayEqual_arr1_1_79 + 1),dph
062A 85F08A    1890            mov     (_arrayEqual_arr1_1_79 + 2),b
062D           1891   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:475: for(i=0; i<size; i++){
062D 7D00      1892            mov     r5,#0x00
062F 7E00      1893            mov     r6,#0x00
0631           1894   L018003?:
0631 C3        1895            clr     c
0632 ED        1896            mov     a,r5
0633 95A0      1897            subb    a,_arrayEqual_PARM_2
0635 EE        1898            mov     a,r6
0636 6480      1899            xrl     a,#0x80
0638 85A1F0    1900            mov     b,(_arrayEqual_PARM_2 + 1)
063B 63F080    1901            xrl     b,#0x80
063E 95F0      1902            subb    a,b
0640 5001      1903            jnc     L018006?
0642           1904   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:476: if(arr1[i]!=arr2[i])
0642 8D07      1905            mov     ar7,r5
0644 EE        1906            mov     a,r6
0645 CF        1907            xch     a,r7
0646 25E0      1908            add     a,acc
0648 CF        1909            xch     a,r7
0649 33        1910            rlc     a
064A F8        1911            mov     r0,a
064B EF        1912            mov     a,r7
064C 2588      1913            add     a,_arrayEqual_arr1_1_79
064E F9        1914            mov     r1,a
064F E8        1915            mov     a,r0
0650 3589      1916            addc    a,(_arrayEqual_arr1_1_79 + 1)
0652 FA        1917            mov     r2,a
0653 AB8A      1918            mov     r3,(_arrayEqual_arr1_1_79 + 2)
0655 8982      1919            mov     dpl,r1
0657 8A83      1920            mov     dph,r2
0659 8BF0      1921            mov     b,r3
065B 120100    1922            lcall   __gptrget
065E F9        1923            mov     r1,a
065F A3        1924            inc     dptr
0660 120100    1925            lcall   __gptrget
0663 FA        1926            mov     r2,a
0664 EF        1927            mov     a,r7
0665 2550      1928            add     a,_arrayEqual_PARM_3
0667 FF        1929            mov     r7,a
0668 E8        1930            mov     a,r0
0669 3551      1931            addc    a,(_arrayEqual_PARM_3 + 1)
066B F8        1932            mov     r0,a
066C AB52      1933            mov     r3,(_arrayEqual_PARM_3 + 2)
066E 8F82      1934            mov     dpl,r7
0670 8883      1935            mov     dph,r0
0672 8BF0      1936            mov     b,r3
0674 120100    1937            lcall   __gptrget
0677 FF        1938            mov     r7,a
0678 A3        1939            inc     dptr
0679 120100    1940            lcall   __gptrget
067C F8        1941            mov     r0,a
067D E9        1942            mov     a,r1
067E B50758    1943            cjne    a,ar7,L018013?
0681 EA        1944            mov     a,r2
0682 B50058    1945            cjne    a,ar0,L018013?
0685 8001      1946            sjmp    L018005?
0687           1947   L018013?:
0687           1948   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:477: return 0; 
0687 900000    1949            mov     dptr,#0x0000
068A 22        1950            ret
068B           1951   L018005?:
068B           1952   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:475: for(i=0; i<size; i++){
068B 0D        1953            inc     r5
068C BD0098    1954            cjne    r5,#0x00,L018003?
068F 0E        1955            inc     r6
0690 8001      1956            sjmp    L018003?
0692           1957   L018006?:
0692           1958   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:479: return 1; 
0692 900001    1959            mov     dptr,#0x0001
0695 22        1960            ret
0696           1961   ;------------------------------------------------------------
0696           1962   ;Allocation info for local variables in function 'checkCommands'
0696           1963   ;------------------------------------------------------------
0696           1964   ;------------------------------------------------------------
0696           1965   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:485: void checkCommands (void){
0696           1966   ;        -----------------------------------------
0696           1967   ;         function checkCommands
0696           1968   ;        -----------------------------------------
0696           1969   _checkCommands:
0696           1970   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:486: if(arrayEqual(command, 4, stop)) PWMStop();
0696 7550E0    1971            mov     _arrayEqual_PARM_3,#_stop
0699 755100    1972            mov     (_arrayEqual_PARM_3 + 1),#0x00
069C 755240    1973            mov     (_arrayEqual_PARM_3 + 2),#0x40
069F 75A004    1974            mov     _arrayEqual_PARM_2,#0x04
06A2 E4        1975            clr     a
06A3 F5A1      1976            mov     (_arrayEqual_PARM_2 + 1),a
06A5 904AA0    1977            mov     dptr,#_command
06A8 75F040    1978            mov     b,#0x40
06AB 120100    1979            lcall   _arrayEqual
06AE E582      1980            mov     a,dpl
06B0 8583F0    1981            mov     b,dph
06B3 45F0      1982            orl     a,b
06B5 6001      1983            jz      L019014?
06B7 020100    1984            ljmp    _PWMStop
06BA           1985   L019014?:
06BA           1986   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:487: else if (arrayEqual(command,4,forward)) PWMforward(); 
06BA 7550A0    1987            mov     _arrayEqual_PARM_3,#_forward
06BD 755100    1988            mov     (_arrayEqual_PARM_3 + 1),#0x00
06C0 755240    1989            mov     (_arrayEqual_PARM_3 + 2),#0x40
06C3 75A004    1990            mov     _arrayEqual_PARM_2,#0x04
06C6 E4        1991            clr     a
06C7 F5A1      1992            mov     (_arrayEqual_PARM_2 + 1),a
06C9 904AA0    1993            mov     dptr,#_command
06CC 75F040    1994            mov     b,#0x40
06CF 120100    1995            lcall   _arrayEqual
06D2 E582      1996            mov     a,dpl
06D4 8583F0    1997            mov     b,dph
06D7 45F0      1998            orl     a,b
06D9 6001      1999            jz      L019011?
06DB 020100    2000            ljmp    _PWMforward
06DE           2001   L019011?:
06DE           2002   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:488: else if (arrayEqual(command,4,backward)) PWMbackward(); 
06DE 755060    2003            mov     _arrayEqual_PARM_3,#_backward
06E1 755100    2004            mov     (_arrayEqual_PARM_3 + 1),#0x00
06E4 755240    2005            mov     (_arrayEqual_PARM_3 + 2),#0x40
06E7 75A004    2006            mov     _arrayEqual_PARM_2,#0x04
06EA E4        2007            clr     a
06EB F5A1      2008            mov     (_arrayEqual_PARM_2 + 1),a
06ED 904AA0    2009            mov     dptr,#_command
06F0 75F040    2010            mov     b,#0x40
06F3 120100    2011            lcall   _arrayEqual
06F6 E582      2012            mov     a,dpl
06F8 8583F0    2013            mov     b,dph
06FB 45F0      2014            orl     a,b
06FD 6001      2015            jz      L019008?
06FF 020100    2016            ljmp    _PWMbackward
0702           2017   L019008?:
0702           2018   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:489: else if (arrayEqual(command,4, left)) PWMLeft(); 
0702 755020    2019            mov     _arrayEqual_PARM_3,#_left
0705 755100    2020            mov     (_arrayEqual_PARM_3 + 1),#0x00
0708 755240    2021            mov     (_arrayEqual_PARM_3 + 2),#0x40
070B 75A004    2022            mov     _arrayEqual_PARM_2,#0x04
070E E4        2023            clr     a
070F F5A1      2024            mov     (_arrayEqual_PARM_2 + 1),a
0711 904AA0    2025            mov     dptr,#_command
0714 75F040    2026            mov     b,#0x40
0717 120100    2027            lcall   _arrayEqual
071A E582      2028            mov     a,dpl
071C 8583F0    2029            mov     b,dph
071F 45F0      2030            orl     a,b
0721 6001      2031            jz      L019005?
0723 020100    2032            ljmp    _PWMLeft
0726           2033   L019005?:
0726           2034   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:490: else if (arrayEqual(command,4, right)) PWMRight(); 
0726 7550E0    2035            mov     _arrayEqual_PARM_3,#_right
0729 755100    2036            mov     (_arrayEqual_PARM_3 + 1),#0x00
072C 755240    2037            mov     (_arrayEqual_PARM_3 + 2),#0x40
072F 75A004    2038            mov     _arrayEqual_PARM_2,#0x04
0732 E4        2039            clr     a
0733 F5A1      2040            mov     (_arrayEqual_PARM_2 + 1),a
0735 904AA0    2041            mov     dptr,#_command
0738 75F040    2042            mov     b,#0x40
073B 120100    2043            lcall   _arrayEqual
073E E582      2044            mov     a,dpl
0740 8583F0    2045            mov     b,dph
0743 45F0      2046            orl     a,b
0745 6001      2047            jz      L019002?
0747 020100    2048            ljmp    _PWMRight
074A           2049   L019002?:
074A           2050   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:491: else PWMStop(); //defaults to a halt (redundant)
074A 020100    2051            ljmp    _PWMStop
074D           2052   ;------------------------------------------------------------
074D           2053   ;Allocation info for local variables in function 'voltsAtPeak'
074D           2054   ;------------------------------------------------------------
074D           2055   ;------------------------------------------------------------
074D           2056   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:497: float voltsAtPeak(void) {
074D           2057   ;        -----------------------------------------
074D           2058   ;         function voltsAtPeak
074D           2059   ;        -----------------------------------------
074D           2060   _voltsAtPeak:
074D           2061   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:499: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
074D           2062   L020001?:
074D 75820C    2063            mov     dpl,#0x0C
0750 120100    2064            lcall   _ADC_at_Pin
0753 E582      2065            mov     a,dpl
0755 8583F0    2066            mov     b,dph
0758 45F0      2067            orl     a,b
075A 6001      2068            jz      L020001?
075C           2069   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:500: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
075C 900000    2070            mov     dptr,#0x0000
075F 120100    2071            lcall   _Timer3us
0762           2072   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:501: return(Volts_at_Pin(QFP32_MUX_P1_6));
0762 75820C    2073            mov     dpl,#0x0C
0765 020100    2074            ljmp    _Volts_at_Pin
0768           2075   ;------------------------------------------------------------
0768           2076   ;Allocation info for local variables in function 'getDigitalSignal'
0768           2077   ;------------------------------------------------------------
0768           2078   ;------------------------------------------------------------
0768           2079   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:514: int getDigitalSignal (void){
0768           2080   ;        -----------------------------------------
0768           2081   ;         function getDigitalSignal
0768           2082   ;        -----------------------------------------
0768           2083   _getDigitalSignal:
0768           2084   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:516: if (voltsAtPeak()>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
0768 120100    2085            lcall   _voltsAtPeak
076B AA82      2086            mov     r2,dpl
076D AB83      2087            mov     r3,dph
076F ACF0      2088            mov     r4,b
0771 FD        2089            mov     r5,a
0772 74CD      2090            mov     a,#0xCD
0774 C0E0      2091            push    acc
0776 74CC      2092            mov     a,#0xCC
0778 C0E0      2093            push    acc
077A 744C      2094            mov     a,#0x4C
077C C0E0      2095            push    acc
077E 743D      2096            mov     a,#0x3D
0780 C0E0      2097            push    acc
0782 8A82      2098            mov     dpl,r2
0784 8B83      2099            mov     dph,r3
0786 8CF0      2100            mov     b,r4
0788 ED        2101            mov     a,r5
0789 120100    2102            lcall   ___fslt
078C AA82      2103            mov     r2,dpl
078E E581      2104            mov     a,sp
0790 24FC      2105            add     a,#0xfc
0792 F581      2106            mov     sp,a
0794 EA        2107            mov     a,r2
0795 7001      2108            jnz     L021002?
0797           2109   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:518: printf("\nread 1:  at pin 1.6: %f\r", voltsAtPeak());
0797 120100    2110            lcall   _voltsAtPeak
079A AA82      2111            mov     r2,dpl
079C AB83      2112            mov     r3,dph
079E ACF0      2113            mov     r4,b
07A0 FD        2114            mov     r5,a
07A1 C002      2115            push    ar2
07A3 C003      2116            push    ar3
07A5 C004      2117            push    ar4
07A7 C005      2118            push    ar5
07A9 7498      2119            mov     a,#__str_0
07AB C0E0      2120            push    acc
07AD 74CD      2121            mov     a,#(__str_0 >> 8)
07AF C0E0      2122            push    acc
07B1 7480      2123            mov     a,#0x80
07B3 C0E0      2124            push    acc
07B5 120100    2125            lcall   _printf
07B8 E581      2126            mov     a,sp
07BA 24F9      2127            add     a,#0xf9
07BC F581      2128            mov     sp,a
07BE           2129   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:519: return 1;
07BE 900001    2130            mov     dptr,#0x0001
07C1 22        2131            ret
07C2           2132   L021002?:
07C2           2133   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:522: printf("\nread 0: Volt at pin 1.6: %f\r", voltsAtPeak());
07C2 120100    2134            lcall   _voltsAtPeak
07C5 AA82      2135            mov     r2,dpl
07C7 AB83      2136            mov     r3,dph
07C9 ACF0      2137            mov     r4,b
07CB FD        2138            mov     r5,a
07CC C002      2139            push    ar2
07CE C003      2140            push    ar3
07D0 C004      2141            push    ar4
07D2 C005      2142            push    ar5
07D4 7418      2143            mov     a,#__str_1
07D6 C0E0      2144            push    acc
07D8 74CE      2145            mov     a,#(__str_1 >> 8)
07DA C0E0      2146            push    acc
07DC 7480      2147            mov     a,#0x80
07DE C0E0      2148            push    acc
07E0 120100    2149            lcall   _printf
07E3 E581      2150            mov     a,sp
07E5 24F9      2151            add     a,#0xf9
07E7 F581      2152            mov     sp,a
07E9           2153   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:523: return 0; 
07E9 900000    2154            mov     dptr,#0x0000
07EC 22        2155            ret
07ED           2156   ;------------------------------------------------------------
07ED           2157   ;Allocation info for local variables in function 'waitquarterperiod'
07ED           2158   ;------------------------------------------------------------
07ED           2159   ;------------------------------------------------------------
07ED           2160   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:531: void waitquarterperiod(void){
07ED           2161   ;        -----------------------------------------
07ED           2162   ;         function waitquarterperiod
07ED           2163   ;        -----------------------------------------
07ED           2164   _waitquarterperiod:
07ED           2165   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:532: waitms(constant_delay_time);
07ED 90000A    2166            mov     dptr,#0x000A
07F0 020100    2167            ljmp    _waitms
07F3           2168   ;------------------------------------------------------------
07F3           2169   ;Allocation info for local variables in function 'recieveData'
07F3           2170   ;------------------------------------------------------------
07F3           2171   ;checkcomm                 Allocated to registers 
07F3           2172   ;i                         Allocated to registers r2 r3 
07F3           2173   ;------------------------------------------------------------
07F3           2174   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:538: void recieveData (){
07F3           2175   ;        -----------------------------------------
07F3           2176   ;         function recieveData
07F3           2177   ;        -----------------------------------------
07F3           2178   _recieveData:
07F3           2179   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:542: while(getDigitalSignal()==0);     //wait for the signal to be 1 
07F3           2180   L023001?:
07F3 120100    2181            lcall   _getDigitalSignal
07F6 E582      2182            mov     a,dpl
07F8 8583F0    2183            mov     b,dph
07FB 45F0      2184            orl     a,b
07FD 6001      2185            jz      L023001?
07FF           2186   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:543: if (getDigitalSignal()==1){       //gets the first 1 that identifies a command 
07FF 120100    2187            lcall   _getDigitalSignal
0802 AA82      2188            mov     r2,dpl
0804 AB83      2189            mov     r3,dph
0806 BA0198    2190            cjne    r2,#0x01,L023010?
0809 BB0098    2191            cjne    r3,#0x00,L023010?
080C           2192   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:544: command[0]=1;
080C 75A001    2193            mov     _command,#0x01
080F 75A100    2194            mov     (_command + 1),#0x00
0812           2195   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:545: for( i=1; i<4; i++){
0812 7A01      2196            mov     r2,#0x01
0814 7B00      2197            mov     r3,#0x00
0816           2198   L023006?:
0816 C3        2199            clr     c
0817 EA        2200            mov     a,r2
0818 9404      2201            subb    a,#0x04
081A EB        2202            mov     a,r3
081B 6480      2203            xrl     a,#0x80
081D 9480      2204            subb    a,#0x80
081F 5001      2205            jnc     L023009?
0821           2206   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:546: waitms(constant_delay_time);
0821 90000A    2207            mov     dptr,#0x000A
0824 C002      2208            push    ar2
0826 C003      2209            push    ar3
0828 120100    2210            lcall   _waitms
082B D003      2211            pop     ar3
082D D002      2212            pop     ar2
082F           2213   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:547: command[i]=getDigitalSignal();    
082F 8A04      2214            mov     ar4,r2
0831 EB        2215            mov     a,r3
0832 CC        2216            xch     a,r4
0833 25E0      2217            add     a,acc
0835 CC        2218            xch     a,r4
0836 33        2219            rlc     a
0837 EC        2220            mov     a,r4
0838 24A0      2221            add     a,#_command
083A F8        2222            mov     r0,a
083B C002      2223            push    ar2
083D C003      2224            push    ar3
083F C000      2225            push    ar0
0841 120100    2226            lcall   _getDigitalSignal
0844 E582      2227            mov     a,dpl
0846 8583F0    2228            mov     b,dph
0849 D000      2229            pop     ar0
084B D003      2230            pop     ar3
084D D002      2231            pop     ar2
084F F6        2232            mov     @r0,a
0850 08        2233            inc     r0
0851 A6F0      2234            mov     @r0,b
0853 18        2235            dec     r0
0854           2236   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:545: for( i=1; i<4; i++){
0854 0A        2237            inc     r2
0855 BA00D8    2238            cjne    r2,#0x00,L023006?
0858 0B        2239            inc     r3
0859 8001      2240            sjmp    L023006?
085B           2241   L023009?:
085B           2242   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:550: checkCommands();                          //does activity depending on the command given 
085B 020100    2243            ljmp    _checkCommands
085E           2244   L023010?:
085E 22        2245            ret
085F           2246   ;------------------------------------------------------------
085F           2247   ;Allocation info for local variables in function 'checkMode'
085F           2248   ;------------------------------------------------------------
085F           2249   ;------------------------------------------------------------
085F           2250   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:556: int checkMode(){
085F           2251   ;        -----------------------------------------
085F           2252   ;         function checkMode
085F           2253   ;        -----------------------------------------
085F           2254   _checkMode:
085F           2255   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:557: if(!BUTTON1 || x == 0){
085F 30B358    2256            jnb     _P3_3,L024001?
0862 E560      2257            mov     a,_x
0864 4561      2258            orl     a,(_x + 1)
0866 7001      2259            jnz     L024026?
0868           2260   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:558: while(!BUTTON1);
0868           2261   L024001?:
0868 30B358    2262            jnb     _P3_3,L024001?
086B           2263   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:559: x= 0;
086B           2264   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:560: return 0;
086B E4        2265            clr     a
086C F560      2266            mov     _x,a
086E F561      2267            mov     (_x + 1),a
0870 F582      2268            mov     dpl,a
0872 F583      2269            mov     dph,a
0874 22        2270            ret
0875           2271   L024026?:
0875           2272   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:562: else if(!BUTTON2 || x == 1){
0875 30B2D8    2273            jnb     _P3_2,L024004?
0878 7401      2274            mov     a,#0x01
087A B56018    2275            cjne    a,_x,L024047?
087D E4        2276            clr     a
087E B56118    2277            cjne    a,(_x + 1),L024047?
0881 8001      2278            sjmp    L024048?
0883           2279   L024047?:
0883 8001      2280            sjmp    L024022?
0885           2281   L024048?:
0885           2282   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:563: while(!BUTTON2);
0885           2283   L024004?:
0885 30B2D8    2284            jnb     _P3_2,L024004?
0888           2285   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:564: x = 1;
0888 756001    2286            mov     _x,#0x01
088B E4        2287            clr     a
088C F561      2288            mov     (_x + 1),a
088E           2289   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:565: return 1;
088E 900001    2290            mov     dptr,#0x0001
0891 22        2291            ret
0892           2292   L024022?:
0892           2293   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:567: else if(!BUTTON3 || x == 3){
0892 30B1D8    2294            jnb     _P3_1,L024007?
0895 7403      2295            mov     a,#0x03
0897 B56018    2296            cjne    a,_x,L024051?
089A E4        2297            clr     a
089B B56118    2298            cjne    a,(_x + 1),L024051?
089E 8001      2299            sjmp    L024052?
08A0           2300   L024051?:
08A0 8001      2301            sjmp    L024018?
08A2           2302   L024052?:
08A2           2303   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:568: while(!BUTTON3);
08A2           2304   L024007?:
08A2 30B1D8    2305            jnb     _P3_1,L024007?
08A5           2306   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:569: x = 3;
08A5 756003    2307            mov     _x,#0x03
08A8 E4        2308            clr     a
08A9 F561      2309            mov     (_x + 1),a
08AB           2310   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:570: return 3;
08AB 900003    2311            mov     dptr,#0x0003
08AE 22        2312            ret
08AF           2313   L024018?:
08AF           2314   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:572: else if(!BUTTON4 || x == 4){
08AF 30B0D8    2315            jnb     _P3_0,L024010?
08B2 7404      2316            mov     a,#0x04
08B4 B56018    2317            cjne    a,_x,L024055?
08B7 E4        2318            clr     a
08B8 B56118    2319            cjne    a,(_x + 1),L024055?
08BB 8001      2320            sjmp    L024056?
08BD           2321   L024055?:
08BD 8001      2322            sjmp    L024014?
08BF           2323   L024056?:
08BF           2324   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:573: while(!BUTTON4);
08BF           2325   L024010?:
08BF 30B0D8    2326            jnb     _P3_0,L024010?
08C2           2327   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:574: x = 4;
08C2 756004    2328            mov     _x,#0x04
08C5 E4        2329            clr     a
08C6 F561      2330            mov     (_x + 1),a
08C8           2331   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:575: return 4;
08C8 900004    2332            mov     dptr,#0x0004
08CB 22        2333            ret
08CC           2334   L024014?:
08CC           2335   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:578: x = 2;
08CC 756002    2336            mov     _x,#0x02
08CF E4        2337            clr     a
08D0 F561      2338            mov     (_x + 1),a
08D2           2339   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:579: return 2;
08D2 900002    2340            mov     dptr,#0x0002
08D5 22        2341            ret
08D6           2342   ;------------------------------------------------------------
08D6           2343   ;Allocation info for local variables in function 'detectobstacle'
08D6           2344   ;------------------------------------------------------------
08D6           2345   ;threshold                 Allocated to registers r2 r3 r4 r5 
08D6           2346   ;------------------------------------------------------------
08D6           2347   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:584: void detectobstacle(float threshold){
08D6           2348   ;        -----------------------------------------
08D6           2349   ;         function detectobstacle
08D6           2350   ;        -----------------------------------------
08D6           2351   _detectobstacle:
08D6 AA82      2352            mov     r2,dpl
08D8 AB83      2353            mov     r3,dph
08DA ACF0      2354            mov     r4,b
08DC FD        2355            mov     r5,a
08DD           2356   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:595: if(threshold <= 0.6 ){
08DD 749A      2357            mov     a,#0x9A
08DF C0E0      2358            push    acc
08E1 7499      2359            mov     a,#0x99
08E3 C0E0      2360            push    acc
08E5 7419      2361            mov     a,#0x19
08E7 C0E0      2362            push    acc
08E9 743F      2363            mov     a,#0x3F
08EB C0E0      2364            push    acc
08ED 8A82      2365            mov     dpl,r2
08EF 8B83      2366            mov     dph,r3
08F1 8CF0      2367            mov     b,r4
08F3 ED        2368            mov     a,r5
08F4 120100    2369            lcall   ___fsgt
08F7 AA82      2370            mov     r2,dpl
08F9 E581      2371            mov     a,sp
08FB 24FC      2372            add     a,#0xfc
08FD F581      2373            mov     sp,a
08FF EA        2374            mov     a,r2
0900 7001      2375            jnz     L025002?
0902           2376   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:597: printf("Turn right \r\n");
0902 7418      2377            mov     a,#__str_2
0904 C0E0      2378            push    acc
0906 74D3      2379            mov     a,#(__str_2 >> 8)
0908 C0E0      2380            push    acc
090A 7480      2381            mov     a,#0x80
090C C0E0      2382            push    acc
090E 120100    2383            lcall   _printf
0911 1581      2384            dec     sp
0913 1581      2385            dec     sp
0915 1581      2386            dec     sp
0917           2387   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:598: PWMRight();
0917 120100    2388            lcall   _PWMRight
091A           2389   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:599: waitms(500); //Make waits longer
091A 9001F4    2390            mov     dptr,#0x01F4
091D 120100    2391            lcall   _waitms
0920           2392   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:600: waitms(500); 
0920 9001F4    2393            mov     dptr,#0x01F4
0923 120100    2394            lcall   _waitms
0926           2395   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:601: waitms(300); 
0926 90012C    2396            mov     dptr,#0x012C
0929 120100    2397            lcall   _waitms
092C           2398   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:603: PWMStop();
092C 120100    2399            lcall   _PWMStop
092F           2400   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:604: waitms(500);
092F 9001F4    2401            mov     dptr,#0x01F4
0932 120100    2402            lcall   _waitms
0935           2403   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:605: waitms(250);
0935 9000FA    2404            mov     dptr,#0x00FA
0938 020100    2405            ljmp    _waitms
093B           2406   L025002?:
093B           2407   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:610: printf("Go Straight \r\n");
093B 7458      2408            mov     a,#__str_3
093D C0E0      2409            push    acc
093F 74D3      2410            mov     a,#(__str_3 >> 8)
0941 C0E0      2411            push    acc
0943 7480      2412            mov     a,#0x80
0945 C0E0      2413            push    acc
0947 120100    2414            lcall   _printf
094A 1581      2415            dec     sp
094C 1581      2416            dec     sp
094E 1581      2417            dec     sp
0950           2418   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:612: PWMforward();
0950 020100    2419            ljmp    _PWMforward
0953           2420   ;------------------------------------------------------------
0953           2421   ;Allocation info for local variables in function 'laserPattern'
0953           2422   ;------------------------------------------------------------
0953           2423   ;rate                      Allocated to registers r2 r3 
0953           2424   ;------------------------------------------------------------
0953           2425   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:619: void laserPattern(int rate){
0953           2426   ;        -----------------------------------------
0953           2427   ;         function laserPattern
0953           2428   ;        -----------------------------------------
0953           2429   _laserPattern:
0953 AA82      2430            mov     r2,dpl
0955 AB83      2431            mov     r3,dph
0957           2432   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:620: LASER = 0;
0957 C2B0      2433            clr     _P3_0
0959           2434   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:621: waitms(rate*1000);
0959 8A00      2435            mov     __mulint_PARM_2,r2
095B 8B01      2436            mov     (__mulint_PARM_2 + 1),r3
095D 9003E8    2437            mov     dptr,#0x03E8
0960 120100    2438            lcall   __mulint
0963 120100    2439            lcall   _waitms
0966           2440   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:622: LASER = 1;
0966 D2B0      2441            setb    _P3_0
0968 22        2442            ret
0969           2443   ;------------------------------------------------------------
0969           2444   ;Allocation info for local variables in function 'main'
0969           2445   ;------------------------------------------------------------
0969           2446   ;checkcommand              Allocated to registers 
0969           2447   ;sig1                      Allocated to registers 
0969           2448   ;sig2                      Allocated to registers 
0969           2449   ;peak                      Allocated to registers 
0969           2450   ;voltspeak                 Allocated to registers 
0969           2451   ;periodpwm                 Allocated to registers 
0969           2452   ;time                      Allocated to registers 
0969           2453   ;period                    Allocated to registers 
0969           2454   ;overflow_count            Allocated to registers 
0969           2455   ;pir_voltage               Allocated with name '_main_pir_voltage_1_108'
0969           2456   ;temp_sensor_voltages      Allocated with name '_main_temp_sensor_voltages_1_108'
0969           2457   ;pulse_width2              Allocated with name '_main_pulse_width2_1_108'
0969           2458   ;left2                     Allocated to registers 
0969           2459   ;right2                    Allocated to registers 
0969           2460   ;mode_toggle               Allocated to registers 
0969           2461   ;------------------------------------------------------------
0969           2462   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:625: void main(void)
0969           2463   ;        -----------------------------------------
0969           2464   ;         function main
0969           2465   ;        -----------------------------------------
0969           2466   _main:
0969           2467   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:646: count20ms2 = 0;
0969 75E000    2468            mov     _count20ms2,#0x00
096C           2469   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:647: TL0=0;
096C 758A00    2470            mov     _TL0,#0x00
096F           2471   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:648: TH0=0;
096F 758C00    2472            mov     _TH0,#0x00
0972           2473   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:649: TF0=0;    
0972 C28D      2474            clr     _TF0
0974           2475   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:650: TIMER0_Init();
0974 120100    2476            lcall   _TIMER0_Init
0977           2477   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:652: InitPinADC(1, 6); // Configure P2.5 as analog input
0977 75F006    2478            mov     _InitPinADC_PARM_2,#0x06
097A 758201    2479            mov     dpl,#0x01
097D 120100    2480            lcall   _InitPinADC
0980           2481   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:653: InitPinADC(2, 4);
0980 75F004    2482            mov     _InitPinADC_PARM_2,#0x04
0983 758202    2483            mov     dpl,#0x02
0986 120100    2484            lcall   _InitPinADC
0989           2485   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:654: InitPinADC(2, 5);
0989 75F005    2486            mov     _InitPinADC_PARM_2,#0x05
098C 758202    2487            mov     dpl,#0x02
098F 120100    2488            lcall   _InitPinADC
0992           2489   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:655: InitPinADC(2, 6);
0992 75F006    2490            mov     _InitPinADC_PARM_2,#0x06
0995 758202    2491            mov     dpl,#0x02
0998 120100    2492            lcall   _InitPinADC
099B           2493   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:656: InitADC();
099B 120100    2494            lcall   _InitADC
099E           2495   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:660: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
099E 7418      2496            mov     a,#__str_4
09A0 C0E0      2497            push    acc
09A2 74D4      2498            mov     a,#(__str_4 >> 8)
09A4 C0E0      2499            push    acc
09A6 7480      2500            mov     a,#0x80
09A8 C0E0      2501            push    acc
09AA 120100    2502            lcall   _printf
09AD 1581      2503            dec     sp
09AF 1581      2504            dec     sp
09B1 1581      2505            dec     sp
09B3           2506   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:662: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
09B3 7458      2507            mov     a,#__str_5
09B5 C0E0      2508            push    acc
09B7 74D4      2509            mov     a,#(__str_5 >> 8)
09B9 C0E0      2510            push    acc
09BB 7480      2511            mov     a,#0x80
09BD C0E0      2512            push    acc
09BF 120100    2513            lcall   _printf
09C2 1581      2514            dec     sp
09C4 1581      2515            dec     sp
09C6 1581      2516            dec     sp
09C8           2517   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:664: printf("\n\r");
09C8 7498      2518            mov     a,#__str_6
09CA C0E0      2519            push    acc
09CC 74D4      2520            mov     a,#(__str_6 >> 8)
09CE C0E0      2521            push    acc
09D0 7480      2522            mov     a,#0x80
09D2 C0E0      2523            push    acc
09D4 120100    2524            lcall   _printf
09D7 1581      2525            dec     sp
09D9 1581      2526            dec     sp
09DB 1581      2527            dec     sp
09DD           2528   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:667: PWMStop();
09DD 120100    2529            lcall   _PWMStop
09E0           2530   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:669: while (1)
09E0           2531   L027018?:
09E0           2532   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:671: if( mode_toggle == 4){
09E0           2533   ;        C:\Users\Dalto\Documents\GitHub\ElecRobot\idkwhatsgoingon-Claw.c:703: waitms(500);
09E0 8001      2534            sjmp    L027018?
09E2           2535            rseg R_CSEG
09E2           2536   
0000           2537            rseg R_XINIT
0000           2538   
0000           2539            rseg R_CONST
0000           2540   __str_0:
0000 0A        2541            db 0x0A
0001 72656164  2542            db 'read 1:  at pin 1.6: %f'
     20313A20
     20617420
     70696E20
     312E363A
     202566
0018 0D        2543            db 0x0D
0019 00        2544            db 0x00
001A           2545   __str_1:
001A 0A        2546            db 0x0A
001B 72656164  2547            db 'read 0: Volt at pin 1.6: %f'
     20303A20
     566F6C74
     20617420
     70696E20
     312E363A
     202566
0036 0D        2548            db 0x0D
0037 00        2549            db 0x00
0038           2550   __str_2:
0038 5475726E  2551            db 'Turn right '
     20726967
     687420
0043 0D        2552            db 0x0D
0044 0A        2553            db 0x0A
0045 00        2554            db 0x00
0046           2555   __str_3:
0046 476F2053  2556            db 'Go Straight '
     74726169
     67687420
0052 0D        2557            db 0x0D
0053 0A        2558            db 0x0A
0054 00        2559            db 0x00
0055           2560   __str_4:
0055 1B        2561            db 0x1B
0056 5B324A    2562            db '[2J'
0059 00        2563            db 0x00
005A           2564   __str_5:
005A 53717561  2565            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0080 0D        2566            db 0x0D
0081 0A        2567            db 0x0A
0082 43686563  2568            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0096 50322E31  2569            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00B1 0D        2570            db 0x0D
00B2 0A        2571            db 0x0A
00B3 00        2572            db 0x00
00B4           2573   __str_6:
00B4 0A        2574            db 0x0A
00B5 0D        2575            db 0x0D
00B6 00        2576            db 0x00
00B7           2577   
008E           2578            CSEG
008E           2579   
008E           2580   end
