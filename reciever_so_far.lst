0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Mar 27 13:51:33 2018
0000              5   ;--------------------------------------------------------
                  5   $name reciever_so_far
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _arrayEqual_PARM_3
0000             27            public _arrayEqual_PARM_2
0000             28            public _InitPinADC_PARM_2
0000             29            public _main
0000             30            public _recieveData
0000             31            public _getDigitalSignal
0000             32            public _voltsAtPeak
0000             33            public _checkCommands
0000             34            public _arrayEqual
0000             35            public _periodcalc
0000             36            public _PWMStop
0000             37            public _PWMRight
0000             38            public _PWMLeft
0000             39            public _PWMbackward
0000             40            public _PWMforward
0000             41            public _InitPinADC
0000             42            public _Volts_at_Pin
0000             43            public _TIMER0_Init
0000             44            public _InitADC
0000             45            public _Timer2_ISR
0000             46            public _ADC_at_Pin
0000             47            public _waitms
0000             48            public _Timer3us
0000             49            public __c51_external_startup
0000             50            public _command
0000             51            public _right
0000             52            public _left
0000             53            public _backward
0000             54            public _forward
0000             55            public _stop
0000             56            public _claw_flag
0000             57            public _flag
0000             58            public _cartMoveB
0000             59            public _cartMoveF
0000             60            public _pwmSig6
0000             61            public _pwmSig5
0000             62            public _pwmSig4
0000             63            public _pwmSig3
0000             64            public _pwmSig2
0000             65            public _pwmSig1
0000             66            public _pwm_count3
0000             67            public _pwm_count2
0000             68            public _pwm_count1
0000             69            public _pwm_count
0000             70   ;--------------------------------------------------------
0000             71   ; Special Function Registers
0000             72   ;--------------------------------------------------------
0000             73   _ACC            DATA 0xe0
0000             74   _ADC0ASAH       DATA 0xb6
0000             75   _ADC0ASAL       DATA 0xb5
0000             76   _ADC0ASCF       DATA 0xa1
0000             77   _ADC0ASCT       DATA 0xc7
0000             78   _ADC0CF0        DATA 0xbc
0000             79   _ADC0CF1        DATA 0xb9
0000             80   _ADC0CF2        DATA 0xdf
0000             81   _ADC0CN0        DATA 0xe8
0000             82   _ADC0CN1        DATA 0xb2
0000             83   _ADC0CN2        DATA 0xb3
0000             84   _ADC0GTH        DATA 0xc4
0000             85   _ADC0GTL        DATA 0xc3
0000             86   _ADC0H          DATA 0xbe
0000             87   _ADC0L          DATA 0xbd
0000             88   _ADC0LTH        DATA 0xc6
0000             89   _ADC0LTL        DATA 0xc5
0000             90   _ADC0MX         DATA 0xbb
0000             91   _B              DATA 0xf0
0000             92   _CKCON0         DATA 0x8e
0000             93   _CKCON1         DATA 0xa6
0000             94   _CLEN0          DATA 0xc6
0000             95   _CLIE0          DATA 0xc7
0000             96   _CLIF0          DATA 0xe8
0000             97   _CLKSEL         DATA 0xa9
0000             98   _CLOUT0         DATA 0xd1
0000             99   _CLU0CF         DATA 0xb1
0000            100   _CLU0FN         DATA 0xaf
0000            101   _CLU0MX         DATA 0x84
0000            102   _CLU1CF         DATA 0xb3
0000            103   _CLU1FN         DATA 0xb2
0000            104   _CLU1MX         DATA 0x85
0000            105   _CLU2CF         DATA 0xb6
0000            106   _CLU2FN         DATA 0xb5
0000            107   _CLU2MX         DATA 0x91
0000            108   _CLU3CF         DATA 0xbf
0000            109   _CLU3FN         DATA 0xbe
0000            110   _CLU3MX         DATA 0xae
0000            111   _CMP0CN0        DATA 0x9b
0000            112   _CMP0CN1        DATA 0x99
0000            113   _CMP0MD         DATA 0x9d
0000            114   _CMP0MX         DATA 0x9f
0000            115   _CMP1CN0        DATA 0xbf
0000            116   _CMP1CN1        DATA 0xac
0000            117   _CMP1MD         DATA 0xab
0000            118   _CMP1MX         DATA 0xaa
0000            119   _CRC0CN0        DATA 0xce
0000            120   _CRC0CN1        DATA 0x86
0000            121   _CRC0CNT        DATA 0xd3
0000            122   _CRC0DAT        DATA 0xcb
0000            123   _CRC0FLIP       DATA 0xcf
0000            124   _CRC0IN         DATA 0xca
0000            125   _CRC0ST         DATA 0xd2
0000            126   _DAC0CF0        DATA 0x91
0000            127   _DAC0CF1        DATA 0x92
0000            128   _DAC0H          DATA 0x85
0000            129   _DAC0L          DATA 0x84
0000            130   _DAC1CF0        DATA 0x93
0000            131   _DAC1CF1        DATA 0x94
0000            132   _DAC1H          DATA 0x8a
0000            133   _DAC1L          DATA 0x89
0000            134   _DAC2CF0        DATA 0x95
0000            135   _DAC2CF1        DATA 0x96
0000            136   _DAC2H          DATA 0x8c
0000            137   _DAC2L          DATA 0x8b
0000            138   _DAC3CF0        DATA 0x9a
0000            139   _DAC3CF1        DATA 0x9c
0000            140   _DAC3H          DATA 0x8e
0000            141   _DAC3L          DATA 0x8d
0000            142   _DACGCF0        DATA 0x88
0000            143   _DACGCF1        DATA 0x98
0000            144   _DACGCF2        DATA 0xa2
0000            145   _DERIVID        DATA 0xad
0000            146   _DEVICEID       DATA 0xb5
0000            147   _DPH            DATA 0x83
0000            148   _DPL            DATA 0x82
0000            149   _EIE1           DATA 0xe6
0000            150   _EIE2           DATA 0xf3
0000            151   _EIP1           DATA 0xbb
0000            152   _EIP1H          DATA 0xee
0000            153   _EIP2           DATA 0xed
0000            154   _EIP2H          DATA 0xf6
0000            155   _EMI0CN         DATA 0xe7
0000            156   _FLKEY          DATA 0xb7
0000            157   _HFO0CAL        DATA 0xc7
0000            158   _HFO1CAL        DATA 0xd6
0000            159   _HFOCN          DATA 0xef
0000            160   _I2C0ADM        DATA 0xff
0000            161   _I2C0CN0        DATA 0xba
0000            162   _I2C0DIN        DATA 0xbc
0000            163   _I2C0DOUT       DATA 0xbb
0000            164   _I2C0FCN0       DATA 0xad
0000            165   _I2C0FCN1       DATA 0xab
0000            166   _I2C0FCT        DATA 0xf5
0000            167   _I2C0SLAD       DATA 0xbd
0000            168   _I2C0STAT       DATA 0xb9
0000            169   _IE             DATA 0xa8
0000            170   _IP             DATA 0xb8
0000            171   _IPH            DATA 0xf2
0000            172   _IT01CF         DATA 0xe4
0000            173   _LFO0CN         DATA 0xb1
0000            174   _P0             DATA 0x80
0000            175   _P0MASK         DATA 0xfe
0000            176   _P0MAT          DATA 0xfd
0000            177   _P0MDIN         DATA 0xf1
0000            178   _P0MDOUT        DATA 0xa4
0000            179   _P0SKIP         DATA 0xd4
0000            180   _P1             DATA 0x90
0000            181   _P1MASK         DATA 0xee
0000            182   _P1MAT          DATA 0xed
0000            183   _P1MDIN         DATA 0xf2
0000            184   _P1MDOUT        DATA 0xa5
0000            185   _P1SKIP         DATA 0xd5
0000            186   _P2             DATA 0xa0
0000            187   _P2MASK         DATA 0xfc
0000            188   _P2MAT          DATA 0xfb
0000            189   _P2MDIN         DATA 0xf3
0000            190   _P2MDOUT        DATA 0xa6
0000            191   _P2SKIP         DATA 0xcc
0000            192   _P3             DATA 0xb0
0000            193   _P3MDIN         DATA 0xf4
0000            194   _P3MDOUT        DATA 0x9c
0000            195   _PCA0CENT       DATA 0x9e
0000            196   _PCA0CLR        DATA 0x9c
0000            197   _PCA0CN0        DATA 0xd8
0000            198   _PCA0CPH0       DATA 0xfc
0000            199   _PCA0CPH1       DATA 0xea
0000            200   _PCA0CPH2       DATA 0xec
0000            201   _PCA0CPH3       DATA 0xf5
0000            202   _PCA0CPH4       DATA 0x85
0000            203   _PCA0CPH5       DATA 0xde
0000            204   _PCA0CPL0       DATA 0xfb
0000            205   _PCA0CPL1       DATA 0xe9
0000            206   _PCA0CPL2       DATA 0xeb
0000            207   _PCA0CPL3       DATA 0xf4
0000            208   _PCA0CPL4       DATA 0x84
0000            209   _PCA0CPL5       DATA 0xdd
0000            210   _PCA0CPM0       DATA 0xda
0000            211   _PCA0CPM1       DATA 0xdb
0000            212   _PCA0CPM2       DATA 0xdc
0000            213   _PCA0CPM3       DATA 0xae
0000            214   _PCA0CPM4       DATA 0xaf
0000            215   _PCA0CPM5       DATA 0xcc
0000            216   _PCA0H          DATA 0xfa
0000            217   _PCA0L          DATA 0xf9
0000            218   _PCA0MD         DATA 0xd9
0000            219   _PCA0POL        DATA 0x96
0000            220   _PCA0PWM        DATA 0xf7
0000            221   _PCON0          DATA 0x87
0000            222   _PCON1          DATA 0xcd
0000            223   _PFE0CN         DATA 0xc1
0000            224   _PRTDRV         DATA 0xf6
0000            225   _PSCTL          DATA 0x8f
0000            226   _PSTAT0         DATA 0xaa
0000            227   _PSW            DATA 0xd0
0000            228   _REF0CN         DATA 0xd1
0000            229   _REG0CN         DATA 0xc9
0000            230   _REVID          DATA 0xb6
0000            231   _RSTSRC         DATA 0xef
0000            232   _SBCON1         DATA 0x94
0000            233   _SBRLH1         DATA 0x96
0000            234   _SBRLL1         DATA 0x95
0000            235   _SBUF           DATA 0x99
0000            236   _SBUF0          DATA 0x99
0000            237   _SBUF1          DATA 0x92
0000            238   _SCON           DATA 0x98
0000            239   _SCON0          DATA 0x98
0000            240   _SCON1          DATA 0xc8
0000            241   _SFRPAGE        DATA 0xa7
0000            242   _SFRPGCN        DATA 0xbc
0000            243   _SFRSTACK       DATA 0xd7
0000            244   _SMB0ADM        DATA 0xd6
0000            245   _SMB0ADR        DATA 0xd7
0000            246   _SMB0CF         DATA 0xc1
0000            247   _SMB0CN0        DATA 0xc0
0000            248   _SMB0DAT        DATA 0xc2
0000            249   _SMB0FCN0       DATA 0xc3
0000            250   _SMB0FCN1       DATA 0xc4
0000            251   _SMB0FCT        DATA 0xef
0000            252   _SMB0RXLN       DATA 0xc5
0000            253   _SMB0TC         DATA 0xac
0000            254   _SMOD1          DATA 0x93
0000            255   _SP             DATA 0x81
0000            256   _SPI0CFG        DATA 0xa1
0000            257   _SPI0CKR        DATA 0xa2
0000            258   _SPI0CN0        DATA 0xf8
0000            259   _SPI0DAT        DATA 0xa3
0000            260   _SPI0FCN0       DATA 0x9a
0000            261   _SPI0FCN1       DATA 0x9b
0000            262   _SPI0FCT        DATA 0xf7
0000            263   _SPI0PCF        DATA 0xdf
0000            264   _TCON           DATA 0x88
0000            265   _TH0            DATA 0x8c
0000            266   _TH1            DATA 0x8d
0000            267   _TL0            DATA 0x8a
0000            268   _TL1            DATA 0x8b
0000            269   _TMOD           DATA 0x89
0000            270   _TMR2CN0        DATA 0xc8
0000            271   _TMR2CN1        DATA 0xfd
0000            272   _TMR2H          DATA 0xcf
0000            273   _TMR2L          DATA 0xce
0000            274   _TMR2RLH        DATA 0xcb
0000            275   _TMR2RLL        DATA 0xca
0000            276   _TMR3CN0        DATA 0x91
0000            277   _TMR3CN1        DATA 0xfe
0000            278   _TMR3H          DATA 0x95
0000            279   _TMR3L          DATA 0x94
0000            280   _TMR3RLH        DATA 0x93
0000            281   _TMR3RLL        DATA 0x92
0000            282   _TMR4CN0        DATA 0x98
0000            283   _TMR4CN1        DATA 0xff
0000            284   _TMR4H          DATA 0xa5
0000            285   _TMR4L          DATA 0xa4
0000            286   _TMR4RLH        DATA 0xa3
0000            287   _TMR4RLL        DATA 0xa2
0000            288   _TMR5CN0        DATA 0xc0
0000            289   _TMR5CN1        DATA 0xf1
0000            290   _TMR5H          DATA 0xd5
0000            291   _TMR5L          DATA 0xd4
0000            292   _TMR5RLH        DATA 0xd3
0000            293   _TMR5RLL        DATA 0xd2
0000            294   _UART0PCF       DATA 0xd9
0000            295   _UART1FCN0      DATA 0x9d
0000            296   _UART1FCN1      DATA 0xd8
0000            297   _UART1FCT       DATA 0xfa
0000            298   _UART1LIN       DATA 0x9e
0000            299   _UART1PCF       DATA 0xda
0000            300   _VDM0CN         DATA 0xff
0000            301   _WDTCN          DATA 0x97
0000            302   _XBR0           DATA 0xe1
0000            303   _XBR1           DATA 0xe2
0000            304   _XBR2           DATA 0xe3
0000            305   _XOSC0CN        DATA 0x86
0000            306   _DPTR           DATA 0x8382
0000            307   _TMR2RL         DATA 0xcbca
0000            308   _TMR3RL         DATA 0x9392
0000            309   _TMR4RL         DATA 0xa3a2
0000            310   _TMR5RL         DATA 0xd3d2
0000            311   _TMR0           DATA 0x8c8a
0000            312   _TMR1           DATA 0x8d8b
0000            313   _TMR2           DATA 0xcfce
0000            314   _TMR3           DATA 0x9594
0000            315   _TMR4           DATA 0xa5a4
0000            316   _TMR5           DATA 0xd5d4
0000            317   _SBRL1          DATA 0x9695
0000            318   _PCA0           DATA 0xfaf9
0000            319   _PCA0CP0        DATA 0xfcfb
0000            320   _PCA0CP1        DATA 0xeae9
0000            321   _PCA0CP2        DATA 0xeceb
0000            322   _PCA0CP3        DATA 0xf5f4
0000            323   _PCA0CP4        DATA 0x8584
0000            324   _PCA0CP5        DATA 0xdedd
0000            325   _ADC0ASA        DATA 0xb6b5
0000            326   _ADC0GT         DATA 0xc4c3
0000            327   _ADC0           DATA 0xbebd
0000            328   _ADC0LT         DATA 0xc6c5
0000            329   _DAC0           DATA 0x8584
0000            330   _DAC1           DATA 0x8a89
0000            331   _DAC2           DATA 0x8c8b
0000            332   _DAC3           DATA 0x8e8d
0000            333   ;--------------------------------------------------------
0000            334   ; special function bits
0000            335   ;--------------------------------------------------------
0000            336   _ACC_0          BIT 0xe0
0000            337   _ACC_1          BIT 0xe1
0000            338   _ACC_2          BIT 0xe2
0000            339   _ACC_3          BIT 0xe3
0000            340   _ACC_4          BIT 0xe4
0000            341   _ACC_5          BIT 0xe5
0000            342   _ACC_6          BIT 0xe6
0000            343   _ACC_7          BIT 0xe7
0000            344   _TEMPE          BIT 0xe8
0000            345   _ADGN0          BIT 0xe9
0000            346   _ADGN1          BIT 0xea
0000            347   _ADWINT         BIT 0xeb
0000            348   _ADBUSY         BIT 0xec
0000            349   _ADINT          BIT 0xed
0000            350   _IPOEN          BIT 0xee
0000            351   _ADEN           BIT 0xef
0000            352   _B_0            BIT 0xf0
0000            353   _B_1            BIT 0xf1
0000            354   _B_2            BIT 0xf2
0000            355   _B_3            BIT 0xf3
0000            356   _B_4            BIT 0xf4
0000            357   _B_5            BIT 0xf5
0000            358   _B_6            BIT 0xf6
0000            359   _B_7            BIT 0xf7
0000            360   _C0FIF          BIT 0xe8
0000            361   _C0RIF          BIT 0xe9
0000            362   _C1FIF          BIT 0xea
0000            363   _C1RIF          BIT 0xeb
0000            364   _C2FIF          BIT 0xec
0000            365   _C2RIF          BIT 0xed
0000            366   _C3FIF          BIT 0xee
0000            367   _C3RIF          BIT 0xef
0000            368   _D1SRC0         BIT 0x88
0000            369   _D1SRC1         BIT 0x89
0000            370   _D1AMEN         BIT 0x8a
0000            371   _D01REFSL       BIT 0x8b
0000            372   _D3SRC0         BIT 0x8c
0000            373   _D3SRC1         BIT 0x8d
0000            374   _D3AMEN         BIT 0x8e
0000            375   _D23REFSL       BIT 0x8f
0000            376   _D0UDIS         BIT 0x98
0000            377   _D1UDIS         BIT 0x99
0000            378   _D2UDIS         BIT 0x9a
0000            379   _D3UDIS         BIT 0x9b
0000            380   _EX0            BIT 0xa8
0000            381   _ET0            BIT 0xa9
0000            382   _EX1            BIT 0xaa
0000            383   _ET1            BIT 0xab
0000            384   _ES0            BIT 0xac
0000            385   _ET2            BIT 0xad
0000            386   _ESPI0          BIT 0xae
0000            387   _EA             BIT 0xaf
0000            388   _PX0            BIT 0xb8
0000            389   _PT0            BIT 0xb9
0000            390   _PX1            BIT 0xba
0000            391   _PT1            BIT 0xbb
0000            392   _PS0            BIT 0xbc
0000            393   _PT2            BIT 0xbd
0000            394   _PSPI0          BIT 0xbe
0000            395   _P0_0           BIT 0x80
0000            396   _P0_1           BIT 0x81
0000            397   _P0_2           BIT 0x82
0000            398   _P0_3           BIT 0x83
0000            399   _P0_4           BIT 0x84
0000            400   _P0_5           BIT 0x85
0000            401   _P0_6           BIT 0x86
0000            402   _P0_7           BIT 0x87
0000            403   _P1_0           BIT 0x90
0000            404   _P1_1           BIT 0x91
0000            405   _P1_2           BIT 0x92
0000            406   _P1_3           BIT 0x93
0000            407   _P1_4           BIT 0x94
0000            408   _P1_5           BIT 0x95
0000            409   _P1_6           BIT 0x96
0000            410   _P1_7           BIT 0x97
0000            411   _P2_0           BIT 0xa0
0000            412   _P2_1           BIT 0xa1
0000            413   _P2_2           BIT 0xa2
0000            414   _P2_3           BIT 0xa3
0000            415   _P2_4           BIT 0xa4
0000            416   _P2_5           BIT 0xa5
0000            417   _P2_6           BIT 0xa6
0000            418   _P3_0           BIT 0xb0
0000            419   _P3_1           BIT 0xb1
0000            420   _P3_2           BIT 0xb2
0000            421   _P3_3           BIT 0xb3
0000            422   _P3_4           BIT 0xb4
0000            423   _P3_7           BIT 0xb7
0000            424   _CCF0           BIT 0xd8
0000            425   _CCF1           BIT 0xd9
0000            426   _CCF2           BIT 0xda
0000            427   _CCF3           BIT 0xdb
0000            428   _CCF4           BIT 0xdc
0000            429   _CCF5           BIT 0xdd
0000            430   _CR             BIT 0xde
0000            431   _CF             BIT 0xdf
0000            432   _PARITY         BIT 0xd0
0000            433   _F1             BIT 0xd1
0000            434   _OV             BIT 0xd2
0000            435   _RS0            BIT 0xd3
0000            436   _RS1            BIT 0xd4
0000            437   _F0             BIT 0xd5
0000            438   _AC             BIT 0xd6
0000            439   _CY             BIT 0xd7
0000            440   _RI             BIT 0x98
0000            441   _TI             BIT 0x99
0000            442   _RB8            BIT 0x9a
0000            443   _TB8            BIT 0x9b
0000            444   _REN            BIT 0x9c
0000            445   _CE             BIT 0x9d
0000            446   _SMODE          BIT 0x9e
0000            447   _RI1            BIT 0xc8
0000            448   _TI1            BIT 0xc9
0000            449   _RBX1           BIT 0xca
0000            450   _TBX1           BIT 0xcb
0000            451   _REN1           BIT 0xcc
0000            452   _PERR1          BIT 0xcd
0000            453   _OVR1           BIT 0xce
0000            454   _SI             BIT 0xc0
0000            455   _ACK            BIT 0xc1
0000            456   _ARBLOST        BIT 0xc2
0000            457   _ACKRQ          BIT 0xc3
0000            458   _STO            BIT 0xc4
0000            459   _STA            BIT 0xc5
0000            460   _TXMODE         BIT 0xc6
0000            461   _MASTER         BIT 0xc7
0000            462   _SPIEN          BIT 0xf8
0000            463   _TXNF           BIT 0xf9
0000            464   _NSSMD0         BIT 0xfa
0000            465   _NSSMD1         BIT 0xfb
0000            466   _RXOVRN         BIT 0xfc
0000            467   _MODF           BIT 0xfd
0000            468   _WCOL           BIT 0xfe
0000            469   _SPIF           BIT 0xff
0000            470   _IT0            BIT 0x88
0000            471   _IE0            BIT 0x89
0000            472   _IT1            BIT 0x8a
0000            473   _IE1            BIT 0x8b
0000            474   _TR0            BIT 0x8c
0000            475   _TF0            BIT 0x8d
0000            476   _TR1            BIT 0x8e
0000            477   _TF1            BIT 0x8f
0000            478   _T2XCLK0        BIT 0xc8
0000            479   _T2XCLK1        BIT 0xc9
0000            480   _TR2            BIT 0xca
0000            481   _T2SPLIT        BIT 0xcb
0000            482   _TF2CEN         BIT 0xcc
0000            483   _TF2LEN         BIT 0xcd
0000            484   _TF2L           BIT 0xce
0000            485   _TF2H           BIT 0xcf
0000            486   _T4XCLK0        BIT 0x98
0000            487   _T4XCLK1        BIT 0x99
0000            488   _TR4            BIT 0x9a
0000            489   _T4SPLIT        BIT 0x9b
0000            490   _TF4CEN         BIT 0x9c
0000            491   _TF4LEN         BIT 0x9d
0000            492   _TF4L           BIT 0x9e
0000            493   _TF4H           BIT 0x9f
0000            494   _T5XCLK0        BIT 0xc0
0000            495   _T5XCLK1        BIT 0xc1
0000            496   _TR5            BIT 0xc2
0000            497   _T5SPLIT        BIT 0xc3
0000            498   _TF5CEN         BIT 0xc4
0000            499   _TF5LEN         BIT 0xc5
0000            500   _TF5L           BIT 0xc6
0000            501   _TF5H           BIT 0xc7
0000            502   _RIE            BIT 0xd8
0000            503   _RXTO0          BIT 0xd9
0000            504   _RXTO1          BIT 0xda
0000            505   _RFRQ           BIT 0xdb
0000            506   _TIE            BIT 0xdc
0000            507   _TXHOLD         BIT 0xdd
0000            508   _TXNF1          BIT 0xde
0000            509   _TFRQ           BIT 0xdf
0000            510   ;--------------------------------------------------------
0000            511   ; overlayable register banks
0000            512   ;--------------------------------------------------------
0000            513            rbank0 segment data overlay
0000            514   ;--------------------------------------------------------
0000            515   ; internal ram data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_DSEG
0000            518   _pwm_count:
0000            519            ds 1
0001            520   _pwm_count1:
0001            521            ds 1
0002            522   _pwm_count2:
0002            523            ds 1
0003            524   _pwm_count3:
0003            525            ds 1
0004            526   _pwmSig1:
0004            527            ds 2
0006            528   _pwmSig2:
0006            529            ds 2
0008            530   _pwmSig3:
0008            531            ds 2
000A            532   _pwmSig4:
000A            533            ds 2
000C            534   _pwmSig5:
000C            535            ds 2
000E            536   _pwmSig6:
000E            537            ds 2
0010            538   _cartMoveF:
0010            539            ds 2
0012            540   _cartMoveB:
0012            541            ds 2
0014            542   _flag:
0014            543            ds 2
0016            544   _claw_flag:
0016            545            ds 2
0018            546   _stop:
0018            547            ds 8
0020            548   _forward:
0020            549            ds 8
0028            550   _backward:
0028            551            ds 8
0030            552   _left:
0030            553            ds 8
0038            554   _right:
0038            555            ds 8
0040            556   _command:
0040            557            ds 8
0048            558   ;--------------------------------------------------------
0048            559   ; overlayable items in internal ram 
0048            560   ;--------------------------------------------------------
0000            561            rseg    R_OSEG
0000            562            rseg    R_OSEG
0000            563            rseg    R_OSEG
0000            564   _InitPinADC_PARM_2:
0000            565            ds 1
0001            566            rseg    R_OSEG
0001            567   _arrayEqual_PARM_2:
0001            568            ds 2
0003            569   _arrayEqual_PARM_3:
0003            570            ds 3
0006            571   _arrayEqual_arr1_1_76:
0006            572            ds 3
0009            573   ;--------------------------------------------------------
0009            574   ; indirectly addressable internal ram data
0009            575   ;--------------------------------------------------------
0000            576            rseg R_ISEG
0000            577   ;--------------------------------------------------------
0000            578   ; absolute internal ram data
0000            579   ;--------------------------------------------------------
0000            580            DSEG
0000            581   ;--------------------------------------------------------
0000            582   ; bit data
0000            583   ;--------------------------------------------------------
0000            584            rseg R_BSEG
0000            585   _Timer2_ISR_sloc0_1_0:
0000            586            DBIT    1
0001            587   ;--------------------------------------------------------
0001            588   ; paged external ram data
0001            589   ;--------------------------------------------------------
0000            590            rseg R_PSEG
0000            591   ;--------------------------------------------------------
0000            592   ; external ram data
0000            593   ;--------------------------------------------------------
0000            594            rseg R_XSEG
0000            595   ;--------------------------------------------------------
0000            596   ; absolute external ram data
0000            597   ;--------------------------------------------------------
0000            598            XSEG
0000            599   ;--------------------------------------------------------
0000            600   ; external initialized ram data
0000            601   ;--------------------------------------------------------
0000            602            rseg R_IXSEG
0000            603            rseg R_HOME
0000            604            rseg R_GSINIT
0000            605            rseg R_CSEG
0000            606   ;--------------------------------------------------------
0000            607   ; Reset entry point and interrupt vectors
0000            608   ;--------------------------------------------------------
0000            609            CSEG at 0x0000
0000 020100     610            ljmp    _crt0
002B            611            CSEG at 0x002b
002B 020100     612            ljmp    _Timer2_ISR
002E            613   ;--------------------------------------------------------
002E            614   ; global & static initialisations
002E            615   ;--------------------------------------------------------
0000            616            rseg R_HOME
0000            617            rseg R_GSINIT
0000            618            rseg R_GSINIT
0000            619   ;--------------------------------------------------------
0000            620   ; data variables initialization
0000            621   ;--------------------------------------------------------
0000            622            rseg R_DINIT
0000            623   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:44: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 753000     624            mov     _pwm_count,#0x00
0003            625   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:45: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75F000     626            mov     _pwm_count1,#0x00
0006            627   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:46: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 75B000     628            mov     _pwm_count2,#0x00
0009            629   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:47: volatile unsigned char pwm_count3 = 0; //
0009 759000     630            mov     _pwm_count3,#0x00
000C            631   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:62: volatile int flag = 0;
000C E4         632            clr     a
000D F550       633            mov     _flag,a
000F F551       634            mov     (_flag + 1),a
0011            635   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:63: volatile int claw_flag = 0;
0011 E4         636            clr     a
0012 F510       637            mov     _claw_flag,a
0014 F511       638            mov     (_claw_flag + 1),a
0016            639   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:64: int stop[]={1,0,0,0};
0016 75D001     640            mov     _stop,#0x01
0019 75D100     641            mov     (_stop + 1),#0x00
001C 75D200     642            mov     (_stop + 0x0002),#0x00
001F 75D300     643            mov     ((_stop + 0x0002) + 1),#0x00
0022 75D400     644            mov     (_stop + 0x0004),#0x00
0025 75D500     645            mov     ((_stop + 0x0004) + 1),#0x00
0028 75D600     646            mov     (_stop + 0x0006),#0x00
002B 75D700     647            mov     ((_stop + 0x0006) + 1),#0x00
002E            648   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:65: int forward[]={1,1,1,1};
002E 759001     649            mov     _forward,#0x01
0031 759100     650            mov     (_forward + 1),#0x00
0034 759201     651            mov     (_forward + 0x0002),#0x01
0037 759300     652            mov     ((_forward + 0x0002) + 1),#0x00
003A 759401     653            mov     (_forward + 0x0004),#0x01
003D 759500     654            mov     ((_forward + 0x0004) + 1),#0x00
0040 759601     655            mov     (_forward + 0x0006),#0x01
0043 759700     656            mov     ((_forward + 0x0006) + 1),#0x00
0046            657   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:66: int backward[]={1,0,0,0};
0046 755001     658            mov     _backward,#0x01
0049 755100     659            mov     (_backward + 1),#0x00
004C 755200     660            mov     (_backward + 0x0002),#0x00
004F 755300     661            mov     ((_backward + 0x0002) + 1),#0x00
0052 755400     662            mov     (_backward + 0x0004),#0x00
0055 755500     663            mov     ((_backward + 0x0004) + 1),#0x00
0058 755600     664            mov     (_backward + 0x0006),#0x00
005B 755700     665            mov     ((_backward + 0x0006) + 1),#0x00
005E            666   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:67: int left[]={1,0,1,0};
005E 751001     667            mov     _left,#0x01
0061 751100     668            mov     (_left + 1),#0x00
0064 751200     669            mov     (_left + 0x0002),#0x00
0067 751300     670            mov     ((_left + 0x0002) + 1),#0x00
006A 751401     671            mov     (_left + 0x0004),#0x01
006D 751500     672            mov     ((_left + 0x0004) + 1),#0x00
0070 751600     673            mov     (_left + 0x0006),#0x00
0073 751700     674            mov     ((_left + 0x0006) + 1),#0x00
0076            675   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:68: int right[]={1,1,0,1};
0076 75D001     676            mov     _right,#0x01
0079 75D100     677            mov     (_right + 1),#0x00
007C 75D201     678            mov     (_right + 0x0002),#0x01
007F 75D300     679            mov     ((_right + 0x0002) + 1),#0x00
0082 75D400     680            mov     (_right + 0x0004),#0x00
0085 75D500     681            mov     ((_right + 0x0004) + 1),#0x00
0088 75D601     682            mov     (_right + 0x0006),#0x01
008B 75D700     683            mov     ((_right + 0x0006) + 1),#0x00
008E            684   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:70: int command[4] = {0,0,0,0};
008E 759000     685            mov     _command,#0x00
0091 759100     686            mov     (_command + 1),#0x00
0094 759200     687            mov     (_command + 0x0002),#0x00
0097 759300     688            mov     ((_command + 0x0002) + 1),#0x00
009A 759400     689            mov     (_command + 0x0004),#0x00
009D 759500     690            mov     ((_command + 0x0004) + 1),#0x00
00A0 759600     691            mov     (_command + 0x0006),#0x00
00A3 759700     692            mov     ((_command + 0x0006) + 1),#0x00
00A6            693            ; The linker places a 'ret' at the end of segment R_DINIT.
00A6            694   ;--------------------------------------------------------
00A6            695   ; code
00A6            696   ;--------------------------------------------------------
0000            697            rseg R_CSEG
0000            698   ;------------------------------------------------------------
0000            699   ;Allocation info for local variables in function '_c51_external_startup'
0000            700   ;------------------------------------------------------------
0000            701   ;------------------------------------------------------------
0000            702   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:72: char _c51_external_startup(void)
0000            703   ;        -----------------------------------------
0000            704   ;         function _c51_external_startup
0000            705   ;        -----------------------------------------
0000            706   __c51_external_startup:
0000            707            using   0
0000            708   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:75: SFRPAGE = 0x00;
0000 75A700     709            mov     _SFRPAGE,#0x00
0003            710   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:76: WDTCN = 0xDE; //First key
0003 7597DE     711            mov     _WDTCN,#0xDE
0006            712   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:77: WDTCN = 0xAD; //Second key
0006 7597AD     713            mov     _WDTCN,#0xAD
0009            714   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:79: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     715            mov     _VDM0CN,#0x80
000C            716   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:80: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     717            mov     _RSTSRC,#0x06
000F            718   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:87: SFRPAGE = 0x10;
000F 75A710     719            mov     _SFRPAGE,#0x10
0012            720   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:88: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     721            mov     _PFE0CN,#0x20
0015            722   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:89: SFRPAGE = 0x00;
0015 75A700     723            mov     _SFRPAGE,#0x00
0018            724   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:110: CLKSEL = 0x00;
0018 75A900     725            mov     _CLKSEL,#0x00
001B            726   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:111: CLKSEL = 0x00;
001B 75A900     727            mov     _CLKSEL,#0x00
001E            728   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:112: while ((CLKSEL & 0x80) == 0);
001E            729   L002001?:
001E E5A9       730            mov     a,_CLKSEL
0020 30E710     731            jnb     acc.7,L002001?
0023            732   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:113: CLKSEL = 0x03;
0023 75A903     733            mov     _CLKSEL,#0x03
0026            734   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:114: CLKSEL = 0x03;
0026 75A903     735            mov     _CLKSEL,#0x03
0029            736   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:115: while ((CLKSEL & 0x80) == 0);
0029            737   L002004?:
0029 E5A9       738            mov     a,_CLKSEL
002B 30E790     739            jnb     acc.7,L002004?
002E            740   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:120: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     741            orl     _P0MDOUT,#0x10
0031            742   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:121: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     743            mov     _XBR0,#0x01
0034            744   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:122: XBR1 = 0X00;
0034 75E200     745            mov     _XBR1,#0x00
0037            746   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:123: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     747            mov     _XBR2,#0x40
003A            748   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:129: SCON0 = 0x10;
003A 759810     749            mov     _SCON0,#0x10
003D            750   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:130: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     751            mov     _TH1,#0xE6
0040            752   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:131: TL1 = TH1;      // Init Timer1
0040 858D8B     753            mov     _TL1,_TH1
0043            754   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:132: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     755            anl     _TMOD,#0x0F
0046            756   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:133: TMOD |= 0x20;
0046 438920     757            orl     _TMOD,#0x20
0049            758   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:134: TR1 = 1; // START Timer1
0049 D28E       759            setb    _TR1
004B            760   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:135: TI = 1;  // Indicate TX0 ready
004B D299       761            setb    _TI
004D            762   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:138: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     763            mov     _TMR2CN0,#0x00
0050            764   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:139: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     765            orl     _CKCON0,#0x10
0053            766   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:140: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     767            mov     _TMR2RL,#0xE0
0056 75CBE3     768            mov     (_TMR2RL >> 8),#0xE3
0059            769   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:141: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     770            mov     _TMR2,#0xFF
005C 75CFFF     771            mov     (_TMR2 >> 8),#0xFF
005F            772   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:142: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       773            setb    _ET2
0061            774   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:143: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       775            setb    _TR2
0063            776   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:160: EA = 1; // Enable interrupts
0063 D2AF       777            setb    _EA
0065            778   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:163: return 0;
0065 758200     779            mov     dpl,#0x00
0068 22         780            ret
0069            781   ;------------------------------------------------------------
0069            782   ;Allocation info for local variables in function 'Timer3us'
0069            783   ;------------------------------------------------------------
0069            784   ;us                        Allocated to registers r2 r3 
0069            785   ;i                         Allocated to registers r4 r5 
0069            786   ;------------------------------------------------------------
0069            787   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:165: void Timer3us(unsigned int us)
0069            788   ;        -----------------------------------------
0069            789   ;         function Timer3us
0069            790   ;        -----------------------------------------
0069            791   _Timer3us:
0069 AA82       792            mov     r2,dpl
006B AB83       793            mov     r3,dph
006D            794   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:170: CKCON0|=0b_0100_0000;
006D 438E40     795            orl     _CKCON0,#0x40
0070            796   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:172: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     797            mov     _TMR3RL,#0xB8
0073 7593FF     798            mov     (_TMR3RL >> 8),#0xFF
0076            799   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:173: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     800            mov     _TMR3,_TMR3RL
0079 859395     801            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            802   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:175: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     803            mov     _TMR3CN0,#0x04
007F            804   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:176: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       805            mov     r4,#0x00
0081 7D00       806            mov     r5,#0x00
0083            807   L003004?:
0083 C3         808            clr     c
0084 EC         809            mov     a,r4
0085 9A         810            subb    a,r2
0086 ED         811            mov     a,r5
0087 9B         812            subb    a,r3
0088 5001       813            jnc     L003007?
008A            814   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:178: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            815   L003001?:
008A E591       816            mov     a,_TMR3CN0
008C 30E7D0     817            jnb     acc.7,L003001?
008F            818   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:179: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     819            anl     _TMR3CN0,#0x7F
0092            820   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:176: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         821            inc     r4
0093 BC0050     822            cjne    r4,#0x00,L003004?
0096 0D         823            inc     r5
0097 8001       824            sjmp    L003004?
0099            825   L003007?:
0099            826   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:181: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     827            mov     _TMR3CN0,#0x00
009C 22         828            ret
009D            829   ;------------------------------------------------------------
009D            830   ;Allocation info for local variables in function 'waitms'
009D            831   ;------------------------------------------------------------
009D            832   ;ms                        Allocated to registers r2 r3 
009D            833   ;j                         Allocated to registers r4 r5 
009D            834   ;k                         Allocated to registers r6 
009D            835   ;------------------------------------------------------------
009D            836   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:183: void waitms (unsigned int ms)
009D            837   ;        -----------------------------------------
009D            838   ;         function waitms
009D            839   ;        -----------------------------------------
009D            840   _waitms:
009D AA82       841            mov     r2,dpl
009F AB83       842            mov     r3,dph
00A1            843   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:187: for(j=0; j<ms; j++)
00A1 7C00       844            mov     r4,#0x00
00A3 7D00       845            mov     r5,#0x00
00A5            846   L004005?:
00A5 C3         847            clr     c
00A6 EC         848            mov     a,r4
00A7 9A         849            subb    a,r2
00A8 ED         850            mov     a,r5
00A9 9B         851            subb    a,r3
00AA 5001       852            jnc     L004009?
00AC            853   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:188: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       854            mov     r6,#0x00
00AE            855   L004001?:
00AE BE04D0     856            cjne    r6,#0x04,L004018?
00B1            857   L004018?:
00B1 5001       858            jnc     L004007?
00B3 9000FA     859            mov     dptr,#0x00FA
00B6 C002       860            push    ar2
00B8 C003       861            push    ar3
00BA C004       862            push    ar4
00BC C005       863            push    ar5
00BE C006       864            push    ar6
00C0 120100     865            lcall   _Timer3us
00C3 D006       866            pop     ar6
00C5 D005       867            pop     ar5
00C7 D004       868            pop     ar4
00C9 D003       869            pop     ar3
00CB D002       870            pop     ar2
00CD 0E         871            inc     r6
00CE 8001       872            sjmp    L004001?
00D0            873   L004007?:
00D0            874   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:187: for(j=0; j<ms; j++)
00D0 0C         875            inc     r4
00D1 BC0010     876            cjne    r4,#0x00,L004005?
00D4 0D         877            inc     r5
00D5 8001       878            sjmp    L004005?
00D7            879   L004009?:
00D7 22         880            ret
00D8            881   ;------------------------------------------------------------
00D8            882   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            883   ;------------------------------------------------------------
00D8            884   ;pin                       Allocated to registers 
00D8            885   ;------------------------------------------------------------
00D8            886   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:191: unsigned int ADC_at_Pin(unsigned char pin)
00D8            887   ;        -----------------------------------------
00D8            888   ;         function ADC_at_Pin
00D8            889   ;        -----------------------------------------
00D8            890   _ADC_at_Pin:
00D8 8582BB     891            mov     _ADC0MX,dpl
00DB            892   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:194: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       893            setb    _ADBUSY
00DD            894   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:195: while (ADBUSY); // Wait for dummy conversion to finish
00DD            895   L005001?:
00DD 20EC50     896            jb      _ADBUSY,L005001?
00E0            897   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:196: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       898            setb    _ADBUSY
00E2            899   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:197: while (ADBUSY); // Wait for conversion to complete
00E2            900   L005004?:
00E2 20EC90     901            jb      _ADBUSY,L005004?
00E5            902   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:198: return (ADC0);
00E5 85BD82     903            mov     dpl,_ADC0
00E8 85BE83     904            mov     dph,(_ADC0 >> 8)
00EB 22         905            ret
00EC            906   ;------------------------------------------------------------
00EC            907   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            908   ;------------------------------------------------------------
00EC            909   ;------------------------------------------------------------
00EC            910   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:202: void Timer2_ISR(void) interrupt 5
00EC            911   ;        -----------------------------------------
00EC            912   ;         function Timer2_ISR
00EC            913   ;        -----------------------------------------
00EC            914   _Timer2_ISR:
00EC C0E0       915            push    acc
00EE C002       916            push    ar2
00F0 C003       917            push    ar3
00F2 C0D0       918            push    psw
00F4 75D000     919            mov     psw,#0x00
00F7            920   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:204: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       921            clr     _TF2H
00F9            922   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:206: pwm_count++;
00F9 0530       923            inc     _pwm_count
00FB            924   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:207: if (pwm_count>100)
00FB E530       925            mov     a,_pwm_count
00FD 249B       926            add     a,#0xff - 0x64
00FF 5001       927            jnc     L006002?
0101            928   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:208: pwm_count = 0;
0101 753000     929            mov     _pwm_count,#0x00
0104            930   L006002?:
0104            931   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:211: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AA30       932            mov     r2,_pwm_count
0106 7B00       933            mov     r3,#0x00
0108 C3         934            clr     c
0109 E550       935            mov     a,_pwmSig1
010B 9A         936            subb    a,r2
010C E551       937            mov     a,(_pwmSig1 + 1)
010E 9B         938            subb    a,r3
010F 9290       939            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         940            cpl     c
0112 9294       941            mov     _P1_4,c
0114            942   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:212: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AA30       943            mov     r2,_pwm_count
0116 7B00       944            mov     r3,#0x00
0118 C3         945            clr     c
0119 E510       946            mov     a,_pwmSig2
011B 9A         947            subb    a,r2
011C E511       948            mov     a,(_pwmSig2 + 1)
011E 9B         949            subb    a,r3
011F 9290       950            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         951            cpl     c
0122 9293       952            mov     _P1_3,c
0124            953   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:214: motorL1 = pwm_count>pwmSig1 ? 0 : 1;
0124 AA30       954            mov     r2,_pwm_count
0126 7B00       955            mov     r3,#0x00
0128 C3         956            clr     c
0129 E550       957            mov     a,_pwmSig1
012B 9A         958            subb    a,r2
012C E551       959            mov     a,(_pwmSig1 + 1)
012E 9B         960            subb    a,r3
012F 9290       961            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         962            cpl     c
0132 9296       963            mov     _P1_6,c
0134            964   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:215: motorL2 = pwm_count>pwmSig2 ? 0 : 1;
0134 AA30       965            mov     r2,_pwm_count
0136 7B00       966            mov     r3,#0x00
0138 C3         967            clr     c
0139 E510       968            mov     a,_pwmSig2
013B 9A         969            subb    a,r2
013C E511       970            mov     a,(_pwmSig2 + 1)
013E 9B         971            subb    a,r3
013F 9290       972            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         973            cpl     c
0142 9295       974            mov     _P1_5,c
0144 D0D0       975            pop     psw
0146 D003       976            pop     ar3
0148 D002       977            pop     ar2
014A D0E0       978            pop     acc
014C 32         979            reti
014D            980   ;        eliminated unneeded push/pop dpl
014D            981   ;        eliminated unneeded push/pop dph
014D            982   ;        eliminated unneeded push/pop b
014D            983   ;------------------------------------------------------------
014D            984   ;Allocation info for local variables in function 'InitADC'
014D            985   ;------------------------------------------------------------
014D            986   ;------------------------------------------------------------
014D            987   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:247: void InitADC(void)
014D            988   ;        -----------------------------------------
014D            989   ;         function InitADC
014D            990   ;        -----------------------------------------
014D            991   _InitADC:
014D            992   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:249: SFRPAGE = 0x00;
014D 75A700     993            mov     _SFRPAGE,#0x00
0150            994   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:250: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0150 75B280     995            mov     _ADC0CN1,#0x80
0153            996   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:251: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0153 75BCF8     997            mov     _ADC0CF0,#0xF8
0156            998   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:252: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0156 75B91E     999            mov     _ADC0CF1,#0x1E
0159           1000   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:253: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0159 75E800    1001            mov     _ADC0CN0,#0x00
015C           1002   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:254: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
015C 75DF3F    1003            mov     _ADC0CF2,#0x3F
015F           1004   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:255: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
015F 75B300    1005            mov     _ADC0CN2,#0x00
0162           1006   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:256: ADEN = 1; // Enable ADC
0162 D2EF      1007            setb    _ADEN
0164 22        1008            ret
0165           1009   ;------------------------------------------------------------
0165           1010   ;Allocation info for local variables in function 'TIMER0_Init'
0165           1011   ;------------------------------------------------------------
0165           1012   ;------------------------------------------------------------
0165           1013   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:258: void TIMER0_Init(void)
0165           1014   ;        -----------------------------------------
0165           1015   ;         function TIMER0_Init
0165           1016   ;        -----------------------------------------
0165           1017   _TIMER0_Init:
0165           1018   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:260: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0165 5389F0    1019            anl     _TMOD,#0xF0
0168           1020   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:261: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0168 438901    1021            orl     _TMOD,#0x01
016B           1022   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:262: TR0 = 0; // Stop Timer/Counter 0
016B C28C      1023            clr     _TR0
016D 22        1024            ret
016E           1025   ;------------------------------------------------------------
016E           1026   ;Allocation info for local variables in function 'Volts_at_Pin'
016E           1027   ;------------------------------------------------------------
016E           1028   ;pin                       Allocated to registers r2 
016E           1029   ;------------------------------------------------------------
016E           1030   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:267: float Volts_at_Pin(unsigned char pin)
016E           1031   ;        -----------------------------------------
016E           1032   ;         function Volts_at_Pin
016E           1033   ;        -----------------------------------------
016E           1034   _Volts_at_Pin:
016E           1035   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:269: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
016E 120100    1036            lcall   _ADC_at_Pin
0171 120100    1037            lcall   ___uint2fs
0174 AA82      1038            mov     r2,dpl
0176 AB83      1039            mov     r3,dph
0178 ACF0      1040            mov     r4,b
017A FD        1041            mov     r5,a
017B C002      1042            push    ar2
017D C003      1043            push    ar3
017F C004      1044            push    ar4
0181 C005      1045            push    ar5
0183 906C8B    1046            mov     dptr,#0x6C8B
0186 75F053    1047            mov     b,#0x53
0189 7440      1048            mov     a,#0x40
018B 120100    1049            lcall   ___fsmul
018E AA82      1050            mov     r2,dpl
0190 AB83      1051            mov     r3,dph
0192 ACF0      1052            mov     r4,b
0194 FD        1053            mov     r5,a
0195 E581      1054            mov     a,sp
0197 24FC      1055            add     a,#0xfc
0199 F581      1056            mov     sp,a
019B E4        1057            clr     a
019C C0E0      1058            push    acc
019E 74FC      1059            mov     a,#0xFC
01A0 C0E0      1060            push    acc
01A2 747F      1061            mov     a,#0x7F
01A4 C0E0      1062            push    acc
01A6 7446      1063            mov     a,#0x46
01A8 C0E0      1064            push    acc
01AA 8A82      1065            mov     dpl,r2
01AC 8B83      1066            mov     dph,r3
01AE 8CF0      1067            mov     b,r4
01B0 ED        1068            mov     a,r5
01B1 120100    1069            lcall   ___fsdiv
01B4 AA82      1070            mov     r2,dpl
01B6 AB83      1071            mov     r3,dph
01B8 ACF0      1072            mov     r4,b
01BA FD        1073            mov     r5,a
01BB E581      1074            mov     a,sp
01BD 24FC      1075            add     a,#0xfc
01BF F581      1076            mov     sp,a
01C1 8A82      1077            mov     dpl,r2
01C3 8B83      1078            mov     dph,r3
01C5 8CF0      1079            mov     b,r4
01C7 ED        1080            mov     a,r5
01C8 22        1081            ret
01C9           1082   ;------------------------------------------------------------
01C9           1083   ;Allocation info for local variables in function 'InitPinADC'
01C9           1084   ;------------------------------------------------------------
01C9           1085   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01C9           1086   ;portno                    Allocated to registers r2 
01C9           1087   ;mask                      Allocated to registers r3 
01C9           1088   ;------------------------------------------------------------
01C9           1089   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:271: void InitPinADC(unsigned char portno, unsigned char pinno)
01C9           1090   ;        -----------------------------------------
01C9           1091   ;         function InitPinADC
01C9           1092   ;        -----------------------------------------
01C9           1093   _InitPinADC:
01C9 AA82      1094            mov     r2,dpl
01CB           1095   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:275: mask = 1 << pinno;
01CB 85F0F0    1096            mov     b,_InitPinADC_PARM_2
01CE 05F0      1097            inc     b
01D0 7401      1098            mov     a,#0x01
01D2 8001      1099            sjmp    L010013?
01D4           1100   L010011?:
01D4 25E0      1101            add     a,acc
01D6           1102   L010013?:
01D6 D5F0D0    1103            djnz    b,L010011?
01D9 FB        1104            mov     r3,a
01DA           1105   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:277: SFRPAGE = 0x20;
01DA 75A720    1106            mov     _SFRPAGE,#0x20
01DD           1107   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:278: switch (portno)
01DD BA0010    1108            cjne    r2,#0x00,L010014?
01E0 8001      1109            sjmp    L010001?
01E2           1110   L010014?:
01E2 BA0190    1111            cjne    r2,#0x01,L010015?
01E5 8001      1112            sjmp    L010002?
01E7           1113   L010015?:
01E7           1114   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:280: case 0:
01E7 BA0210    1115            cjne    r2,#0x02,L010005?
01EA 8001      1116            sjmp    L010003?
01EC           1117   L010001?:
01EC           1118   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:281: P0MDIN &= (~mask); // Set pin as analog input
01EC EB        1119            mov     a,r3
01ED F4        1120            cpl     a
01EE FA        1121            mov     r2,a
01EF 52F1      1122            anl     _P0MDIN,a
01F1           1123   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:282: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01F1 EB        1124            mov     a,r3
01F2 42D4      1125            orl     _P0SKIP,a
01F4           1126   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:283: break;
01F4           1127   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:284: case 1:
01F4 8001      1128            sjmp    L010005?
01F6           1129   L010002?:
01F6           1130   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:285: P1MDIN &= (~mask); // Set pin as analog input
01F6 EB        1131            mov     a,r3
01F7 F4        1132            cpl     a
01F8 FA        1133            mov     r2,a
01F9 52F2      1134            anl     _P1MDIN,a
01FB           1135   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:286: P1SKIP |= mask; // Skip Crossbar decoding for this pin
01FB EB        1136            mov     a,r3
01FC 42D5      1137            orl     _P1SKIP,a
01FE           1138   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:287: break;
01FE           1139   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:288: case 2:
01FE 8001      1140            sjmp    L010005?
0200           1141   L010003?:
0200           1142   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:289: P2MDIN &= (~mask); // Set pin as analog input
0200 EB        1143            mov     a,r3
0201 F4        1144            cpl     a
0202 FA        1145            mov     r2,a
0203 52F3      1146            anl     _P2MDIN,a
0205           1147   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:290: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0205 EB        1148            mov     a,r3
0206 42CC      1149            orl     _P2SKIP,a
0208           1150   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:294: }
0208           1151   L010005?:
0208           1152   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:295: SFRPAGE = 0x00;
0208 75A700    1153            mov     _SFRPAGE,#0x00
020B 22        1154            ret
020C           1155   ;------------------------------------------------------------
020C           1156   ;Allocation info for local variables in function 'PWMforward'
020C           1157   ;------------------------------------------------------------
020C           1158   ;------------------------------------------------------------
020C           1159   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:304: void PWMforward(void) {
020C           1160   ;        -----------------------------------------
020C           1161   ;         function PWMforward
020C           1162   ;        -----------------------------------------
020C           1163   _PWMforward:
020C           1164   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:305: pwmSig1 = 99;
020C 755063    1165            mov     _pwmSig1,#0x63
020F E4        1166            clr     a
0210 F551      1167            mov     (_pwmSig1 + 1),a
0212           1168   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:306: pwmSig2 = 0;
0212           1169   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:308: pwmSig3 = 0;
0212 E4        1170            clr     a
0213 F510      1171            mov     _pwmSig2,a
0215 F511      1172            mov     (_pwmSig2 + 1),a
0217 F5D0      1173            mov     _pwmSig3,a
0219 F5D1      1174            mov     (_pwmSig3 + 1),a
021B           1175   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:309: pwmSig4 =99;
021B 759063    1176            mov     _pwmSig4,#0x63
021E E4        1177            clr     a
021F F591      1178            mov     (_pwmSig4 + 1),a
0221 22        1179            ret
0222           1180   ;------------------------------------------------------------
0222           1181   ;Allocation info for local variables in function 'PWMbackward'
0222           1182   ;------------------------------------------------------------
0222           1183   ;------------------------------------------------------------
0222           1184   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:312: void PWMbackward(void) {
0222           1185   ;        -----------------------------------------
0222           1186   ;         function PWMbackward
0222           1187   ;        -----------------------------------------
0222           1188   _PWMbackward:
0222           1189   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:313: pwmSig1 = 0;
0222 E4        1190            clr     a
0223 F550      1191            mov     _pwmSig1,a
0225 F551      1192            mov     (_pwmSig1 + 1),a
0227           1193   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:314: pwmSig2 = 99;
0227 751063    1194            mov     _pwmSig2,#0x63
022A E4        1195            clr     a
022B F511      1196            mov     (_pwmSig2 + 1),a
022D           1197   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:316: pwmSig3 = 99;
022D 75D063    1198            mov     _pwmSig3,#0x63
0230 E4        1199            clr     a
0231 F5D1      1200            mov     (_pwmSig3 + 1),a
0233           1201   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:317: pwmSig4 = 0;
0233 E4        1202            clr     a
0234 F590      1203            mov     _pwmSig4,a
0236 F591      1204            mov     (_pwmSig4 + 1),a
0238 22        1205            ret
0239           1206   ;------------------------------------------------------------
0239           1207   ;Allocation info for local variables in function 'PWMLeft'
0239           1208   ;------------------------------------------------------------
0239           1209   ;------------------------------------------------------------
0239           1210   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:320: void PWMLeft(void) {
0239           1211   ;        -----------------------------------------
0239           1212   ;         function PWMLeft
0239           1213   ;        -----------------------------------------
0239           1214   _PWMLeft:
0239           1215   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:321: pwmSig1 = 0;
0239           1216   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:322: pwmSig2 = 0;
0239 E4        1217            clr     a
023A F550      1218            mov     _pwmSig1,a
023C F551      1219            mov     (_pwmSig1 + 1),a
023E F510      1220            mov     _pwmSig2,a
0240 F511      1221            mov     (_pwmSig2 + 1),a
0242           1222   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:324: pwmSig3 = 70;
0242 75D046    1223            mov     _pwmSig3,#0x46
0245 E4        1224            clr     a
0246 F5D1      1225            mov     (_pwmSig3 + 1),a
0248           1226   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:325: pwmSig4 = 0;
0248 E4        1227            clr     a
0249 F590      1228            mov     _pwmSig4,a
024B F591      1229            mov     (_pwmSig4 + 1),a
024D 22        1230            ret
024E           1231   ;------------------------------------------------------------
024E           1232   ;Allocation info for local variables in function 'PWMRight'
024E           1233   ;------------------------------------------------------------
024E           1234   ;------------------------------------------------------------
024E           1235   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:328: void PWMRight(void) {
024E           1236   ;        -----------------------------------------
024E           1237   ;         function PWMRight
024E           1238   ;        -----------------------------------------
024E           1239   _PWMRight:
024E           1240   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:329: pwmSig1 = 99;
024E 755063    1241            mov     _pwmSig1,#0x63
0251 E4        1242            clr     a
0252 F551      1243            mov     (_pwmSig1 + 1),a
0254           1244   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:330: pwmSig2 = 0;
0254           1245   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:332: pwmSig3 = 0;
0254           1246   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:333: pwmSig4 = 0;
0254 E4        1247            clr     a
0255 F510      1248            mov     _pwmSig2,a
0257 F511      1249            mov     (_pwmSig2 + 1),a
0259 F5D0      1250            mov     _pwmSig3,a
025B F5D1      1251            mov     (_pwmSig3 + 1),a
025D F590      1252            mov     _pwmSig4,a
025F F591      1253            mov     (_pwmSig4 + 1),a
0261 22        1254            ret
0262           1255   ;------------------------------------------------------------
0262           1256   ;Allocation info for local variables in function 'PWMStop'
0262           1257   ;------------------------------------------------------------
0262           1258   ;------------------------------------------------------------
0262           1259   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:336: void PWMStop(void) {
0262           1260   ;        -----------------------------------------
0262           1261   ;         function PWMStop
0262           1262   ;        -----------------------------------------
0262           1263   _PWMStop:
0262           1264   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:337: pwmSig1 = 0;
0262           1265   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:338: pwmSig2 = 0;
0262           1266   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:340: pwmSig3 = 0;
0262           1267   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:341: pwmSig4 = 0;
0262 E4        1268            clr     a
0263 F550      1269            mov     _pwmSig1,a
0265 F551      1270            mov     (_pwmSig1 + 1),a
0267 F510      1271            mov     _pwmSig2,a
0269 F511      1272            mov     (_pwmSig2 + 1),a
026B F5D0      1273            mov     _pwmSig3,a
026D F5D1      1274            mov     (_pwmSig3 + 1),a
026F F590      1275            mov     _pwmSig4,a
0271 F591      1276            mov     (_pwmSig4 + 1),a
0273 22        1277            ret
0274           1278   ;------------------------------------------------------------
0274           1279   ;Allocation info for local variables in function 'periodcalc'
0274           1280   ;------------------------------------------------------------
0274           1281   ;period1                   Allocated to registers r2 r3 r4 r5 
0274           1282   ;overflow_count            Allocated to registers r2 r3 
0274           1283   ;------------------------------------------------------------
0274           1284   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:344: float periodcalc(void) {
0274           1285   ;        -----------------------------------------
0274           1286   ;         function periodcalc
0274           1287   ;        -----------------------------------------
0274           1288   _periodcalc:
0274           1289   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:348: TL0=0; 
0274 758A00    1290            mov     _TL0,#0x00
0277           1291   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:349: TH0=0;
0277 758C00    1292            mov     _TH0,#0x00
027A           1293   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:350: TF0=0;
027A C28D      1294            clr     _TF0
027C           1295   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:352: TR0=0;
027C C28C      1296            clr     _TR0
027E           1297   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:354: while(P1_7!=0); // Wait for the signal to be zero
027E           1298   L016001?:
027E 209790    1299            jb      _P1_7,L016001?
0281           1300   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:355: while(P1_7!=1); // Wait for the signal to be one
0281           1301   L016004?:
0281 3097D0    1302            jnb     _P1_7,L016004?
0284           1303   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:356: TR0=1; // Start the timer
0284 D28C      1304            setb    _TR0
0286           1305   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:357: while(P1_7!=0) // Wait for the signal to be zero
0286 7A00      1306            mov     r2,#0x00
0288 7B00      1307            mov     r3,#0x00
028A           1308   L016009?:
028A 309750    1309            jnb     _P1_7,L016011?
028D           1310   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:359: if(TF0==1) // Did the 16-bit timer overflow?
028D           1311   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:361: TF0=0;
028D 108D90    1312            jbc     _TF0,L016024?
0290 8001      1313            sjmp    L016009?
0292           1314   L016024?:
0292           1315   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:362: overflow_count++;
0292 0A        1316            inc     r2
0293 BA0010    1317            cjne    r2,#0x00,L016009?
0296 0B        1318            inc     r3
0297 8001      1319            sjmp    L016009?
0299           1320   L016011?:
0299           1321   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:367: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0299 C28C      1322            clr     _TR0
029B           1323   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:368: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
029B 8A82      1324            mov     dpl,r2
029D 8B83      1325            mov     dph,r3
029F 120100    1326            lcall   ___sint2fs
02A2 AA82      1327            mov     r2,dpl
02A4 AB83      1328            mov     r3,dph
02A6 ACF0      1329            mov     r4,b
02A8 FD        1330            mov     r5,a
02A9 C002      1331            push    ar2
02AB C003      1332            push    ar3
02AD C004      1333            push    ar4
02AF C005      1334            push    ar5
02B1 900000    1335            mov     dptr,#0x0000
02B4 75F080    1336            mov     b,#0x80
02B7 7447      1337            mov     a,#0x47
02B9 120100    1338            lcall   ___fsmul
02BC AA82      1339            mov     r2,dpl
02BE AB83      1340            mov     r3,dph
02C0 ACF0      1341            mov     r4,b
02C2 FD        1342            mov     r5,a
02C3 E581      1343            mov     a,sp
02C5 24FC      1344            add     a,#0xfc
02C7 F581      1345            mov     sp,a
02C9 858C82    1346            mov     dpl,_TH0
02CC C002      1347            push    ar2
02CE C003      1348            push    ar3
02D0 C004      1349            push    ar4
02D2 C005      1350            push    ar5
02D4 120100    1351            lcall   ___uchar2fs
02D7 AE82      1352            mov     r6,dpl
02D9 AF83      1353            mov     r7,dph
02DB A8F0      1354            mov     r0,b
02DD F9        1355            mov     r1,a
02DE C006      1356            push    ar6
02E0 C007      1357            push    ar7
02E2 C000      1358            push    ar0
02E4 C001      1359            push    ar1
02E6 900000    1360            mov     dptr,#0x0000
02E9 75F080    1361            mov     b,#0x80
02EC 7443      1362            mov     a,#0x43
02EE 120100    1363            lcall   ___fsmul
02F1 AE82      1364            mov     r6,dpl
02F3 AF83      1365            mov     r7,dph
02F5 A8F0      1366            mov     r0,b
02F7 F9        1367            mov     r1,a
02F8 E581      1368            mov     a,sp
02FA 24FC      1369            add     a,#0xfc
02FC F581      1370            mov     sp,a
02FE D005      1371            pop     ar5
0300 D004      1372            pop     ar4
0302 D003      1373            pop     ar3
0304 D002      1374            pop     ar2
0306 C006      1375            push    ar6
0308 C007      1376            push    ar7
030A C000      1377            push    ar0
030C C001      1378            push    ar1
030E 8A82      1379            mov     dpl,r2
0310 8B83      1380            mov     dph,r3
0312 8CF0      1381            mov     b,r4
0314 ED        1382            mov     a,r5
0315 120100    1383            lcall   ___fsadd
0318 AA82      1384            mov     r2,dpl
031A AB83      1385            mov     r3,dph
031C ACF0      1386            mov     r4,b
031E FD        1387            mov     r5,a
031F E581      1388            mov     a,sp
0321 24FC      1389            add     a,#0xfc
0323 F581      1390            mov     sp,a
0325 AE8A      1391            mov     r6,_TL0
0327 7F00      1392            mov     r7,#0x00
0329 8E82      1393            mov     dpl,r6
032B 8F83      1394            mov     dph,r7
032D C002      1395            push    ar2
032F C003      1396            push    ar3
0331 C004      1397            push    ar4
0333 C005      1398            push    ar5
0335 120100    1399            lcall   ___sint2fs
0338 AE82      1400            mov     r6,dpl
033A AF83      1401            mov     r7,dph
033C A8F0      1402            mov     r0,b
033E F9        1403            mov     r1,a
033F D005      1404            pop     ar5
0341 D004      1405            pop     ar4
0343 D003      1406            pop     ar3
0345 D002      1407            pop     ar2
0347 C006      1408            push    ar6
0349 C007      1409            push    ar7
034B C000      1410            push    ar0
034D C001      1411            push    ar1
034F 8A82      1412            mov     dpl,r2
0351 8B83      1413            mov     dph,r3
0353 8CF0      1414            mov     b,r4
0355 ED        1415            mov     a,r5
0356 120100    1416            lcall   ___fsadd
0359 AA82      1417            mov     r2,dpl
035B AB83      1418            mov     r3,dph
035D ACF0      1419            mov     r4,b
035F FD        1420            mov     r5,a
0360 E581      1421            mov     a,sp
0362 24FC      1422            add     a,#0xfc
0364 F581      1423            mov     sp,a
0366 C002      1424            push    ar2
0368 C003      1425            push    ar3
036A C004      1426            push    ar4
036C C005      1427            push    ar5
036E 90F4FC    1428            mov     dptr,#0xF4FC
0371 75F032    1429            mov     b,#0x32
0374 7434      1430            mov     a,#0x34
0376 120100    1431            lcall   ___fsmul
0379 AA82      1432            mov     r2,dpl
037B AB83      1433            mov     r3,dph
037D ACF0      1434            mov     r4,b
037F FD        1435            mov     r5,a
0380 E581      1436            mov     a,sp
0382 24FC      1437            add     a,#0xfc
0384 F581      1438            mov     sp,a
0386           1439   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:370: return period1*1000; //return period of high pulse in seconds
0386 C002      1440            push    ar2
0388 C003      1441            push    ar3
038A C004      1442            push    ar4
038C C005      1443            push    ar5
038E 900000    1444            mov     dptr,#0x0000
0391 75F07A    1445            mov     b,#0x7A
0394 7444      1446            mov     a,#0x44
0396 120100    1447            lcall   ___fsmul
0399 AA82      1448            mov     r2,dpl
039B AB83      1449            mov     r3,dph
039D ACF0      1450            mov     r4,b
039F FD        1451            mov     r5,a
03A0 E581      1452            mov     a,sp
03A2 24FC      1453            add     a,#0xfc
03A4 F581      1454            mov     sp,a
03A6 8A82      1455            mov     dpl,r2
03A8 8B83      1456            mov     dph,r3
03AA 8CF0      1457            mov     b,r4
03AC ED        1458            mov     a,r5
03AD 22        1459            ret
03AE           1460   ;------------------------------------------------------------
03AE           1461   ;Allocation info for local variables in function 'arrayEqual'
03AE           1462   ;------------------------------------------------------------
03AE           1463   ;size                      Allocated with name '_arrayEqual_PARM_2'
03AE           1464   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
03AE           1465   ;arr1                      Allocated with name '_arrayEqual_arr1_1_76'
03AE           1466   ;i                         Allocated to registers r5 r6 
03AE           1467   ;------------------------------------------------------------
03AE           1468   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:374: int arrayEqual (int arr1[], int size, int arr2[]){
03AE           1469   ;        -----------------------------------------
03AE           1470   ;         function arrayEqual
03AE           1471   ;        -----------------------------------------
03AE           1472   _arrayEqual:
03AE 858240    1473            mov     _arrayEqual_arr1_1_76,dpl
03B1 858341    1474            mov     (_arrayEqual_arr1_1_76 + 1),dph
03B4 85F042    1475            mov     (_arrayEqual_arr1_1_76 + 2),b
03B7           1476   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:376: for(i=0; i<size; i++){
03B7 7D00      1477            mov     r5,#0x00
03B9 7E00      1478            mov     r6,#0x00
03BB           1479   L017003?:
03BB C3        1480            clr     c
03BC ED        1481            mov     a,r5
03BD 95A0      1482            subb    a,_arrayEqual_PARM_2
03BF EE        1483            mov     a,r6
03C0 6480      1484            xrl     a,#0x80
03C2 85A1F0    1485            mov     b,(_arrayEqual_PARM_2 + 1)
03C5 63F080    1486            xrl     b,#0x80
03C8 95F0      1487            subb    a,b
03CA 5001      1488            jnc     L017006?
03CC           1489   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:377: if(arr1[i]!=arr2[i])
03CC 8D07      1490            mov     ar7,r5
03CE EE        1491            mov     a,r6
03CF CF        1492            xch     a,r7
03D0 25E0      1493            add     a,acc
03D2 CF        1494            xch     a,r7
03D3 33        1495            rlc     a
03D4 F8        1496            mov     r0,a
03D5 EF        1497            mov     a,r7
03D6 2540      1498            add     a,_arrayEqual_arr1_1_76
03D8 F9        1499            mov     r1,a
03D9 E8        1500            mov     a,r0
03DA 3541      1501            addc    a,(_arrayEqual_arr1_1_76 + 1)
03DC FA        1502            mov     r2,a
03DD AB42      1503            mov     r3,(_arrayEqual_arr1_1_76 + 2)
03DF 8982      1504            mov     dpl,r1
03E1 8A83      1505            mov     dph,r2
03E3 8BF0      1506            mov     b,r3
03E5 120100    1507            lcall   __gptrget
03E8 F9        1508            mov     r1,a
03E9 A3        1509            inc     dptr
03EA 120100    1510            lcall   __gptrget
03ED FA        1511            mov     r2,a
03EE EF        1512            mov     a,r7
03EF 2550      1513            add     a,_arrayEqual_PARM_3
03F1 FF        1514            mov     r7,a
03F2 E8        1515            mov     a,r0
03F3 3551      1516            addc    a,(_arrayEqual_PARM_3 + 1)
03F5 F8        1517            mov     r0,a
03F6 AB52      1518            mov     r3,(_arrayEqual_PARM_3 + 2)
03F8 8F82      1519            mov     dpl,r7
03FA 8883      1520            mov     dph,r0
03FC 8BF0      1521            mov     b,r3
03FE 120100    1522            lcall   __gptrget
0401 FF        1523            mov     r7,a
0402 A3        1524            inc     dptr
0403 120100    1525            lcall   __gptrget
0406 F8        1526            mov     r0,a
0407 E9        1527            mov     a,r1
0408 B50750    1528            cjne    a,ar7,L017013?
040B EA        1529            mov     a,r2
040C B50050    1530            cjne    a,ar0,L017013?
040F 8001      1531            sjmp    L017005?
0411           1532   L017013?:
0411           1533   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:378: return 0; 
0411 900000    1534            mov     dptr,#0x0000
0414 22        1535            ret
0415           1536   L017005?:
0415           1537   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:376: for(i=0; i<size; i++){
0415 0D        1538            inc     r5
0416 BD0090    1539            cjne    r5,#0x00,L017003?
0419 0E        1540            inc     r6
041A 8001      1541            sjmp    L017003?
041C           1542   L017006?:
041C           1543   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:380: return 1; 
041C 900001    1544            mov     dptr,#0x0001
041F 22        1545            ret
0420           1546   ;------------------------------------------------------------
0420           1547   ;Allocation info for local variables in function 'checkCommands'
0420           1548   ;------------------------------------------------------------
0420           1549   ;------------------------------------------------------------
0420           1550   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:386: void checkCommands (void){
0420           1551   ;        -----------------------------------------
0420           1552   ;         function checkCommands
0420           1553   ;        -----------------------------------------
0420           1554   _checkCommands:
0420           1555   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:387: if(arrayEqual(command, 4, stop)) PWMStop();
0420 7550D0    1556            mov     _arrayEqual_PARM_3,#_stop
0423 755100    1557            mov     (_arrayEqual_PARM_3 + 1),#0x00
0426 755240    1558            mov     (_arrayEqual_PARM_3 + 2),#0x40
0429 75A004    1559            mov     _arrayEqual_PARM_2,#0x04
042C E4        1560            clr     a
042D F5A1      1561            mov     (_arrayEqual_PARM_2 + 1),a
042F 901790    1562            mov     dptr,#_command
0432 75F040    1563            mov     b,#0x40
0435 120100    1564            lcall   _arrayEqual
0438 E582      1565            mov     a,dpl
043A 8583F0    1566            mov     b,dph
043D 45F0      1567            orl     a,b
043F 6001      1568            jz      L018014?
0441 020100    1569            ljmp    _PWMStop
0444           1570   L018014?:
0444           1571   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:388: else if (arrayEqual(command,4,forward)) PWMforward(); 
0444 755090    1572            mov     _arrayEqual_PARM_3,#_forward
0447 755100    1573            mov     (_arrayEqual_PARM_3 + 1),#0x00
044A 755240    1574            mov     (_arrayEqual_PARM_3 + 2),#0x40
044D 75A004    1575            mov     _arrayEqual_PARM_2,#0x04
0450 E4        1576            clr     a
0451 F5A1      1577            mov     (_arrayEqual_PARM_2 + 1),a
0453 901790    1578            mov     dptr,#_command
0456 75F040    1579            mov     b,#0x40
0459 120100    1580            lcall   _arrayEqual
045C E582      1581            mov     a,dpl
045E 8583F0    1582            mov     b,dph
0461 45F0      1583            orl     a,b
0463 6001      1584            jz      L018011?
0465 020100    1585            ljmp    _PWMforward
0468           1586   L018011?:
0468           1587   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:389: else if (arrayEqual(command,4,backward)) PWMbackward(); 
0468 755050    1588            mov     _arrayEqual_PARM_3,#_backward
046B 755100    1589            mov     (_arrayEqual_PARM_3 + 1),#0x00
046E 755240    1590            mov     (_arrayEqual_PARM_3 + 2),#0x40
0471 75A004    1591            mov     _arrayEqual_PARM_2,#0x04
0474 E4        1592            clr     a
0475 F5A1      1593            mov     (_arrayEqual_PARM_2 + 1),a
0477 901790    1594            mov     dptr,#_command
047A 75F040    1595            mov     b,#0x40
047D 120100    1596            lcall   _arrayEqual
0480 E582      1597            mov     a,dpl
0482 8583F0    1598            mov     b,dph
0485 45F0      1599            orl     a,b
0487 6001      1600            jz      L018008?
0489 020100    1601            ljmp    _PWMbackward
048C           1602   L018008?:
048C           1603   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:390: else if (arrayEqual(command,4, left)) PWMLeft(); 
048C 755010    1604            mov     _arrayEqual_PARM_3,#_left
048F 755100    1605            mov     (_arrayEqual_PARM_3 + 1),#0x00
0492 755240    1606            mov     (_arrayEqual_PARM_3 + 2),#0x40
0495 75A004    1607            mov     _arrayEqual_PARM_2,#0x04
0498 E4        1608            clr     a
0499 F5A1      1609            mov     (_arrayEqual_PARM_2 + 1),a
049B 901790    1610            mov     dptr,#_command
049E 75F040    1611            mov     b,#0x40
04A1 120100    1612            lcall   _arrayEqual
04A4 E582      1613            mov     a,dpl
04A6 8583F0    1614            mov     b,dph
04A9 45F0      1615            orl     a,b
04AB 6001      1616            jz      L018005?
04AD 020100    1617            ljmp    _PWMLeft
04B0           1618   L018005?:
04B0           1619   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:391: else if (arrayEqual(command,4, right)) PWMRight(); 
04B0 7550D0    1620            mov     _arrayEqual_PARM_3,#_right
04B3 755100    1621            mov     (_arrayEqual_PARM_3 + 1),#0x00
04B6 755240    1622            mov     (_arrayEqual_PARM_3 + 2),#0x40
04B9 75A004    1623            mov     _arrayEqual_PARM_2,#0x04
04BC E4        1624            clr     a
04BD F5A1      1625            mov     (_arrayEqual_PARM_2 + 1),a
04BF 901790    1626            mov     dptr,#_command
04C2 75F040    1627            mov     b,#0x40
04C5 120100    1628            lcall   _arrayEqual
04C8 E582      1629            mov     a,dpl
04CA 8583F0    1630            mov     b,dph
04CD 45F0      1631            orl     a,b
04CF 6001      1632            jz      L018002?
04D1 020100    1633            ljmp    _PWMRight
04D4           1634   L018002?:
04D4           1635   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:392: else PWMStop(); //defaults to a halt (redundant)
04D4 020100    1636            ljmp    _PWMStop
04D7           1637   ;------------------------------------------------------------
04D7           1638   ;Allocation info for local variables in function 'voltsAtPeak'
04D7           1639   ;------------------------------------------------------------
04D7           1640   ;------------------------------------------------------------
04D7           1641   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:396: float voltsAtPeak(void) {
04D7           1642   ;        -----------------------------------------
04D7           1643   ;         function voltsAtPeak
04D7           1644   ;        -----------------------------------------
04D7           1645   _voltsAtPeak:
04D7           1646   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:397: while(ADC_at_Pin(QFP32_MUX_P1_6)!=0); //input pin
04D7           1647   L019001?:
04D7 75820C    1648            mov     dpl,#0x0C
04DA 120100    1649            lcall   _ADC_at_Pin
04DD E582      1650            mov     a,dpl
04DF 8583F0    1651            mov     b,dph
04E2 45F0      1652            orl     a,b
04E4 7001      1653            jnz     L019001?
04E6           1654   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:398: while(ADC_at_Pin(QFP32_MUX_P1_6)==0);
04E6           1655   L019004?:
04E6 75820C    1656            mov     dpl,#0x0C
04E9 120100    1657            lcall   _ADC_at_Pin
04EC E582      1658            mov     a,dpl
04EE 8583F0    1659            mov     b,dph
04F1 45F0      1660            orl     a,b
04F3 6001      1661            jz      L019004?
04F5           1662   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:399: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
04F5 900000    1663            mov     dptr,#0x0000
04F8 120100    1664            lcall   _Timer3us
04FB           1665   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:400: return(Volts_at_Pin(QFP32_MUX_P1_6));
04FB 75820C    1666            mov     dpl,#0x0C
04FE 020100    1667            ljmp    _Volts_at_Pin
0501           1668   ;------------------------------------------------------------
0501           1669   ;Allocation info for local variables in function 'getDigitalSignal'
0501           1670   ;------------------------------------------------------------
0501           1671   ;------------------------------------------------------------
0501           1672   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:406: int getDigitalSignal (void){
0501           1673   ;        -----------------------------------------
0501           1674   ;         function getDigitalSignal
0501           1675   ;        -----------------------------------------
0501           1676   _getDigitalSignal:
0501           1677   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:407: if (Volts_at_Pin(QFP32_MUX_P1_6)>=LowerBound && Volts_at_Pin(QFP32_MUX_P1_6)<=UpperBound )
0501 75820C    1678            mov     dpl,#0x0C
0504 120100    1679            lcall   _Volts_at_Pin
0507 AA82      1680            mov     r2,dpl
0509 AB83      1681            mov     r3,dph
050B ACF0      1682            mov     r4,b
050D FD        1683            mov     r5,a
050E E4        1684            clr     a
050F C0E0      1685            push    acc
0511 C0E0      1686            push    acc
0513 C0E0      1687            push    acc
0515 C0E0      1688            push    acc
0517 8A82      1689            mov     dpl,r2
0519 8B83      1690            mov     dph,r3
051B 8CF0      1691            mov     b,r4
051D ED        1692            mov     a,r5
051E 120100    1693            lcall   ___fslt
0521 AA82      1694            mov     r2,dpl
0523 E581      1695            mov     a,sp
0525 24FC      1696            add     a,#0xfc
0527 F581      1697            mov     sp,a
0529 EA        1698            mov     a,r2
052A 7001      1699            jnz     L020006?
052C 75820C    1700            mov     dpl,#0x0C
052F 120100    1701            lcall   _Volts_at_Pin
0532 AA82      1702            mov     r2,dpl
0534 AB83      1703            mov     r3,dph
0536 ACF0      1704            mov     r4,b
0538 FD        1705            mov     r5,a
0539 E4        1706            clr     a
053A C0E0      1707            push    acc
053C C0E0      1708            push    acc
053E C0E0      1709            push    acc
0540 C0E0      1710            push    acc
0542 8A82      1711            mov     dpl,r2
0544 8B83      1712            mov     dph,r3
0546 8CF0      1713            mov     b,r4
0548 ED        1714            mov     a,r5
0549 120100    1715            lcall   ___fsgt
054C AA82      1716            mov     r2,dpl
054E E581      1717            mov     a,sp
0550 24FC      1718            add     a,#0xfc
0552 F581      1719            mov     sp,a
0554 EA        1720            mov     a,r2
0555 7001      1721            jnz     L020006?
0557           1722   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:408: return 1; 
0557 900001    1723            mov     dptr,#0x0001
055A 22        1724            ret
055B           1725   L020006?:
055B           1726   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:409: else if(Volts_at_Pin(QFP32_MUX_P1_6)>=0 && Volts_at_Pin(QFP32_MUX_P1_6)<=LowerBound)
055B 75820C    1727            mov     dpl,#0x0C
055E 120100    1728            lcall   _Volts_at_Pin
0561 AA82      1729            mov     r2,dpl
0563 AB83      1730            mov     r3,dph
0565 ACF0      1731            mov     r4,b
0567 FD        1732            mov     r5,a
0568 E4        1733            clr     a
0569 C0E0      1734            push    acc
056B C0E0      1735            push    acc
056D C0E0      1736            push    acc
056F C0E0      1737            push    acc
0571 8A82      1738            mov     dpl,r2
0573 8B83      1739            mov     dph,r3
0575 8CF0      1740            mov     b,r4
0577 ED        1741            mov     a,r5
0578 120100    1742            lcall   ___fslt
057B AA82      1743            mov     r2,dpl
057D E581      1744            mov     a,sp
057F 24FC      1745            add     a,#0xfc
0581 F581      1746            mov     sp,a
0583 EA        1747            mov     a,r2
0584 7001      1748            jnz     L020002?
0586 75820C    1749            mov     dpl,#0x0C
0589 120100    1750            lcall   _Volts_at_Pin
058C AA82      1751            mov     r2,dpl
058E AB83      1752            mov     r3,dph
0590 ACF0      1753            mov     r4,b
0592 FD        1754            mov     r5,a
0593 E4        1755            clr     a
0594 C0E0      1756            push    acc
0596 C0E0      1757            push    acc
0598 C0E0      1758            push    acc
059A C0E0      1759            push    acc
059C 8A82      1760            mov     dpl,r2
059E 8B83      1761            mov     dph,r3
05A0 8CF0      1762            mov     b,r4
05A2 ED        1763            mov     a,r5
05A3 120100    1764            lcall   ___fsgt
05A6 AA82      1765            mov     r2,dpl
05A8 E581      1766            mov     a,sp
05AA 24FC      1767            add     a,#0xfc
05AC F581      1768            mov     sp,a
05AE EA        1769            mov     a,r2
05AF 7001      1770            jnz     L020002?
05B1           1771   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:410: return 0; 
05B1 900000    1772            mov     dptr,#0x0000
05B4           1773   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:411: else return 0; 
05B4 22        1774            ret
05B5           1775   L020002?:
05B5 900000    1776            mov     dptr,#0x0000
05B8 22        1777            ret
05B9           1778   ;------------------------------------------------------------
05B9           1779   ;Allocation info for local variables in function 'recieveData'
05B9           1780   ;------------------------------------------------------------
05B9           1781   ;checkcomm                 Allocated to registers 
05B9           1782   ;i                         Allocated to registers r2 r3 
05B9           1783   ;------------------------------------------------------------
05B9           1784   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:416: void recieveData (){
05B9           1785   ;        -----------------------------------------
05B9           1786   ;         function recieveData
05B9           1787   ;        -----------------------------------------
05B9           1788   _recieveData:
05B9           1789   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:441: while (getDigitalSignal()==0);         //wait for the signal to be 1 
05B9           1790   L021001?:
05B9 120100    1791            lcall   _getDigitalSignal
05BC E582      1792            mov     a,dpl
05BE 8583F0    1793            mov     b,dph
05C1 45F0      1794            orl     a,b
05C3 6001      1795            jz      L021001?
05C5           1796   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:442: if (getDigitalSignal()==1){    //gets the first 1 that identifies a command 
05C5 120100    1797            lcall   _getDigitalSignal
05C8 AA82      1798            mov     r2,dpl
05CA AB83      1799            mov     r3,dph
05CC BA01D0    1800            cjne    r2,#0x01,L021010?
05CF BB00D0    1801            cjne    r3,#0x00,L021010?
05D2           1802   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:443: command[0]=1;
05D2 759001    1803            mov     _command,#0x01
05D5 759100    1804            mov     (_command + 1),#0x00
05D8           1805   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:444: for( i=1; i<4; i++){
05D8 7A01      1806            mov     r2,#0x01
05DA 7B00      1807            mov     r3,#0x00
05DC           1808   L021006?:
05DC C3        1809            clr     c
05DD EA        1810            mov     a,r2
05DE 9404      1811            subb    a,#0x04
05E0 EB        1812            mov     a,r3
05E1 6480      1813            xrl     a,#0x80
05E3 9480      1814            subb    a,#0x80
05E5 5001      1815            jnc     L021009?
05E7           1816   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:445: waitms(constant_delay_time);
05E7 900005    1817            mov     dptr,#0x0005
05EA C002      1818            push    ar2
05EC C003      1819            push    ar3
05EE 120100    1820            lcall   _waitms
05F1 D003      1821            pop     ar3
05F3 D002      1822            pop     ar2
05F5           1823   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:446: command[i]=getDigitalSignal();         
05F5 8A04      1824            mov     ar4,r2
05F7 EB        1825            mov     a,r3
05F8 CC        1826            xch     a,r4
05F9 25E0      1827            add     a,acc
05FB CC        1828            xch     a,r4
05FC 33        1829            rlc     a
05FD EC        1830            mov     a,r4
05FE 2490      1831            add     a,#_command
0600 F8        1832            mov     r0,a
0601 C002      1833            push    ar2
0603 C003      1834            push    ar3
0605 C000      1835            push    ar0
0607 120100    1836            lcall   _getDigitalSignal
060A E582      1837            mov     a,dpl
060C 8583F0    1838            mov     b,dph
060F D000      1839            pop     ar0
0611 D003      1840            pop     ar3
0613 D002      1841            pop     ar2
0615 F6        1842            mov     @r0,a
0616 08        1843            inc     r0
0617 A6F0      1844            mov     @r0,b
0619 18        1845            dec     r0
061A           1846   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:444: for( i=1; i<4; i++){
061A 0A        1847            inc     r2
061B BA0010    1848            cjne    r2,#0x00,L021006?
061E 0B        1849            inc     r3
061F 8001      1850            sjmp    L021006?
0621           1851   L021009?:
0621           1852   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:449: checkCommands();                               //does activity depending on the command given 
0621 120100    1853            lcall   _checkCommands
0624           1854   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:450: command[0] = 0;
0624 759000    1855            mov     _command,#0x00
0627 759100    1856            mov     (_command + 1),#0x00
062A           1857   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:451: command[1] = 0;
062A 759200    1858            mov     (_command + 0x0002),#0x00
062D 759300    1859            mov     ((_command + 0x0002) + 1),#0x00
0630           1860   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:452: command[2] = 0;
0630 759400    1861            mov     (_command + 0x0004),#0x00
0633 759500    1862            mov     ((_command + 0x0004) + 1),#0x00
0636           1863   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:453: command[3] = 0;                        //clear the command array 
0636 759600    1864            mov     (_command + 0x0006),#0x00
0639 759700    1865            mov     ((_command + 0x0006) + 1),#0x00
063C           1866   L021010?:
063C 22        1867            ret
063D           1868   ;------------------------------------------------------------
063D           1869   ;Allocation info for local variables in function 'main'
063D           1870   ;------------------------------------------------------------
063D           1871   ;checkcommand              Allocated to registers 
063D           1872   ;sig1                      Allocated to registers 
063D           1873   ;sig2                      Allocated to registers 
063D           1874   ;peak                      Allocated to registers 
063D           1875   ;voltspeak                 Allocated to registers 
063D           1876   ;periodpwm                 Allocated to registers 
063D           1877   ;period                    Allocated to registers 
063D           1878   ;overflow_count            Allocated to registers 
063D           1879   ;------------------------------------------------------------
063D           1880   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:458: void main(void)
063D           1881   ;        -----------------------------------------
063D           1882   ;         function main
063D           1883   ;        -----------------------------------------
063D           1884   _main:
063D           1885   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:469: TIMER0_Init();
063D 120100    1886            lcall   _TIMER0_Init
0640           1887   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:473: InitADC();
0640 120100    1888            lcall   _InitADC
0643           1889   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:474: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0643 7490      1890            mov     a,#__str_0
0645 C0E0      1891            push    acc
0647 74CC      1892            mov     a,#(__str_0 >> 8)
0649 C0E0      1893            push    acc
064B 7480      1894            mov     a,#0x80
064D C0E0      1895            push    acc
064F 120100    1896            lcall   _printf
0652 1581      1897            dec     sp
0654 1581      1898            dec     sp
0656 1581      1899            dec     sp
0658           1900   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:476: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
0658 7410      1901            mov     a,#__str_1
065A C0E0      1902            push    acc
065C 74CD      1903            mov     a,#(__str_1 >> 8)
065E C0E0      1904            push    acc
0660 7480      1905            mov     a,#0x80
0662 C0E0      1906            push    acc
0664 120100    1907            lcall   _printf
0667 1581      1908            dec     sp
0669 1581      1909            dec     sp
066B 1581      1910            dec     sp
066D           1911   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:478: printf("\n");
066D 7450      1912            mov     a,#__str_2
066F C0E0      1913            push    acc
0671 74CD      1914            mov     a,#(__str_2 >> 8)
0673 C0E0      1915            push    acc
0675 7480      1916            mov     a,#0x80
0677 C0E0      1917            push    acc
0679 120100    1918            lcall   _printf
067C 1581      1919            dec     sp
067E 1581      1920            dec     sp
0680 1581      1921            dec     sp
0682           1922   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:479: P2_1=0;
0682 C2A1      1923            clr     _P2_1
0684           1924   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:480: while (1)
0684           1925   L022002?:
0684           1926   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\reciever_so_far.c:483: recieveData();         //keep reading data continously 
0684 120100    1927            lcall   _recieveData
0687 8001      1928            sjmp    L022002?
0689           1929            rseg R_CSEG
0689           1930   
0000           1931            rseg R_XINIT
0000           1932   
0000           1933            rseg R_CONST
0000           1934   __str_0:
0000 1B        1935            db 0x1B
0001 5B324A    1936            db '[2J'
0004 00        1937            db 0x00
0005           1938   __str_1:
0005 53717561  1939            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
002B 0D        1940            db 0x0D
002C 0A        1941            db 0x0A
002D 43686563  1942            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
0041 50322E31  1943            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
005C 0D        1944            db 0x0D
005D 0A        1945            db 0x0A
005E 00        1946            db 0x00
005F           1947   __str_2:
005F 0A        1948            db 0x0A
0060 00        1949            db 0x00
0061           1950   
002E           1951            CSEG
002E           1952   
002E           1953   end
