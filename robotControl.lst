0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Mar 27 13:25:57 2018
0000              5   ;--------------------------------------------------------
                  5   $name robotControl
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _intervalcalc
0000             29            public _PWMStop
0000             30            public _PWMRight
0000             31            public _PWMLeft
0000             32            public _PWMback
0000             33            public _PWMStraight
0000             34            public _InitPinADC
0000             35            public _Volts_at_Pin
0000             36            public _TIMER0_Init
0000             37            public _InitADC
0000             38            public _Timer2_ISR
0000             39            public _ADC_at_Pin
0000             40            public _waitms
0000             41            public _Timer3us
0000             42            public __c51_external_startup
0000             43            public _claw_flag
0000             44            public _flag
0000             45            public _cartMoveB
0000             46            public _cartMoveF
0000             47            public _pwmSig6
0000             48            public _pwmSig5
0000             49            public _pwmSig4
0000             50            public _pwmSig3
0000             51            public _pwmSig2
0000             52            public _pwmSig1
0000             53            public _pwm_count3
0000             54            public _pwm_count2
0000             55            public _pwm_count1
0000             56            public _pwm_count
0000             57   ;--------------------------------------------------------
0000             58   ; Special Function Registers
0000             59   ;--------------------------------------------------------
0000             60   _ACC            DATA 0xe0
0000             61   _ADC0ASAH       DATA 0xb6
0000             62   _ADC0ASAL       DATA 0xb5
0000             63   _ADC0ASCF       DATA 0xa1
0000             64   _ADC0ASCT       DATA 0xc7
0000             65   _ADC0CF0        DATA 0xbc
0000             66   _ADC0CF1        DATA 0xb9
0000             67   _ADC0CF2        DATA 0xdf
0000             68   _ADC0CN0        DATA 0xe8
0000             69   _ADC0CN1        DATA 0xb2
0000             70   _ADC0CN2        DATA 0xb3
0000             71   _ADC0GTH        DATA 0xc4
0000             72   _ADC0GTL        DATA 0xc3
0000             73   _ADC0H          DATA 0xbe
0000             74   _ADC0L          DATA 0xbd
0000             75   _ADC0LTH        DATA 0xc6
0000             76   _ADC0LTL        DATA 0xc5
0000             77   _ADC0MX         DATA 0xbb
0000             78   _B              DATA 0xf0
0000             79   _CKCON0         DATA 0x8e
0000             80   _CKCON1         DATA 0xa6
0000             81   _CLEN0          DATA 0xc6
0000             82   _CLIE0          DATA 0xc7
0000             83   _CLIF0          DATA 0xe8
0000             84   _CLKSEL         DATA 0xa9
0000             85   _CLOUT0         DATA 0xd1
0000             86   _CLU0CF         DATA 0xb1
0000             87   _CLU0FN         DATA 0xaf
0000             88   _CLU0MX         DATA 0x84
0000             89   _CLU1CF         DATA 0xb3
0000             90   _CLU1FN         DATA 0xb2
0000             91   _CLU1MX         DATA 0x85
0000             92   _CLU2CF         DATA 0xb6
0000             93   _CLU2FN         DATA 0xb5
0000             94   _CLU2MX         DATA 0x91
0000             95   _CLU3CF         DATA 0xbf
0000             96   _CLU3FN         DATA 0xbe
0000             97   _CLU3MX         DATA 0xae
0000             98   _CMP0CN0        DATA 0x9b
0000             99   _CMP0CN1        DATA 0x99
0000            100   _CMP0MD         DATA 0x9d
0000            101   _CMP0MX         DATA 0x9f
0000            102   _CMP1CN0        DATA 0xbf
0000            103   _CMP1CN1        DATA 0xac
0000            104   _CMP1MD         DATA 0xab
0000            105   _CMP1MX         DATA 0xaa
0000            106   _CRC0CN0        DATA 0xce
0000            107   _CRC0CN1        DATA 0x86
0000            108   _CRC0CNT        DATA 0xd3
0000            109   _CRC0DAT        DATA 0xcb
0000            110   _CRC0FLIP       DATA 0xcf
0000            111   _CRC0IN         DATA 0xca
0000            112   _CRC0ST         DATA 0xd2
0000            113   _DAC0CF0        DATA 0x91
0000            114   _DAC0CF1        DATA 0x92
0000            115   _DAC0H          DATA 0x85
0000            116   _DAC0L          DATA 0x84
0000            117   _DAC1CF0        DATA 0x93
0000            118   _DAC1CF1        DATA 0x94
0000            119   _DAC1H          DATA 0x8a
0000            120   _DAC1L          DATA 0x89
0000            121   _DAC2CF0        DATA 0x95
0000            122   _DAC2CF1        DATA 0x96
0000            123   _DAC2H          DATA 0x8c
0000            124   _DAC2L          DATA 0x8b
0000            125   _DAC3CF0        DATA 0x9a
0000            126   _DAC3CF1        DATA 0x9c
0000            127   _DAC3H          DATA 0x8e
0000            128   _DAC3L          DATA 0x8d
0000            129   _DACGCF0        DATA 0x88
0000            130   _DACGCF1        DATA 0x98
0000            131   _DACGCF2        DATA 0xa2
0000            132   _DERIVID        DATA 0xad
0000            133   _DEVICEID       DATA 0xb5
0000            134   _DPH            DATA 0x83
0000            135   _DPL            DATA 0x82
0000            136   _EIE1           DATA 0xe6
0000            137   _EIE2           DATA 0xf3
0000            138   _EIP1           DATA 0xbb
0000            139   _EIP1H          DATA 0xee
0000            140   _EIP2           DATA 0xed
0000            141   _EIP2H          DATA 0xf6
0000            142   _EMI0CN         DATA 0xe7
0000            143   _FLKEY          DATA 0xb7
0000            144   _HFO0CAL        DATA 0xc7
0000            145   _HFO1CAL        DATA 0xd6
0000            146   _HFOCN          DATA 0xef
0000            147   _I2C0ADM        DATA 0xff
0000            148   _I2C0CN0        DATA 0xba
0000            149   _I2C0DIN        DATA 0xbc
0000            150   _I2C0DOUT       DATA 0xbb
0000            151   _I2C0FCN0       DATA 0xad
0000            152   _I2C0FCN1       DATA 0xab
0000            153   _I2C0FCT        DATA 0xf5
0000            154   _I2C0SLAD       DATA 0xbd
0000            155   _I2C0STAT       DATA 0xb9
0000            156   _IE             DATA 0xa8
0000            157   _IP             DATA 0xb8
0000            158   _IPH            DATA 0xf2
0000            159   _IT01CF         DATA 0xe4
0000            160   _LFO0CN         DATA 0xb1
0000            161   _P0             DATA 0x80
0000            162   _P0MASK         DATA 0xfe
0000            163   _P0MAT          DATA 0xfd
0000            164   _P0MDIN         DATA 0xf1
0000            165   _P0MDOUT        DATA 0xa4
0000            166   _P0SKIP         DATA 0xd4
0000            167   _P1             DATA 0x90
0000            168   _P1MASK         DATA 0xee
0000            169   _P1MAT          DATA 0xed
0000            170   _P1MDIN         DATA 0xf2
0000            171   _P1MDOUT        DATA 0xa5
0000            172   _P1SKIP         DATA 0xd5
0000            173   _P2             DATA 0xa0
0000            174   _P2MASK         DATA 0xfc
0000            175   _P2MAT          DATA 0xfb
0000            176   _P2MDIN         DATA 0xf3
0000            177   _P2MDOUT        DATA 0xa6
0000            178   _P2SKIP         DATA 0xcc
0000            179   _P3             DATA 0xb0
0000            180   _P3MDIN         DATA 0xf4
0000            181   _P3MDOUT        DATA 0x9c
0000            182   _PCA0CENT       DATA 0x9e
0000            183   _PCA0CLR        DATA 0x9c
0000            184   _PCA0CN0        DATA 0xd8
0000            185   _PCA0CPH0       DATA 0xfc
0000            186   _PCA0CPH1       DATA 0xea
0000            187   _PCA0CPH2       DATA 0xec
0000            188   _PCA0CPH3       DATA 0xf5
0000            189   _PCA0CPH4       DATA 0x85
0000            190   _PCA0CPH5       DATA 0xde
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPL1       DATA 0xe9
0000            193   _PCA0CPL2       DATA 0xeb
0000            194   _PCA0CPL3       DATA 0xf4
0000            195   _PCA0CPL4       DATA 0x84
0000            196   _PCA0CPL5       DATA 0xdd
0000            197   _PCA0CPM0       DATA 0xda
0000            198   _PCA0CPM1       DATA 0xdb
0000            199   _PCA0CPM2       DATA 0xdc
0000            200   _PCA0CPM3       DATA 0xae
0000            201   _PCA0CPM4       DATA 0xaf
0000            202   _PCA0CPM5       DATA 0xcc
0000            203   _PCA0H          DATA 0xfa
0000            204   _PCA0L          DATA 0xf9
0000            205   _PCA0MD         DATA 0xd9
0000            206   _PCA0POL        DATA 0x96
0000            207   _PCA0PWM        DATA 0xf7
0000            208   _PCON0          DATA 0x87
0000            209   _PCON1          DATA 0xcd
0000            210   _PFE0CN         DATA 0xc1
0000            211   _PRTDRV         DATA 0xf6
0000            212   _PSCTL          DATA 0x8f
0000            213   _PSTAT0         DATA 0xaa
0000            214   _PSW            DATA 0xd0
0000            215   _REF0CN         DATA 0xd1
0000            216   _REG0CN         DATA 0xc9
0000            217   _REVID          DATA 0xb6
0000            218   _RSTSRC         DATA 0xef
0000            219   _SBCON1         DATA 0x94
0000            220   _SBRLH1         DATA 0x96
0000            221   _SBRLL1         DATA 0x95
0000            222   _SBUF           DATA 0x99
0000            223   _SBUF0          DATA 0x99
0000            224   _SBUF1          DATA 0x92
0000            225   _SCON           DATA 0x98
0000            226   _SCON0          DATA 0x98
0000            227   _SCON1          DATA 0xc8
0000            228   _SFRPAGE        DATA 0xa7
0000            229   _SFRPGCN        DATA 0xbc
0000            230   _SFRSTACK       DATA 0xd7
0000            231   _SMB0ADM        DATA 0xd6
0000            232   _SMB0ADR        DATA 0xd7
0000            233   _SMB0CF         DATA 0xc1
0000            234   _SMB0CN0        DATA 0xc0
0000            235   _SMB0DAT        DATA 0xc2
0000            236   _SMB0FCN0       DATA 0xc3
0000            237   _SMB0FCN1       DATA 0xc4
0000            238   _SMB0FCT        DATA 0xef
0000            239   _SMB0RXLN       DATA 0xc5
0000            240   _SMB0TC         DATA 0xac
0000            241   _SMOD1          DATA 0x93
0000            242   _SP             DATA 0x81
0000            243   _SPI0CFG        DATA 0xa1
0000            244   _SPI0CKR        DATA 0xa2
0000            245   _SPI0CN0        DATA 0xf8
0000            246   _SPI0DAT        DATA 0xa3
0000            247   _SPI0FCN0       DATA 0x9a
0000            248   _SPI0FCN1       DATA 0x9b
0000            249   _SPI0FCT        DATA 0xf7
0000            250   _SPI0PCF        DATA 0xdf
0000            251   _TCON           DATA 0x88
0000            252   _TH0            DATA 0x8c
0000            253   _TH1            DATA 0x8d
0000            254   _TL0            DATA 0x8a
0000            255   _TL1            DATA 0x8b
0000            256   _TMOD           DATA 0x89
0000            257   _TMR2CN0        DATA 0xc8
0000            258   _TMR2CN1        DATA 0xfd
0000            259   _TMR2H          DATA 0xcf
0000            260   _TMR2L          DATA 0xce
0000            261   _TMR2RLH        DATA 0xcb
0000            262   _TMR2RLL        DATA 0xca
0000            263   _TMR3CN0        DATA 0x91
0000            264   _TMR3CN1        DATA 0xfe
0000            265   _TMR3H          DATA 0x95
0000            266   _TMR3L          DATA 0x94
0000            267   _TMR3RLH        DATA 0x93
0000            268   _TMR3RLL        DATA 0x92
0000            269   _TMR4CN0        DATA 0x98
0000            270   _TMR4CN1        DATA 0xff
0000            271   _TMR4H          DATA 0xa5
0000            272   _TMR4L          DATA 0xa4
0000            273   _TMR4RLH        DATA 0xa3
0000            274   _TMR4RLL        DATA 0xa2
0000            275   _TMR5CN0        DATA 0xc0
0000            276   _TMR5CN1        DATA 0xf1
0000            277   _TMR5H          DATA 0xd5
0000            278   _TMR5L          DATA 0xd4
0000            279   _TMR5RLH        DATA 0xd3
0000            280   _TMR5RLL        DATA 0xd2
0000            281   _UART0PCF       DATA 0xd9
0000            282   _UART1FCN0      DATA 0x9d
0000            283   _UART1FCN1      DATA 0xd8
0000            284   _UART1FCT       DATA 0xfa
0000            285   _UART1LIN       DATA 0x9e
0000            286   _UART1PCF       DATA 0xda
0000            287   _VDM0CN         DATA 0xff
0000            288   _WDTCN          DATA 0x97
0000            289   _XBR0           DATA 0xe1
0000            290   _XBR1           DATA 0xe2
0000            291   _XBR2           DATA 0xe3
0000            292   _XOSC0CN        DATA 0x86
0000            293   _DPTR           DATA 0x8382
0000            294   _TMR2RL         DATA 0xcbca
0000            295   _TMR3RL         DATA 0x9392
0000            296   _TMR4RL         DATA 0xa3a2
0000            297   _TMR5RL         DATA 0xd3d2
0000            298   _TMR0           DATA 0x8c8a
0000            299   _TMR1           DATA 0x8d8b
0000            300   _TMR2           DATA 0xcfce
0000            301   _TMR3           DATA 0x9594
0000            302   _TMR4           DATA 0xa5a4
0000            303   _TMR5           DATA 0xd5d4
0000            304   _SBRL1          DATA 0x9695
0000            305   _PCA0           DATA 0xfaf9
0000            306   _PCA0CP0        DATA 0xfcfb
0000            307   _PCA0CP1        DATA 0xeae9
0000            308   _PCA0CP2        DATA 0xeceb
0000            309   _PCA0CP3        DATA 0xf5f4
0000            310   _PCA0CP4        DATA 0x8584
0000            311   _PCA0CP5        DATA 0xdedd
0000            312   _ADC0ASA        DATA 0xb6b5
0000            313   _ADC0GT         DATA 0xc4c3
0000            314   _ADC0           DATA 0xbebd
0000            315   _ADC0LT         DATA 0xc6c5
0000            316   _DAC0           DATA 0x8584
0000            317   _DAC1           DATA 0x8a89
0000            318   _DAC2           DATA 0x8c8b
0000            319   _DAC3           DATA 0x8e8d
0000            320   ;--------------------------------------------------------
0000            321   ; special function bits
0000            322   ;--------------------------------------------------------
0000            323   _ACC_0          BIT 0xe0
0000            324   _ACC_1          BIT 0xe1
0000            325   _ACC_2          BIT 0xe2
0000            326   _ACC_3          BIT 0xe3
0000            327   _ACC_4          BIT 0xe4
0000            328   _ACC_5          BIT 0xe5
0000            329   _ACC_6          BIT 0xe6
0000            330   _ACC_7          BIT 0xe7
0000            331   _TEMPE          BIT 0xe8
0000            332   _ADGN0          BIT 0xe9
0000            333   _ADGN1          BIT 0xea
0000            334   _ADWINT         BIT 0xeb
0000            335   _ADBUSY         BIT 0xec
0000            336   _ADINT          BIT 0xed
0000            337   _IPOEN          BIT 0xee
0000            338   _ADEN           BIT 0xef
0000            339   _B_0            BIT 0xf0
0000            340   _B_1            BIT 0xf1
0000            341   _B_2            BIT 0xf2
0000            342   _B_3            BIT 0xf3
0000            343   _B_4            BIT 0xf4
0000            344   _B_5            BIT 0xf5
0000            345   _B_6            BIT 0xf6
0000            346   _B_7            BIT 0xf7
0000            347   _C0FIF          BIT 0xe8
0000            348   _C0RIF          BIT 0xe9
0000            349   _C1FIF          BIT 0xea
0000            350   _C1RIF          BIT 0xeb
0000            351   _C2FIF          BIT 0xec
0000            352   _C2RIF          BIT 0xed
0000            353   _C3FIF          BIT 0xee
0000            354   _C3RIF          BIT 0xef
0000            355   _D1SRC0         BIT 0x88
0000            356   _D1SRC1         BIT 0x89
0000            357   _D1AMEN         BIT 0x8a
0000            358   _D01REFSL       BIT 0x8b
0000            359   _D3SRC0         BIT 0x8c
0000            360   _D3SRC1         BIT 0x8d
0000            361   _D3AMEN         BIT 0x8e
0000            362   _D23REFSL       BIT 0x8f
0000            363   _D0UDIS         BIT 0x98
0000            364   _D1UDIS         BIT 0x99
0000            365   _D2UDIS         BIT 0x9a
0000            366   _D3UDIS         BIT 0x9b
0000            367   _EX0            BIT 0xa8
0000            368   _ET0            BIT 0xa9
0000            369   _EX1            BIT 0xaa
0000            370   _ET1            BIT 0xab
0000            371   _ES0            BIT 0xac
0000            372   _ET2            BIT 0xad
0000            373   _ESPI0          BIT 0xae
0000            374   _EA             BIT 0xaf
0000            375   _PX0            BIT 0xb8
0000            376   _PT0            BIT 0xb9
0000            377   _PX1            BIT 0xba
0000            378   _PT1            BIT 0xbb
0000            379   _PS0            BIT 0xbc
0000            380   _PT2            BIT 0xbd
0000            381   _PSPI0          BIT 0xbe
0000            382   _P0_0           BIT 0x80
0000            383   _P0_1           BIT 0x81
0000            384   _P0_2           BIT 0x82
0000            385   _P0_3           BIT 0x83
0000            386   _P0_4           BIT 0x84
0000            387   _P0_5           BIT 0x85
0000            388   _P0_6           BIT 0x86
0000            389   _P0_7           BIT 0x87
0000            390   _P1_0           BIT 0x90
0000            391   _P1_1           BIT 0x91
0000            392   _P1_2           BIT 0x92
0000            393   _P1_3           BIT 0x93
0000            394   _P1_4           BIT 0x94
0000            395   _P1_5           BIT 0x95
0000            396   _P1_6           BIT 0x96
0000            397   _P1_7           BIT 0x97
0000            398   _P2_0           BIT 0xa0
0000            399   _P2_1           BIT 0xa1
0000            400   _P2_2           BIT 0xa2
0000            401   _P2_3           BIT 0xa3
0000            402   _P2_4           BIT 0xa4
0000            403   _P2_5           BIT 0xa5
0000            404   _P2_6           BIT 0xa6
0000            405   _P3_0           BIT 0xb0
0000            406   _P3_1           BIT 0xb1
0000            407   _P3_2           BIT 0xb2
0000            408   _P3_3           BIT 0xb3
0000            409   _P3_4           BIT 0xb4
0000            410   _P3_7           BIT 0xb7
0000            411   _CCF0           BIT 0xd8
0000            412   _CCF1           BIT 0xd9
0000            413   _CCF2           BIT 0xda
0000            414   _CCF3           BIT 0xdb
0000            415   _CCF4           BIT 0xdc
0000            416   _CCF5           BIT 0xdd
0000            417   _CR             BIT 0xde
0000            418   _CF             BIT 0xdf
0000            419   _PARITY         BIT 0xd0
0000            420   _F1             BIT 0xd1
0000            421   _OV             BIT 0xd2
0000            422   _RS0            BIT 0xd3
0000            423   _RS1            BIT 0xd4
0000            424   _F0             BIT 0xd5
0000            425   _AC             BIT 0xd6
0000            426   _CY             BIT 0xd7
0000            427   _RI             BIT 0x98
0000            428   _TI             BIT 0x99
0000            429   _RB8            BIT 0x9a
0000            430   _TB8            BIT 0x9b
0000            431   _REN            BIT 0x9c
0000            432   _CE             BIT 0x9d
0000            433   _SMODE          BIT 0x9e
0000            434   _RI1            BIT 0xc8
0000            435   _TI1            BIT 0xc9
0000            436   _RBX1           BIT 0xca
0000            437   _TBX1           BIT 0xcb
0000            438   _REN1           BIT 0xcc
0000            439   _PERR1          BIT 0xcd
0000            440   _OVR1           BIT 0xce
0000            441   _SI             BIT 0xc0
0000            442   _ACK            BIT 0xc1
0000            443   _ARBLOST        BIT 0xc2
0000            444   _ACKRQ          BIT 0xc3
0000            445   _STO            BIT 0xc4
0000            446   _STA            BIT 0xc5
0000            447   _TXMODE         BIT 0xc6
0000            448   _MASTER         BIT 0xc7
0000            449   _SPIEN          BIT 0xf8
0000            450   _TXNF           BIT 0xf9
0000            451   _NSSMD0         BIT 0xfa
0000            452   _NSSMD1         BIT 0xfb
0000            453   _RXOVRN         BIT 0xfc
0000            454   _MODF           BIT 0xfd
0000            455   _WCOL           BIT 0xfe
0000            456   _SPIF           BIT 0xff
0000            457   _IT0            BIT 0x88
0000            458   _IE0            BIT 0x89
0000            459   _IT1            BIT 0x8a
0000            460   _IE1            BIT 0x8b
0000            461   _TR0            BIT 0x8c
0000            462   _TF0            BIT 0x8d
0000            463   _TR1            BIT 0x8e
0000            464   _TF1            BIT 0x8f
0000            465   _T2XCLK0        BIT 0xc8
0000            466   _T2XCLK1        BIT 0xc9
0000            467   _TR2            BIT 0xca
0000            468   _T2SPLIT        BIT 0xcb
0000            469   _TF2CEN         BIT 0xcc
0000            470   _TF2LEN         BIT 0xcd
0000            471   _TF2L           BIT 0xce
0000            472   _TF2H           BIT 0xcf
0000            473   _T4XCLK0        BIT 0x98
0000            474   _T4XCLK1        BIT 0x99
0000            475   _TR4            BIT 0x9a
0000            476   _T4SPLIT        BIT 0x9b
0000            477   _TF4CEN         BIT 0x9c
0000            478   _TF4LEN         BIT 0x9d
0000            479   _TF4L           BIT 0x9e
0000            480   _TF4H           BIT 0x9f
0000            481   _T5XCLK0        BIT 0xc0
0000            482   _T5XCLK1        BIT 0xc1
0000            483   _TR5            BIT 0xc2
0000            484   _T5SPLIT        BIT 0xc3
0000            485   _TF5CEN         BIT 0xc4
0000            486   _TF5LEN         BIT 0xc5
0000            487   _TF5L           BIT 0xc6
0000            488   _TF5H           BIT 0xc7
0000            489   _RIE            BIT 0xd8
0000            490   _RXTO0          BIT 0xd9
0000            491   _RXTO1          BIT 0xda
0000            492   _RFRQ           BIT 0xdb
0000            493   _TIE            BIT 0xdc
0000            494   _TXHOLD         BIT 0xdd
0000            495   _TXNF1          BIT 0xde
0000            496   _TFRQ           BIT 0xdf
0000            497   ;--------------------------------------------------------
0000            498   ; overlayable register banks
0000            499   ;--------------------------------------------------------
0000            500            rbank0 segment data overlay
0000            501   ;--------------------------------------------------------
0000            502   ; internal ram data
0000            503   ;--------------------------------------------------------
0000            504            rseg R_DSEG
0000            505   _pwm_count:
0000            506            ds 1
0001            507   _pwm_count1:
0001            508            ds 1
0002            509   _pwm_count2:
0002            510            ds 1
0003            511   _pwm_count3:
0003            512            ds 1
0004            513   _pwmSig1:
0004            514            ds 2
0006            515   _pwmSig2:
0006            516            ds 2
0008            517   _pwmSig3:
0008            518            ds 2
000A            519   _pwmSig4:
000A            520            ds 2
000C            521   _pwmSig5:
000C            522            ds 2
000E            523   _pwmSig6:
000E            524            ds 2
0010            525   _cartMoveF:
0010            526            ds 2
0012            527   _cartMoveB:
0012            528            ds 2
0014            529   _flag:
0014            530            ds 2
0016            531   _claw_flag:
0016            532            ds 2
0018            533   _main_v_1_79:
0018            534            ds 6
001E            535   _main_command_1_79:
001E            536            ds 4
0022            537   ;--------------------------------------------------------
0022            538   ; overlayable items in internal ram 
0022            539   ;--------------------------------------------------------
0000            540            rseg    R_OSEG
0000            541            rseg    R_OSEG
0000            542            rseg    R_OSEG
0000            543   _InitPinADC_PARM_2:
0000            544            ds 1
0001            545   ;--------------------------------------------------------
0001            546   ; indirectly addressable internal ram data
0001            547   ;--------------------------------------------------------
0000            548            rseg R_ISEG
0000            549   ;--------------------------------------------------------
0000            550   ; absolute internal ram data
0000            551   ;--------------------------------------------------------
0000            552            DSEG
0000            553   ;--------------------------------------------------------
0000            554   ; bit data
0000            555   ;--------------------------------------------------------
0000            556            rseg R_BSEG
0000            557   _Timer2_ISR_sloc0_1_0:
0000            558            DBIT    1
0001            559   ;--------------------------------------------------------
0001            560   ; paged external ram data
0001            561   ;--------------------------------------------------------
0000            562            rseg R_PSEG
0000            563   ;--------------------------------------------------------
0000            564   ; external ram data
0000            565   ;--------------------------------------------------------
0000            566            rseg R_XSEG
0000            567   ;--------------------------------------------------------
0000            568   ; absolute external ram data
0000            569   ;--------------------------------------------------------
0000            570            XSEG
0000            571   ;--------------------------------------------------------
0000            572   ; external initialized ram data
0000            573   ;--------------------------------------------------------
0000            574            rseg R_IXSEG
0000            575            rseg R_HOME
0000            576            rseg R_GSINIT
0000            577            rseg R_CSEG
0000            578   ;--------------------------------------------------------
0000            579   ; Reset entry point and interrupt vectors
0000            580   ;--------------------------------------------------------
0000            581            CSEG at 0x0000
0000 020100     582            ljmp    _crt0
002B            583            CSEG at 0x002b
002B 020100     584            ljmp    _Timer2_ISR
002E            585   ;--------------------------------------------------------
002E            586   ; global & static initialisations
002E            587   ;--------------------------------------------------------
0000            588            rseg R_HOME
0000            589            rseg R_GSINIT
0000            590            rseg R_GSINIT
0000            591   ;--------------------------------------------------------
0000            592   ; data variables initialization
0000            593   ;--------------------------------------------------------
0000            594            rseg R_DINIT
0000            595   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:40: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 75E000     596            mov     _pwm_count,#0x00
0003            597   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:41: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 75A000     598            mov     _pwm_count1,#0x00
0006            599   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:42: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 756000     600            mov     _pwm_count2,#0x00
0009            601   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:43: volatile unsigned char pwm_count3 = 0; //
0009 752000     602            mov     _pwm_count3,#0x00
000C            603   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:58: volatile int flag = 0;
000C E4         604            clr     a
000D F5E0       605            mov     _flag,a
000F F5E1       606            mov     (_flag + 1),a
0011            607   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:59: volatile int claw_flag = 0;
0011 E4         608            clr     a
0012 F5A0       609            mov     _claw_flag,a
0014 F5A1       610            mov     (_claw_flag + 1),a
0016            611            ; The linker places a 'ret' at the end of segment R_DINIT.
0016            612   ;--------------------------------------------------------
0016            613   ; code
0016            614   ;--------------------------------------------------------
0000            615            rseg R_CSEG
0000            616   ;------------------------------------------------------------
0000            617   ;Allocation info for local variables in function '_c51_external_startup'
0000            618   ;------------------------------------------------------------
0000            619   ;------------------------------------------------------------
0000            620   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:61: char _c51_external_startup(void)
0000            621   ;        -----------------------------------------
0000            622   ;         function _c51_external_startup
0000            623   ;        -----------------------------------------
0000            624   __c51_external_startup:
0000            625            using   0
0000            626   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:64: SFRPAGE = 0x00;
0000 75A700     627            mov     _SFRPAGE,#0x00
0003            628   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:65: WDTCN = 0xDE; //First key
0003 7597DE     629            mov     _WDTCN,#0xDE
0006            630   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:66: WDTCN = 0xAD; //Second key
0006 7597AD     631            mov     _WDTCN,#0xAD
0009            632   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:68: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     633            mov     _VDM0CN,#0x80
000C            634   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:69: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     635            mov     _RSTSRC,#0x06
000F            636   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:76: SFRPAGE = 0x10;
000F 75A710     637            mov     _SFRPAGE,#0x10
0012            638   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:77: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     639            mov     _PFE0CN,#0x20
0015            640   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:78: SFRPAGE = 0x00;
0015 75A700     641            mov     _SFRPAGE,#0x00
0018            642   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:99: CLKSEL = 0x00;
0018 75A900     643            mov     _CLKSEL,#0x00
001B            644   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:100: CLKSEL = 0x00;
001B 75A900     645            mov     _CLKSEL,#0x00
001E            646   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:101: while ((CLKSEL & 0x80) == 0);
001E            647   L002001?:
001E E5A9       648            mov     a,_CLKSEL
0020 30E7E8     649            jnb     acc.7,L002001?
0023            650   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:102: CLKSEL = 0x03;
0023 75A903     651            mov     _CLKSEL,#0x03
0026            652   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:103: CLKSEL = 0x03;
0026 75A903     653            mov     _CLKSEL,#0x03
0029            654   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:104: while ((CLKSEL & 0x80) == 0);
0029            655   L002004?:
0029 E5A9       656            mov     a,_CLKSEL
002B 30E768     657            jnb     acc.7,L002004?
002E            658   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:109: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     659            orl     _P0MDOUT,#0x10
0031            660   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:110: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     661            mov     _XBR0,#0x01
0034            662   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:111: XBR1 = 0X00;
0034 75E200     663            mov     _XBR1,#0x00
0037            664   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:112: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     665            mov     _XBR2,#0x40
003A            666   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:118: SCON0 = 0x10;
003A 759810     667            mov     _SCON0,#0x10
003D            668   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:119: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     669            mov     _TH1,#0xE6
0040            670   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:120: TL1 = TH1;      // Init Timer1
0040 858D8B     671            mov     _TL1,_TH1
0043            672   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:121: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     673            anl     _TMOD,#0x0F
0046            674   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:122: TMOD |= 0x20;
0046 438920     675            orl     _TMOD,#0x20
0049            676   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:123: TR1 = 1; // START Timer1
0049 D28E       677            setb    _TR1
004B            678   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:124: TI = 1;  // Indicate TX0 ready
004B D299       679            setb    _TI
004D            680   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:127: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     681            mov     _TMR2CN0,#0x00
0050            682   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:128: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     683            orl     _CKCON0,#0x10
0053            684   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:129: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     685            mov     _TMR2RL,#0xE0
0056 75CBE3     686            mov     (_TMR2RL >> 8),#0xE3
0059            687   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:130: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     688            mov     _TMR2,#0xFF
005C 75CFFF     689            mov     (_TMR2 >> 8),#0xFF
005F            690   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:131: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       691            setb    _ET2
0061            692   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:132: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       693            setb    _TR2
0063            694   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:149: EA = 1; // Enable interrupts
0063 D2AF       695            setb    _EA
0065            696   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:152: return 0;
0065 758200     697            mov     dpl,#0x00
0068 22         698            ret
0069            699   ;------------------------------------------------------------
0069            700   ;Allocation info for local variables in function 'Timer3us'
0069            701   ;------------------------------------------------------------
0069            702   ;us                        Allocated to registers r2 r3 
0069            703   ;i                         Allocated to registers r4 r5 
0069            704   ;------------------------------------------------------------
0069            705   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:154: void Timer3us(unsigned int us)
0069            706   ;        -----------------------------------------
0069            707   ;         function Timer3us
0069            708   ;        -----------------------------------------
0069            709   _Timer3us:
0069 AA82       710            mov     r2,dpl
006B AB83       711            mov     r3,dph
006D            712   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:159: CKCON0|=0b_0100_0000;
006D 438E40     713            orl     _CKCON0,#0x40
0070            714   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:161: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     715            mov     _TMR3RL,#0xB8
0073 7593FF     716            mov     (_TMR3RL >> 8),#0xFF
0076            717   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:162: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     718            mov     _TMR3,_TMR3RL
0079 859395     719            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            720   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:164: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     721            mov     _TMR3CN0,#0x04
007F            722   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:165: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       723            mov     r4,#0x00
0081 7D00       724            mov     r5,#0x00
0083            725   L003004?:
0083 C3         726            clr     c
0084 EC         727            mov     a,r4
0085 9A         728            subb    a,r2
0086 ED         729            mov     a,r5
0087 9B         730            subb    a,r3
0088 5001       731            jnc     L003007?
008A            732   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:167: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            733   L003001?:
008A E591       734            mov     a,_TMR3CN0
008C 30E7A8     735            jnb     acc.7,L003001?
008F            736   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:168: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     737            anl     _TMR3CN0,#0x7F
0092            738   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:165: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         739            inc     r4
0093 BC0028     740            cjne    r4,#0x00,L003004?
0096 0D         741            inc     r5
0097 8001       742            sjmp    L003004?
0099            743   L003007?:
0099            744   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:170: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     745            mov     _TMR3CN0,#0x00
009C 22         746            ret
009D            747   ;------------------------------------------------------------
009D            748   ;Allocation info for local variables in function 'waitms'
009D            749   ;------------------------------------------------------------
009D            750   ;ms                        Allocated to registers r2 r3 
009D            751   ;j                         Allocated to registers r4 r5 
009D            752   ;k                         Allocated to registers r6 
009D            753   ;------------------------------------------------------------
009D            754   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:172: void waitms (unsigned int ms)
009D            755   ;        -----------------------------------------
009D            756   ;         function waitms
009D            757   ;        -----------------------------------------
009D            758   _waitms:
009D AA82       759            mov     r2,dpl
009F AB83       760            mov     r3,dph
00A1            761   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:176: for(j=0; j<ms; j++)
00A1 7C00       762            mov     r4,#0x00
00A3 7D00       763            mov     r5,#0x00
00A5            764   L004005?:
00A5 C3         765            clr     c
00A6 EC         766            mov     a,r4
00A7 9A         767            subb    a,r2
00A8 ED         768            mov     a,r5
00A9 9B         769            subb    a,r3
00AA 5001       770            jnc     L004009?
00AC            771   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:177: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       772            mov     r6,#0x00
00AE            773   L004001?:
00AE BE04A8     774            cjne    r6,#0x04,L004018?
00B1            775   L004018?:
00B1 5001       776            jnc     L004007?
00B3 9000FA     777            mov     dptr,#0x00FA
00B6 C002       778            push    ar2
00B8 C003       779            push    ar3
00BA C004       780            push    ar4
00BC C005       781            push    ar5
00BE C006       782            push    ar6
00C0 120100     783            lcall   _Timer3us
00C3 D006       784            pop     ar6
00C5 D005       785            pop     ar5
00C7 D004       786            pop     ar4
00C9 D003       787            pop     ar3
00CB D002       788            pop     ar2
00CD 0E         789            inc     r6
00CE 8001       790            sjmp    L004001?
00D0            791   L004007?:
00D0            792   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:176: for(j=0; j<ms; j++)
00D0 0C         793            inc     r4
00D1 BC00E8     794            cjne    r4,#0x00,L004005?
00D4 0D         795            inc     r5
00D5 8001       796            sjmp    L004005?
00D7            797   L004009?:
00D7 22         798            ret
00D8            799   ;------------------------------------------------------------
00D8            800   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            801   ;------------------------------------------------------------
00D8            802   ;pin                       Allocated to registers 
00D8            803   ;------------------------------------------------------------
00D8            804   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:180: unsigned int ADC_at_Pin(unsigned char pin)
00D8            805   ;        -----------------------------------------
00D8            806   ;         function ADC_at_Pin
00D8            807   ;        -----------------------------------------
00D8            808   _ADC_at_Pin:
00D8 8582BB     809            mov     _ADC0MX,dpl
00DB            810   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:183: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       811            setb    _ADBUSY
00DD            812   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:184: while (ADBUSY); // Wait for dummy conversion to finish
00DD            813   L005001?:
00DD 20EC28     814            jb      _ADBUSY,L005001?
00E0            815   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:185: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       816            setb    _ADBUSY
00E2            817   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:186: while (ADBUSY); // Wait for conversion to complete
00E2            818   L005004?:
00E2 20EC68     819            jb      _ADBUSY,L005004?
00E5            820   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:187: return (ADC0);
00E5 85BD82     821            mov     dpl,_ADC0
00E8 85BE83     822            mov     dph,(_ADC0 >> 8)
00EB 22         823            ret
00EC            824   ;------------------------------------------------------------
00EC            825   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            826   ;------------------------------------------------------------
00EC            827   ;------------------------------------------------------------
00EC            828   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:191: void Timer2_ISR(void) interrupt 5
00EC            829   ;        -----------------------------------------
00EC            830   ;         function Timer2_ISR
00EC            831   ;        -----------------------------------------
00EC            832   _Timer2_ISR:
00EC C0E0       833            push    acc
00EE C002       834            push    ar2
00F0 C003       835            push    ar3
00F2 C0D0       836            push    psw
00F4 75D000     837            mov     psw,#0x00
00F7            838   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:193: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       839            clr     _TF2H
00F9            840   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:195: pwm_count++;
00F9 05E0       841            inc     _pwm_count
00FB            842   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:196: if (pwm_count>100)
00FB E5E0       843            mov     a,_pwm_count
00FD 249B       844            add     a,#0xff - 0x64
00FF 5001       845            jnc     L006002?
0101            846   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:197: pwm_count = 0;
0101 75E000     847            mov     _pwm_count,#0x00
0104            848   L006002?:
0104            849   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:200: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AAE0       850            mov     r2,_pwm_count
0106 7B00       851            mov     r3,#0x00
0108 C3         852            clr     c
0109 E5E0       853            mov     a,_pwmSig1
010B 9A         854            subb    a,r2
010C E5E1       855            mov     a,(_pwmSig1 + 1)
010E 9B         856            subb    a,r3
010F 9268       857            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         858            cpl     c
0112 9294       859            mov     _P1_4,c
0114            860   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:201: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AAE0       861            mov     r2,_pwm_count
0116 7B00       862            mov     r3,#0x00
0118 C3         863            clr     c
0119 E5A0       864            mov     a,_pwmSig2
011B 9A         865            subb    a,r2
011C E5A1       866            mov     a,(_pwmSig2 + 1)
011E 9B         867            subb    a,r3
011F 9268       868            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         869            cpl     c
0122 9293       870            mov     _P1_3,c
0124            871   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:203: motorL1 = pwm_count>pwmSig1 ? 0 : 1;
0124 AAE0       872            mov     r2,_pwm_count
0126 7B00       873            mov     r3,#0x00
0128 C3         874            clr     c
0129 E5E0       875            mov     a,_pwmSig1
012B 9A         876            subb    a,r2
012C E5E1       877            mov     a,(_pwmSig1 + 1)
012E 9B         878            subb    a,r3
012F 9268       879            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         880            cpl     c
0132 9296       881            mov     _P1_6,c
0134            882   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:204: motorL2 = pwm_count>pwmSig2 ? 0 : 1;
0134 AAE0       883            mov     r2,_pwm_count
0136 7B00       884            mov     r3,#0x00
0138 C3         885            clr     c
0139 E5A0       886            mov     a,_pwmSig2
013B 9A         887            subb    a,r2
013C E5A1       888            mov     a,(_pwmSig2 + 1)
013E 9B         889            subb    a,r3
013F 9268       890            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         891            cpl     c
0142 9295       892            mov     _P1_5,c
0144 D0D0       893            pop     psw
0146 D003       894            pop     ar3
0148 D002       895            pop     ar2
014A D0E0       896            pop     acc
014C 32         897            reti
014D            898   ;        eliminated unneeded push/pop dpl
014D            899   ;        eliminated unneeded push/pop dph
014D            900   ;        eliminated unneeded push/pop b
014D            901   ;------------------------------------------------------------
014D            902   ;Allocation info for local variables in function 'InitADC'
014D            903   ;------------------------------------------------------------
014D            904   ;------------------------------------------------------------
014D            905   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:236: void InitADC(void)
014D            906   ;        -----------------------------------------
014D            907   ;         function InitADC
014D            908   ;        -----------------------------------------
014D            909   _InitADC:
014D            910   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:238: SFRPAGE = 0x00;
014D 75A700     911            mov     _SFRPAGE,#0x00
0150            912   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:239: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0150 75B280     913            mov     _ADC0CN1,#0x80
0153            914   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:240: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0153 75BCF8     915            mov     _ADC0CF0,#0xF8
0156            916   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:241: ADC0CF1 = 0b_0_0_011110; // Same as default for now
0156 75B91E     917            mov     _ADC0CF1,#0x1E
0159            918   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:242: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0159 75E800     919            mov     _ADC0CN0,#0x00
015C            920   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:243: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
015C 75DF3F     921            mov     _ADC0CF2,#0x3F
015F            922   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:244: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
015F 75B300     923            mov     _ADC0CN2,#0x00
0162            924   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:245: ADEN = 1; // Enable ADC
0162 D2EF       925            setb    _ADEN
0164 22         926            ret
0165            927   ;------------------------------------------------------------
0165            928   ;Allocation info for local variables in function 'TIMER0_Init'
0165            929   ;------------------------------------------------------------
0165            930   ;------------------------------------------------------------
0165            931   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:247: void TIMER0_Init(void)
0165            932   ;        -----------------------------------------
0165            933   ;         function TIMER0_Init
0165            934   ;        -----------------------------------------
0165            935   _TIMER0_Init:
0165            936   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:249: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0165 5389F0     937            anl     _TMOD,#0xF0
0168            938   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:250: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0168 438901     939            orl     _TMOD,#0x01
016B            940   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:251: TR0 = 0; // Stop Timer/Counter 0
016B C28C       941            clr     _TR0
016D 22         942            ret
016E            943   ;------------------------------------------------------------
016E            944   ;Allocation info for local variables in function 'Volts_at_Pin'
016E            945   ;------------------------------------------------------------
016E            946   ;pin                       Allocated to registers r2 
016E            947   ;------------------------------------------------------------
016E            948   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:256: float Volts_at_Pin(unsigned char pin)
016E            949   ;        -----------------------------------------
016E            950   ;         function Volts_at_Pin
016E            951   ;        -----------------------------------------
016E            952   _Volts_at_Pin:
016E            953   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:258: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
016E 120100     954            lcall   _ADC_at_Pin
0171 120100     955            lcall   ___uint2fs
0174 AA82       956            mov     r2,dpl
0176 AB83       957            mov     r3,dph
0178 ACF0       958            mov     r4,b
017A FD         959            mov     r5,a
017B C002       960            push    ar2
017D C003       961            push    ar3
017F C004       962            push    ar4
0181 C005       963            push    ar5
0183 906C8B     964            mov     dptr,#0x6C8B
0186 75F053     965            mov     b,#0x53
0189 7440       966            mov     a,#0x40
018B 120100     967            lcall   ___fsmul
018E AA82       968            mov     r2,dpl
0190 AB83       969            mov     r3,dph
0192 ACF0       970            mov     r4,b
0194 FD         971            mov     r5,a
0195 E581       972            mov     a,sp
0197 24FC       973            add     a,#0xfc
0199 F581       974            mov     sp,a
019B E4         975            clr     a
019C C0E0       976            push    acc
019E 74FC       977            mov     a,#0xFC
01A0 C0E0       978            push    acc
01A2 747F       979            mov     a,#0x7F
01A4 C0E0       980            push    acc
01A6 7446       981            mov     a,#0x46
01A8 C0E0       982            push    acc
01AA 8A82       983            mov     dpl,r2
01AC 8B83       984            mov     dph,r3
01AE 8CF0       985            mov     b,r4
01B0 ED         986            mov     a,r5
01B1 120100     987            lcall   ___fsdiv
01B4 AA82       988            mov     r2,dpl
01B6 AB83       989            mov     r3,dph
01B8 ACF0       990            mov     r4,b
01BA FD         991            mov     r5,a
01BB E581       992            mov     a,sp
01BD 24FC       993            add     a,#0xfc
01BF F581       994            mov     sp,a
01C1 8A82       995            mov     dpl,r2
01C3 8B83       996            mov     dph,r3
01C5 8CF0       997            mov     b,r4
01C7 ED         998            mov     a,r5
01C8 22         999            ret
01C9           1000   ;------------------------------------------------------------
01C9           1001   ;Allocation info for local variables in function 'InitPinADC'
01C9           1002   ;------------------------------------------------------------
01C9           1003   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01C9           1004   ;portno                    Allocated to registers r2 
01C9           1005   ;mask                      Allocated to registers r3 
01C9           1006   ;------------------------------------------------------------
01C9           1007   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:260: void InitPinADC(unsigned char portno, unsigned char pinno)
01C9           1008   ;        -----------------------------------------
01C9           1009   ;         function InitPinADC
01C9           1010   ;        -----------------------------------------
01C9           1011   _InitPinADC:
01C9 AA82      1012            mov     r2,dpl
01CB           1013   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:264: mask = 1 << pinno;
01CB 8550F0    1014            mov     b,_InitPinADC_PARM_2
01CE 05F0      1015            inc     b
01D0 7401      1016            mov     a,#0x01
01D2 8001      1017            sjmp    L010013?
01D4           1018   L010011?:
01D4 25E0      1019            add     a,acc
01D6           1020   L010013?:
01D6 D5F0A8    1021            djnz    b,L010011?
01D9 FB        1022            mov     r3,a
01DA           1023   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:266: SFRPAGE = 0x20;
01DA 75A720    1024            mov     _SFRPAGE,#0x20
01DD           1025   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:267: switch (portno)
01DD BA00E8    1026            cjne    r2,#0x00,L010014?
01E0 8001      1027            sjmp    L010001?
01E2           1028   L010014?:
01E2 BA0168    1029            cjne    r2,#0x01,L010015?
01E5 8001      1030            sjmp    L010002?
01E7           1031   L010015?:
01E7           1032   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:269: case 0:
01E7 BA02E8    1033            cjne    r2,#0x02,L010005?
01EA 8001      1034            sjmp    L010003?
01EC           1035   L010001?:
01EC           1036   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:270: P0MDIN &= (~mask); // Set pin as analog input
01EC EB        1037            mov     a,r3
01ED F4        1038            cpl     a
01EE FA        1039            mov     r2,a
01EF 52F1      1040            anl     _P0MDIN,a
01F1           1041   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:271: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01F1 EB        1042            mov     a,r3
01F2 42D4      1043            orl     _P0SKIP,a
01F4           1044   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:272: break;
01F4           1045   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:273: case 1:
01F4 8001      1046            sjmp    L010005?
01F6           1047   L010002?:
01F6           1048   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:274: P1MDIN &= (~mask); // Set pin as analog input
01F6 EB        1049            mov     a,r3
01F7 F4        1050            cpl     a
01F8 FA        1051            mov     r2,a
01F9 52F2      1052            anl     _P1MDIN,a
01FB           1053   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:275: P1SKIP |= mask; // Skip Crossbar decoding for this pin
01FB EB        1054            mov     a,r3
01FC 42D5      1055            orl     _P1SKIP,a
01FE           1056   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:276: break;
01FE           1057   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:277: case 2:
01FE 8001      1058            sjmp    L010005?
0200           1059   L010003?:
0200           1060   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:278: P2MDIN &= (~mask); // Set pin as analog input
0200 EB        1061            mov     a,r3
0201 F4        1062            cpl     a
0202 FA        1063            mov     r2,a
0203 52F3      1064            anl     _P2MDIN,a
0205           1065   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:279: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0205 EB        1066            mov     a,r3
0206 42CC      1067            orl     _P2SKIP,a
0208           1068   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:283: }
0208           1069   L010005?:
0208           1070   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:284: SFRPAGE = 0x00;
0208 75A700    1071            mov     _SFRPAGE,#0x00
020B 22        1072            ret
020C           1073   ;------------------------------------------------------------
020C           1074   ;Allocation info for local variables in function 'PWMStraight'
020C           1075   ;------------------------------------------------------------
020C           1076   ;------------------------------------------------------------
020C           1077   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:293: void PWMStraight(void) {
020C           1078   ;        -----------------------------------------
020C           1079   ;         function PWMStraight
020C           1080   ;        -----------------------------------------
020C           1081   _PWMStraight:
020C           1082   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:294: pwmSig1 = 99;
020C 75E063    1083            mov     _pwmSig1,#0x63
020F E4        1084            clr     a
0210 F5E1      1085            mov     (_pwmSig1 + 1),a
0212           1086   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:295: pwmSig2 = 0;
0212           1087   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:297: pwmSig3 = 0;
0212 E4        1088            clr     a
0213 F5A0      1089            mov     _pwmSig2,a
0215 F5A1      1090            mov     (_pwmSig2 + 1),a
0217 F560      1091            mov     _pwmSig3,a
0219 F561      1092            mov     (_pwmSig3 + 1),a
021B           1093   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:298: pwmSig4 =99;
021B 752063    1094            mov     _pwmSig4,#0x63
021E E4        1095            clr     a
021F F521      1096            mov     (_pwmSig4 + 1),a
0221 22        1097            ret
0222           1098   ;------------------------------------------------------------
0222           1099   ;Allocation info for local variables in function 'PWMback'
0222           1100   ;------------------------------------------------------------
0222           1101   ;------------------------------------------------------------
0222           1102   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:301: void PWMback(void) {
0222           1103   ;        -----------------------------------------
0222           1104   ;         function PWMback
0222           1105   ;        -----------------------------------------
0222           1106   _PWMback:
0222           1107   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:302: pwmSig1 = 0;
0222 E4        1108            clr     a
0223 F5E0      1109            mov     _pwmSig1,a
0225 F5E1      1110            mov     (_pwmSig1 + 1),a
0227           1111   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:303: pwmSig2 = 99;
0227 75A063    1112            mov     _pwmSig2,#0x63
022A E4        1113            clr     a
022B F5A1      1114            mov     (_pwmSig2 + 1),a
022D           1115   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:305: pwmSig3 = 99;
022D 756063    1116            mov     _pwmSig3,#0x63
0230 E4        1117            clr     a
0231 F561      1118            mov     (_pwmSig3 + 1),a
0233           1119   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:306: pwmSig4 = 0;
0233 E4        1120            clr     a
0234 F520      1121            mov     _pwmSig4,a
0236 F521      1122            mov     (_pwmSig4 + 1),a
0238 22        1123            ret
0239           1124   ;------------------------------------------------------------
0239           1125   ;Allocation info for local variables in function 'PWMLeft'
0239           1126   ;------------------------------------------------------------
0239           1127   ;------------------------------------------------------------
0239           1128   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:309: void PWMLeft(void) {
0239           1129   ;        -----------------------------------------
0239           1130   ;         function PWMLeft
0239           1131   ;        -----------------------------------------
0239           1132   _PWMLeft:
0239           1133   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:310: pwmSig1 = 0;
0239           1134   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:311: pwmSig2 = 0;
0239 E4        1135            clr     a
023A F5E0      1136            mov     _pwmSig1,a
023C F5E1      1137            mov     (_pwmSig1 + 1),a
023E F5A0      1138            mov     _pwmSig2,a
0240 F5A1      1139            mov     (_pwmSig2 + 1),a
0242           1140   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:313: pwmSig3 = 70;
0242 756046    1141            mov     _pwmSig3,#0x46
0245 E4        1142            clr     a
0246 F561      1143            mov     (_pwmSig3 + 1),a
0248           1144   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:314: pwmSig4 = 0;
0248 E4        1145            clr     a
0249 F520      1146            mov     _pwmSig4,a
024B F521      1147            mov     (_pwmSig4 + 1),a
024D 22        1148            ret
024E           1149   ;------------------------------------------------------------
024E           1150   ;Allocation info for local variables in function 'PWMRight'
024E           1151   ;------------------------------------------------------------
024E           1152   ;------------------------------------------------------------
024E           1153   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:317: void PWMRight(void) {
024E           1154   ;        -----------------------------------------
024E           1155   ;         function PWMRight
024E           1156   ;        -----------------------------------------
024E           1157   _PWMRight:
024E           1158   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:318: pwmSig1 = 99;
024E 75E063    1159            mov     _pwmSig1,#0x63
0251 E4        1160            clr     a
0252 F5E1      1161            mov     (_pwmSig1 + 1),a
0254           1162   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:319: pwmSig2 = 0;
0254           1163   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:321: pwmSig3 = 0;
0254           1164   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:322: pwmSig4 = 0;
0254 E4        1165            clr     a
0255 F5A0      1166            mov     _pwmSig2,a
0257 F5A1      1167            mov     (_pwmSig2 + 1),a
0259 F560      1168            mov     _pwmSig3,a
025B F561      1169            mov     (_pwmSig3 + 1),a
025D F520      1170            mov     _pwmSig4,a
025F F521      1171            mov     (_pwmSig4 + 1),a
0261 22        1172            ret
0262           1173   ;------------------------------------------------------------
0262           1174   ;Allocation info for local variables in function 'PWMStop'
0262           1175   ;------------------------------------------------------------
0262           1176   ;------------------------------------------------------------
0262           1177   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:326: void PWMStop(void) {
0262           1178   ;        -----------------------------------------
0262           1179   ;         function PWMStop
0262           1180   ;        -----------------------------------------
0262           1181   _PWMStop:
0262           1182   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:327: pwmSig1 = 0;
0262           1183   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:328: pwmSig2 = 0;
0262           1184   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:330: pwmSig3 = 0;
0262           1185   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:331: pwmSig4 = 0;
0262 E4        1186            clr     a
0263 F5E0      1187            mov     _pwmSig1,a
0265 F5E1      1188            mov     (_pwmSig1 + 1),a
0267 F5A0      1189            mov     _pwmSig2,a
0269 F5A1      1190            mov     (_pwmSig2 + 1),a
026B F560      1191            mov     _pwmSig3,a
026D F561      1192            mov     (_pwmSig3 + 1),a
026F F520      1193            mov     _pwmSig4,a
0271 F521      1194            mov     (_pwmSig4 + 1),a
0273 22        1195            ret
0274           1196   ;------------------------------------------------------------
0274           1197   ;Allocation info for local variables in function 'intervalcalc'
0274           1198   ;------------------------------------------------------------
0274           1199   ;period1                   Allocated to registers r2 r3 r4 r5 
0274           1200   ;overflow_count            Allocated to registers r2 r3 
0274           1201   ;------------------------------------------------------------
0274           1202   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:335: float intervalcalc(void) {
0274           1203   ;        -----------------------------------------
0274           1204   ;         function intervalcalc
0274           1205   ;        -----------------------------------------
0274           1206   _intervalcalc:
0274           1207   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:339: TL0=0; 
0274 758A00    1208            mov     _TL0,#0x00
0277           1209   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:340: TH0=0;
0277 758C00    1210            mov     _TH0,#0x00
027A           1211   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:341: TF0=0;
027A C28D      1212            clr     _TF0
027C           1213   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:343: TR0=0;
027C C28C      1214            clr     _TR0
027E           1215   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:345: while(P1_7!=0); // Wait for the signal to be zero
027E           1216   L016001?:
027E 209768    1217            jb      _P1_7,L016001?
0281           1218   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:346: while(P1_7!=1); // Wait for the signal to be one
0281           1219   L016004?:
0281 3097A8    1220            jnb     _P1_7,L016004?
0284           1221   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:347: TR0=1; // Start the timer
0284 D28C      1222            setb    _TR0
0286           1223   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:348: while(P1_7!=0) // Wait for the signal to be zero
0286 7A00      1224            mov     r2,#0x00
0288 7B00      1225            mov     r3,#0x00
028A           1226   L016009?:
028A 309728    1227            jnb     _P1_7,L016026?
028D           1228   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:350: if(TF0==1) // Did the 16-bit timer overflow?
028D           1229   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:352: TF0=0;
028D 108D68    1230            jbc     _TF0,L016033?
0290 8001      1231            sjmp    L016009?
0292           1232   L016033?:
0292           1233   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:353: overflow_count++;
0292 0A        1234            inc     r2
0293 BA00E8    1235            cjne    r2,#0x00,L016009?
0296 0B        1236            inc     r3
0297           1237   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:357: while(P1_7!=1) // Wait for the signal to be one
0297 8001      1238            sjmp    L016009?
0299           1239   L016026?:
0299           1240   L016014?:
0299 2097E8    1241            jb      _P1_7,L016016?
029C           1242   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:359: if(TF0==1) // Did the 16-bit timer overflow?
029C           1243   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:361: TF0=0;
029C 108D28    1244            jbc     _TF0,L016035?
029F 8001      1245            sjmp    L016014?
02A1           1246   L016035?:
02A1           1247   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:362: overflow_count++;
02A1 0A        1248            inc     r2
02A2 BA00A8    1249            cjne    r2,#0x00,L016014?
02A5 0B        1250            inc     r3
02A6 8001      1251            sjmp    L016014?
02A8           1252   L016016?:
02A8           1253   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:366: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
02A8 C28C      1254            clr     _TR0
02AA           1255   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:367: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
02AA 8A82      1256            mov     dpl,r2
02AC 8B83      1257            mov     dph,r3
02AE 120100    1258            lcall   ___sint2fs
02B1 AA82      1259            mov     r2,dpl
02B3 AB83      1260            mov     r3,dph
02B5 ACF0      1261            mov     r4,b
02B7 FD        1262            mov     r5,a
02B8 C002      1263            push    ar2
02BA C003      1264            push    ar3
02BC C004      1265            push    ar4
02BE C005      1266            push    ar5
02C0 900000    1267            mov     dptr,#0x0000
02C3 75F080    1268            mov     b,#0x80
02C6 7447      1269            mov     a,#0x47
02C8 120100    1270            lcall   ___fsmul
02CB AA82      1271            mov     r2,dpl
02CD AB83      1272            mov     r3,dph
02CF ACF0      1273            mov     r4,b
02D1 FD        1274            mov     r5,a
02D2 E581      1275            mov     a,sp
02D4 24FC      1276            add     a,#0xfc
02D6 F581      1277            mov     sp,a
02D8 858C82    1278            mov     dpl,_TH0
02DB C002      1279            push    ar2
02DD C003      1280            push    ar3
02DF C004      1281            push    ar4
02E1 C005      1282            push    ar5
02E3 120100    1283            lcall   ___uchar2fs
02E6 AE82      1284            mov     r6,dpl
02E8 AF83      1285            mov     r7,dph
02EA A8F0      1286            mov     r0,b
02EC F9        1287            mov     r1,a
02ED C006      1288            push    ar6
02EF C007      1289            push    ar7
02F1 C000      1290            push    ar0
02F3 C001      1291            push    ar1
02F5 900000    1292            mov     dptr,#0x0000
02F8 75F080    1293            mov     b,#0x80
02FB 7443      1294            mov     a,#0x43
02FD 120100    1295            lcall   ___fsmul
0300 AE82      1296            mov     r6,dpl
0302 AF83      1297            mov     r7,dph
0304 A8F0      1298            mov     r0,b
0306 F9        1299            mov     r1,a
0307 E581      1300            mov     a,sp
0309 24FC      1301            add     a,#0xfc
030B F581      1302            mov     sp,a
030D D005      1303            pop     ar5
030F D004      1304            pop     ar4
0311 D003      1305            pop     ar3
0313 D002      1306            pop     ar2
0315 C006      1307            push    ar6
0317 C007      1308            push    ar7
0319 C000      1309            push    ar0
031B C001      1310            push    ar1
031D 8A82      1311            mov     dpl,r2
031F 8B83      1312            mov     dph,r3
0321 8CF0      1313            mov     b,r4
0323 ED        1314            mov     a,r5
0324 120100    1315            lcall   ___fsadd
0327 AA82      1316            mov     r2,dpl
0329 AB83      1317            mov     r3,dph
032B ACF0      1318            mov     r4,b
032D FD        1319            mov     r5,a
032E E581      1320            mov     a,sp
0330 24FC      1321            add     a,#0xfc
0332 F581      1322            mov     sp,a
0334 AE8A      1323            mov     r6,_TL0
0336 7F00      1324            mov     r7,#0x00
0338 8E82      1325            mov     dpl,r6
033A 8F83      1326            mov     dph,r7
033C C002      1327            push    ar2
033E C003      1328            push    ar3
0340 C004      1329            push    ar4
0342 C005      1330            push    ar5
0344 120100    1331            lcall   ___sint2fs
0347 AE82      1332            mov     r6,dpl
0349 AF83      1333            mov     r7,dph
034B A8F0      1334            mov     r0,b
034D F9        1335            mov     r1,a
034E D005      1336            pop     ar5
0350 D004      1337            pop     ar4
0352 D003      1338            pop     ar3
0354 D002      1339            pop     ar2
0356 C006      1340            push    ar6
0358 C007      1341            push    ar7
035A C000      1342            push    ar0
035C C001      1343            push    ar1
035E 8A82      1344            mov     dpl,r2
0360 8B83      1345            mov     dph,r3
0362 8CF0      1346            mov     b,r4
0364 ED        1347            mov     a,r5
0365 120100    1348            lcall   ___fsadd
0368 AA82      1349            mov     r2,dpl
036A AB83      1350            mov     r3,dph
036C ACF0      1351            mov     r4,b
036E FD        1352            mov     r5,a
036F E581      1353            mov     a,sp
0371 24FC      1354            add     a,#0xfc
0373 F581      1355            mov     sp,a
0375 C002      1356            push    ar2
0377 C003      1357            push    ar3
0379 C004      1358            push    ar4
037B C005      1359            push    ar5
037D 90F4FC    1360            mov     dptr,#0xF4FC
0380 75F032    1361            mov     b,#0x32
0383 7434      1362            mov     a,#0x34
0385 120100    1363            lcall   ___fsmul
0388 AA82      1364            mov     r2,dpl
038A AB83      1365            mov     r3,dph
038C ACF0      1366            mov     r4,b
038E FD        1367            mov     r5,a
038F E581      1368            mov     a,sp
0391 24FC      1369            add     a,#0xfc
0393 F581      1370            mov     sp,a
0395           1371   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:369: return period1*1000; //return period of high pulse in seconds
0395 C002      1372            push    ar2
0397 C003      1373            push    ar3
0399 C004      1374            push    ar4
039B C005      1375            push    ar5
039D 900000    1376            mov     dptr,#0x0000
03A0 75F07A    1377            mov     b,#0x7A
03A3 7444      1378            mov     a,#0x44
03A5 120100    1379            lcall   ___fsmul
03A8 AA82      1380            mov     r2,dpl
03AA AB83      1381            mov     r3,dph
03AC ACF0      1382            mov     r4,b
03AE FD        1383            mov     r5,a
03AF E581      1384            mov     a,sp
03B1 24FC      1385            add     a,#0xfc
03B3 F581      1386            mov     sp,a
03B5 8A82      1387            mov     dpl,r2
03B7 8B83      1388            mov     dph,r3
03B9 8CF0      1389            mov     b,r4
03BB ED        1390            mov     a,r5
03BC 22        1391            ret
03BD           1392   ;------------------------------------------------------------
03BD           1393   ;Allocation info for local variables in function 'main'
03BD           1394   ;------------------------------------------------------------
03BD           1395   ;v                         Allocated with name '_main_v_1_79'
03BD           1396   ;sig1                      Allocated to registers 
03BD           1397   ;sig2                      Allocated to registers 
03BD           1398   ;peak                      Allocated to registers r4 r5 r6 r7 
03BD           1399   ;voltspeak                 Allocated with name '_main_voltspeak_1_79'
03BD           1400   ;periodpwm                 Allocated to registers 
03BD           1401   ;command                   Allocated with name '_main_command_1_79'
03BD           1402   ;period                    Allocated with name '_main_period_1_79'
03BD           1403   ;overflow_count            Allocated with name '_main_overflow_count_1_79'
03BD           1404   ;i                         Allocated to registers r2 r3 
03BD           1405   ;------------------------------------------------------------
03BD           1406   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:372: void main(void)
03BD           1407   ;        -----------------------------------------
03BD           1408   ;         function main
03BD           1409   ;        -----------------------------------------
03BD           1410   _main:
03BD           1411   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:380: char command[4] = {0,0,0,0};
03BD 751800    1412            mov     _main_command_1_79,#0x00
03C0 751900    1413            mov     (_main_command_1_79 + 0x0001),#0x00
03C3 751A00    1414            mov     (_main_command_1_79 + 0x0002),#0x00
03C6 751B00    1415            mov     (_main_command_1_79 + 0x0003),#0x00
03C9           1416   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:384: TIMER0_Init();
03C9 120100    1417            lcall   _TIMER0_Init
03CC           1418   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:391: for (i = 0; i<4;i++)
03CC           1419   L017020?:
03CC 7A00      1420            mov     r2,#0x00
03CE 7B00      1421            mov     r3,#0x00
03D0           1422   L017012?:
03D0 C3        1423            clr     c
03D1 EA        1424            mov     a,r2
03D2 9404      1425            subb    a,#0x04
03D4 EB        1426            mov     a,r3
03D5 6480      1427            xrl     a,#0x80
03D7 9480      1428            subb    a,#0x80
03D9 5001      1429            jnc     L017015?
03DB           1430   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:394: peak=Volts_at_Pin(QFP32_MUX_P1_7);
03DB 75820D    1431            mov     dpl,#0x0D
03DE C002      1432            push    ar2
03E0 C003      1433            push    ar3
03E2 120100    1434            lcall   _Volts_at_Pin
03E5 AC82      1435            mov     r4,dpl
03E7 AD83      1436            mov     r5,dph
03E9 AEF0      1437            mov     r6,b
03EB FF        1438            mov     r7,a
03EC           1439   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:395: if (peak > 0.5)
03EC E4        1440            clr     a
03ED C0E0      1441            push    acc
03EF C0E0      1442            push    acc
03F1 C0E0      1443            push    acc
03F3 743F      1444            mov     a,#0x3F
03F5 C0E0      1445            push    acc
03F7 8C82      1446            mov     dpl,r4
03F9 8D83      1447            mov     dph,r5
03FB 8EF0      1448            mov     b,r6
03FD EF        1449            mov     a,r7
03FE 120100    1450            lcall   ___fsgt
0401 AC82      1451            mov     r4,dpl
0403 E581      1452            mov     a,sp
0405 24FC      1453            add     a,#0xfc
0407 F581      1454            mov     sp,a
0409 D003      1455            pop     ar3
040B D002      1456            pop     ar2
040D EC        1457            mov     a,r4
040E 6001      1458            jz      L017002?
0410           1459   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:397: command[i] = '1';
0410 EA        1460            mov     a,r2
0411 2418      1461            add     a,#_main_command_1_79
0413 F8        1462            mov     r0,a
0414 7631      1463            mov     @r0,#0x31
0416 8001      1464            sjmp    L017003?
0418           1465   L017002?:
0418           1466   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:400: command[i] = '0';
0418 EA        1467            mov     a,r2
0419 2418      1468            add     a,#_main_command_1_79
041B F8        1469            mov     r0,a
041C 7630      1470            mov     @r0,#0x30
041E           1471   L017003?:
041E           1472   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:401: Timer3us(200);
041E 9000C8    1473            mov     dptr,#0x00C8
0421 C002      1474            push    ar2
0423 C003      1475            push    ar3
0425 120100    1476            lcall   _Timer3us
0428 D003      1477            pop     ar3
042A D002      1478            pop     ar2
042C           1479   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:391: for (i = 0; i<4;i++)
042C 0A        1480            inc     r2
042D BA0068    1481            cjne    r2,#0x00,L017012?
0430 0B        1482            inc     r3
0431 8001      1483            sjmp    L017012?
0433           1484   L017015?:
0433           1485   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:404: if (command[0] == '1' && command[1] == '0' && command[2] == '0' && command[3] == '0')
0433 7431      1486            mov     a,#0x31
0435 B51828    1487            cjne    a,_main_command_1_79,L017020?
0438 7430      1488            mov     a,#0x30
043A B51928    1489            cjne    a,(_main_command_1_79 + 0x0001),L017020?
043D 7430      1490            mov     a,#0x30
043F B51A28    1491            cjne    a,(_main_command_1_79 + 0x0002),L017020?
0442 7430      1492            mov     a,#0x30
0444 B51BA8    1493            cjne    a,(_main_command_1_79 + 0x0003),L017036?
0447 8001      1494            sjmp    L017037?
0449           1495   L017036?:
0449 020100    1496            ljmp    L017020?
044C           1497   L017037?:
044C           1498   ;        C:\Users\Bruno\Documents\GitHub\ElecRobot\robotControl.c:406: PWMStop();
044C 120100    1499            lcall   _PWMStop
044F 020100    1500            ljmp    L017020?
0452           1501            rseg R_CSEG
0452           1502   
0000           1503            rseg R_XINIT
0000           1504   
0000           1505            rseg R_CONST
0000           1506   
002E           1507            CSEG
002E           1508   
002E           1509   end
