0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Apr 03 20:52:27 2018
0000              5   ;--------------------------------------------------------
                  5   $name idkwhatsgoingon_new
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _arrayEqual_PARM_3
0000             28            public _arrayEqual_PARM_2
0000             29            public _InitPinADC_PARM_2
0000             30            public _main
0000             31            public _laserPattern
0000             32            public _detectobstacle
0000             33            public _checkMode
0000             34            public _recieveData
0000             35            public _waitquarterperiod
0000             36            public _getDigitalSignal
0000             37            public _checkerror
0000             38            public _voltsAtPeak
0000             39            public _checkCommands
0000             40            public _arrayEqual
0000             41            public _periodcalc
0000             42            public _PWMStop
0000             43            public _PWMRight
0000             44            public _PWMLeft
0000             45            public _PWMbackward
0000             46            public _PWMforward
0000             47            public _InitPinADC
0000             48            public _Volts_at_Pin
0000             49            public _TIMER0_Init
0000             50            public _InitADC
0000             51            public _Timer2_ISR
0000             52            public _ADC_at_Pin
0000             53            public _waitms
0000             54            public _Timer3us
0000             55            public __c51_external_startup
0000             56            public _x
0000             57            public _command
0000             58            public _right
0000             59            public _left
0000             60            public _backward
0000             61            public _forward
0000             62            public _stop
0000             63            public _claw_flag
0000             64            public _flag
0000             65            public _cartMoveB
0000             66            public _cartMoveF
0000             67            public _pwmSig6
0000             68            public _pwmSig5
0000             69            public _pwmSig4
0000             70            public _pwmSig3
0000             71            public _pwmSig2
0000             72            public _pwmSig1
0000             73            public _pwm_count3
0000             74            public _pwm_count2
0000             75            public _pwm_count1
0000             76            public _pwm_count
0000             77   ;--------------------------------------------------------
0000             78   ; Special Function Registers
0000             79   ;--------------------------------------------------------
0000             80   _ACC            DATA 0xe0
0000             81   _ADC0ASAH       DATA 0xb6
0000             82   _ADC0ASAL       DATA 0xb5
0000             83   _ADC0ASCF       DATA 0xa1
0000             84   _ADC0ASCT       DATA 0xc7
0000             85   _ADC0CF0        DATA 0xbc
0000             86   _ADC0CF1        DATA 0xb9
0000             87   _ADC0CF2        DATA 0xdf
0000             88   _ADC0CN0        DATA 0xe8
0000             89   _ADC0CN1        DATA 0xb2
0000             90   _ADC0CN2        DATA 0xb3
0000             91   _ADC0GTH        DATA 0xc4
0000             92   _ADC0GTL        DATA 0xc3
0000             93   _ADC0H          DATA 0xbe
0000             94   _ADC0L          DATA 0xbd
0000             95   _ADC0LTH        DATA 0xc6
0000             96   _ADC0LTL        DATA 0xc5
0000             97   _ADC0MX         DATA 0xbb
0000             98   _B              DATA 0xf0
0000             99   _CKCON0         DATA 0x8e
0000            100   _CKCON1         DATA 0xa6
0000            101   _CLEN0          DATA 0xc6
0000            102   _CLIE0          DATA 0xc7
0000            103   _CLIF0          DATA 0xe8
0000            104   _CLKSEL         DATA 0xa9
0000            105   _CLOUT0         DATA 0xd1
0000            106   _CLU0CF         DATA 0xb1
0000            107   _CLU0FN         DATA 0xaf
0000            108   _CLU0MX         DATA 0x84
0000            109   _CLU1CF         DATA 0xb3
0000            110   _CLU1FN         DATA 0xb2
0000            111   _CLU1MX         DATA 0x85
0000            112   _CLU2CF         DATA 0xb6
0000            113   _CLU2FN         DATA 0xb5
0000            114   _CLU2MX         DATA 0x91
0000            115   _CLU3CF         DATA 0xbf
0000            116   _CLU3FN         DATA 0xbe
0000            117   _CLU3MX         DATA 0xae
0000            118   _CMP0CN0        DATA 0x9b
0000            119   _CMP0CN1        DATA 0x99
0000            120   _CMP0MD         DATA 0x9d
0000            121   _CMP0MX         DATA 0x9f
0000            122   _CMP1CN0        DATA 0xbf
0000            123   _CMP1CN1        DATA 0xac
0000            124   _CMP1MD         DATA 0xab
0000            125   _CMP1MX         DATA 0xaa
0000            126   _CRC0CN0        DATA 0xce
0000            127   _CRC0CN1        DATA 0x86
0000            128   _CRC0CNT        DATA 0xd3
0000            129   _CRC0DAT        DATA 0xcb
0000            130   _CRC0FLIP       DATA 0xcf
0000            131   _CRC0IN         DATA 0xca
0000            132   _CRC0ST         DATA 0xd2
0000            133   _DAC0CF0        DATA 0x91
0000            134   _DAC0CF1        DATA 0x92
0000            135   _DAC0H          DATA 0x85
0000            136   _DAC0L          DATA 0x84
0000            137   _DAC1CF0        DATA 0x93
0000            138   _DAC1CF1        DATA 0x94
0000            139   _DAC1H          DATA 0x8a
0000            140   _DAC1L          DATA 0x89
0000            141   _DAC2CF0        DATA 0x95
0000            142   _DAC2CF1        DATA 0x96
0000            143   _DAC2H          DATA 0x8c
0000            144   _DAC2L          DATA 0x8b
0000            145   _DAC3CF0        DATA 0x9a
0000            146   _DAC3CF1        DATA 0x9c
0000            147   _DAC3H          DATA 0x8e
0000            148   _DAC3L          DATA 0x8d
0000            149   _DACGCF0        DATA 0x88
0000            150   _DACGCF1        DATA 0x98
0000            151   _DACGCF2        DATA 0xa2
0000            152   _DERIVID        DATA 0xad
0000            153   _DEVICEID       DATA 0xb5
0000            154   _DPH            DATA 0x83
0000            155   _DPL            DATA 0x82
0000            156   _EIE1           DATA 0xe6
0000            157   _EIE2           DATA 0xf3
0000            158   _EIP1           DATA 0xbb
0000            159   _EIP1H          DATA 0xee
0000            160   _EIP2           DATA 0xed
0000            161   _EIP2H          DATA 0xf6
0000            162   _EMI0CN         DATA 0xe7
0000            163   _FLKEY          DATA 0xb7
0000            164   _HFO0CAL        DATA 0xc7
0000            165   _HFO1CAL        DATA 0xd6
0000            166   _HFOCN          DATA 0xef
0000            167   _I2C0ADM        DATA 0xff
0000            168   _I2C0CN0        DATA 0xba
0000            169   _I2C0DIN        DATA 0xbc
0000            170   _I2C0DOUT       DATA 0xbb
0000            171   _I2C0FCN0       DATA 0xad
0000            172   _I2C0FCN1       DATA 0xab
0000            173   _I2C0FCT        DATA 0xf5
0000            174   _I2C0SLAD       DATA 0xbd
0000            175   _I2C0STAT       DATA 0xb9
0000            176   _IE             DATA 0xa8
0000            177   _IP             DATA 0xb8
0000            178   _IPH            DATA 0xf2
0000            179   _IT01CF         DATA 0xe4
0000            180   _LFO0CN         DATA 0xb1
0000            181   _P0             DATA 0x80
0000            182   _P0MASK         DATA 0xfe
0000            183   _P0MAT          DATA 0xfd
0000            184   _P0MDIN         DATA 0xf1
0000            185   _P0MDOUT        DATA 0xa4
0000            186   _P0SKIP         DATA 0xd4
0000            187   _P1             DATA 0x90
0000            188   _P1MASK         DATA 0xee
0000            189   _P1MAT          DATA 0xed
0000            190   _P1MDIN         DATA 0xf2
0000            191   _P1MDOUT        DATA 0xa5
0000            192   _P1SKIP         DATA 0xd5
0000            193   _P2             DATA 0xa0
0000            194   _P2MASK         DATA 0xfc
0000            195   _P2MAT          DATA 0xfb
0000            196   _P2MDIN         DATA 0xf3
0000            197   _P2MDOUT        DATA 0xa6
0000            198   _P2SKIP         DATA 0xcc
0000            199   _P3             DATA 0xb0
0000            200   _P3MDIN         DATA 0xf4
0000            201   _P3MDOUT        DATA 0x9c
0000            202   _PCA0CENT       DATA 0x9e
0000            203   _PCA0CLR        DATA 0x9c
0000            204   _PCA0CN0        DATA 0xd8
0000            205   _PCA0CPH0       DATA 0xfc
0000            206   _PCA0CPH1       DATA 0xea
0000            207   _PCA0CPH2       DATA 0xec
0000            208   _PCA0CPH3       DATA 0xf5
0000            209   _PCA0CPH4       DATA 0x85
0000            210   _PCA0CPH5       DATA 0xde
0000            211   _PCA0CPL0       DATA 0xfb
0000            212   _PCA0CPL1       DATA 0xe9
0000            213   _PCA0CPL2       DATA 0xeb
0000            214   _PCA0CPL3       DATA 0xf4
0000            215   _PCA0CPL4       DATA 0x84
0000            216   _PCA0CPL5       DATA 0xdd
0000            217   _PCA0CPM0       DATA 0xda
0000            218   _PCA0CPM1       DATA 0xdb
0000            219   _PCA0CPM2       DATA 0xdc
0000            220   _PCA0CPM3       DATA 0xae
0000            221   _PCA0CPM4       DATA 0xaf
0000            222   _PCA0CPM5       DATA 0xcc
0000            223   _PCA0H          DATA 0xfa
0000            224   _PCA0L          DATA 0xf9
0000            225   _PCA0MD         DATA 0xd9
0000            226   _PCA0POL        DATA 0x96
0000            227   _PCA0PWM        DATA 0xf7
0000            228   _PCON0          DATA 0x87
0000            229   _PCON1          DATA 0xcd
0000            230   _PFE0CN         DATA 0xc1
0000            231   _PRTDRV         DATA 0xf6
0000            232   _PSCTL          DATA 0x8f
0000            233   _PSTAT0         DATA 0xaa
0000            234   _PSW            DATA 0xd0
0000            235   _REF0CN         DATA 0xd1
0000            236   _REG0CN         DATA 0xc9
0000            237   _REVID          DATA 0xb6
0000            238   _RSTSRC         DATA 0xef
0000            239   _SBCON1         DATA 0x94
0000            240   _SBRLH1         DATA 0x96
0000            241   _SBRLL1         DATA 0x95
0000            242   _SBUF           DATA 0x99
0000            243   _SBUF0          DATA 0x99
0000            244   _SBUF1          DATA 0x92
0000            245   _SCON           DATA 0x98
0000            246   _SCON0          DATA 0x98
0000            247   _SCON1          DATA 0xc8
0000            248   _SFRPAGE        DATA 0xa7
0000            249   _SFRPGCN        DATA 0xbc
0000            250   _SFRSTACK       DATA 0xd7
0000            251   _SMB0ADM        DATA 0xd6
0000            252   _SMB0ADR        DATA 0xd7
0000            253   _SMB0CF         DATA 0xc1
0000            254   _SMB0CN0        DATA 0xc0
0000            255   _SMB0DAT        DATA 0xc2
0000            256   _SMB0FCN0       DATA 0xc3
0000            257   _SMB0FCN1       DATA 0xc4
0000            258   _SMB0FCT        DATA 0xef
0000            259   _SMB0RXLN       DATA 0xc5
0000            260   _SMB0TC         DATA 0xac
0000            261   _SMOD1          DATA 0x93
0000            262   _SP             DATA 0x81
0000            263   _SPI0CFG        DATA 0xa1
0000            264   _SPI0CKR        DATA 0xa2
0000            265   _SPI0CN0        DATA 0xf8
0000            266   _SPI0DAT        DATA 0xa3
0000            267   _SPI0FCN0       DATA 0x9a
0000            268   _SPI0FCN1       DATA 0x9b
0000            269   _SPI0FCT        DATA 0xf7
0000            270   _SPI0PCF        DATA 0xdf
0000            271   _TCON           DATA 0x88
0000            272   _TH0            DATA 0x8c
0000            273   _TH1            DATA 0x8d
0000            274   _TL0            DATA 0x8a
0000            275   _TL1            DATA 0x8b
0000            276   _TMOD           DATA 0x89
0000            277   _TMR2CN0        DATA 0xc8
0000            278   _TMR2CN1        DATA 0xfd
0000            279   _TMR2H          DATA 0xcf
0000            280   _TMR2L          DATA 0xce
0000            281   _TMR2RLH        DATA 0xcb
0000            282   _TMR2RLL        DATA 0xca
0000            283   _TMR3CN0        DATA 0x91
0000            284   _TMR3CN1        DATA 0xfe
0000            285   _TMR3H          DATA 0x95
0000            286   _TMR3L          DATA 0x94
0000            287   _TMR3RLH        DATA 0x93
0000            288   _TMR3RLL        DATA 0x92
0000            289   _TMR4CN0        DATA 0x98
0000            290   _TMR4CN1        DATA 0xff
0000            291   _TMR4H          DATA 0xa5
0000            292   _TMR4L          DATA 0xa4
0000            293   _TMR4RLH        DATA 0xa3
0000            294   _TMR4RLL        DATA 0xa2
0000            295   _TMR5CN0        DATA 0xc0
0000            296   _TMR5CN1        DATA 0xf1
0000            297   _TMR5H          DATA 0xd5
0000            298   _TMR5L          DATA 0xd4
0000            299   _TMR5RLH        DATA 0xd3
0000            300   _TMR5RLL        DATA 0xd2
0000            301   _UART0PCF       DATA 0xd9
0000            302   _UART1FCN0      DATA 0x9d
0000            303   _UART1FCN1      DATA 0xd8
0000            304   _UART1FCT       DATA 0xfa
0000            305   _UART1LIN       DATA 0x9e
0000            306   _UART1PCF       DATA 0xda
0000            307   _VDM0CN         DATA 0xff
0000            308   _WDTCN          DATA 0x97
0000            309   _XBR0           DATA 0xe1
0000            310   _XBR1           DATA 0xe2
0000            311   _XBR2           DATA 0xe3
0000            312   _XOSC0CN        DATA 0x86
0000            313   _DPTR           DATA 0x8382
0000            314   _TMR2RL         DATA 0xcbca
0000            315   _TMR3RL         DATA 0x9392
0000            316   _TMR4RL         DATA 0xa3a2
0000            317   _TMR5RL         DATA 0xd3d2
0000            318   _TMR0           DATA 0x8c8a
0000            319   _TMR1           DATA 0x8d8b
0000            320   _TMR2           DATA 0xcfce
0000            321   _TMR3           DATA 0x9594
0000            322   _TMR4           DATA 0xa5a4
0000            323   _TMR5           DATA 0xd5d4
0000            324   _SBRL1          DATA 0x9695
0000            325   _PCA0           DATA 0xfaf9
0000            326   _PCA0CP0        DATA 0xfcfb
0000            327   _PCA0CP1        DATA 0xeae9
0000            328   _PCA0CP2        DATA 0xeceb
0000            329   _PCA0CP3        DATA 0xf5f4
0000            330   _PCA0CP4        DATA 0x8584
0000            331   _PCA0CP5        DATA 0xdedd
0000            332   _ADC0ASA        DATA 0xb6b5
0000            333   _ADC0GT         DATA 0xc4c3
0000            334   _ADC0           DATA 0xbebd
0000            335   _ADC0LT         DATA 0xc6c5
0000            336   _DAC0           DATA 0x8584
0000            337   _DAC1           DATA 0x8a89
0000            338   _DAC2           DATA 0x8c8b
0000            339   _DAC3           DATA 0x8e8d
0000            340   ;--------------------------------------------------------
0000            341   ; special function bits
0000            342   ;--------------------------------------------------------
0000            343   _ACC_0          BIT 0xe0
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_2          BIT 0xe2
0000            346   _ACC_3          BIT 0xe3
0000            347   _ACC_4          BIT 0xe4
0000            348   _ACC_5          BIT 0xe5
0000            349   _ACC_6          BIT 0xe6
0000            350   _ACC_7          BIT 0xe7
0000            351   _TEMPE          BIT 0xe8
0000            352   _ADGN0          BIT 0xe9
0000            353   _ADGN1          BIT 0xea
0000            354   _ADWINT         BIT 0xeb
0000            355   _ADBUSY         BIT 0xec
0000            356   _ADINT          BIT 0xed
0000            357   _IPOEN          BIT 0xee
0000            358   _ADEN           BIT 0xef
0000            359   _B_0            BIT 0xf0
0000            360   _B_1            BIT 0xf1
0000            361   _B_2            BIT 0xf2
0000            362   _B_3            BIT 0xf3
0000            363   _B_4            BIT 0xf4
0000            364   _B_5            BIT 0xf5
0000            365   _B_6            BIT 0xf6
0000            366   _B_7            BIT 0xf7
0000            367   _C0FIF          BIT 0xe8
0000            368   _C0RIF          BIT 0xe9
0000            369   _C1FIF          BIT 0xea
0000            370   _C1RIF          BIT 0xeb
0000            371   _C2FIF          BIT 0xec
0000            372   _C2RIF          BIT 0xed
0000            373   _C3FIF          BIT 0xee
0000            374   _C3RIF          BIT 0xef
0000            375   _D1SRC0         BIT 0x88
0000            376   _D1SRC1         BIT 0x89
0000            377   _D1AMEN         BIT 0x8a
0000            378   _D01REFSL       BIT 0x8b
0000            379   _D3SRC0         BIT 0x8c
0000            380   _D3SRC1         BIT 0x8d
0000            381   _D3AMEN         BIT 0x8e
0000            382   _D23REFSL       BIT 0x8f
0000            383   _D0UDIS         BIT 0x98
0000            384   _D1UDIS         BIT 0x99
0000            385   _D2UDIS         BIT 0x9a
0000            386   _D3UDIS         BIT 0x9b
0000            387   _EX0            BIT 0xa8
0000            388   _ET0            BIT 0xa9
0000            389   _EX1            BIT 0xaa
0000            390   _ET1            BIT 0xab
0000            391   _ES0            BIT 0xac
0000            392   _ET2            BIT 0xad
0000            393   _ESPI0          BIT 0xae
0000            394   _EA             BIT 0xaf
0000            395   _PX0            BIT 0xb8
0000            396   _PT0            BIT 0xb9
0000            397   _PX1            BIT 0xba
0000            398   _PT1            BIT 0xbb
0000            399   _PS0            BIT 0xbc
0000            400   _PT2            BIT 0xbd
0000            401   _PSPI0          BIT 0xbe
0000            402   _P0_0           BIT 0x80
0000            403   _P0_1           BIT 0x81
0000            404   _P0_2           BIT 0x82
0000            405   _P0_3           BIT 0x83
0000            406   _P0_4           BIT 0x84
0000            407   _P0_5           BIT 0x85
0000            408   _P0_6           BIT 0x86
0000            409   _P0_7           BIT 0x87
0000            410   _P1_0           BIT 0x90
0000            411   _P1_1           BIT 0x91
0000            412   _P1_2           BIT 0x92
0000            413   _P1_3           BIT 0x93
0000            414   _P1_4           BIT 0x94
0000            415   _P1_5           BIT 0x95
0000            416   _P1_6           BIT 0x96
0000            417   _P1_7           BIT 0x97
0000            418   _P2_0           BIT 0xa0
0000            419   _P2_1           BIT 0xa1
0000            420   _P2_2           BIT 0xa2
0000            421   _P2_3           BIT 0xa3
0000            422   _P2_4           BIT 0xa4
0000            423   _P2_5           BIT 0xa5
0000            424   _P2_6           BIT 0xa6
0000            425   _P3_0           BIT 0xb0
0000            426   _P3_1           BIT 0xb1
0000            427   _P3_2           BIT 0xb2
0000            428   _P3_3           BIT 0xb3
0000            429   _P3_4           BIT 0xb4
0000            430   _P3_7           BIT 0xb7
0000            431   _CCF0           BIT 0xd8
0000            432   _CCF1           BIT 0xd9
0000            433   _CCF2           BIT 0xda
0000            434   _CCF3           BIT 0xdb
0000            435   _CCF4           BIT 0xdc
0000            436   _CCF5           BIT 0xdd
0000            437   _CR             BIT 0xde
0000            438   _CF             BIT 0xdf
0000            439   _PARITY         BIT 0xd0
0000            440   _F1             BIT 0xd1
0000            441   _OV             BIT 0xd2
0000            442   _RS0            BIT 0xd3
0000            443   _RS1            BIT 0xd4
0000            444   _F0             BIT 0xd5
0000            445   _AC             BIT 0xd6
0000            446   _CY             BIT 0xd7
0000            447   _RI             BIT 0x98
0000            448   _TI             BIT 0x99
0000            449   _RB8            BIT 0x9a
0000            450   _TB8            BIT 0x9b
0000            451   _REN            BIT 0x9c
0000            452   _CE             BIT 0x9d
0000            453   _SMODE          BIT 0x9e
0000            454   _RI1            BIT 0xc8
0000            455   _TI1            BIT 0xc9
0000            456   _RBX1           BIT 0xca
0000            457   _TBX1           BIT 0xcb
0000            458   _REN1           BIT 0xcc
0000            459   _PERR1          BIT 0xcd
0000            460   _OVR1           BIT 0xce
0000            461   _SI             BIT 0xc0
0000            462   _ACK            BIT 0xc1
0000            463   _ARBLOST        BIT 0xc2
0000            464   _ACKRQ          BIT 0xc3
0000            465   _STO            BIT 0xc4
0000            466   _STA            BIT 0xc5
0000            467   _TXMODE         BIT 0xc6
0000            468   _MASTER         BIT 0xc7
0000            469   _SPIEN          BIT 0xf8
0000            470   _TXNF           BIT 0xf9
0000            471   _NSSMD0         BIT 0xfa
0000            472   _NSSMD1         BIT 0xfb
0000            473   _RXOVRN         BIT 0xfc
0000            474   _MODF           BIT 0xfd
0000            475   _WCOL           BIT 0xfe
0000            476   _SPIF           BIT 0xff
0000            477   _IT0            BIT 0x88
0000            478   _IE0            BIT 0x89
0000            479   _IT1            BIT 0x8a
0000            480   _IE1            BIT 0x8b
0000            481   _TR0            BIT 0x8c
0000            482   _TF0            BIT 0x8d
0000            483   _TR1            BIT 0x8e
0000            484   _TF1            BIT 0x8f
0000            485   _T2XCLK0        BIT 0xc8
0000            486   _T2XCLK1        BIT 0xc9
0000            487   _TR2            BIT 0xca
0000            488   _T2SPLIT        BIT 0xcb
0000            489   _TF2CEN         BIT 0xcc
0000            490   _TF2LEN         BIT 0xcd
0000            491   _TF2L           BIT 0xce
0000            492   _TF2H           BIT 0xcf
0000            493   _T4XCLK0        BIT 0x98
0000            494   _T4XCLK1        BIT 0x99
0000            495   _TR4            BIT 0x9a
0000            496   _T4SPLIT        BIT 0x9b
0000            497   _TF4CEN         BIT 0x9c
0000            498   _TF4LEN         BIT 0x9d
0000            499   _TF4L           BIT 0x9e
0000            500   _TF4H           BIT 0x9f
0000            501   _T5XCLK0        BIT 0xc0
0000            502   _T5XCLK1        BIT 0xc1
0000            503   _TR5            BIT 0xc2
0000            504   _T5SPLIT        BIT 0xc3
0000            505   _TF5CEN         BIT 0xc4
0000            506   _TF5LEN         BIT 0xc5
0000            507   _TF5L           BIT 0xc6
0000            508   _TF5H           BIT 0xc7
0000            509   _RIE            BIT 0xd8
0000            510   _RXTO0          BIT 0xd9
0000            511   _RXTO1          BIT 0xda
0000            512   _RFRQ           BIT 0xdb
0000            513   _TIE            BIT 0xdc
0000            514   _TXHOLD         BIT 0xdd
0000            515   _TXNF1          BIT 0xde
0000            516   _TFRQ           BIT 0xdf
0000            517   ;--------------------------------------------------------
0000            518   ; overlayable register banks
0000            519   ;--------------------------------------------------------
0000            520            rbank0 segment data overlay
0000            521   ;--------------------------------------------------------
0000            522   ; internal ram data
0000            523   ;--------------------------------------------------------
0000            524            rseg R_DSEG
0000            525   _pwm_count:
0000            526            ds 1
0001            527   _pwm_count1:
0001            528            ds 1
0002            529   _pwm_count2:
0002            530            ds 1
0003            531   _pwm_count3:
0003            532            ds 1
0004            533   _pwmSig1:
0004            534            ds 2
0006            535   _pwmSig2:
0006            536            ds 2
0008            537   _pwmSig3:
0008            538            ds 2
000A            539   _pwmSig4:
000A            540            ds 2
000C            541   _pwmSig5:
000C            542            ds 2
000E            543   _pwmSig6:
000E            544            ds 2
0010            545   _cartMoveF:
0010            546            ds 2
0012            547   _cartMoveB:
0012            548            ds 2
0014            549   _flag:
0014            550            ds 2
0016            551   _claw_flag:
0016            552            ds 2
0018            553   _stop:
0018            554            ds 8
0020            555   _forward:
0020            556            ds 8
0028            557   _backward:
0028            558            ds 8
0030            559   _left:
0030            560            ds 8
0038            561   _right:
0038            562            ds 8
0040            563   _command:
0040            564            ds 8
0048            565   _x:
0048            566            ds 2
004A            567   _main_sloc0_1_0:
004A            568            ds 4
004E            569   ;--------------------------------------------------------
004E            570   ; overlayable items in internal ram 
004E            571   ;--------------------------------------------------------
0000            572            rseg    R_OSEG
0000            573            rseg    R_OSEG
0000            574            rseg    R_OSEG
0000            575   _InitPinADC_PARM_2:
0000            576            ds 1
0001            577            rseg    R_OSEG
0001            578   _arrayEqual_PARM_2:
0001            579            ds 2
0003            580   _arrayEqual_PARM_3:
0003            581            ds 3
0006            582   _arrayEqual_arr1_1_78:
0006            583            ds 3
0009            584   ;--------------------------------------------------------
0009            585   ; indirectly addressable internal ram data
0009            586   ;--------------------------------------------------------
0000            587            rseg R_ISEG
0000            588   ;--------------------------------------------------------
0000            589   ; absolute internal ram data
0000            590   ;--------------------------------------------------------
0000            591            DSEG
0000            592   ;--------------------------------------------------------
0000            593   ; bit data
0000            594   ;--------------------------------------------------------
0000            595            rseg R_BSEG
0000            596   _Timer2_ISR_sloc0_1_0:
0000            597            DBIT    1
0001            598   ;--------------------------------------------------------
0001            599   ; paged external ram data
0001            600   ;--------------------------------------------------------
0000            601            rseg R_PSEG
0000            602   ;--------------------------------------------------------
0000            603   ; external ram data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_XSEG
0000            606   ;--------------------------------------------------------
0000            607   ; absolute external ram data
0000            608   ;--------------------------------------------------------
0000            609            XSEG
0000            610   ;--------------------------------------------------------
0000            611   ; external initialized ram data
0000            612   ;--------------------------------------------------------
0000            613            rseg R_IXSEG
0000            614            rseg R_HOME
0000            615            rseg R_GSINIT
0000            616            rseg R_CSEG
0000            617   ;--------------------------------------------------------
0000            618   ; Reset entry point and interrupt vectors
0000            619   ;--------------------------------------------------------
0000            620            CSEG at 0x0000
0000 020100     621            ljmp    _crt0
002B            622            CSEG at 0x002b
002B 020100     623            ljmp    _Timer2_ISR
002E            624   ;--------------------------------------------------------
002E            625   ; global & static initialisations
002E            626   ;--------------------------------------------------------
0000            627            rseg R_HOME
0000            628            rseg R_GSINIT
0000            629            rseg R_GSINIT
0000            630   ;--------------------------------------------------------
0000            631   ; data variables initialization
0000            632   ;--------------------------------------------------------
0000            633            rseg R_DINIT
0000            634   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:64: volatile unsigned char pwm_count = 0; // used in the timer 2 ISR
0000 757000     635            mov     _pwm_count,#0x00
0003            636   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:65: volatile unsigned char pwm_count1 = 0; // this will be usec in the timer 3 ISR
0003 753000     637            mov     _pwm_count1,#0x00
0006            638   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:66: volatile unsigned char pwm_count2 = 0; // this will be used in the timer 4 ISR
0006 75F000     639            mov     _pwm_count2,#0x00
0009            640   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:67: volatile unsigned char pwm_count3 = 0; //
0009 75B000     641            mov     _pwm_count3,#0x00
000C            642   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:82: volatile int flag = 0;
000C E4         643            clr     a
000D F548       644            mov     _flag,a
000F F549       645            mov     (_flag + 1),a
0011            646   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:83: volatile int claw_flag = 0;
0011 E4         647            clr     a
0012 F508       648            mov     _claw_flag,a
0014 F509       649            mov     (_claw_flag + 1),a
0016            650   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:84: int stop[]={0,0,0,0};
0016 75C800     651            mov     _stop,#0x00
0019 75C900     652            mov     (_stop + 1),#0x00
001C 75CA00     653            mov     (_stop + 0x0002),#0x00
001F 75CB00     654            mov     ((_stop + 0x0002) + 1),#0x00
0022 75CC00     655            mov     (_stop + 0x0004),#0x00
0025 75CD00     656            mov     ((_stop + 0x0004) + 1),#0x00
0028 75CE00     657            mov     (_stop + 0x0006),#0x00
002B 75CF00     658            mov     ((_stop + 0x0006) + 1),#0x00
002E            659   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:85: int forward[]={1,1,1,1};
002E 758801     660            mov     _forward,#0x01
0031 758900     661            mov     (_forward + 1),#0x00
0034 758A01     662            mov     (_forward + 0x0002),#0x01
0037 758B00     663            mov     ((_forward + 0x0002) + 1),#0x00
003A 758C01     664            mov     (_forward + 0x0004),#0x01
003D 758D00     665            mov     ((_forward + 0x0004) + 1),#0x00
0040 758E01     666            mov     (_forward + 0x0006),#0x01
0043 758F00     667            mov     ((_forward + 0x0006) + 1),#0x00
0046            668   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:86: int backward[]={1,0,1,1};
0046 754801     669            mov     _backward,#0x01
0049 754900     670            mov     (_backward + 1),#0x00
004C 754A00     671            mov     (_backward + 0x0002),#0x00
004F 754B00     672            mov     ((_backward + 0x0002) + 1),#0x00
0052 754C01     673            mov     (_backward + 0x0004),#0x01
0055 754D00     674            mov     ((_backward + 0x0004) + 1),#0x00
0058 754E01     675            mov     (_backward + 0x0006),#0x01
005B 754F00     676            mov     ((_backward + 0x0006) + 1),#0x00
005E            677   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:87: int left[]={1,0,0,1};
005E 750801     678            mov     _left,#0x01
0061 750900     679            mov     (_left + 1),#0x00
0064 750A00     680            mov     (_left + 0x0002),#0x00
0067 750B00     681            mov     ((_left + 0x0002) + 1),#0x00
006A 750C00     682            mov     (_left + 0x0004),#0x00
006D 750D00     683            mov     ((_left + 0x0004) + 1),#0x00
0070 750E01     684            mov     (_left + 0x0006),#0x01
0073 750F00     685            mov     ((_left + 0x0006) + 1),#0x00
0076            686   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:88: int right[]={1,0,0,0};
0076 75C801     687            mov     _right,#0x01
0079 75C900     688            mov     (_right + 1),#0x00
007C 75CA00     689            mov     (_right + 0x0002),#0x00
007F 75CB00     690            mov     ((_right + 0x0002) + 1),#0x00
0082 75CC00     691            mov     (_right + 0x0004),#0x00
0085 75CD00     692            mov     ((_right + 0x0004) + 1),#0x00
0088 75CE00     693            mov     (_right + 0x0006),#0x00
008B 75CF00     694            mov     ((_right + 0x0006) + 1),#0x00
008E            695   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:90: int command[4] = {0,0,0,0};
008E 758800     696            mov     _command,#0x00
0091 758900     697            mov     (_command + 1),#0x00
0094 758A00     698            mov     (_command + 0x0002),#0x00
0097 758B00     699            mov     ((_command + 0x0002) + 1),#0x00
009A 758C00     700            mov     (_command + 0x0004),#0x00
009D 758D00     701            mov     ((_command + 0x0004) + 1),#0x00
00A0 758E00     702            mov     (_command + 0x0006),#0x00
00A3 758F00     703            mov     ((_command + 0x0006) + 1),#0x00
00A6            704   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:92: volatile unsigned int x = 2;
00A6 754802     705            mov     _x,#0x02
00A9 E4         706            clr     a
00AA F549       707            mov     (_x + 1),a
00AC            708            ; The linker places a 'ret' at the end of segment R_DINIT.
00AC            709   ;--------------------------------------------------------
00AC            710   ; code
00AC            711   ;--------------------------------------------------------
0000            712            rseg R_CSEG
0000            713   ;------------------------------------------------------------
0000            714   ;Allocation info for local variables in function '_c51_external_startup'
0000            715   ;------------------------------------------------------------
0000            716   ;------------------------------------------------------------
0000            717   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:94: char _c51_external_startup(void)
0000            718   ;        -----------------------------------------
0000            719   ;         function _c51_external_startup
0000            720   ;        -----------------------------------------
0000            721   __c51_external_startup:
0000            722            using   0
0000            723   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:97: SFRPAGE = 0x00;
0000 75A700     724            mov     _SFRPAGE,#0x00
0003            725   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:98: WDTCN = 0xDE; //First key
0003 7597DE     726            mov     _WDTCN,#0xDE
0006            727   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:99: WDTCN = 0xAD; //Second key
0006 7597AD     728            mov     _WDTCN,#0xAD
0009            729   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:101: VDM0CN = 0x80;       // enable VDD monitor
0009 75FF80     730            mov     _VDM0CN,#0x80
000C            731   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:102: RSTSRC = 0x02 | 0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     732            mov     _RSTSRC,#0x06
000F            733   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:109: SFRPAGE = 0x10;
000F 75A710     734            mov     _SFRPAGE,#0x10
0012            735   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:110: PFE0CN = 0x20; // SYSCLK < 75 MHz.
0012 75C120     736            mov     _PFE0CN,#0x20
0015            737   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:111: SFRPAGE = 0x00;
0015 75A700     738            mov     _SFRPAGE,#0x00
0018            739   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:132: CLKSEL = 0x00;
0018 75A900     740            mov     _CLKSEL,#0x00
001B            741   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:133: CLKSEL = 0x00;
001B 75A900     742            mov     _CLKSEL,#0x00
001E            743   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:134: while ((CLKSEL & 0x80) == 0);
001E            744   L002001?:
001E E5A9       745            mov     a,_CLKSEL
0020 30E790     746            jnb     acc.7,L002001?
0023            747   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:135: CLKSEL = 0x03;
0023 75A903     748            mov     _CLKSEL,#0x03
0026            749   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:136: CLKSEL = 0x03;
0026 75A903     750            mov     _CLKSEL,#0x03
0029            751   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:137: while ((CLKSEL & 0x80) == 0);
0029            752   L002004?:
0029 E5A9       753            mov     a,_CLKSEL
002B 30E710     754            jnb     acc.7,L002004?
002E            755   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:142: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     756            orl     _P0MDOUT,#0x10
0031            757   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:143: XBR0 = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)
0031 75E101     758            mov     _XBR0,#0x01
0034            759   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:144: XBR1 = 0X00;
0034 75E200     760            mov     _XBR1,#0x00
0037            761   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:145: XBR2 = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     762            mov     _XBR2,#0x40
003A            763   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:151: SCON0 = 0x10;
003A 759810     764            mov     _SCON0,#0x10
003D            765   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:152: TH1 = 0x100 - ((SYSCLK / BAUDRATE) / (2L * 12L));
003D 758DE6     766            mov     _TH1,#0xE6
0040            767   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:153: TL1 = TH1;      // Init Timer1
0040 858D8B     768            mov     _TL1,_TH1
0043            769   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:154: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     770            anl     _TMOD,#0x0F
0046            771   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:155: TMOD |= 0x20;
0046 438920     772            orl     _TMOD,#0x20
0049            773   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:156: TR1 = 1; // START Timer1
0049 D28E       774            setb    _TR1
004B            775   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:157: TI = 1;  // Indicate TX0 ready
004B D299       776            setb    _TI
004D            777   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:160: TMR2CN0 = 0x00;   // Stop Timer2; Clear TF2;
004D 75C800     778            mov     _TMR2CN0,#0x00
0050            779   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:161: CKCON0 |= 0b_0001_0000; // Timer 2 uses the system clock
0050 438E10     780            orl     _CKCON0,#0x10
0053            781   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:162: TMR2RL = (0x10000L - (SYSCLK / 10000L)); // Initialize reload value
0053 75CAE0     782            mov     _TMR2RL,#0xE0
0056 75CBE3     783            mov     (_TMR2RL >> 8),#0xE3
0059            784   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:163: TMR2 = 0xffff;   // Set to reload immediately
0059 75CEFF     785            mov     _TMR2,#0xFF
005C 75CFFF     786            mov     (_TMR2 >> 8),#0xFF
005F            787   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:164: ET2 = 1;         // Enable Timer2 interrupts
005F D2AD       788            setb    _ET2
0061            789   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:165: TR2 = 1;         // Start Timer2 (TMR2CN is bit addressable)
0061 D2CA       790            setb    _TR2
0063            791   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:183: EA = 1; // Enable interrupts
0063 D2AF       792            setb    _EA
0065            793   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:186: return 0;
0065 758200     794            mov     dpl,#0x00
0068 22         795            ret
0069            796   ;------------------------------------------------------------
0069            797   ;Allocation info for local variables in function 'Timer3us'
0069            798   ;------------------------------------------------------------
0069            799   ;us                        Allocated to registers r2 r3 
0069            800   ;i                         Allocated to registers r4 r5 
0069            801   ;------------------------------------------------------------
0069            802   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:188: void Timer3us(unsigned int us)
0069            803   ;        -----------------------------------------
0069            804   ;         function Timer3us
0069            805   ;        -----------------------------------------
0069            806   _Timer3us:
0069 AA82       807            mov     r2,dpl
006B AB83       808            mov     r3,dph
006D            809   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:193: CKCON0|=0b_0100_0000;
006D 438E40     810            orl     _CKCON0,#0x40
0070            811   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:195: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     812            mov     _TMR3RL,#0xB8
0073 7593FF     813            mov     (_TMR3RL >> 8),#0xFF
0076            814   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:196: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     815            mov     _TMR3,_TMR3RL
0079 859395     816            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            817   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:198: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     818            mov     _TMR3CN0,#0x04
007F            819   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:199: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       820            mov     r4,#0x00
0081 7D00       821            mov     r5,#0x00
0083            822   L003004?:
0083 C3         823            clr     c
0084 EC         824            mov     a,r4
0085 9A         825            subb    a,r2
0086 ED         826            mov     a,r5
0087 9B         827            subb    a,r3
0088 5001       828            jnc     L003007?
008A            829   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:201: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            830   L003001?:
008A E591       831            mov     a,_TMR3CN0
008C 30E750     832            jnb     acc.7,L003001?
008F            833   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:202: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     834            anl     _TMR3CN0,#0x7F
0092            835   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:199: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         836            inc     r4
0093 BC00D0     837            cjne    r4,#0x00,L003004?
0096 0D         838            inc     r5
0097 8001       839            sjmp    L003004?
0099            840   L003007?:
0099            841   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:204: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     842            mov     _TMR3CN0,#0x00
009C 22         843            ret
009D            844   ;------------------------------------------------------------
009D            845   ;Allocation info for local variables in function 'waitms'
009D            846   ;------------------------------------------------------------
009D            847   ;ms                        Allocated to registers r2 r3 
009D            848   ;j                         Allocated to registers r4 r5 
009D            849   ;k                         Allocated to registers r6 
009D            850   ;------------------------------------------------------------
009D            851   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:206: void waitms (unsigned int ms)
009D            852   ;        -----------------------------------------
009D            853   ;         function waitms
009D            854   ;        -----------------------------------------
009D            855   _waitms:
009D AA82       856            mov     r2,dpl
009F AB83       857            mov     r3,dph
00A1            858   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:210: for(j=0; j<ms; j++)
00A1 7C00       859            mov     r4,#0x00
00A3 7D00       860            mov     r5,#0x00
00A5            861   L004005?:
00A5 C3         862            clr     c
00A6 EC         863            mov     a,r4
00A7 9A         864            subb    a,r2
00A8 ED         865            mov     a,r5
00A9 9B         866            subb    a,r3
00AA 5001       867            jnc     L004009?
00AC            868   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:211: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       869            mov     r6,#0x00
00AE            870   L004001?:
00AE BE0450     871            cjne    r6,#0x04,L004018?
00B1            872   L004018?:
00B1 5001       873            jnc     L004007?
00B3 9000FA     874            mov     dptr,#0x00FA
00B6 C002       875            push    ar2
00B8 C003       876            push    ar3
00BA C004       877            push    ar4
00BC C005       878            push    ar5
00BE C006       879            push    ar6
00C0 120100     880            lcall   _Timer3us
00C3 D006       881            pop     ar6
00C5 D005       882            pop     ar5
00C7 D004       883            pop     ar4
00C9 D003       884            pop     ar3
00CB D002       885            pop     ar2
00CD 0E         886            inc     r6
00CE 8001       887            sjmp    L004001?
00D0            888   L004007?:
00D0            889   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:210: for(j=0; j<ms; j++)
00D0 0C         890            inc     r4
00D1 BC0090     891            cjne    r4,#0x00,L004005?
00D4 0D         892            inc     r5
00D5 8001       893            sjmp    L004005?
00D7            894   L004009?:
00D7 22         895            ret
00D8            896   ;------------------------------------------------------------
00D8            897   ;Allocation info for local variables in function 'ADC_at_Pin'
00D8            898   ;------------------------------------------------------------
00D8            899   ;pin                       Allocated to registers 
00D8            900   ;------------------------------------------------------------
00D8            901   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:215: unsigned int ADC_at_Pin(unsigned char pin)
00D8            902   ;        -----------------------------------------
00D8            903   ;         function ADC_at_Pin
00D8            904   ;        -----------------------------------------
00D8            905   _ADC_at_Pin:
00D8 8582BB     906            mov     _ADC0MX,dpl
00DB            907   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:218: ADBUSY = 1;       // Dummy conversion first to select new pin
00DB D2EC       908            setb    _ADBUSY
00DD            909   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:219: while (ADBUSY); // Wait for dummy conversion to finish
00DD            910   L005001?:
00DD 20ECD0     911            jb      _ADBUSY,L005001?
00E0            912   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:220: ADBUSY = 1;     // Convert voltage at the pin
00E0 D2EC       913            setb    _ADBUSY
00E2            914   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:221: while (ADBUSY); // Wait for conversion to complete
00E2            915   L005004?:
00E2 20EC10     916            jb      _ADBUSY,L005004?
00E5            917   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:222: return (ADC0);
00E5 85BD82     918            mov     dpl,_ADC0
00E8 85BE83     919            mov     dph,(_ADC0 >> 8)
00EB 22         920            ret
00EC            921   ;------------------------------------------------------------
00EC            922   ;Allocation info for local variables in function 'Timer2_ISR'
00EC            923   ;------------------------------------------------------------
00EC            924   ;------------------------------------------------------------
00EC            925   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:226: void Timer2_ISR(void) interrupt 5
00EC            926   ;        -----------------------------------------
00EC            927   ;         function Timer2_ISR
00EC            928   ;        -----------------------------------------
00EC            929   _Timer2_ISR:
00EC C0E0       930            push    acc
00EE C002       931            push    ar2
00F0 C003       932            push    ar3
00F2 C0D0       933            push    psw
00F4 75D000     934            mov     psw,#0x00
00F7            935   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:228: TF2H = 0; // Clear Timer2 interrupt flag
00F7 C2CF       936            clr     _TF2H
00F9            937   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:230: pwm_count++;
00F9 0570       938            inc     _pwm_count
00FB            939   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:231: if (pwm_count>100)
00FB E570       940            mov     a,_pwm_count
00FD 249B       941            add     a,#0xff - 0x64
00FF 5001       942            jnc     L006002?
0101            943   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:232: pwm_count = 0;
0101 757000     944            mov     _pwm_count,#0x00
0104            945   L006002?:
0104            946   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:235: motorR1 = pwm_count>pwmSig1 ? 0 : 1;
0104 AA70       947            mov     r2,_pwm_count
0106 7B00       948            mov     r3,#0x00
0108 C3         949            clr     c
0109 E570       950            mov     a,_pwmSig1
010B 9A         951            subb    a,r2
010C E571       952            mov     a,(_pwmSig1 + 1)
010E 9B         953            subb    a,r3
010F 9210       954            mov  _Timer2_ISR_sloc0_1_0,c
0111 B3         955            cpl     c
0112 92A5       956            mov     _P2_5,c
0114            957   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:236: motorR2 = pwm_count>pwmSig2 ? 0 : 1;
0114 AA70       958            mov     r2,_pwm_count
0116 7B00       959            mov     r3,#0x00
0118 C3         960            clr     c
0119 E530       961            mov     a,_pwmSig2
011B 9A         962            subb    a,r2
011C E531       963            mov     a,(_pwmSig2 + 1)
011E 9B         964            subb    a,r3
011F 9210       965            mov  _Timer2_ISR_sloc0_1_0,c
0121 B3         966            cpl     c
0122 92A4       967            mov     _P2_4,c
0124            968   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:238: motorL1 = pwm_count>pwmSig3 ? 0 : 1;
0124 AA70       969            mov     r2,_pwm_count
0126 7B00       970            mov     r3,#0x00
0128 C3         971            clr     c
0129 E5F0       972            mov     a,_pwmSig3
012B 9A         973            subb    a,r2
012C E5F1       974            mov     a,(_pwmSig3 + 1)
012E 9B         975            subb    a,r3
012F 9210       976            mov  _Timer2_ISR_sloc0_1_0,c
0131 B3         977            cpl     c
0132 92A3       978            mov     _P2_3,c
0134            979   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:239: motorL2 = pwm_count>pwmSig4 ? 0 : 1;
0134 AA70       980            mov     r2,_pwm_count
0136 7B00       981            mov     r3,#0x00
0138 C3         982            clr     c
0139 E5B0       983            mov     a,_pwmSig4
013B 9A         984            subb    a,r2
013C E5B1       985            mov     a,(_pwmSig4 + 1)
013E 9B         986            subb    a,r3
013F 9210       987            mov  _Timer2_ISR_sloc0_1_0,c
0141 B3         988            cpl     c
0142 92A2       989            mov     _P2_2,c
0144            990   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:241: OUT0=pwm_count>80?0:1;
0144 E570       991            mov     a,_pwm_count
0146 24AF       992            add     a,#0xff - 0x50
0148 9210       993            mov  _Timer2_ISR_sloc0_1_0,c
014A B3         994            cpl     c
014B 92A0       995            mov     _P2_0,c
014D D0D0       996            pop     psw
014F D003       997            pop     ar3
0151 D002       998            pop     ar2
0153 D0E0       999            pop     acc
0155 32        1000            reti
0156           1001   ;        eliminated unneeded push/pop dpl
0156           1002   ;        eliminated unneeded push/pop dph
0156           1003   ;        eliminated unneeded push/pop b
0156           1004   ;------------------------------------------------------------
0156           1005   ;Allocation info for local variables in function 'InitADC'
0156           1006   ;------------------------------------------------------------
0156           1007   ;------------------------------------------------------------
0156           1008   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:271: void InitADC(void)
0156           1009   ;        -----------------------------------------
0156           1010   ;         function InitADC
0156           1011   ;        -----------------------------------------
0156           1012   _InitADC:
0156           1013   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:273: SFRPAGE = 0x00;
0156 75A700    1014            mov     _SFRPAGE,#0x00
0159           1015   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:274: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0159 75B280    1016            mov     _ADC0CN1,#0x80
015C           1017   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:275: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
015C 75BCF8    1018            mov     _ADC0CF0,#0xF8
015F           1019   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:276: ADC0CF1 = 0b_0_0_011110; // Same as default for now
015F 75B91E    1020            mov     _ADC0CF1,#0x1E
0162           1021   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:277: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
0162 75E800    1022            mov     _ADC0CN0,#0x00
0165           1023   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:278: ADC0CF2 = 0b_0_01_11111; // GND pin, Vref=VDD
0165 75DF3F    1024            mov     _ADC0CF2,#0x3F
0168           1025   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:279: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0168 75B300    1026            mov     _ADC0CN2,#0x00
016B           1027   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:280: ADEN = 1; // Enable ADC
016B D2EF      1028            setb    _ADEN
016D 22        1029            ret
016E           1030   ;------------------------------------------------------------
016E           1031   ;Allocation info for local variables in function 'TIMER0_Init'
016E           1032   ;------------------------------------------------------------
016E           1033   ;------------------------------------------------------------
016E           1034   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:282: void TIMER0_Init(void)
016E           1035   ;        -----------------------------------------
016E           1036   ;         function TIMER0_Init
016E           1037   ;        -----------------------------------------
016E           1038   _TIMER0_Init:
016E           1039   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:284: TMOD &= 0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
016E 5389F0    1040            anl     _TMOD,#0xF0
0171           1041   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:285: TMOD |= 0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0171 438901    1042            orl     _TMOD,#0x01
0174           1043   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:286: TR0 = 0; // Stop Timer/Counter 0
0174 C28C      1044            clr     _TR0
0176 22        1045            ret
0177           1046   ;------------------------------------------------------------
0177           1047   ;Allocation info for local variables in function 'Volts_at_Pin'
0177           1048   ;------------------------------------------------------------
0177           1049   ;pin                       Allocated to registers r2 
0177           1050   ;------------------------------------------------------------
0177           1051   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:291: float Volts_at_Pin(unsigned char pin)
0177           1052   ;        -----------------------------------------
0177           1053   ;         function Volts_at_Pin
0177           1054   ;        -----------------------------------------
0177           1055   _Volts_at_Pin:
0177           1056   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:293: return ((ADC_at_Pin(pin)*VDD) / 0b_0011_1111_1111_1111);
0177 120100    1057            lcall   _ADC_at_Pin
017A 120100    1058            lcall   ___uint2fs
017D AA82      1059            mov     r2,dpl
017F AB83      1060            mov     r3,dph
0181 ACF0      1061            mov     r4,b
0183 FD        1062            mov     r5,a
0184 C002      1063            push    ar2
0186 C003      1064            push    ar3
0188 C004      1065            push    ar4
018A C005      1066            push    ar5
018C 906C8B    1067            mov     dptr,#0x6C8B
018F 75F053    1068            mov     b,#0x53
0192 7440      1069            mov     a,#0x40
0194 120100    1070            lcall   ___fsmul
0197 AA82      1071            mov     r2,dpl
0199 AB83      1072            mov     r3,dph
019B ACF0      1073            mov     r4,b
019D FD        1074            mov     r5,a
019E E581      1075            mov     a,sp
01A0 24FC      1076            add     a,#0xfc
01A2 F581      1077            mov     sp,a
01A4 E4        1078            clr     a
01A5 C0E0      1079            push    acc
01A7 74FC      1080            mov     a,#0xFC
01A9 C0E0      1081            push    acc
01AB 747F      1082            mov     a,#0x7F
01AD C0E0      1083            push    acc
01AF 7446      1084            mov     a,#0x46
01B1 C0E0      1085            push    acc
01B3 8A82      1086            mov     dpl,r2
01B5 8B83      1087            mov     dph,r3
01B7 8CF0      1088            mov     b,r4
01B9 ED        1089            mov     a,r5
01BA 120100    1090            lcall   ___fsdiv
01BD AA82      1091            mov     r2,dpl
01BF AB83      1092            mov     r3,dph
01C1 ACF0      1093            mov     r4,b
01C3 FD        1094            mov     r5,a
01C4 E581      1095            mov     a,sp
01C6 24FC      1096            add     a,#0xfc
01C8 F581      1097            mov     sp,a
01CA 8A82      1098            mov     dpl,r2
01CC 8B83      1099            mov     dph,r3
01CE 8CF0      1100            mov     b,r4
01D0 ED        1101            mov     a,r5
01D1 22        1102            ret
01D2           1103   ;------------------------------------------------------------
01D2           1104   ;Allocation info for local variables in function 'InitPinADC'
01D2           1105   ;------------------------------------------------------------
01D2           1106   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01D2           1107   ;portno                    Allocated to registers r2 
01D2           1108   ;mask                      Allocated to registers r3 
01D2           1109   ;------------------------------------------------------------
01D2           1110   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:295: void InitPinADC(unsigned char portno, unsigned char pinno)
01D2           1111   ;        -----------------------------------------
01D2           1112   ;         function InitPinADC
01D2           1113   ;        -----------------------------------------
01D2           1114   _InitPinADC:
01D2 AA82      1115            mov     r2,dpl
01D4           1116   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:299: mask = 1 << pinno;
01D4 8558F0    1117            mov     b,_InitPinADC_PARM_2
01D7 05F0      1118            inc     b
01D9 7401      1119            mov     a,#0x01
01DB 8001      1120            sjmp    L010013?
01DD           1121   L010011?:
01DD 25E0      1122            add     a,acc
01DF           1123   L010013?:
01DF D5F050    1124            djnz    b,L010011?
01E2 FB        1125            mov     r3,a
01E3           1126   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:301: SFRPAGE = 0x20;
01E3 75A720    1127            mov     _SFRPAGE,#0x20
01E6           1128   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:302: switch (portno)
01E6 BA0090    1129            cjne    r2,#0x00,L010014?
01E9 8001      1130            sjmp    L010001?
01EB           1131   L010014?:
01EB BA0110    1132            cjne    r2,#0x01,L010015?
01EE 8001      1133            sjmp    L010002?
01F0           1134   L010015?:
01F0           1135   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:304: case 0:
01F0 BA0290    1136            cjne    r2,#0x02,L010005?
01F3 8001      1137            sjmp    L010003?
01F5           1138   L010001?:
01F5           1139   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:305: P0MDIN &= (~mask); // Set pin as analog input
01F5 EB        1140            mov     a,r3
01F6 F4        1141            cpl     a
01F7 FA        1142            mov     r2,a
01F8 52F1      1143            anl     _P0MDIN,a
01FA           1144   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:306: P0SKIP |= mask; // Skip Crossbar decoding for this pin
01FA EB        1145            mov     a,r3
01FB 42D4      1146            orl     _P0SKIP,a
01FD           1147   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:307: break;
01FD           1148   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:308: case 1:
01FD 8001      1149            sjmp    L010005?
01FF           1150   L010002?:
01FF           1151   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:309: P1MDIN &= (~mask); // Set pin as analog input
01FF EB        1152            mov     a,r3
0200 F4        1153            cpl     a
0201 FA        1154            mov     r2,a
0202 52F2      1155            anl     _P1MDIN,a
0204           1156   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:310: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0204 EB        1157            mov     a,r3
0205 42D5      1158            orl     _P1SKIP,a
0207           1159   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:311: break;
0207           1160   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:312: case 2:
0207 8001      1161            sjmp    L010005?
0209           1162   L010003?:
0209           1163   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:313: P2MDIN &= (~mask); // Set pin as analog input
0209 EB        1164            mov     a,r3
020A F4        1165            cpl     a
020B FA        1166            mov     r2,a
020C 52F3      1167            anl     _P2MDIN,a
020E           1168   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:314: P2SKIP |= mask; // Skip Crossbar decoding for this pin
020E EB        1169            mov     a,r3
020F 42CC      1170            orl     _P2SKIP,a
0211           1171   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:318: }
0211           1172   L010005?:
0211           1173   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:319: SFRPAGE = 0x00;
0211 75A700    1174            mov     _SFRPAGE,#0x00
0214 22        1175            ret
0215           1176   ;------------------------------------------------------------
0215           1177   ;Allocation info for local variables in function 'PWMforward'
0215           1178   ;------------------------------------------------------------
0215           1179   ;------------------------------------------------------------
0215           1180   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:328: void PWMforward(void) {
0215           1181   ;        -----------------------------------------
0215           1182   ;         function PWMforward
0215           1183   ;        -----------------------------------------
0215           1184   _PWMforward:
0215           1185   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:329: pwmSig1 = 99;
0215 757063    1186            mov     _pwmSig1,#0x63
0218 E4        1187            clr     a
0219 F571      1188            mov     (_pwmSig1 + 1),a
021B           1189   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:330: pwmSig2 = 0;
021B           1190   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:332: pwmSig3 = 0;
021B E4        1191            clr     a
021C F530      1192            mov     _pwmSig2,a
021E F531      1193            mov     (_pwmSig2 + 1),a
0220 F5F0      1194            mov     _pwmSig3,a
0222 F5F1      1195            mov     (_pwmSig3 + 1),a
0224           1196   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:333: pwmSig4 =99;
0224 75B063    1197            mov     _pwmSig4,#0x63
0227 E4        1198            clr     a
0228 F5B1      1199            mov     (_pwmSig4 + 1),a
022A           1200   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:335: LEDRED = 1;
022A D287      1201            setb    _P0_7
022C           1202   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:336: LEDGREEN = 1;
022C D286      1203            setb    _P0_6
022E           1204   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:337: LEDWHITE = 1;
022E D290      1205            setb    _P1_0
0230           1206   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:338: SPEAKER = 0;
0230 C2A5      1207            clr     _P2_5
0232           1208   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:339: printf("Forward\n\r");
0232 7410      1209            mov     a,#__str_0
0234 C0E0      1210            push    acc
0236 74C8      1211            mov     a,#(__str_0 >> 8)
0238 C0E0      1212            push    acc
023A 7480      1213            mov     a,#0x80
023C C0E0      1214            push    acc
023E 120100    1215            lcall   _printf
0241 1581      1216            dec     sp
0243 1581      1217            dec     sp
0245 1581      1218            dec     sp
0247 22        1219            ret
0248           1220   ;------------------------------------------------------------
0248           1221   ;Allocation info for local variables in function 'PWMbackward'
0248           1222   ;------------------------------------------------------------
0248           1223   ;------------------------------------------------------------
0248           1224   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:342: void PWMbackward(void) {
0248           1225   ;        -----------------------------------------
0248           1226   ;         function PWMbackward
0248           1227   ;        -----------------------------------------
0248           1228   _PWMbackward:
0248           1229   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:343: pwmSig1 = 0;
0248 E4        1230            clr     a
0249 F570      1231            mov     _pwmSig1,a
024B F571      1232            mov     (_pwmSig1 + 1),a
024D           1233   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:344: pwmSig2 = 99;
024D 753063    1234            mov     _pwmSig2,#0x63
0250 E4        1235            clr     a
0251 F531      1236            mov     (_pwmSig2 + 1),a
0253           1237   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:346: pwmSig3 = 99;
0253 75F063    1238            mov     _pwmSig3,#0x63
0256 E4        1239            clr     a
0257 F5F1      1240            mov     (_pwmSig3 + 1),a
0259           1241   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:347: pwmSig4 = 0;
0259 E4        1242            clr     a
025A F5B0      1243            mov     _pwmSig4,a
025C F5B1      1244            mov     (_pwmSig4 + 1),a
025E           1245   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:349: LEDRED = 1;
025E D287      1246            setb    _P0_7
0260           1247   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:350: LEDGREEN = 1;
0260 D286      1248            setb    _P0_6
0262           1249   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:351: LEDWHITE = 0;
0262 C290      1250            clr     _P1_0
0264           1251   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:352: SPEAKER = 1;
0264 D2A5      1252            setb    _P2_5
0266           1253   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:353: printf("Backward\n\r");
0266 7490      1254            mov     a,#__str_1
0268 C0E0      1255            push    acc
026A 74C8      1256            mov     a,#(__str_1 >> 8)
026C C0E0      1257            push    acc
026E 7480      1258            mov     a,#0x80
0270 C0E0      1259            push    acc
0272 120100    1260            lcall   _printf
0275 1581      1261            dec     sp
0277 1581      1262            dec     sp
0279 1581      1263            dec     sp
027B 22        1264            ret
027C           1265   ;------------------------------------------------------------
027C           1266   ;Allocation info for local variables in function 'PWMLeft'
027C           1267   ;------------------------------------------------------------
027C           1268   ;------------------------------------------------------------
027C           1269   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:356: void PWMLeft(void) {
027C           1270   ;        -----------------------------------------
027C           1271   ;         function PWMLeft
027C           1272   ;        -----------------------------------------
027C           1273   _PWMLeft:
027C           1274   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:357: pwmSig1 = 0;
027C E4        1275            clr     a
027D F570      1276            mov     _pwmSig1,a
027F F571      1277            mov     (_pwmSig1 + 1),a
0281           1278   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:358: pwmSig2 = 99;
0281 753063    1279            mov     _pwmSig2,#0x63
0284 E4        1280            clr     a
0285 F531      1281            mov     (_pwmSig2 + 1),a
0287           1282   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:360: pwmSig3 = 0;
0287 E4        1283            clr     a
0288 F5F0      1284            mov     _pwmSig3,a
028A F5F1      1285            mov     (_pwmSig3 + 1),a
028C           1286   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:361: pwmSig4 = 99;
028C 75B063    1287            mov     _pwmSig4,#0x63
028F E4        1288            clr     a
0290 F5B1      1289            mov     (_pwmSig4 + 1),a
0292           1290   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:363: LEDRED = 1;
0292 D287      1291            setb    _P0_7
0294           1292   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:364: LEDGREEN = 0;
0294 C286      1293            clr     _P0_6
0296           1294   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:365: LEDWHITE = 1;
0296 D290      1295            setb    _P1_0
0298           1296   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:366: SPEAKER = 0;
0298 C2A5      1297            clr     _P2_5
029A           1298   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:368: printf("Left\n\r");
029A 74D0      1299            mov     a,#__str_2
029C C0E0      1300            push    acc
029E 74C8      1301            mov     a,#(__str_2 >> 8)
02A0 C0E0      1302            push    acc
02A2 7480      1303            mov     a,#0x80
02A4 C0E0      1304            push    acc
02A6 120100    1305            lcall   _printf
02A9 1581      1306            dec     sp
02AB 1581      1307            dec     sp
02AD 1581      1308            dec     sp
02AF 22        1309            ret
02B0           1310   ;------------------------------------------------------------
02B0           1311   ;Allocation info for local variables in function 'PWMRight'
02B0           1312   ;------------------------------------------------------------
02B0           1313   ;------------------------------------------------------------
02B0           1314   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:371: void PWMRight(void) {
02B0           1315   ;        -----------------------------------------
02B0           1316   ;         function PWMRight
02B0           1317   ;        -----------------------------------------
02B0           1318   _PWMRight:
02B0           1319   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:372: pwmSig1 = 99;
02B0 757063    1320            mov     _pwmSig1,#0x63
02B3 E4        1321            clr     a
02B4 F571      1322            mov     (_pwmSig1 + 1),a
02B6           1323   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:373: pwmSig2 = 0;
02B6 E4        1324            clr     a
02B7 F530      1325            mov     _pwmSig2,a
02B9 F531      1326            mov     (_pwmSig2 + 1),a
02BB           1327   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:375: pwmSig3 = 99;
02BB 75F063    1328            mov     _pwmSig3,#0x63
02BE E4        1329            clr     a
02BF F5F1      1330            mov     (_pwmSig3 + 1),a
02C1           1331   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:376: pwmSig4 = 0;
02C1 E4        1332            clr     a
02C2 F5B0      1333            mov     _pwmSig4,a
02C4 F5B1      1334            mov     (_pwmSig4 + 1),a
02C6           1335   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:378: LEDRED = 1;
02C6 D287      1336            setb    _P0_7
02C8           1337   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:379: LEDGREEN = 0;
02C8 C286      1338            clr     _P0_6
02CA           1339   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:380: LEDWHITE = 1;
02CA D290      1340            setb    _P1_0
02CC           1341   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:381: SPEAKER = 0;   
02CC C2A5      1342            clr     _P2_5
02CE           1343   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:383: printf("Right\n\r");
02CE 7410      1344            mov     a,#__str_3
02D0 C0E0      1345            push    acc
02D2 74C9      1346            mov     a,#(__str_3 >> 8)
02D4 C0E0      1347            push    acc
02D6 7480      1348            mov     a,#0x80
02D8 C0E0      1349            push    acc
02DA 120100    1350            lcall   _printf
02DD 1581      1351            dec     sp
02DF 1581      1352            dec     sp
02E1 1581      1353            dec     sp
02E3 22        1354            ret
02E4           1355   ;------------------------------------------------------------
02E4           1356   ;Allocation info for local variables in function 'PWMStop'
02E4           1357   ;------------------------------------------------------------
02E4           1358   ;------------------------------------------------------------
02E4           1359   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:386: void PWMStop(void) {
02E4           1360   ;        -----------------------------------------
02E4           1361   ;         function PWMStop
02E4           1362   ;        -----------------------------------------
02E4           1363   _PWMStop:
02E4           1364   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:387: pwmSig1 = 0;
02E4           1365   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:388: pwmSig2 = 0;
02E4           1366   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:390: pwmSig3 = 0;
02E4           1367   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:391: pwmSig4 = 0;
02E4 E4        1368            clr     a
02E5 F570      1369            mov     _pwmSig1,a
02E7 F571      1370            mov     (_pwmSig1 + 1),a
02E9 F530      1371            mov     _pwmSig2,a
02EB F531      1372            mov     (_pwmSig2 + 1),a
02ED F5F0      1373            mov     _pwmSig3,a
02EF F5F1      1374            mov     (_pwmSig3 + 1),a
02F1 F5B0      1375            mov     _pwmSig4,a
02F3 F5B1      1376            mov     (_pwmSig4 + 1),a
02F5           1377   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:393: LEDRED = 0;
02F5 C287      1378            clr     _P0_7
02F7           1379   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:394: LEDGREEN = 1;
02F7 D286      1380            setb    _P0_6
02F9           1381   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:395: LEDWHITE = 1;
02F9 D290      1382            setb    _P1_0
02FB           1383   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:396: SPEAKER = 0;
02FB C2A5      1384            clr     _P2_5
02FD           1385   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:398: printf("Stop\n\r");
02FD 7450      1386            mov     a,#__str_4
02FF C0E0      1387            push    acc
0301 74C9      1388            mov     a,#(__str_4 >> 8)
0303 C0E0      1389            push    acc
0305 7480      1390            mov     a,#0x80
0307 C0E0      1391            push    acc
0309 120100    1392            lcall   _printf
030C 1581      1393            dec     sp
030E 1581      1394            dec     sp
0310 1581      1395            dec     sp
0312 22        1396            ret
0313           1397   ;------------------------------------------------------------
0313           1398   ;Allocation info for local variables in function 'periodcalc'
0313           1399   ;------------------------------------------------------------
0313           1400   ;period1                   Allocated to registers r2 r3 r4 r5 
0313           1401   ;overflow_count            Allocated to registers r2 r3 
0313           1402   ;------------------------------------------------------------
0313           1403   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:401: float periodcalc(void) {
0313           1404   ;        -----------------------------------------
0313           1405   ;         function periodcalc
0313           1406   ;        -----------------------------------------
0313           1407   _periodcalc:
0313           1408   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:405: TL0=0; 
0313 758A00    1409            mov     _TL0,#0x00
0316           1410   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:406: TH0=0;
0316 758C00    1411            mov     _TH0,#0x00
0319           1412   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:407: TF0=0;
0319 C28D      1413            clr     _TF0
031B           1414   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:409: TR0=0;
031B C28C      1415            clr     _TR0
031D           1416   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:411: while(P1_6!=0); // Wait for the signal to be zero
031D           1417   L016001?:
031D 209690    1418            jb      _P1_6,L016001?
0320           1419   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:412: while(P1_6!=1); // Wait for the signal to be one
0320           1420   L016004?:
0320 3096D0    1421            jnb     _P1_6,L016004?
0323           1422   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:413: TR0=1; // Start the timer
0323 D28C      1423            setb    _TR0
0325           1424   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:414: while(P1_6!=0) // Wait for the signal to be zero
0325 7A00      1425            mov     r2,#0x00
0327 7B00      1426            mov     r3,#0x00
0329           1427   L016009?:
0329 309650    1428            jnb     _P1_6,L016026?
032C           1429   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:416: if(TF0==1) // Did the 16-bit timer overflow?
032C           1430   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:418: TF0=0;
032C 108D90    1431            jbc     _TF0,L016033?
032F 8001      1432            sjmp    L016009?
0331           1433   L016033?:
0331           1434   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:419: overflow_count++;
0331 0A        1435            inc     r2
0332 BA0010    1436            cjne    r2,#0x00,L016009?
0335 0B        1437            inc     r3
0336           1438   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:423: while(P1_6!=1) // Wait for the signal to be zero
0336 8001      1439            sjmp    L016009?
0338           1440   L016026?:
0338           1441   L016014?:
0338 209610    1442            jb      _P1_6,L016016?
033B           1443   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:425: if(TF0==1) // Did the 16-bit timer overflow?
033B           1444   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:427: TF0=0;
033B 108D50    1445            jbc     _TF0,L016035?
033E 8001      1446            sjmp    L016014?
0340           1447   L016035?:
0340           1448   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:428: overflow_count++;
0340 0A        1449            inc     r2
0341 BA00D0    1450            cjne    r2,#0x00,L016014?
0344 0B        1451            inc     r3
0345 8001      1452            sjmp    L016014?
0347           1453   L016016?:
0347           1454   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:433: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0347 C28C      1455            clr     _TR0
0349           1456   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:434: period1=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0349 8A82      1457            mov     dpl,r2
034B 8B83      1458            mov     dph,r3
034D 120100    1459            lcall   ___sint2fs
0350 AA82      1460            mov     r2,dpl
0352 AB83      1461            mov     r3,dph
0354 ACF0      1462            mov     r4,b
0356 FD        1463            mov     r5,a
0357 C002      1464            push    ar2
0359 C003      1465            push    ar3
035B C004      1466            push    ar4
035D C005      1467            push    ar5
035F 900000    1468            mov     dptr,#0x0000
0362 75F080    1469            mov     b,#0x80
0365 7447      1470            mov     a,#0x47
0367 120100    1471            lcall   ___fsmul
036A AA82      1472            mov     r2,dpl
036C AB83      1473            mov     r3,dph
036E ACF0      1474            mov     r4,b
0370 FD        1475            mov     r5,a
0371 E581      1476            mov     a,sp
0373 24FC      1477            add     a,#0xfc
0375 F581      1478            mov     sp,a
0377 858C82    1479            mov     dpl,_TH0
037A C002      1480            push    ar2
037C C003      1481            push    ar3
037E C004      1482            push    ar4
0380 C005      1483            push    ar5
0382 120100    1484            lcall   ___uchar2fs
0385 AE82      1485            mov     r6,dpl
0387 AF83      1486            mov     r7,dph
0389 A8F0      1487            mov     r0,b
038B F9        1488            mov     r1,a
038C C006      1489            push    ar6
038E C007      1490            push    ar7
0390 C000      1491            push    ar0
0392 C001      1492            push    ar1
0394 900000    1493            mov     dptr,#0x0000
0397 75F080    1494            mov     b,#0x80
039A 7443      1495            mov     a,#0x43
039C 120100    1496            lcall   ___fsmul
039F AE82      1497            mov     r6,dpl
03A1 AF83      1498            mov     r7,dph
03A3 A8F0      1499            mov     r0,b
03A5 F9        1500            mov     r1,a
03A6 E581      1501            mov     a,sp
03A8 24FC      1502            add     a,#0xfc
03AA F581      1503            mov     sp,a
03AC D005      1504            pop     ar5
03AE D004      1505            pop     ar4
03B0 D003      1506            pop     ar3
03B2 D002      1507            pop     ar2
03B4 C006      1508            push    ar6
03B6 C007      1509            push    ar7
03B8 C000      1510            push    ar0
03BA C001      1511            push    ar1
03BC 8A82      1512            mov     dpl,r2
03BE 8B83      1513            mov     dph,r3
03C0 8CF0      1514            mov     b,r4
03C2 ED        1515            mov     a,r5
03C3 120100    1516            lcall   ___fsadd
03C6 AA82      1517            mov     r2,dpl
03C8 AB83      1518            mov     r3,dph
03CA ACF0      1519            mov     r4,b
03CC FD        1520            mov     r5,a
03CD E581      1521            mov     a,sp
03CF 24FC      1522            add     a,#0xfc
03D1 F581      1523            mov     sp,a
03D3 AE8A      1524            mov     r6,_TL0
03D5 7F00      1525            mov     r7,#0x00
03D7 8E82      1526            mov     dpl,r6
03D9 8F83      1527            mov     dph,r7
03DB C002      1528            push    ar2
03DD C003      1529            push    ar3
03DF C004      1530            push    ar4
03E1 C005      1531            push    ar5
03E3 120100    1532            lcall   ___sint2fs
03E6 AE82      1533            mov     r6,dpl
03E8 AF83      1534            mov     r7,dph
03EA A8F0      1535            mov     r0,b
03EC F9        1536            mov     r1,a
03ED D005      1537            pop     ar5
03EF D004      1538            pop     ar4
03F1 D003      1539            pop     ar3
03F3 D002      1540            pop     ar2
03F5 C006      1541            push    ar6
03F7 C007      1542            push    ar7
03F9 C000      1543            push    ar0
03FB C001      1544            push    ar1
03FD 8A82      1545            mov     dpl,r2
03FF 8B83      1546            mov     dph,r3
0401 8CF0      1547            mov     b,r4
0403 ED        1548            mov     a,r5
0404 120100    1549            lcall   ___fsadd
0407 AA82      1550            mov     r2,dpl
0409 AB83      1551            mov     r3,dph
040B ACF0      1552            mov     r4,b
040D FD        1553            mov     r5,a
040E E581      1554            mov     a,sp
0410 24FC      1555            add     a,#0xfc
0412 F581      1556            mov     sp,a
0414 C002      1557            push    ar2
0416 C003      1558            push    ar3
0418 C004      1559            push    ar4
041A C005      1560            push    ar5
041C 90F4FC    1561            mov     dptr,#0xF4FC
041F 75F032    1562            mov     b,#0x32
0422 7434      1563            mov     a,#0x34
0424 120100    1564            lcall   ___fsmul
0427 AA82      1565            mov     r2,dpl
0429 AB83      1566            mov     r3,dph
042B ACF0      1567            mov     r4,b
042D FD        1568            mov     r5,a
042E E581      1569            mov     a,sp
0430 24FC      1570            add     a,#0xfc
0432 F581      1571            mov     sp,a
0434           1572   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:435: printf("%f\n\r", period1);
0434 C002      1573            push    ar2
0436 C003      1574            push    ar3
0438 C004      1575            push    ar4
043A C005      1576            push    ar5
043C C002      1577            push    ar2
043E C003      1578            push    ar3
0440 C004      1579            push    ar4
0442 C005      1580            push    ar5
0444 7450      1581            mov     a,#__str_5
0446 C0E0      1582            push    acc
0448 74CC      1583            mov     a,#(__str_5 >> 8)
044A C0E0      1584            push    acc
044C 7480      1585            mov     a,#0x80
044E C0E0      1586            push    acc
0450 120100    1587            lcall   _printf
0453 E581      1588            mov     a,sp
0455 24F9      1589            add     a,#0xf9
0457 F581      1590            mov     sp,a
0459           1591   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:436: return period1*1000; //return period of high pulse in seconds
0459 900000    1592            mov     dptr,#0x0000
045C 75F07A    1593            mov     b,#0x7A
045F 7444      1594            mov     a,#0x44
0461 120100    1595            lcall   ___fsmul
0464 AA82      1596            mov     r2,dpl
0466 AB83      1597            mov     r3,dph
0468 ACF0      1598            mov     r4,b
046A FD        1599            mov     r5,a
046B E581      1600            mov     a,sp
046D 24FC      1601            add     a,#0xfc
046F F581      1602            mov     sp,a
0471 8A82      1603            mov     dpl,r2
0473 8B83      1604            mov     dph,r3
0475 8CF0      1605            mov     b,r4
0477 ED        1606            mov     a,r5
0478 22        1607            ret
0479           1608   ;------------------------------------------------------------
0479           1609   ;Allocation info for local variables in function 'arrayEqual'
0479           1610   ;------------------------------------------------------------
0479           1611   ;size                      Allocated with name '_arrayEqual_PARM_2'
0479           1612   ;arr2                      Allocated with name '_arrayEqual_PARM_3'
0479           1613   ;arr1                      Allocated with name '_arrayEqual_arr1_1_78'
0479           1614   ;i                         Allocated to registers r5 r6 
0479           1615   ;------------------------------------------------------------
0479           1616   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:441: int arrayEqual (int arr1[], int size, int arr2[]){
0479           1617   ;        -----------------------------------------
0479           1618   ;         function arrayEqual
0479           1619   ;        -----------------------------------------
0479           1620   _arrayEqual:
0479 8582C0    1621            mov     _arrayEqual_arr1_1_78,dpl
047C 8583C1    1622            mov     (_arrayEqual_arr1_1_78 + 1),dph
047F 85F0C2    1623            mov     (_arrayEqual_arr1_1_78 + 2),b
0482           1624   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:443: for(i=0; i<size; i++){
0482 7D00      1625            mov     r5,#0x00
0484 7E00      1626            mov     r6,#0x00
0486           1627   L017003?:
0486 C3        1628            clr     c
0487 ED        1629            mov     a,r5
0488 9508      1630            subb    a,_arrayEqual_PARM_2
048A EE        1631            mov     a,r6
048B 6480      1632            xrl     a,#0x80
048D 8509F0    1633            mov     b,(_arrayEqual_PARM_2 + 1)
0490 63F080    1634            xrl     b,#0x80
0493 95F0      1635            subb    a,b
0495 5001      1636            jnc     L017006?
0497           1637   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:444: if(arr1[i]!=arr2[i])
0497 8D07      1638            mov     ar7,r5
0499 EE        1639            mov     a,r6
049A CF        1640            xch     a,r7
049B 25E0      1641            add     a,acc
049D CF        1642            xch     a,r7
049E 33        1643            rlc     a
049F F8        1644            mov     r0,a
04A0 EF        1645            mov     a,r7
04A1 25C0      1646            add     a,_arrayEqual_arr1_1_78
04A3 F9        1647            mov     r1,a
04A4 E8        1648            mov     a,r0
04A5 35C1      1649            addc    a,(_arrayEqual_arr1_1_78 + 1)
04A7 FA        1650            mov     r2,a
04A8 ABC2      1651            mov     r3,(_arrayEqual_arr1_1_78 + 2)
04AA 8982      1652            mov     dpl,r1
04AC 8A83      1653            mov     dph,r2
04AE 8BF0      1654            mov     b,r3
04B0 120100    1655            lcall   __gptrget
04B3 F9        1656            mov     r1,a
04B4 A3        1657            inc     dptr
04B5 120100    1658            lcall   __gptrget
04B8 FA        1659            mov     r2,a
04B9 EF        1660            mov     a,r7
04BA 25B8      1661            add     a,_arrayEqual_PARM_3
04BC FF        1662            mov     r7,a
04BD E8        1663            mov     a,r0
04BE 35B9      1664            addc    a,(_arrayEqual_PARM_3 + 1)
04C0 F8        1665            mov     r0,a
04C1 ABBA      1666            mov     r3,(_arrayEqual_PARM_3 + 2)
04C3 8F82      1667            mov     dpl,r7
04C5 8883      1668            mov     dph,r0
04C7 8BF0      1669            mov     b,r3
04C9 120100    1670            lcall   __gptrget
04CC FF        1671            mov     r7,a
04CD A3        1672            inc     dptr
04CE 120100    1673            lcall   __gptrget
04D1 F8        1674            mov     r0,a
04D2 E9        1675            mov     a,r1
04D3 B50750    1676            cjne    a,ar7,L017013?
04D6 EA        1677            mov     a,r2
04D7 B50050    1678            cjne    a,ar0,L017013?
04DA 8001      1679            sjmp    L017005?
04DC           1680   L017013?:
04DC           1681   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:445: return 0; 
04DC 900000    1682            mov     dptr,#0x0000
04DF 22        1683            ret
04E0           1684   L017005?:
04E0           1685   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:443: for(i=0; i<size; i++){
04E0 0D        1686            inc     r5
04E1 BD0090    1687            cjne    r5,#0x00,L017003?
04E4 0E        1688            inc     r6
04E5 8001      1689            sjmp    L017003?
04E7           1690   L017006?:
04E7           1691   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:447: return 1; 
04E7 900001    1692            mov     dptr,#0x0001
04EA 22        1693            ret
04EB           1694   ;------------------------------------------------------------
04EB           1695   ;Allocation info for local variables in function 'checkCommands'
04EB           1696   ;------------------------------------------------------------
04EB           1697   ;------------------------------------------------------------
04EB           1698   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:453: void checkCommands (void){
04EB           1699   ;        -----------------------------------------
04EB           1700   ;         function checkCommands
04EB           1701   ;        -----------------------------------------
04EB           1702   _checkCommands:
04EB           1703   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:454: if(arrayEqual(command, 4, stop)) PWMStop();
04EB 75B8C8    1704            mov     _arrayEqual_PARM_3,#_stop
04EE 75B900    1705            mov     (_arrayEqual_PARM_3 + 1),#0x00
04F1 75BA40    1706            mov     (_arrayEqual_PARM_3 + 2),#0x40
04F4 750804    1707            mov     _arrayEqual_PARM_2,#0x04
04F7 E4        1708            clr     a
04F8 F509      1709            mov     (_arrayEqual_PARM_2 + 1),a
04FA 901988    1710            mov     dptr,#_command
04FD 75F040    1711            mov     b,#0x40
0500 120100    1712            lcall   _arrayEqual
0503 E582      1713            mov     a,dpl
0505 8583F0    1714            mov     b,dph
0508 45F0      1715            orl     a,b
050A 6001      1716            jz      L018014?
050C 120100    1717            lcall   _PWMStop
050F 020100    1718            ljmp    L018015?
0512           1719   L018014?:
0512           1720   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:455: else if (arrayEqual(command,4,forward)) PWMforward(); 
0512 75B888    1721            mov     _arrayEqual_PARM_3,#_forward
0515 75B900    1722            mov     (_arrayEqual_PARM_3 + 1),#0x00
0518 75BA40    1723            mov     (_arrayEqual_PARM_3 + 2),#0x40
051B 750804    1724            mov     _arrayEqual_PARM_2,#0x04
051E E4        1725            clr     a
051F F509      1726            mov     (_arrayEqual_PARM_2 + 1),a
0521 901988    1727            mov     dptr,#_command
0524 75F040    1728            mov     b,#0x40
0527 120100    1729            lcall   _arrayEqual
052A E582      1730            mov     a,dpl
052C 8583F0    1731            mov     b,dph
052F 45F0      1732            orl     a,b
0531 6001      1733            jz      L018011?
0533 120100    1734            lcall   _PWMforward
0536 020100    1735            ljmp    L018015?
0539           1736   L018011?:
0539           1737   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:456: else if (arrayEqual(command,4,backward)) PWMbackward(); 
0539 75B848    1738            mov     _arrayEqual_PARM_3,#_backward
053C 75B900    1739            mov     (_arrayEqual_PARM_3 + 1),#0x00
053F 75BA40    1740            mov     (_arrayEqual_PARM_3 + 2),#0x40
0542 750804    1741            mov     _arrayEqual_PARM_2,#0x04
0545 E4        1742            clr     a
0546 F509      1743            mov     (_arrayEqual_PARM_2 + 1),a
0548 901988    1744            mov     dptr,#_command
054B 75F040    1745            mov     b,#0x40
054E 120100    1746            lcall   _arrayEqual
0551 E582      1747            mov     a,dpl
0553 8583F0    1748            mov     b,dph
0556 45F0      1749            orl     a,b
0558 6001      1750            jz      L018008?
055A 120100    1751            lcall   _PWMbackward
055D 8001      1752            sjmp    L018015?
055F           1753   L018008?:
055F           1754   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:457: else if (arrayEqual(command,4, left)) PWMLeft(); 
055F 75B808    1755            mov     _arrayEqual_PARM_3,#_left
0562 75B900    1756            mov     (_arrayEqual_PARM_3 + 1),#0x00
0565 75BA40    1757            mov     (_arrayEqual_PARM_3 + 2),#0x40
0568 750804    1758            mov     _arrayEqual_PARM_2,#0x04
056B E4        1759            clr     a
056C F509      1760            mov     (_arrayEqual_PARM_2 + 1),a
056E 901988    1761            mov     dptr,#_command
0571 75F040    1762            mov     b,#0x40
0574 120100    1763            lcall   _arrayEqual
0577 E582      1764            mov     a,dpl
0579 8583F0    1765            mov     b,dph
057C 45F0      1766            orl     a,b
057E 6001      1767            jz      L018005?
0580 120100    1768            lcall   _PWMLeft
0583 8001      1769            sjmp    L018015?
0585           1770   L018005?:
0585           1771   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:458: else if (arrayEqual(command,4, right)) PWMRight(); 
0585 75B8C8    1772            mov     _arrayEqual_PARM_3,#_right
0588 75B900    1773            mov     (_arrayEqual_PARM_3 + 1),#0x00
058B 75BA40    1774            mov     (_arrayEqual_PARM_3 + 2),#0x40
058E 750804    1775            mov     _arrayEqual_PARM_2,#0x04
0591 E4        1776            clr     a
0592 F509      1777            mov     (_arrayEqual_PARM_2 + 1),a
0594 901988    1778            mov     dptr,#_command
0597 75F040    1779            mov     b,#0x40
059A 120100    1780            lcall   _arrayEqual
059D E582      1781            mov     a,dpl
059F 8583F0    1782            mov     b,dph
05A2 45F0      1783            orl     a,b
05A4 6001      1784            jz      L018002?
05A6 120100    1785            lcall   _PWMRight
05A9 8001      1786            sjmp    L018015?
05AB           1787   L018002?:
05AB           1788   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:459: else PWMStop(); //defaults to a halt (redundant)
05AB 120100    1789            lcall   _PWMStop
05AE           1790   L018015?:
05AE           1791   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:460: waitms(358);
05AE 900166    1792            mov     dptr,#0x0166
05B1 020100    1793            ljmp    _waitms
05B4           1794   ;------------------------------------------------------------
05B4           1795   ;Allocation info for local variables in function 'voltsAtPeak'
05B4           1796   ;------------------------------------------------------------
05B4           1797   ;------------------------------------------------------------
05B4           1798   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:467: float voltsAtPeak(void) {
05B4           1799   ;        -----------------------------------------
05B4           1800   ;         function voltsAtPeak
05B4           1801   ;        -----------------------------------------
05B4           1802   _voltsAtPeak:
05B4           1803   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:469: while(ADC_at_Pin(QFP32_MUX_P1_6)==0); //this waiting for the pin to be high/ 1 
05B4           1804   L019001?:
05B4 75820C    1805            mov     dpl,#0x0C
05B7 120100    1806            lcall   _ADC_at_Pin
05BA E582      1807            mov     a,dpl
05BC 8583F0    1808            mov     b,dph
05BF 45F0      1809            orl     a,b
05C1 6001      1810            jz      L019001?
05C3           1811   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:470: Timer3us((PERIOD*1.0E6)/4.0); //PERIOD IS DEFINED
05C3 900000    1812            mov     dptr,#0x0000
05C6 120100    1813            lcall   _Timer3us
05C9           1814   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:471: return(Volts_at_Pin(QFP32_MUX_P1_6));
05C9 75820C    1815            mov     dpl,#0x0C
05CC 020100    1816            ljmp    _Volts_at_Pin
05CF           1817   ;------------------------------------------------------------
05CF           1818   ;Allocation info for local variables in function 'checkerror'
05CF           1819   ;------------------------------------------------------------
05CF           1820   ;------------------------------------------------------------
05CF           1821   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:476: void checkerror (void){
05CF           1822   ;        -----------------------------------------
05CF           1823   ;         function checkerror
05CF           1824   ;        -----------------------------------------
05CF           1825   _checkerror:
05CF           1826   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:479: }
05CF 22        1827            ret
05D0           1828   ;------------------------------------------------------------
05D0           1829   ;Allocation info for local variables in function 'getDigitalSignal'
05D0           1830   ;------------------------------------------------------------
05D0           1831   ;------------------------------------------------------------
05D0           1832   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:488: int getDigitalSignal (void){
05D0           1833   ;        -----------------------------------------
05D0           1834   ;         function getDigitalSignal
05D0           1835   ;        -----------------------------------------
05D0           1836   _getDigitalSignal:
05D0           1837   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:490: if (Volts_at_Pin(QFP32_MUX_P2_3)>=thresholdVolt) //not too low to be a noise/ a valid signal for high, 1
05D0 758210    1838            mov     dpl,#0x10
05D3 120100    1839            lcall   _Volts_at_Pin
05D6 AA82      1840            mov     r2,dpl
05D8 AB83      1841            mov     r3,dph
05DA ACF0      1842            mov     r4,b
05DC FD        1843            mov     r5,a
05DD E4        1844            clr     a
05DE C0E0      1845            push    acc
05E0 C0E0      1846            push    acc
05E2 C0E0      1847            push    acc
05E4 743F      1848            mov     a,#0x3F
05E6 C0E0      1849            push    acc
05E8 8A82      1850            mov     dpl,r2
05EA 8B83      1851            mov     dph,r3
05EC 8CF0      1852            mov     b,r4
05EE ED        1853            mov     a,r5
05EF 120100    1854            lcall   ___fslt
05F2 AA82      1855            mov     r2,dpl
05F4 E581      1856            mov     a,sp
05F6 24FC      1857            add     a,#0xfc
05F8 F581      1858            mov     sp,a
05FA EA        1859            mov     a,r2
05FB 7001      1860            jnz     L021002?
05FD           1861   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:492: printf("\nread 1:  at pin 2.3: %f\r", Volts_at_Pin(QFP32_MUX_P2_3));
05FD 758210    1862            mov     dpl,#0x10
0600 120100    1863            lcall   _Volts_at_Pin
0603 AA82      1864            mov     r2,dpl
0605 AB83      1865            mov     r3,dph
0607 ACF0      1866            mov     r4,b
0609 FD        1867            mov     r5,a
060A C002      1868            push    ar2
060C C003      1869            push    ar3
060E C004      1870            push    ar4
0610 C005      1871            push    ar5
0612 7410      1872            mov     a,#__str_6
0614 C0E0      1873            push    acc
0616 74D0      1874            mov     a,#(__str_6 >> 8)
0618 C0E0      1875            push    acc
061A 7480      1876            mov     a,#0x80
061C C0E0      1877            push    acc
061E 120100    1878            lcall   _printf
0621 E581      1879            mov     a,sp
0623 24F9      1880            add     a,#0xf9
0625 F581      1881            mov     sp,a
0627           1882   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:493: return 1;
0627 900001    1883            mov     dptr,#0x0001
062A           1884   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:497: return 0; 
062A 22        1885            ret
062B           1886   L021002?:
062B 900000    1887            mov     dptr,#0x0000
062E 22        1888            ret
062F           1889   ;------------------------------------------------------------
062F           1890   ;Allocation info for local variables in function 'waitquarterperiod'
062F           1891   ;------------------------------------------------------------
062F           1892   ;------------------------------------------------------------
062F           1893   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:504: void waitquarterperiod(void){
062F           1894   ;        -----------------------------------------
062F           1895   ;         function waitquarterperiod
062F           1896   ;        -----------------------------------------
062F           1897   _waitquarterperiod:
062F           1898   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:505: waitms(constant_delay_time);
062F 900014    1899            mov     dptr,#0x0014
0632 020100    1900            ljmp    _waitms
0635           1901   ;------------------------------------------------------------
0635           1902   ;Allocation info for local variables in function 'recieveData'
0635           1903   ;------------------------------------------------------------
0635           1904   ;checkcomm                 Allocated to registers 
0635           1905   ;i                         Allocated to registers r2 r3 
0635           1906   ;------------------------------------------------------------
0635           1907   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:511: void recieveData (){
0635           1908   ;        -----------------------------------------
0635           1909   ;         function recieveData
0635           1910   ;        -----------------------------------------
0635           1911   _recieveData:
0635           1912   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:515: while(getDigitalSignal()==0);          //wait for the signal to be 1 
0635           1913   L023001?:
0635 120100    1914            lcall   _getDigitalSignal
0638 E582      1915            mov     a,dpl
063A 8583F0    1916            mov     b,dph
063D 45F0      1917            orl     a,b
063F 6001      1918            jz      L023001?
0641           1919   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:519: waitms(175);   //wait 
0641 9000AF    1920            mov     dptr,#0x00AF
0644 120100    1921            lcall   _waitms
0647           1922   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:520: command[0] = 1;
0647 758801    1923            mov     _command,#0x01
064A 758900    1924            mov     (_command + 1),#0x00
064D           1925   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:522: for( i=1; i<4; i++){
064D 7A01      1926            mov     r2,#0x01
064F 7B00      1927            mov     r3,#0x00
0651           1928   L023004?:
0651 C3        1929            clr     c
0652 EA        1930            mov     a,r2
0653 9404      1931            subb    a,#0x04
0655 EB        1932            mov     a,r3
0656 6480      1933            xrl     a,#0x80
0658 9480      1934            subb    a,#0x80
065A 5001      1935            jnc     L023007?
065C           1936   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:523: waitms(358); //wait for a period
065C 900166    1937            mov     dptr,#0x0166
065F C002      1938            push    ar2
0661 C003      1939            push    ar3
0663 120100    1940            lcall   _waitms
0666 D003      1941            pop     ar3
0668 D002      1942            pop     ar2
066A           1943   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:524: command[i]=getDigitalSignal();         
066A 8A04      1944            mov     ar4,r2
066C EB        1945            mov     a,r3
066D CC        1946            xch     a,r4
066E 25E0      1947            add     a,acc
0670 CC        1948            xch     a,r4
0671 33        1949            rlc     a
0672 EC        1950            mov     a,r4
0673 2488      1951            add     a,#_command
0675 F8        1952            mov     r0,a
0676 C002      1953            push    ar2
0678 C003      1954            push    ar3
067A C000      1955            push    ar0
067C 120100    1956            lcall   _getDigitalSignal
067F E582      1957            mov     a,dpl
0681 8583F0    1958            mov     b,dph
0684 D000      1959            pop     ar0
0686 D003      1960            pop     ar3
0688 D002      1961            pop     ar2
068A F6        1962            mov     @r0,a
068B 08        1963            inc     r0
068C A6F0      1964            mov     @r0,b
068E 18        1965            dec     r0
068F           1966   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:522: for( i=1; i<4; i++){
068F 0A        1967            inc     r2
0690 BA0090    1968            cjne    r2,#0x00,L023004?
0693 0B        1969            inc     r3
0694 8001      1970            sjmp    L023004?
0696           1971   L023007?:
0696           1972   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:527: checkCommands();
0696 020100    1973            ljmp    _checkCommands
0699           1974   ;------------------------------------------------------------
0699           1975   ;Allocation info for local variables in function 'checkMode'
0699           1976   ;------------------------------------------------------------
0699           1977   ;------------------------------------------------------------
0699           1978   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:537: int checkMode(){
0699           1979   ;        -----------------------------------------
0699           1980   ;         function checkMode
0699           1981   ;        -----------------------------------------
0699           1982   _checkMode:
0699           1983   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:538: if(!BUTTON1 || x == 0){
0699 30B110    1984            jnb     _P3_1,L024001?
069C E548      1985            mov     a,_x
069E 4549      1986            orl     a,(_x + 1)
06A0 7001      1987            jnz     L024019?
06A2           1988   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:539: while(!BUTTON1);
06A2           1989   L024001?:
06A2 30B110    1990            jnb     _P3_1,L024001?
06A5           1991   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:540: x= 0;
06A5           1992   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:541: return 0;
06A5 E4        1993            clr     a
06A6 F548      1994            mov     _x,a
06A8 F549      1995            mov     (_x + 1),a
06AA F582      1996            mov     dpl,a
06AC F583      1997            mov     dph,a
06AE 22        1998            ret
06AF           1999   L024019?:
06AF           2000   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:543: else if(!BUTTON2 || x == 1){
06AF 30B390    2001            jnb     _P3_3,L024004?
06B2 7401      2002            mov     a,#0x01
06B4 B548D0    2003            cjne    a,_x,L024037?
06B7 E4        2004            clr     a
06B8 B549D0    2005            cjne    a,(_x + 1),L024037?
06BB 8001      2006            sjmp    L024038?
06BD           2007   L024037?:
06BD 8001      2008            sjmp    L024015?
06BF           2009   L024038?:
06BF           2010   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:544: while(!BUTTON2);
06BF           2011   L024004?:
06BF 30B390    2012            jnb     _P3_3,L024004?
06C2           2013   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:545: x = 1;
06C2 754801    2014            mov     _x,#0x01
06C5 E4        2015            clr     a
06C6 F549      2016            mov     (_x + 1),a
06C8           2017   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:546: return 1;
06C8 900001    2018            mov     dptr,#0x0001
06CB 22        2019            ret
06CC           2020   L024015?:
06CC           2021   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:548: else if(!BUTTON3 || x == 3){
06CC 30B790    2022            jnb     _P3_7,L024007?
06CF 7403      2023            mov     a,#0x03
06D1 B548D0    2024            cjne    a,_x,L024041?
06D4 E4        2025            clr     a
06D5 B549D0    2026            cjne    a,(_x + 1),L024041?
06D8 8001      2027            sjmp    L024042?
06DA           2028   L024041?:
06DA 8001      2029            sjmp    L024011?
06DC           2030   L024042?:
06DC           2031   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:549: while(!BUTTON3);
06DC           2032   L024007?:
06DC 30B790    2033            jnb     _P3_7,L024007?
06DF           2034   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:550: x = 3;
06DF 754803    2035            mov     _x,#0x03
06E2 E4        2036            clr     a
06E3 F549      2037            mov     (_x + 1),a
06E5           2038   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:551: return 3;
06E5 900003    2039            mov     dptr,#0x0003
06E8 22        2040            ret
06E9           2041   L024011?:
06E9           2042   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:554: x = 2;
06E9 754802    2043            mov     _x,#0x02
06EC E4        2044            clr     a
06ED F549      2045            mov     (_x + 1),a
06EF           2046   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:555: return 2;
06EF 900002    2047            mov     dptr,#0x0002
06F2 22        2048            ret
06F3           2049   ;------------------------------------------------------------
06F3           2050   ;Allocation info for local variables in function 'detectobstacle'
06F3           2051   ;------------------------------------------------------------
06F3           2052   ;threshold                 Allocated to registers r2 r3 r4 r5 
06F3           2053   ;------------------------------------------------------------
06F3           2054   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:560: void detectobstacle(float threshold){
06F3           2055   ;        -----------------------------------------
06F3           2056   ;         function detectobstacle
06F3           2057   ;        -----------------------------------------
06F3           2058   _detectobstacle:
06F3 AA82      2059            mov     r2,dpl
06F5 AB83      2060            mov     r3,dph
06F7 ACF0      2061            mov     r4,b
06F9 FD        2062            mov     r5,a
06FA           2063   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:571: if(threshold <= 0.6 ){
06FA 749A      2064            mov     a,#0x9A
06FC C0E0      2065            push    acc
06FE 7499      2066            mov     a,#0x99
0700 C0E0      2067            push    acc
0702 7419      2068            mov     a,#0x19
0704 C0E0      2069            push    acc
0706 743F      2070            mov     a,#0x3F
0708 C0E0      2071            push    acc
070A 8A82      2072            mov     dpl,r2
070C 8B83      2073            mov     dph,r3
070E 8CF0      2074            mov     b,r4
0710 ED        2075            mov     a,r5
0711 120100    2076            lcall   ___fsgt
0714 AA82      2077            mov     r2,dpl
0716 E581      2078            mov     a,sp
0718 24FC      2079            add     a,#0xfc
071A F581      2080            mov     sp,a
071C EA        2081            mov     a,r2
071D 7001      2082            jnz     L025002?
071F           2083   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:573: printf("Turn right \r\n");
071F 7410      2084            mov     a,#__str_7
0721 C0E0      2085            push    acc
0723 74D4      2086            mov     a,#(__str_7 >> 8)
0725 C0E0      2087            push    acc
0727 7480      2088            mov     a,#0x80
0729 C0E0      2089            push    acc
072B 120100    2090            lcall   _printf
072E 1581      2091            dec     sp
0730 1581      2092            dec     sp
0732 1581      2093            dec     sp
0734           2094   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:574: PWMRight();
0734 120100    2095            lcall   _PWMRight
0737           2096   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:575: waitms(500); //Make waits longer
0737 9001F4    2097            mov     dptr,#0x01F4
073A 120100    2098            lcall   _waitms
073D           2099   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:576: waitms(500); 
073D 9001F4    2100            mov     dptr,#0x01F4
0740 120100    2101            lcall   _waitms
0743           2102   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:577: waitms(300); 
0743 90012C    2103            mov     dptr,#0x012C
0746 120100    2104            lcall   _waitms
0749           2105   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:579: PWMStop();
0749 120100    2106            lcall   _PWMStop
074C           2107   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:580: waitms(500);
074C 9001F4    2108            mov     dptr,#0x01F4
074F 120100    2109            lcall   _waitms
0752           2110   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:581: waitms(250);
0752 9000FA    2111            mov     dptr,#0x00FA
0755 020100    2112            ljmp    _waitms
0758           2113   L025002?:
0758           2114   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:586: printf("Go Straight \r\n");
0758 7450      2115            mov     a,#__str_8
075A C0E0      2116            push    acc
075C 74D4      2117            mov     a,#(__str_8 >> 8)
075E C0E0      2118            push    acc
0760 7480      2119            mov     a,#0x80
0762 C0E0      2120            push    acc
0764 120100    2121            lcall   _printf
0767 1581      2122            dec     sp
0769 1581      2123            dec     sp
076B 1581      2124            dec     sp
076D           2125   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:588: PWMforward();
076D 020100    2126            ljmp    _PWMforward
0770           2127   ;------------------------------------------------------------
0770           2128   ;Allocation info for local variables in function 'laserPattern'
0770           2129   ;------------------------------------------------------------
0770           2130   ;rate                      Allocated to registers r2 r3 r4 r5 
0770           2131   ;------------------------------------------------------------
0770           2132   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:595: void laserPattern(float rate){
0770           2133   ;        -----------------------------------------
0770           2134   ;         function laserPattern
0770           2135   ;        -----------------------------------------
0770           2136   _laserPattern:
0770 AA82      2137            mov     r2,dpl
0772 AB83      2138            mov     r3,dph
0774 ACF0      2139            mov     r4,b
0776 FD        2140            mov     r5,a
0777           2141   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:596: LASER = 0;
0777 C2B0      2142            clr     _P3_0
0779           2143   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:597: if(rate<0.8)
0779 C002      2144            push    ar2
077B C003      2145            push    ar3
077D C004      2146            push    ar4
077F C005      2147            push    ar5
0781 74CD      2148            mov     a,#0xCD
0783 C0E0      2149            push    acc
0785 74CC      2150            mov     a,#0xCC
0787 C0E0      2151            push    acc
0789 744C      2152            mov     a,#0x4C
078B C0E0      2153            push    acc
078D 743F      2154            mov     a,#0x3F
078F C0E0      2155            push    acc
0791 8A82      2156            mov     dpl,r2
0793 8B83      2157            mov     dph,r3
0795 8CF0      2158            mov     b,r4
0797 ED        2159            mov     a,r5
0798 120100    2160            lcall   ___fslt
079B AE82      2161            mov     r6,dpl
079D E581      2162            mov     a,sp
079F 24FC      2163            add     a,#0xfc
07A1 F581      2164            mov     sp,a
07A3 D005      2165            pop     ar5
07A5 D004      2166            pop     ar4
07A7 D003      2167            pop     ar3
07A9 D002      2168            pop     ar2
07AB EE        2169            mov     a,r6
07AC 6001      2170            jz      L026010?
07AE           2171   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:598: waitms(200);
07AE 9000C8    2172            mov     dptr,#0x00C8
07B1 120100    2173            lcall   _waitms
07B4 020100    2174            ljmp    L026011?
07B7           2175   L026010?:
07B7           2176   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:599: else if(rate>=0.8 && rate<2.0)
07B7 EE        2177            mov     a,r6
07B8 7001      2178            jnz     L026006?
07BA C002      2179            push    ar2
07BC C003      2180            push    ar3
07BE C004      2181            push    ar4
07C0 C005      2182            push    ar5
07C2 E4        2183            clr     a
07C3 C0E0      2184            push    acc
07C5 C0E0      2185            push    acc
07C7 C0E0      2186            push    acc
07C9 7440      2187            mov     a,#0x40
07CB C0E0      2188            push    acc
07CD 8A82      2189            mov     dpl,r2
07CF 8B83      2190            mov     dph,r3
07D1 8CF0      2191            mov     b,r4
07D3 ED        2192            mov     a,r5
07D4 120100    2193            lcall   ___fslt
07D7 AE82      2194            mov     r6,dpl
07D9 E581      2195            mov     a,sp
07DB 24FC      2196            add     a,#0xfc
07DD F581      2197            mov     sp,a
07DF D005      2198            pop     ar5
07E1 D004      2199            pop     ar4
07E3 D003      2200            pop     ar3
07E5 D002      2201            pop     ar2
07E7 EE        2202            mov     a,r6
07E8 6001      2203            jz      L026006?
07EA           2204   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:600: waitms(500);
07EA 9001F4    2205            mov     dptr,#0x01F4
07ED 120100    2206            lcall   _waitms
07F0 8001      2207            sjmp    L026011?
07F2           2208   L026006?:
07F2           2209   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:601: else if(rate>=2.0 && rate<2.8)
07F2 C002      2210            push    ar2
07F4 C003      2211            push    ar3
07F6 C004      2212            push    ar4
07F8 C005      2213            push    ar5
07FA E4        2214            clr     a
07FB C0E0      2215            push    acc
07FD C0E0      2216            push    acc
07FF C0E0      2217            push    acc
0801 7440      2218            mov     a,#0x40
0803 C0E0      2219            push    acc
0805 8A82      2220            mov     dpl,r2
0807 8B83      2221            mov     dph,r3
0809 8CF0      2222            mov     b,r4
080B ED        2223            mov     a,r5
080C 120100    2224            lcall   ___fslt
080F AE82      2225            mov     r6,dpl
0811 E581      2226            mov     a,sp
0813 24FC      2227            add     a,#0xfc
0815 F581      2228            mov     sp,a
0817 D005      2229            pop     ar5
0819 D004      2230            pop     ar4
081B D003      2231            pop     ar3
081D D002      2232            pop     ar2
081F EE        2233            mov     a,r6
0820 7001      2234            jnz     L026002?
0822 7433      2235            mov     a,#0x33
0824 C0E0      2236            push    acc
0826 C0E0      2237            push    acc
0828 C0E0      2238            push    acc
082A 7440      2239            mov     a,#0x40
082C C0E0      2240            push    acc
082E 8A82      2241            mov     dpl,r2
0830 8B83      2242            mov     dph,r3
0832 8CF0      2243            mov     b,r4
0834 ED        2244            mov     a,r5
0835 120100    2245            lcall   ___fslt
0838 AA82      2246            mov     r2,dpl
083A E581      2247            mov     a,sp
083C 24FC      2248            add     a,#0xfc
083E F581      2249            mov     sp,a
0840 EA        2250            mov     a,r2
0841 6001      2251            jz      L026002?
0843           2252   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:602: waitms(800);
0843 900320    2253            mov     dptr,#0x0320
0846 120100    2254            lcall   _waitms
0849 8001      2255            sjmp    L026011?
084B           2256   L026002?:
084B           2257   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:604: waitms(1000);
084B 9003E8    2258            mov     dptr,#0x03E8
084E 120100    2259            lcall   _waitms
0851           2260   L026011?:
0851           2261   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:605: LASER = 1;
0851 D2B0      2262            setb    _P3_0
0853 22        2263            ret
0854           2264   ;------------------------------------------------------------
0854           2265   ;Allocation info for local variables in function 'main'
0854           2266   ;------------------------------------------------------------
0854           2267   ;checkcommand              Allocated to registers 
0854           2268   ;i                         Allocated to registers r2 r3 
0854           2269   ;sig1                      Allocated to registers 
0854           2270   ;sig2                      Allocated to registers 
0854           2271   ;peak                      Allocated to registers 
0854           2272   ;voltspeak                 Allocated to registers 
0854           2273   ;periodpwm                 Allocated to registers 
0854           2274   ;period                    Allocated to registers r4 r5 r6 r7 
0854           2275   ;overflow_count            Allocated to registers r4 r5 
0854           2276   ;mode_toggle               Allocated to registers r2 r3 
0854           2277   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0854           2278   ;------------------------------------------------------------
0854           2279   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:608: void main(void)
0854           2280   ;        -----------------------------------------
0854           2281   ;         function main
0854           2282   ;        -----------------------------------------
0854           2283   _main:
0854           2284   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:623: TL0=0;
0854 758A00    2285            mov     _TL0,#0x00
0857           2286   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:624: TH0=0;
0857 758C00    2287            mov     _TH0,#0x00
085A           2288   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:625: TF0=0;         
085A C28D      2289            clr     _TF0
085C           2290   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:626: TIMER0_Init();
085C 120100    2291            lcall   _TIMER0_Init
085F           2292   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:628: InitPinADC(1, 6); // Configure P2.5 as analog input
085F 755806    2293            mov     _InitPinADC_PARM_2,#0x06
0862 758201    2294            mov     dpl,#0x01
0865 120100    2295            lcall   _InitPinADC
0868           2296   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:632: InitPinADC(2, 6); //Temp Sensor
0868 755806    2297            mov     _InitPinADC_PARM_2,#0x06
086B 758202    2298            mov     dpl,#0x02
086E 120100    2299            lcall   _InitPinADC
0871           2300   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:633: InitADC();
0871 120100    2301            lcall   _InitADC
0874           2302   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:635: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0874 7490      2303            mov     a,#__str_9
0876 C0E0      2304            push    acc
0878 74D5      2305            mov     a,#(__str_9 >> 8)
087A C0E0      2306            push    acc
087C 7480      2307            mov     a,#0x80
087E C0E0      2308            push    acc
0880 120100    2309            lcall   _printf
0883 1581      2310            dec     sp
0885 1581      2311            dec     sp
0887 1581      2312            dec     sp
0889           2313   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:637: "Check pins P2.2 and P2.1 with the oscilloscope.\r\n");
0889 74D0      2314            mov     a,#__str_10
088B C0E0      2315            push    acc
088D 74D5      2316            mov     a,#(__str_10 >> 8)
088F C0E0      2317            push    acc
0891 7480      2318            mov     a,#0x80
0893 C0E0      2319            push    acc
0895 120100    2320            lcall   _printf
0898 1581      2321            dec     sp
089A 1581      2322            dec     sp
089C 1581      2323            dec     sp
089E           2324   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:639: printf("\n\r");
089E 7410      2325            mov     a,#__str_11
08A0 C0E0      2326            push    acc
08A2 74D6      2327            mov     a,#(__str_11 >> 8)
08A4 C0E0      2328            push    acc
08A6 7480      2329            mov     a,#0x80
08A8 C0E0      2330            push    acc
08AA 120100    2331            lcall   _printf
08AD 1581      2332            dec     sp
08AF 1581      2333            dec     sp
08B1 1581      2334            dec     sp
08B3           2335   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:643: while (1)
08B3           2336   L027019?:
08B3           2337   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:645: mode_toggle = checkMode();
08B3 120100    2338            lcall   _checkMode
08B6 AA82      2339            mov     r2,dpl
08B8 AB83      2340            mov     r3,dph
08BA           2341   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:648: if(mode_toggle == 0){
08BA EA        2342            mov     a,r2
08BB 4B        2343            orl     a,r3
08BC 6001      2344            jz      L027040?
08BE 020100    2345            ljmp    L027016?
08C1           2346   L027040?:
08C1           2347   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:649: printf("auto \r\n");
08C1 7410      2348            mov     a,#__str_12
08C3 C0E0      2349            push    acc
08C5 74D7      2350            mov     a,#(__str_12 >> 8)
08C7 C0E0      2351            push    acc
08C9 7480      2352            mov     a,#0x80
08CB C0E0      2353            push    acc
08CD 120100    2354            lcall   _printf
08D0 1581      2355            dec     sp
08D2 1581      2356            dec     sp
08D4 1581      2357            dec     sp
08D6           2358   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:651: TL0=0; 
08D6 758A00    2359            mov     _TL0,#0x00
08D9           2360   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:652: TH0=0;
08D9 758C00    2361            mov     _TH0,#0x00
08DC           2362   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:653: TF0=0;
08DC C28D      2363            clr     _TF0
08DE           2364   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:655: while(P2_1!=0); // Wait for the signal to be zero
08DE           2365   L027001?:
08DE 20A150    2366            jb      _P2_1,L027001?
08E1           2367   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:656: while(P2_1!=1); // Wait for the signal to be one
08E1           2368   L027004?:
08E1 30A190    2369            jnb     _P2_1,L027004?
08E4           2370   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:657: TR0=1; // Start the timer
08E4 D28C      2371            setb    _TR0
08E6           2372   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:658: while(P2_1!=0) // Wait for the signal to be zero
08E6 7C00      2373            mov     r4,#0x00
08E8 7D00      2374            mov     r5,#0x00
08EA           2375   L027009?:
08EA 30A110    2376            jnb     _P2_1,L027011?
08ED           2377   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:660: if(TF0==1) // Did the 16-bit timer overflow?
08ED           2378   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:662: TF0=0;
08ED 108D50    2379            jbc     _TF0,L027044?
08F0 8001      2380            sjmp    L027009?
08F2           2381   L027044?:
08F2           2382   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:663: overflow_count++;
08F2 0C        2383            inc     r4
08F3 BC00D0    2384            cjne    r4,#0x00,L027009?
08F6 0D        2385            inc     r5
08F7 8001      2386            sjmp    L027009?
08F9           2387   L027011?:
08F9           2388   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:674: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
08F9 C28C      2389            clr     _TR0
08FB           2390   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:675: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
08FB 8C82      2391            mov     dpl,r4
08FD 8D83      2392            mov     dph,r5
08FF 120100    2393            lcall   ___sint2fs
0902 AC82      2394            mov     r4,dpl
0904 AD83      2395            mov     r5,dph
0906 AEF0      2396            mov     r6,b
0908 FF        2397            mov     r7,a
0909 C004      2398            push    ar4
090B C005      2399            push    ar5
090D C006      2400            push    ar6
090F C007      2401            push    ar7
0911 900000    2402            mov     dptr,#0x0000
0914 75F080    2403            mov     b,#0x80
0917 7447      2404            mov     a,#0x47
0919 120100    2405            lcall   ___fsmul
091C 858270    2406            mov     _main_sloc0_1_0,dpl
091F 858371    2407            mov     (_main_sloc0_1_0 + 1),dph
0922 85F072    2408            mov     (_main_sloc0_1_0 + 2),b
0925 F573      2409            mov     (_main_sloc0_1_0 + 3),a
0927 E581      2410            mov     a,sp
0929 24FC      2411            add     a,#0xfc
092B F581      2412            mov     sp,a
092D 858C82    2413            mov     dpl,_TH0
0930 120100    2414            lcall   ___uchar2fs
0933 AC82      2415            mov     r4,dpl
0935 AD83      2416            mov     r5,dph
0937 AEF0      2417            mov     r6,b
0939 FF        2418            mov     r7,a
093A C004      2419            push    ar4
093C C005      2420            push    ar5
093E C006      2421            push    ar6
0940 C007      2422            push    ar7
0942 900000    2423            mov     dptr,#0x0000
0945 75F080    2424            mov     b,#0x80
0948 7443      2425            mov     a,#0x43
094A 120100    2426            lcall   ___fsmul
094D AC82      2427            mov     r4,dpl
094F AD83      2428            mov     r5,dph
0951 AEF0      2429            mov     r6,b
0953 FF        2430            mov     r7,a
0954 E581      2431            mov     a,sp
0956 24FC      2432            add     a,#0xfc
0958 F581      2433            mov     sp,a
095A C004      2434            push    ar4
095C C005      2435            push    ar5
095E C006      2436            push    ar6
0960 C007      2437            push    ar7
0962 857082    2438            mov     dpl,_main_sloc0_1_0
0965 857183    2439            mov     dph,(_main_sloc0_1_0 + 1)
0968 8572F0    2440            mov     b,(_main_sloc0_1_0 + 2)
096B E573      2441            mov     a,(_main_sloc0_1_0 + 3)
096D 120100    2442            lcall   ___fsadd
0970 858270    2443            mov     _main_sloc0_1_0,dpl
0973 858371    2444            mov     (_main_sloc0_1_0 + 1),dph
0976 85F072    2445            mov     (_main_sloc0_1_0 + 2),b
0979 F573      2446            mov     (_main_sloc0_1_0 + 3),a
097B E581      2447            mov     a,sp
097D 24FC      2448            add     a,#0xfc
097F F581      2449            mov     sp,a
0981 AC8A      2450            mov     r4,_TL0
0983 7D00      2451            mov     r5,#0x00
0985 8C82      2452            mov     dpl,r4
0987 8D83      2453            mov     dph,r5
0989 120100    2454            lcall   ___sint2fs
098C AC82      2455            mov     r4,dpl
098E AD83      2456            mov     r5,dph
0990 AEF0      2457            mov     r6,b
0992 FF        2458            mov     r7,a
0993 C004      2459            push    ar4
0995 C005      2460            push    ar5
0997 C006      2461            push    ar6
0999 C007      2462            push    ar7
099B 857082    2463            mov     dpl,_main_sloc0_1_0
099E 857183    2464            mov     dph,(_main_sloc0_1_0 + 1)
09A1 8572F0    2465            mov     b,(_main_sloc0_1_0 + 2)
09A4 E573      2466            mov     a,(_main_sloc0_1_0 + 3)
09A6 120100    2467            lcall   ___fsadd
09A9 AC82      2468            mov     r4,dpl
09AB AD83      2469            mov     r5,dph
09AD AEF0      2470            mov     r6,b
09AF FF        2471            mov     r7,a
09B0 E581      2472            mov     a,sp
09B2 24FC      2473            add     a,#0xfc
09B4 F581      2474            mov     sp,a
09B6 C004      2475            push    ar4
09B8 C005      2476            push    ar5
09BA C006      2477            push    ar6
09BC C007      2478            push    ar7
09BE 90F4FC    2479            mov     dptr,#0xF4FC
09C1 75F032    2480            mov     b,#0x32
09C4 7434      2481            mov     a,#0x34
09C6 120100    2482            lcall   ___fsmul
09C9 AC82      2483            mov     r4,dpl
09CB AD83      2484            mov     r5,dph
09CD AEF0      2485            mov     r6,b
09CF FF        2486            mov     r7,a
09D0 E581      2487            mov     a,sp
09D2 24FC      2488            add     a,#0xfc
09D4 F581      2489            mov     sp,a
09D6           2490   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:677: printf( "\rT=%f ms   \n ", period*1000.0);
09D6 C004      2491            push    ar4
09D8 C005      2492            push    ar5
09DA C006      2493            push    ar6
09DC C007      2494            push    ar7
09DE 900000    2495            mov     dptr,#0x0000
09E1 75F07A    2496            mov     b,#0x7A
09E4 7444      2497            mov     a,#0x44
09E6 120100    2498            lcall   ___fsmul
09E9 AC82      2499            mov     r4,dpl
09EB AD83      2500            mov     r5,dph
09ED AEF0      2501            mov     r6,b
09EF FF        2502            mov     r7,a
09F0 E581      2503            mov     a,sp
09F2 24FC      2504            add     a,#0xfc
09F4 F581      2505            mov     sp,a
09F6 C004      2506            push    ar4
09F8 C005      2507            push    ar5
09FA C006      2508            push    ar6
09FC C007      2509            push    ar7
09FE C004      2510            push    ar4
0A00 C005      2511            push    ar5
0A02 C006      2512            push    ar6
0A04 C007      2513            push    ar7
0A06 7490      2514            mov     a,#__str_13
0A08 C0E0      2515            push    acc
0A0A 74D8      2516            mov     a,#(__str_13 >> 8)
0A0C C0E0      2517            push    acc
0A0E 7480      2518            mov     a,#0x80
0A10 C0E0      2519            push    acc
0A12 120100    2520            lcall   _printf
0A15 E581      2521            mov     a,sp
0A17 24F9      2522            add     a,#0xf9
0A19 F581      2523            mov     sp,a
0A1B           2524   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:678: waitms(50);
0A1B 900032    2525            mov     dptr,#0x0032
0A1E 120100    2526            lcall   _waitms
0A21 D007      2527            pop     ar7
0A23 D006      2528            pop     ar6
0A25 D005      2529            pop     ar5
0A27 D004      2530            pop     ar4
0A29           2531   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:679: detectobstacle(period*1000.0);
0A29 8C82      2532            mov     dpl,r4
0A2B 8D83      2533            mov     dph,r5
0A2D 8EF0      2534            mov     b,r6
0A2F EF        2535            mov     a,r7
0A30 C004      2536            push    ar4
0A32 C005      2537            push    ar5
0A34 C006      2538            push    ar6
0A36 C007      2539            push    ar7
0A38 120100    2540            lcall   _detectobstacle
0A3B D007      2541            pop     ar7
0A3D D006      2542            pop     ar6
0A3F D005      2543            pop     ar5
0A41 D004      2544            pop     ar4
0A43           2545   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:680: laserPattern(period*1000);
0A43 8C82      2546            mov     dpl,r4
0A45 8D83      2547            mov     dph,r5
0A47 8EF0      2548            mov     b,r6
0A49 EF        2549            mov     a,r7
0A4A 120100    2550            lcall   _laserPattern
0A4D           2551   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:689: waitms(50);    
0A4D 900032    2552            mov     dptr,#0x0032
0A50 120100    2553            lcall   _waitms
0A53 020100    2554            ljmp    L027019?
0A56           2555   L027016?:
0A56           2556   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:693: else if(mode_toggle == 1){
0A56 BA01D0    2557            cjne    r2,#0x01,L027045?
0A59 BB00D0    2558            cjne    r3,#0x00,L027045?
0A5C 8001      2559            sjmp    L027046?
0A5E           2560   L027045?:
0A5E 020100    2561            ljmp    L027013?
0A61           2562   L027046?:
0A61           2563   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:694: recieveData();         //keep reading data continously 
0A61 120100    2564            lcall   _recieveData
0A64           2565   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:695: printf("Command: ");
0A64 7490      2566            mov     a,#__str_14
0A66 C0E0      2567            push    acc
0A68 74D9      2568            mov     a,#(__str_14 >> 8)
0A6A C0E0      2569            push    acc
0A6C 7480      2570            mov     a,#0x80
0A6E C0E0      2571            push    acc
0A70 120100    2572            lcall   _printf
0A73 1581      2573            dec     sp
0A75 1581      2574            dec     sp
0A77 1581      2575            dec     sp
0A79           2576   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:696: for(i=0; i<4; i++)
0A79 7A00      2577            mov     r2,#0x00
0A7B 7B00      2578            mov     r3,#0x00
0A7D           2579   L027021?:
0A7D C3        2580            clr     c
0A7E EA        2581            mov     a,r2
0A7F 9404      2582            subb    a,#0x04
0A81 EB        2583            mov     a,r3
0A82 6480      2584            xrl     a,#0x80
0A84 9480      2585            subb    a,#0x80
0A86 5001      2586            jnc     L027024?
0A88           2587   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:697: printf("%d\t", command[i]);
0A88 8A04      2588            mov     ar4,r2
0A8A EB        2589            mov     a,r3
0A8B CC        2590            xch     a,r4
0A8C 25E0      2591            add     a,acc
0A8E CC        2592            xch     a,r4
0A8F 33        2593            rlc     a
0A90 EC        2594            mov     a,r4
0A91 2488      2595            add     a,#_command
0A93 F8        2596            mov     r0,a
0A94 8604      2597            mov     ar4,@r0
0A96 08        2598            inc     r0
0A97 8605      2599            mov     ar5,@r0
0A99 18        2600            dec     r0
0A9A C002      2601            push    ar2
0A9C C003      2602            push    ar3
0A9E C004      2603            push    ar4
0AA0 C005      2604            push    ar5
0AA2 7450      2605            mov     a,#__str_15
0AA4 C0E0      2606            push    acc
0AA6 74DA      2607            mov     a,#(__str_15 >> 8)
0AA8 C0E0      2608            push    acc
0AAA 7480      2609            mov     a,#0x80
0AAC C0E0      2610            push    acc
0AAE 120100    2611            lcall   _printf
0AB1 E581      2612            mov     a,sp
0AB3 24FB      2613            add     a,#0xfb
0AB5 F581      2614            mov     sp,a
0AB7 D003      2615            pop     ar3
0AB9 D002      2616            pop     ar2
0ABB           2617   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:696: for(i=0; i<4; i++)
0ABB 0A        2618            inc     r2
0ABC BA00D0    2619            cjne    r2,#0x00,L027021?
0ABF 0B        2620            inc     r3
0AC0 8001      2621            sjmp    L027021?
0AC2           2622   L027024?:
0AC2           2623   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:698: printf("\n\r");
0AC2 7410      2624            mov     a,#__str_11
0AC4 C0E0      2625            push    acc
0AC6 74D6      2626            mov     a,#(__str_11 >> 8)
0AC8 C0E0      2627            push    acc
0ACA 7480      2628            mov     a,#0x80
0ACC C0E0      2629            push    acc
0ACE 120100    2630            lcall   _printf
0AD1 1581      2631            dec     sp
0AD3 1581      2632            dec     sp
0AD5 1581      2633            dec     sp
0AD7           2634   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:699: command[0] = 0;
0AD7 758800    2635            mov     _command,#0x00
0ADA 758900    2636            mov     (_command + 1),#0x00
0ADD           2637   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:700: command[1] = 0;
0ADD 758A00    2638            mov     (_command + 0x0002),#0x00
0AE0 758B00    2639            mov     ((_command + 0x0002) + 1),#0x00
0AE3           2640   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:701: command[2] = 0;
0AE3 758C00    2641            mov     (_command + 0x0004),#0x00
0AE6 758D00    2642            mov     ((_command + 0x0004) + 1),#0x00
0AE9           2643   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:702: command[3] = 0;
0AE9 758E00    2644            mov     (_command + 0x0006),#0x00
0AEC 758F00    2645            mov     ((_command + 0x0006) + 1),#0x00
0AEF 020100    2646            ljmp    L027019?
0AF2           2647   L027013?:
0AF2           2648   ;        C:\Users\allisony\Documents\ElecRobot\idkwhatsgoingon_new.c:719: printf("Do nothing\r\n");      
0AF2 7490      2649            mov     a,#__str_16
0AF4 C0E0      2650            push    acc
0AF6 74DA      2651            mov     a,#(__str_16 >> 8)
0AF8 C0E0      2652            push    acc
0AFA 7480      2653            mov     a,#0x80
0AFC C0E0      2654            push    acc
0AFE 120100    2655            lcall   _printf
0B01 1581      2656            dec     sp
0B03 1581      2657            dec     sp
0B05 1581      2658            dec     sp
0B07 020100    2659            ljmp    L027019?
0B0A           2660            rseg R_CSEG
0B0A           2661   
0000           2662            rseg R_XINIT
0000           2663   
0000           2664            rseg R_CONST
0000           2665   __str_0:
0000 466F7277  2666            db 'Forward'
     617264
0007 0A        2667            db 0x0A
0008 0D        2668            db 0x0D
0009 00        2669            db 0x00
000A           2670   __str_1:
000A 4261636B  2671            db 'Backward'
     77617264
0012 0A        2672            db 0x0A
0013 0D        2673            db 0x0D
0014 00        2674            db 0x00
0015           2675   __str_2:
0015 4C656674  2676            db 'Left'
0019 0A        2677            db 0x0A
001A 0D        2678            db 0x0D
001B 00        2679            db 0x00
001C           2680   __str_3:
001C 52696768  2681            db 'Right'
     74
0021 0A        2682            db 0x0A
0022 0D        2683            db 0x0D
0023 00        2684            db 0x00
0024           2685   __str_4:
0024 53746F70  2686            db 'Stop'
0028 0A        2687            db 0x0A
0029 0D        2688            db 0x0D
002A 00        2689            db 0x00
002B           2690   __str_5:
002B 2566      2691            db '%f'
002D 0A        2692            db 0x0A
002E 0D        2693            db 0x0D
002F 00        2694            db 0x00
0030           2695   __str_6:
0030 0A        2696            db 0x0A
0031 72656164  2697            db 'read 1:  at pin 2.3: %f'
     20313A20
     20617420
     70696E20
     322E333A
     202566
0048 0D        2698            db 0x0D
0049 00        2699            db 0x00
004A           2700   __str_7:
004A 5475726E  2701            db 'Turn right '
     20726967
     687420
0055 0D        2702            db 0x0D
0056 0A        2703            db 0x0A
0057 00        2704            db 0x00
0058           2705   __str_8:
0058 476F2053  2706            db 'Go Straight '
     74726169
     67687420
0064 0D        2707            db 0x0D
0065 0A        2708            db 0x0A
0066 00        2709            db 0x00
0067           2710   __str_9:
0067 1B        2711            db 0x1B
0068 5B324A    2712            db '[2J'
006B 00        2713            db 0x00
006C           2714   __str_10:
006C 53717561  2715            db 'Square wave generator for the EFM8LB1.'
     72652077
     61766520
     67656E65
     7261746F
     7220666F
     72207468
     65204546
     4D384C42
     312E
0092 0D        2716            db 0x0D
0093 0A        2717            db 0x0A
0094 43686563  2718            db 'Check pins P2.2 and '
     6B207069
     6E732050
     322E3220
     616E6420
00A8 50322E31  2719            db 'P2.1 with the oscilloscope.'
     20776974
     68207468
     65206F73
     63696C6C
     6F73636F
     70652E
00C3 0D        2720            db 0x0D
00C4 0A        2721            db 0x0A
00C5 00        2722            db 0x00
00C6           2723   __str_11:
00C6 0A        2724            db 0x0A
00C7 0D        2725            db 0x0D
00C8 00        2726            db 0x00
00C9           2727   __str_12:
00C9 6175746F  2728            db 'auto '
     20
00CE 0D        2729            db 0x0D
00CF 0A        2730            db 0x0A
00D0 00        2731            db 0x00
00D1           2732   __str_13:
00D1 0D        2733            db 0x0D
00D2 543D2566  2734            db 'T=%f ms   '
     206D7320
     2020
00DC 0A        2735            db 0x0A
00DD 20        2736            db ' '
00DE 00        2737            db 0x00
00DF           2738   __str_14:
00DF 436F6D6D  2739            db 'Command: '
     616E643A
     20
00E8 00        2740            db 0x00
00E9           2741   __str_15:
00E9 2564      2742            db '%d'
00EB 09        2743            db 0x09
00EC 00        2744            db 0x00
00ED           2745   __str_16:
00ED 446F206E  2746            db 'Do nothing'
     6F746869
     6E67
00F7 0D        2747            db 0x0D
00F8 0A        2748            db 0x0A
00F9 00        2749            db 0x00
00FA           2750   
002E           2751            CSEG
002E           2752   
002E           2753   end
