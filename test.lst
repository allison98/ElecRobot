0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Sat Mar 24 19:55:47 2018
0000              5   ;--------------------------------------------------------
                  5   $name test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Convert_to_ascii
0000             30            public _getsn
0000             31            public _LCDprint_column
0000             32            public _LCDprint
0000             33            public _LCD_4BIT
0000             34            public _WriteCommand
0000             35            public _WriteData
0000             36            public _LCD_byte
0000             37            public _LCD_pulse
0000             38            public _TIMER0_Init
0000             39            public _Volts_at_Pin
0000             40            public _ADC_at_Pin
0000             41            public _InitPinADC
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public _InitADC
0000             45            public __c51_external_startup
0000             46            public _LCDprint_column_PARM_4
0000             47            public _LCDprint_PARM_3
0000             48            public _Convert_to_ascii_PARM_3
0000             49            public _Convert_to_ascii_PARM_2
0000             50            public _getsn_PARM_2
0000             51            public _LCDprint_column_PARM_3
0000             52            public _LCDprint_column_PARM_2
0000             53            public _LCDprint_PARM_2
0000             54   ;--------------------------------------------------------
0000             55   ; Special Function Registers
0000             56   ;--------------------------------------------------------
0000             57   _ACC            DATA 0xe0
0000             58   _ADC0ASAH       DATA 0xb6
0000             59   _ADC0ASAL       DATA 0xb5
0000             60   _ADC0ASCF       DATA 0xa1
0000             61   _ADC0ASCT       DATA 0xc7
0000             62   _ADC0CF0        DATA 0xbc
0000             63   _ADC0CF1        DATA 0xb9
0000             64   _ADC0CF2        DATA 0xdf
0000             65   _ADC0CN0        DATA 0xe8
0000             66   _ADC0CN1        DATA 0xb2
0000             67   _ADC0CN2        DATA 0xb3
0000             68   _ADC0GTH        DATA 0xc4
0000             69   _ADC0GTL        DATA 0xc3
0000             70   _ADC0H          DATA 0xbe
0000             71   _ADC0L          DATA 0xbd
0000             72   _ADC0LTH        DATA 0xc6
0000             73   _ADC0LTL        DATA 0xc5
0000             74   _ADC0MX         DATA 0xbb
0000             75   _B              DATA 0xf0
0000             76   _CKCON0         DATA 0x8e
0000             77   _CKCON1         DATA 0xa6
0000             78   _CLEN0          DATA 0xc6
0000             79   _CLIE0          DATA 0xc7
0000             80   _CLIF0          DATA 0xe8
0000             81   _CLKSEL         DATA 0xa9
0000             82   _CLOUT0         DATA 0xd1
0000             83   _CLU0CF         DATA 0xb1
0000             84   _CLU0FN         DATA 0xaf
0000             85   _CLU0MX         DATA 0x84
0000             86   _CLU1CF         DATA 0xb3
0000             87   _CLU1FN         DATA 0xb2
0000             88   _CLU1MX         DATA 0x85
0000             89   _CLU2CF         DATA 0xb6
0000             90   _CLU2FN         DATA 0xb5
0000             91   _CLU2MX         DATA 0x91
0000             92   _CLU3CF         DATA 0xbf
0000             93   _CLU3FN         DATA 0xbe
0000             94   _CLU3MX         DATA 0xae
0000             95   _CMP0CN0        DATA 0x9b
0000             96   _CMP0CN1        DATA 0x99
0000             97   _CMP0MD         DATA 0x9d
0000             98   _CMP0MX         DATA 0x9f
0000             99   _CMP1CN0        DATA 0xbf
0000            100   _CMP1CN1        DATA 0xac
0000            101   _CMP1MD         DATA 0xab
0000            102   _CMP1MX         DATA 0xaa
0000            103   _CRC0CN0        DATA 0xce
0000            104   _CRC0CN1        DATA 0x86
0000            105   _CRC0CNT        DATA 0xd3
0000            106   _CRC0DAT        DATA 0xcb
0000            107   _CRC0FLIP       DATA 0xcf
0000            108   _CRC0IN         DATA 0xca
0000            109   _CRC0ST         DATA 0xd2
0000            110   _DAC0CF0        DATA 0x91
0000            111   _DAC0CF1        DATA 0x92
0000            112   _DAC0H          DATA 0x85
0000            113   _DAC0L          DATA 0x84
0000            114   _DAC1CF0        DATA 0x93
0000            115   _DAC1CF1        DATA 0x94
0000            116   _DAC1H          DATA 0x8a
0000            117   _DAC1L          DATA 0x89
0000            118   _DAC2CF0        DATA 0x95
0000            119   _DAC2CF1        DATA 0x96
0000            120   _DAC2H          DATA 0x8c
0000            121   _DAC2L          DATA 0x8b
0000            122   _DAC3CF0        DATA 0x9a
0000            123   _DAC3CF1        DATA 0x9c
0000            124   _DAC3H          DATA 0x8e
0000            125   _DAC3L          DATA 0x8d
0000            126   _DACGCF0        DATA 0x88
0000            127   _DACGCF1        DATA 0x98
0000            128   _DACGCF2        DATA 0xa2
0000            129   _DERIVID        DATA 0xad
0000            130   _DEVICEID       DATA 0xb5
0000            131   _DPH            DATA 0x83
0000            132   _DPL            DATA 0x82
0000            133   _EIE1           DATA 0xe6
0000            134   _EIE2           DATA 0xf3
0000            135   _EIP1           DATA 0xbb
0000            136   _EIP1H          DATA 0xee
0000            137   _EIP2           DATA 0xed
0000            138   _EIP2H          DATA 0xf6
0000            139   _EMI0CN         DATA 0xe7
0000            140   _FLKEY          DATA 0xb7
0000            141   _HFO0CAL        DATA 0xc7
0000            142   _HFO1CAL        DATA 0xd6
0000            143   _HFOCN          DATA 0xef
0000            144   _I2C0ADM        DATA 0xff
0000            145   _I2C0CN0        DATA 0xba
0000            146   _I2C0DIN        DATA 0xbc
0000            147   _I2C0DOUT       DATA 0xbb
0000            148   _I2C0FCN0       DATA 0xad
0000            149   _I2C0FCN1       DATA 0xab
0000            150   _I2C0FCT        DATA 0xf5
0000            151   _I2C0SLAD       DATA 0xbd
0000            152   _I2C0STAT       DATA 0xb9
0000            153   _IE             DATA 0xa8
0000            154   _IP             DATA 0xb8
0000            155   _IPH            DATA 0xf2
0000            156   _IT01CF         DATA 0xe4
0000            157   _LFO0CN         DATA 0xb1
0000            158   _P0             DATA 0x80
0000            159   _P0MASK         DATA 0xfe
0000            160   _P0MAT          DATA 0xfd
0000            161   _P0MDIN         DATA 0xf1
0000            162   _P0MDOUT        DATA 0xa4
0000            163   _P0SKIP         DATA 0xd4
0000            164   _P1             DATA 0x90
0000            165   _P1MASK         DATA 0xee
0000            166   _P1MAT          DATA 0xed
0000            167   _P1MDIN         DATA 0xf2
0000            168   _P1MDOUT        DATA 0xa5
0000            169   _P1SKIP         DATA 0xd5
0000            170   _P2             DATA 0xa0
0000            171   _P2MASK         DATA 0xfc
0000            172   _P2MAT          DATA 0xfb
0000            173   _P2MDIN         DATA 0xf3
0000            174   _P2MDOUT        DATA 0xa6
0000            175   _P2SKIP         DATA 0xcc
0000            176   _P3             DATA 0xb0
0000            177   _P3MDIN         DATA 0xf4
0000            178   _P3MDOUT        DATA 0x9c
0000            179   _PCA0CENT       DATA 0x9e
0000            180   _PCA0CLR        DATA 0x9c
0000            181   _PCA0CN0        DATA 0xd8
0000            182   _PCA0CPH0       DATA 0xfc
0000            183   _PCA0CPH1       DATA 0xea
0000            184   _PCA0CPH2       DATA 0xec
0000            185   _PCA0CPH3       DATA 0xf5
0000            186   _PCA0CPH4       DATA 0x85
0000            187   _PCA0CPH5       DATA 0xde
0000            188   _PCA0CPL0       DATA 0xfb
0000            189   _PCA0CPL1       DATA 0xe9
0000            190   _PCA0CPL2       DATA 0xeb
0000            191   _PCA0CPL3       DATA 0xf4
0000            192   _PCA0CPL4       DATA 0x84
0000            193   _PCA0CPL5       DATA 0xdd
0000            194   _PCA0CPM0       DATA 0xda
0000            195   _PCA0CPM1       DATA 0xdb
0000            196   _PCA0CPM2       DATA 0xdc
0000            197   _PCA0CPM3       DATA 0xae
0000            198   _PCA0CPM4       DATA 0xaf
0000            199   _PCA0CPM5       DATA 0xcc
0000            200   _PCA0H          DATA 0xfa
0000            201   _PCA0L          DATA 0xf9
0000            202   _PCA0MD         DATA 0xd9
0000            203   _PCA0POL        DATA 0x96
0000            204   _PCA0PWM        DATA 0xf7
0000            205   _PCON0          DATA 0x87
0000            206   _PCON1          DATA 0xcd
0000            207   _PFE0CN         DATA 0xc1
0000            208   _PRTDRV         DATA 0xf6
0000            209   _PSCTL          DATA 0x8f
0000            210   _PSTAT0         DATA 0xaa
0000            211   _PSW            DATA 0xd0
0000            212   _REF0CN         DATA 0xd1
0000            213   _REG0CN         DATA 0xc9
0000            214   _REVID          DATA 0xb6
0000            215   _RSTSRC         DATA 0xef
0000            216   _SBCON1         DATA 0x94
0000            217   _SBRLH1         DATA 0x96
0000            218   _SBRLL1         DATA 0x95
0000            219   _SBUF           DATA 0x99
0000            220   _SBUF0          DATA 0x99
0000            221   _SBUF1          DATA 0x92
0000            222   _SCON           DATA 0x98
0000            223   _SCON0          DATA 0x98
0000            224   _SCON1          DATA 0xc8
0000            225   _SFRPAGE        DATA 0xa7
0000            226   _SFRPGCN        DATA 0xbc
0000            227   _SFRSTACK       DATA 0xd7
0000            228   _SMB0ADM        DATA 0xd6
0000            229   _SMB0ADR        DATA 0xd7
0000            230   _SMB0CF         DATA 0xc1
0000            231   _SMB0CN0        DATA 0xc0
0000            232   _SMB0DAT        DATA 0xc2
0000            233   _SMB0FCN0       DATA 0xc3
0000            234   _SMB0FCN1       DATA 0xc4
0000            235   _SMB0FCT        DATA 0xef
0000            236   _SMB0RXLN       DATA 0xc5
0000            237   _SMB0TC         DATA 0xac
0000            238   _SMOD1          DATA 0x93
0000            239   _SP             DATA 0x81
0000            240   _SPI0CFG        DATA 0xa1
0000            241   _SPI0CKR        DATA 0xa2
0000            242   _SPI0CN0        DATA 0xf8
0000            243   _SPI0DAT        DATA 0xa3
0000            244   _SPI0FCN0       DATA 0x9a
0000            245   _SPI0FCN1       DATA 0x9b
0000            246   _SPI0FCT        DATA 0xf7
0000            247   _SPI0PCF        DATA 0xdf
0000            248   _TCON           DATA 0x88
0000            249   _TH0            DATA 0x8c
0000            250   _TH1            DATA 0x8d
0000            251   _TL0            DATA 0x8a
0000            252   _TL1            DATA 0x8b
0000            253   _TMOD           DATA 0x89
0000            254   _TMR2CN0        DATA 0xc8
0000            255   _TMR2CN1        DATA 0xfd
0000            256   _TMR2H          DATA 0xcf
0000            257   _TMR2L          DATA 0xce
0000            258   _TMR2RLH        DATA 0xcb
0000            259   _TMR2RLL        DATA 0xca
0000            260   _TMR3CN0        DATA 0x91
0000            261   _TMR3CN1        DATA 0xfe
0000            262   _TMR3H          DATA 0x95
0000            263   _TMR3L          DATA 0x94
0000            264   _TMR3RLH        DATA 0x93
0000            265   _TMR3RLL        DATA 0x92
0000            266   _TMR4CN0        DATA 0x98
0000            267   _TMR4CN1        DATA 0xff
0000            268   _TMR4H          DATA 0xa5
0000            269   _TMR4L          DATA 0xa4
0000            270   _TMR4RLH        DATA 0xa3
0000            271   _TMR4RLL        DATA 0xa2
0000            272   _TMR5CN0        DATA 0xc0
0000            273   _TMR5CN1        DATA 0xf1
0000            274   _TMR5H          DATA 0xd5
0000            275   _TMR5L          DATA 0xd4
0000            276   _TMR5RLH        DATA 0xd3
0000            277   _TMR5RLL        DATA 0xd2
0000            278   _UART0PCF       DATA 0xd9
0000            279   _UART1FCN0      DATA 0x9d
0000            280   _UART1FCN1      DATA 0xd8
0000            281   _UART1FCT       DATA 0xfa
0000            282   _UART1LIN       DATA 0x9e
0000            283   _UART1PCF       DATA 0xda
0000            284   _VDM0CN         DATA 0xff
0000            285   _WDTCN          DATA 0x97
0000            286   _XBR0           DATA 0xe1
0000            287   _XBR1           DATA 0xe2
0000            288   _XBR2           DATA 0xe3
0000            289   _XOSC0CN        DATA 0x86
0000            290   _DPTR           DATA 0x8382
0000            291   _TMR2RL         DATA 0xcbca
0000            292   _TMR3RL         DATA 0x9392
0000            293   _TMR4RL         DATA 0xa3a2
0000            294   _TMR5RL         DATA 0xd3d2
0000            295   _TMR0           DATA 0x8c8a
0000            296   _TMR1           DATA 0x8d8b
0000            297   _TMR2           DATA 0xcfce
0000            298   _TMR3           DATA 0x9594
0000            299   _TMR4           DATA 0xa5a4
0000            300   _TMR5           DATA 0xd5d4
0000            301   _SBRL1          DATA 0x9695
0000            302   _PCA0           DATA 0xfaf9
0000            303   _PCA0CP0        DATA 0xfcfb
0000            304   _PCA0CP1        DATA 0xeae9
0000            305   _PCA0CP2        DATA 0xeceb
0000            306   _PCA0CP3        DATA 0xf5f4
0000            307   _PCA0CP4        DATA 0x8584
0000            308   _PCA0CP5        DATA 0xdedd
0000            309   _ADC0ASA        DATA 0xb6b5
0000            310   _ADC0GT         DATA 0xc4c3
0000            311   _ADC0           DATA 0xbebd
0000            312   _ADC0LT         DATA 0xc6c5
0000            313   _DAC0           DATA 0x8584
0000            314   _DAC1           DATA 0x8a89
0000            315   _DAC2           DATA 0x8c8b
0000            316   _DAC3           DATA 0x8e8d
0000            317   ;--------------------------------------------------------
0000            318   ; special function bits
0000            319   ;--------------------------------------------------------
0000            320   _ACC_0          BIT 0xe0
0000            321   _ACC_1          BIT 0xe1
0000            322   _ACC_2          BIT 0xe2
0000            323   _ACC_3          BIT 0xe3
0000            324   _ACC_4          BIT 0xe4
0000            325   _ACC_5          BIT 0xe5
0000            326   _ACC_6          BIT 0xe6
0000            327   _ACC_7          BIT 0xe7
0000            328   _TEMPE          BIT 0xe8
0000            329   _ADGN0          BIT 0xe9
0000            330   _ADGN1          BIT 0xea
0000            331   _ADWINT         BIT 0xeb
0000            332   _ADBUSY         BIT 0xec
0000            333   _ADINT          BIT 0xed
0000            334   _IPOEN          BIT 0xee
0000            335   _ADEN           BIT 0xef
0000            336   _B_0            BIT 0xf0
0000            337   _B_1            BIT 0xf1
0000            338   _B_2            BIT 0xf2
0000            339   _B_3            BIT 0xf3
0000            340   _B_4            BIT 0xf4
0000            341   _B_5            BIT 0xf5
0000            342   _B_6            BIT 0xf6
0000            343   _B_7            BIT 0xf7
0000            344   _C0FIF          BIT 0xe8
0000            345   _C0RIF          BIT 0xe9
0000            346   _C1FIF          BIT 0xea
0000            347   _C1RIF          BIT 0xeb
0000            348   _C2FIF          BIT 0xec
0000            349   _C2RIF          BIT 0xed
0000            350   _C3FIF          BIT 0xee
0000            351   _C3RIF          BIT 0xef
0000            352   _D1SRC0         BIT 0x88
0000            353   _D1SRC1         BIT 0x89
0000            354   _D1AMEN         BIT 0x8a
0000            355   _D01REFSL       BIT 0x8b
0000            356   _D3SRC0         BIT 0x8c
0000            357   _D3SRC1         BIT 0x8d
0000            358   _D3AMEN         BIT 0x8e
0000            359   _D23REFSL       BIT 0x8f
0000            360   _D0UDIS         BIT 0x98
0000            361   _D1UDIS         BIT 0x99
0000            362   _D2UDIS         BIT 0x9a
0000            363   _D3UDIS         BIT 0x9b
0000            364   _EX0            BIT 0xa8
0000            365   _ET0            BIT 0xa9
0000            366   _EX1            BIT 0xaa
0000            367   _ET1            BIT 0xab
0000            368   _ES0            BIT 0xac
0000            369   _ET2            BIT 0xad
0000            370   _ESPI0          BIT 0xae
0000            371   _EA             BIT 0xaf
0000            372   _PX0            BIT 0xb8
0000            373   _PT0            BIT 0xb9
0000            374   _PX1            BIT 0xba
0000            375   _PT1            BIT 0xbb
0000            376   _PS0            BIT 0xbc
0000            377   _PT2            BIT 0xbd
0000            378   _PSPI0          BIT 0xbe
0000            379   _P0_0           BIT 0x80
0000            380   _P0_1           BIT 0x81
0000            381   _P0_2           BIT 0x82
0000            382   _P0_3           BIT 0x83
0000            383   _P0_4           BIT 0x84
0000            384   _P0_5           BIT 0x85
0000            385   _P0_6           BIT 0x86
0000            386   _P0_7           BIT 0x87
0000            387   _P1_0           BIT 0x90
0000            388   _P1_1           BIT 0x91
0000            389   _P1_2           BIT 0x92
0000            390   _P1_3           BIT 0x93
0000            391   _P1_4           BIT 0x94
0000            392   _P1_5           BIT 0x95
0000            393   _P1_6           BIT 0x96
0000            394   _P1_7           BIT 0x97
0000            395   _P2_0           BIT 0xa0
0000            396   _P2_1           BIT 0xa1
0000            397   _P2_2           BIT 0xa2
0000            398   _P2_3           BIT 0xa3
0000            399   _P2_4           BIT 0xa4
0000            400   _P2_5           BIT 0xa5
0000            401   _P2_6           BIT 0xa6
0000            402   _P3_0           BIT 0xb0
0000            403   _P3_1           BIT 0xb1
0000            404   _P3_2           BIT 0xb2
0000            405   _P3_3           BIT 0xb3
0000            406   _P3_4           BIT 0xb4
0000            407   _P3_7           BIT 0xb7
0000            408   _CCF0           BIT 0xd8
0000            409   _CCF1           BIT 0xd9
0000            410   _CCF2           BIT 0xda
0000            411   _CCF3           BIT 0xdb
0000            412   _CCF4           BIT 0xdc
0000            413   _CCF5           BIT 0xdd
0000            414   _CR             BIT 0xde
0000            415   _CF             BIT 0xdf
0000            416   _PARITY         BIT 0xd0
0000            417   _F1             BIT 0xd1
0000            418   _OV             BIT 0xd2
0000            419   _RS0            BIT 0xd3
0000            420   _RS1            BIT 0xd4
0000            421   _F0             BIT 0xd5
0000            422   _AC             BIT 0xd6
0000            423   _CY             BIT 0xd7
0000            424   _RI             BIT 0x98
0000            425   _TI             BIT 0x99
0000            426   _RB8            BIT 0x9a
0000            427   _TB8            BIT 0x9b
0000            428   _REN            BIT 0x9c
0000            429   _CE             BIT 0x9d
0000            430   _SMODE          BIT 0x9e
0000            431   _RI1            BIT 0xc8
0000            432   _TI1            BIT 0xc9
0000            433   _RBX1           BIT 0xca
0000            434   _TBX1           BIT 0xcb
0000            435   _REN1           BIT 0xcc
0000            436   _PERR1          BIT 0xcd
0000            437   _OVR1           BIT 0xce
0000            438   _SI             BIT 0xc0
0000            439   _ACK            BIT 0xc1
0000            440   _ARBLOST        BIT 0xc2
0000            441   _ACKRQ          BIT 0xc3
0000            442   _STO            BIT 0xc4
0000            443   _STA            BIT 0xc5
0000            444   _TXMODE         BIT 0xc6
0000            445   _MASTER         BIT 0xc7
0000            446   _SPIEN          BIT 0xf8
0000            447   _TXNF           BIT 0xf9
0000            448   _NSSMD0         BIT 0xfa
0000            449   _NSSMD1         BIT 0xfb
0000            450   _RXOVRN         BIT 0xfc
0000            451   _MODF           BIT 0xfd
0000            452   _WCOL           BIT 0xfe
0000            453   _SPIF           BIT 0xff
0000            454   _IT0            BIT 0x88
0000            455   _IE0            BIT 0x89
0000            456   _IT1            BIT 0x8a
0000            457   _IE1            BIT 0x8b
0000            458   _TR0            BIT 0x8c
0000            459   _TF0            BIT 0x8d
0000            460   _TR1            BIT 0x8e
0000            461   _TF1            BIT 0x8f
0000            462   _T2XCLK0        BIT 0xc8
0000            463   _T2XCLK1        BIT 0xc9
0000            464   _TR2            BIT 0xca
0000            465   _T2SPLIT        BIT 0xcb
0000            466   _TF2CEN         BIT 0xcc
0000            467   _TF2LEN         BIT 0xcd
0000            468   _TF2L           BIT 0xce
0000            469   _TF2H           BIT 0xcf
0000            470   _T4XCLK0        BIT 0x98
0000            471   _T4XCLK1        BIT 0x99
0000            472   _TR4            BIT 0x9a
0000            473   _T4SPLIT        BIT 0x9b
0000            474   _TF4CEN         BIT 0x9c
0000            475   _TF4LEN         BIT 0x9d
0000            476   _TF4L           BIT 0x9e
0000            477   _TF4H           BIT 0x9f
0000            478   _T5XCLK0        BIT 0xc0
0000            479   _T5XCLK1        BIT 0xc1
0000            480   _TR5            BIT 0xc2
0000            481   _T5SPLIT        BIT 0xc3
0000            482   _TF5CEN         BIT 0xc4
0000            483   _TF5LEN         BIT 0xc5
0000            484   _TF5L           BIT 0xc6
0000            485   _TF5H           BIT 0xc7
0000            486   _RIE            BIT 0xd8
0000            487   _RXTO0          BIT 0xd9
0000            488   _RXTO1          BIT 0xda
0000            489   _RFRQ           BIT 0xdb
0000            490   _TIE            BIT 0xdc
0000            491   _TXHOLD         BIT 0xdd
0000            492   _TXNF1          BIT 0xde
0000            493   _TFRQ           BIT 0xdf
0000            494   ;--------------------------------------------------------
0000            495   ; overlayable register banks
0000            496   ;--------------------------------------------------------
0000            497            rbank0 segment data overlay
0000            498   ;--------------------------------------------------------
0000            499   ; internal ram data
0000            500   ;--------------------------------------------------------
0000            501            rseg R_DSEG
0000            502   _LCDprint_PARM_2:
0000            503            ds 1
0001            504   _LCDprint_column_PARM_2:
0001            505            ds 1
0002            506   _LCDprint_column_PARM_3:
0002            507            ds 1
0003            508   _getsn_PARM_2:
0003            509            ds 2
0005            510   _getsn_buff_1_75:
0005            511            ds 3
0008            512   _getsn_sloc0_1_0:
0008            513            ds 2
000A            514   _Convert_to_ascii_PARM_2:
000A            515            ds 2
000C            516   _Convert_to_ascii_PARM_3:
000C            517            ds 2
000E            518   _Convert_to_ascii_string_1_80:
000E            519            ds 3
0011            520   _main_v_1_85:
0011            521            ds 16
0021            522   _main_message_1_85:
0021            523            ds 10
002B            524   ;--------------------------------------------------------
002B            525   ; overlayable items in internal ram 
002B            526   ;--------------------------------------------------------
0000            527            rseg    R_OSEG
0000            528            rseg    R_OSEG
0000            529   _InitPinADC_PARM_2:
0000            530            ds 1
0001            531            rseg    R_OSEG
0001            532   ;--------------------------------------------------------
0001            533   ; indirectly addressable internal ram data
0001            534   ;--------------------------------------------------------
0000            535            rseg R_ISEG
0000            536   ;--------------------------------------------------------
0000            537   ; absolute internal ram data
0000            538   ;--------------------------------------------------------
0000            539            DSEG
0000            540   ;--------------------------------------------------------
0000            541   ; bit data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_BSEG
0000            544   _LCDprint_PARM_3:
0000            545            DBIT    1
0001            546   _LCDprint_column_PARM_4:
0001            547            DBIT    1
0002            548   ;--------------------------------------------------------
0002            549   ; paged external ram data
0002            550   ;--------------------------------------------------------
0000            551            rseg R_PSEG
0000            552   ;--------------------------------------------------------
0000            553   ; external ram data
0000            554   ;--------------------------------------------------------
0000            555            rseg R_XSEG
0000            556   ;--------------------------------------------------------
0000            557   ; absolute external ram data
0000            558   ;--------------------------------------------------------
0000            559            XSEG
0000            560   ;--------------------------------------------------------
0000            561   ; external initialized ram data
0000            562   ;--------------------------------------------------------
0000            563            rseg R_IXSEG
0000            564            rseg R_HOME
0000            565            rseg R_GSINIT
0000            566            rseg R_CSEG
0000            567   ;--------------------------------------------------------
0000            568   ; Reset entry point and interrupt vectors
0000            569   ;--------------------------------------------------------
0000            570            CSEG at 0x0000
0000 020100     571            ljmp    _crt0
0003            572   ;--------------------------------------------------------
0003            573   ; global & static initialisations
0003            574   ;--------------------------------------------------------
0000            575            rseg R_HOME
0000            576            rseg R_GSINIT
0000            577            rseg R_GSINIT
0000            578   ;--------------------------------------------------------
0000            579   ; data variables initialization
0000            580   ;--------------------------------------------------------
0000            581            rseg R_DINIT
0000            582            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            583   ;--------------------------------------------------------
0000            584   ; code
0000            585   ;--------------------------------------------------------
0000            586            rseg R_CSEG
0000            587   ;------------------------------------------------------------
0000            588   ;Allocation info for local variables in function '_c51_external_startup'
0000            589   ;------------------------------------------------------------
0000            590   ;------------------------------------------------------------
0000            591   ;        C:\Users\allisony\Documents\ElecRobot\test.c:26: char _c51_external_startup (void)
0000            592   ;        -----------------------------------------
0000            593   ;         function _c51_external_startup
0000            594   ;        -----------------------------------------
0000            595   __c51_external_startup:
0000            596            using   0
0000            597   ;        C:\Users\allisony\Documents\ElecRobot\test.c:29: SFRPAGE = 0x00;
0000 75A700     598            mov     _SFRPAGE,#0x00
0003            599   ;        C:\Users\allisony\Documents\ElecRobot\test.c:30: WDTCN = 0xDE; //First key
0003 7597DE     600            mov     _WDTCN,#0xDE
0006            601   ;        C:\Users\allisony\Documents\ElecRobot\test.c:31: WDTCN = 0xAD; //Second key
0006 7597AD     602            mov     _WDTCN,#0xAD
0009            603   ;        C:\Users\allisony\Documents\ElecRobot\test.c:33: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     604            mov     _VDM0CN,#0x80
000C            605   ;        C:\Users\allisony\Documents\ElecRobot\test.c:34: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     606            mov     _RSTSRC,#0x06
000F            607   ;        C:\Users\allisony\Documents\ElecRobot\test.c:41: SFRPAGE = 0x10;
000F 75A710     608            mov     _SFRPAGE,#0x10
0012            609   ;        C:\Users\allisony\Documents\ElecRobot\test.c:42: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     610            mov     _PFE0CN,#0x20
0015            611   ;        C:\Users\allisony\Documents\ElecRobot\test.c:43: SFRPAGE = 0x00;
0015 75A700     612            mov     _SFRPAGE,#0x00
0018            613   ;        C:\Users\allisony\Documents\ElecRobot\test.c:64: CLKSEL = 0x00;
0018 75A900     614            mov     _CLKSEL,#0x00
001B            615   ;        C:\Users\allisony\Documents\ElecRobot\test.c:65: CLKSEL = 0x00;
001B 75A900     616            mov     _CLKSEL,#0x00
001E            617   ;        C:\Users\allisony\Documents\ElecRobot\test.c:66: while ((CLKSEL & 0x80) == 0);
001E            618   L002001?:
001E E5A9       619            mov     a,_CLKSEL
0020 30E750     620            jnb     acc.7,L002001?
0023            621   ;        C:\Users\allisony\Documents\ElecRobot\test.c:67: CLKSEL = 0x03;
0023 75A903     622            mov     _CLKSEL,#0x03
0026            623   ;        C:\Users\allisony\Documents\ElecRobot\test.c:68: CLKSEL = 0x03;
0026 75A903     624            mov     _CLKSEL,#0x03
0029            625   ;        C:\Users\allisony\Documents\ElecRobot\test.c:69: while ((CLKSEL & 0x80) == 0);
0029            626   L002004?:
0029 E5A9       627            mov     a,_CLKSEL
002B 30E7D0     628            jnb     acc.7,L002004?
002E            629   ;        C:\Users\allisony\Documents\ElecRobot\test.c:74: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     630            orl     _P0MDOUT,#0x10
0031            631   ;        C:\Users\allisony\Documents\ElecRobot\test.c:75: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     632            mov     _XBR0,#0x01
0034            633   ;        C:\Users\allisony\Documents\ElecRobot\test.c:76: XBR1     = 0X00;
0034 75E200     634            mov     _XBR1,#0x00
0037            635   ;        C:\Users\allisony\Documents\ElecRobot\test.c:77: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     636            mov     _XBR2,#0x40
003A            637   ;        C:\Users\allisony\Documents\ElecRobot\test.c:83: SCON0 = 0x10;
003A 759810     638            mov     _SCON0,#0x10
003D            639   ;        C:\Users\allisony\Documents\ElecRobot\test.c:84: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     640            mov     _TH1,#0xE6
0040            641   ;        C:\Users\allisony\Documents\ElecRobot\test.c:85: TL1 = TH1;      // Init Timer1
0040 858D8B     642            mov     _TL1,_TH1
0043            643   ;        C:\Users\allisony\Documents\ElecRobot\test.c:86: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     644            anl     _TMOD,#0x0F
0046            645   ;        C:\Users\allisony\Documents\ElecRobot\test.c:87: TMOD |=  0x20;                       
0046 438920     646            orl     _TMOD,#0x20
0049            647   ;        C:\Users\allisony\Documents\ElecRobot\test.c:88: TR1 = 1; // START Timer1
0049 D28E       648            setb    _TR1
004B            649   ;        C:\Users\allisony\Documents\ElecRobot\test.c:89: TI = 1;  // Indicate TX0 ready
004B D299       650            setb    _TI
004D            651   ;        C:\Users\allisony\Documents\ElecRobot\test.c:91: return 0;
004D 758200     652            mov     dpl,#0x00
0050 22         653            ret
0051            654   ;------------------------------------------------------------
0051            655   ;Allocation info for local variables in function 'InitADC'
0051            656   ;------------------------------------------------------------
0051            657   ;------------------------------------------------------------
0051            658   ;        C:\Users\allisony\Documents\ElecRobot\test.c:94: void InitADC (void)
0051            659   ;        -----------------------------------------
0051            660   ;         function InitADC
0051            661   ;        -----------------------------------------
0051            662   _InitADC:
0051            663   ;        C:\Users\allisony\Documents\ElecRobot\test.c:96: SFRPAGE = 0x00;
0051 75A700     664            mov     _SFRPAGE,#0x00
0054            665   ;        C:\Users\allisony\Documents\ElecRobot\test.c:97: ADC0CN1 = 0b_10_000_000; //14-bit,  Right justified no shifting applied, perform and Accumulate 1 conversion.
0054 75B280     666            mov     _ADC0CN1,#0x80
0057            667   ;        C:\Users\allisony\Documents\ElecRobot\test.c:98: ADC0CF0 = 0b_11111_0_00; // SYSCLK/32
0057 75BCF8     668            mov     _ADC0CF0,#0xF8
005A            669   ;        C:\Users\allisony\Documents\ElecRobot\test.c:99: ADC0CF1 = 0b_0_0_011110; // Same as default for now
005A 75B91E     670            mov     _ADC0CF1,#0x1E
005D            671   ;        C:\Users\allisony\Documents\ElecRobot\test.c:100: ADC0CN0 = 0b_0_0_0_0_0_00_0; // Same as default for now
005D 75E800     672            mov     _ADC0CN0,#0x00
0060            673   ;        C:\Users\allisony\Documents\ElecRobot\test.c:101: ADC0CF2 = 0b_0_01_11111 ; // GND pin, Vref=VDD
0060 75DF3F     674            mov     _ADC0CF2,#0x3F
0063            675   ;        C:\Users\allisony\Documents\ElecRobot\test.c:102: ADC0CN2 = 0b_0_000_0000;  // Same as default for now. ADC0 conversion initiated on write of 1 to ADBUSY.
0063 75B300     676            mov     _ADC0CN2,#0x00
0066            677   ;        C:\Users\allisony\Documents\ElecRobot\test.c:103: ADEN=1; // Enable ADC
0066 D2EF       678            setb    _ADEN
0068 22         679            ret
0069            680   ;------------------------------------------------------------
0069            681   ;Allocation info for local variables in function 'Timer3us'
0069            682   ;------------------------------------------------------------
0069            683   ;us                        Allocated to registers r2 r3 
0069            684   ;i                         Allocated to registers r4 r5 
0069            685   ;------------------------------------------------------------
0069            686   ;        C:\Users\allisony\Documents\ElecRobot\test.c:107: void Timer3us(unsigned int us)
0069            687   ;        -----------------------------------------
0069            688   ;         function Timer3us
0069            689   ;        -----------------------------------------
0069            690   _Timer3us:
0069 AA82       691            mov     r2,dpl
006B AB83       692            mov     r3,dph
006D            693   ;        C:\Users\allisony\Documents\ElecRobot\test.c:112: CKCON0|=0b_0100_0000;
006D 438E40     694            orl     _CKCON0,#0x40
0070            695   ;        C:\Users\allisony\Documents\ElecRobot\test.c:114: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     696            mov     _TMR3RL,#0xB8
0073 7593FF     697            mov     (_TMR3RL >> 8),#0xFF
0076            698   ;        C:\Users\allisony\Documents\ElecRobot\test.c:115: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     699            mov     _TMR3,_TMR3RL
0079 859395     700            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            701   ;        C:\Users\allisony\Documents\ElecRobot\test.c:117: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     702            mov     _TMR3CN0,#0x04
007F            703   ;        C:\Users\allisony\Documents\ElecRobot\test.c:118: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7C00       704            mov     r4,#0x00
0081 7D00       705            mov     r5,#0x00
0083            706   L004004?:
0083 C3         707            clr     c
0084 EC         708            mov     a,r4
0085 9A         709            subb    a,r2
0086 ED         710            mov     a,r5
0087 9B         711            subb    a,r3
0088 5001       712            jnc     L004007?
008A            713   ;        C:\Users\allisony\Documents\ElecRobot\test.c:120: while (!(TMR3CN0 & 0x80));  // Wait for overflow
008A            714   L004001?:
008A E591       715            mov     a,_TMR3CN0
008C 30E710     716            jnb     acc.7,L004001?
008F            717   ;        C:\Users\allisony\Documents\ElecRobot\test.c:121: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008F 53917F     718            anl     _TMR3CN0,#0x7F
0092            719   ;        C:\Users\allisony\Documents\ElecRobot\test.c:118: for (i = 0; i < us; i++)       // Count <us> overflows
0092 0C         720            inc     r4
0093 BC0090     721            cjne    r4,#0x00,L004004?
0096 0D         722            inc     r5
0097 8001       723            sjmp    L004004?
0099            724   L004007?:
0099            725   ;        C:\Users\allisony\Documents\ElecRobot\test.c:123: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0099 759100     726            mov     _TMR3CN0,#0x00
009C 22         727            ret
009D            728   ;------------------------------------------------------------
009D            729   ;Allocation info for local variables in function 'waitms'
009D            730   ;------------------------------------------------------------
009D            731   ;ms                        Allocated to registers r2 r3 
009D            732   ;j                         Allocated to registers r4 r5 
009D            733   ;k                         Allocated to registers r6 
009D            734   ;------------------------------------------------------------
009D            735   ;        C:\Users\allisony\Documents\ElecRobot\test.c:126: void waitms (unsigned int ms)
009D            736   ;        -----------------------------------------
009D            737   ;         function waitms
009D            738   ;        -----------------------------------------
009D            739   _waitms:
009D AA82       740            mov     r2,dpl
009F AB83       741            mov     r3,dph
00A1            742   ;        C:\Users\allisony\Documents\ElecRobot\test.c:130: for(j=0; j<ms; j++)
00A1 7C00       743            mov     r4,#0x00
00A3 7D00       744            mov     r5,#0x00
00A5            745   L005005?:
00A5 C3         746            clr     c
00A6 EC         747            mov     a,r4
00A7 9A         748            subb    a,r2
00A8 ED         749            mov     a,r5
00A9 9B         750            subb    a,r3
00AA 5001       751            jnc     L005009?
00AC            752   ;        C:\Users\allisony\Documents\ElecRobot\test.c:131: for (k=0; k<4; k++) Timer3us(250);
00AC 7E00       753            mov     r6,#0x00
00AE            754   L005001?:
00AE BE0410     755            cjne    r6,#0x04,L005018?
00B1            756   L005018?:
00B1 5001       757            jnc     L005007?
00B3 9000FA     758            mov     dptr,#0x00FA
00B6 C002       759            push    ar2
00B8 C003       760            push    ar3
00BA C004       761            push    ar4
00BC C005       762            push    ar5
00BE C006       763            push    ar6
00C0 120100     764            lcall   _Timer3us
00C3 D006       765            pop     ar6
00C5 D005       766            pop     ar5
00C7 D004       767            pop     ar4
00C9 D003       768            pop     ar3
00CB D002       769            pop     ar2
00CD 0E         770            inc     r6
00CE 8001       771            sjmp    L005001?
00D0            772   L005007?:
00D0            773   ;        C:\Users\allisony\Documents\ElecRobot\test.c:130: for(j=0; j<ms; j++)
00D0 0C         774            inc     r4
00D1 BC0050     775            cjne    r4,#0x00,L005005?
00D4 0D         776            inc     r5
00D5 8001       777            sjmp    L005005?
00D7            778   L005009?:
00D7 22         779            ret
00D8            780   ;------------------------------------------------------------
00D8            781   ;Allocation info for local variables in function 'InitPinADC'
00D8            782   ;------------------------------------------------------------
00D8            783   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D8            784   ;portno                    Allocated to registers r2 
00D8            785   ;mask                      Allocated to registers r3 
00D8            786   ;------------------------------------------------------------
00D8            787   ;        C:\Users\allisony\Documents\ElecRobot\test.c:136: void InitPinADC (unsigned char portno, unsigned char pinno)
00D8            788   ;        -----------------------------------------
00D8            789   ;         function InitPinADC
00D8            790   ;        -----------------------------------------
00D8            791   _InitPinADC:
00D8 AA82       792            mov     r2,dpl
00DA            793   ;        C:\Users\allisony\Documents\ElecRobot\test.c:140: mask=1<<pinno;
00DA 8550F0     794            mov     b,_InitPinADC_PARM_2
00DD 05F0       795            inc     b
00DF 7401       796            mov     a,#0x01
00E1 8001       797            sjmp    L006013?
00E3            798   L006011?:
00E3 25E0       799            add     a,acc
00E5            800   L006013?:
00E5 D5F010     801            djnz    b,L006011?
00E8 FB         802            mov     r3,a
00E9            803   ;        C:\Users\allisony\Documents\ElecRobot\test.c:142: SFRPAGE = 0x20;
00E9 75A720     804            mov     _SFRPAGE,#0x20
00EC            805   ;        C:\Users\allisony\Documents\ElecRobot\test.c:143: switch (portno)
00EC BA0050     806            cjne    r2,#0x00,L006014?
00EF 8001       807            sjmp    L006001?
00F1            808   L006014?:
00F1 BA01D0     809            cjne    r2,#0x01,L006015?
00F4 8001       810            sjmp    L006002?
00F6            811   L006015?:
00F6            812   ;        C:\Users\allisony\Documents\ElecRobot\test.c:145: case 0:
00F6 BA0250     813            cjne    r2,#0x02,L006005?
00F9 8001       814            sjmp    L006003?
00FB            815   L006001?:
00FB            816   ;        C:\Users\allisony\Documents\ElecRobot\test.c:146: P0MDIN &= (~mask); // Set pin as analog input
00FB EB         817            mov     a,r3
00FC F4         818            cpl     a
00FD FA         819            mov     r2,a
00FE 52F1       820            anl     _P0MDIN,a
0100            821   ;        C:\Users\allisony\Documents\ElecRobot\test.c:147: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0100 EB         822            mov     a,r3
0101 42D4       823            orl     _P0SKIP,a
0103            824   ;        C:\Users\allisony\Documents\ElecRobot\test.c:148: break;
0103            825   ;        C:\Users\allisony\Documents\ElecRobot\test.c:149: case 1:
0103 8001       826            sjmp    L006005?
0105            827   L006002?:
0105            828   ;        C:\Users\allisony\Documents\ElecRobot\test.c:150: P1MDIN &= (~mask); // Set pin as analog input
0105 EB         829            mov     a,r3
0106 F4         830            cpl     a
0107 FA         831            mov     r2,a
0108 52F2       832            anl     _P1MDIN,a
010A            833   ;        C:\Users\allisony\Documents\ElecRobot\test.c:151: P1SKIP |= mask; // Skip Crossbar decoding for this pin
010A EB         834            mov     a,r3
010B 42D5       835            orl     _P1SKIP,a
010D            836   ;        C:\Users\allisony\Documents\ElecRobot\test.c:152: break;
010D            837   ;        C:\Users\allisony\Documents\ElecRobot\test.c:153: case 2:
010D 8001       838            sjmp    L006005?
010F            839   L006003?:
010F            840   ;        C:\Users\allisony\Documents\ElecRobot\test.c:154: P2MDIN &= (~mask); // Set pin as analog input
010F EB         841            mov     a,r3
0110 F4         842            cpl     a
0111 FA         843            mov     r2,a
0112 52F3       844            anl     _P2MDIN,a
0114            845   ;        C:\Users\allisony\Documents\ElecRobot\test.c:155: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0114 EB         846            mov     a,r3
0115 42CC       847            orl     _P2SKIP,a
0117            848   ;        C:\Users\allisony\Documents\ElecRobot\test.c:159: }
0117            849   L006005?:
0117            850   ;        C:\Users\allisony\Documents\ElecRobot\test.c:160: SFRPAGE = 0x00;
0117 75A700     851            mov     _SFRPAGE,#0x00
011A 22         852            ret
011B            853   ;------------------------------------------------------------
011B            854   ;Allocation info for local variables in function 'ADC_at_Pin'
011B            855   ;------------------------------------------------------------
011B            856   ;pin                       Allocated to registers 
011B            857   ;------------------------------------------------------------
011B            858   ;        C:\Users\allisony\Documents\ElecRobot\test.c:163: unsigned int ADC_at_Pin(unsigned char pin)
011B            859   ;        -----------------------------------------
011B            860   ;         function ADC_at_Pin
011B            861   ;        -----------------------------------------
011B            862   _ADC_at_Pin:
011B 8582BB     863            mov     _ADC0MX,dpl
011E            864   ;        C:\Users\allisony\Documents\ElecRobot\test.c:166: ADBUSY=1;       // Dummy conversion first to select new pin
011E D2EC       865            setb    _ADBUSY
0120            866   ;        C:\Users\allisony\Documents\ElecRobot\test.c:167: while (ADBUSY); // Wait for dummy conversion to finish
0120            867   L007001?:
0120 20ECD0     868            jb      _ADBUSY,L007001?
0123            869   ;        C:\Users\allisony\Documents\ElecRobot\test.c:168: ADBUSY = 1;     // Convert voltage at the pin
0123 D2EC       870            setb    _ADBUSY
0125            871   ;        C:\Users\allisony\Documents\ElecRobot\test.c:169: while (ADBUSY); // Wait for conversion to complete
0125            872   L007004?:
0125 20EC10     873            jb      _ADBUSY,L007004?
0128            874   ;        C:\Users\allisony\Documents\ElecRobot\test.c:170: return (ADC0);
0128 85BD82     875            mov     dpl,_ADC0
012B 85BE83     876            mov     dph,(_ADC0 >> 8)
012E 22         877            ret
012F            878   ;------------------------------------------------------------
012F            879   ;Allocation info for local variables in function 'Volts_at_Pin'
012F            880   ;------------------------------------------------------------
012F            881   ;pin                       Allocated to registers r2 
012F            882   ;------------------------------------------------------------
012F            883   ;        C:\Users\allisony\Documents\ElecRobot\test.c:173: float Volts_at_Pin(unsigned char pin)
012F            884   ;        -----------------------------------------
012F            885   ;         function Volts_at_Pin
012F            886   ;        -----------------------------------------
012F            887   _Volts_at_Pin:
012F            888   ;        C:\Users\allisony\Documents\ElecRobot\test.c:175: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
012F 120100     889            lcall   _ADC_at_Pin
0132 120100     890            lcall   ___uint2fs
0135 AA82       891            mov     r2,dpl
0137 AB83       892            mov     r3,dph
0139 ACF0       893            mov     r4,b
013B FD         894            mov     r5,a
013C C002       895            push    ar2
013E C003       896            push    ar3
0140 C004       897            push    ar4
0142 C005       898            push    ar5
0144 906C8B     899            mov     dptr,#0x6C8B
0147 75F053     900            mov     b,#0x53
014A 7440       901            mov     a,#0x40
014C 120100     902            lcall   ___fsmul
014F AA82       903            mov     r2,dpl
0151 AB83       904            mov     r3,dph
0153 ACF0       905            mov     r4,b
0155 FD         906            mov     r5,a
0156 E581       907            mov     a,sp
0158 24FC       908            add     a,#0xfc
015A F581       909            mov     sp,a
015C E4         910            clr     a
015D C0E0       911            push    acc
015F 74FC       912            mov     a,#0xFC
0161 C0E0       913            push    acc
0163 747F       914            mov     a,#0x7F
0165 C0E0       915            push    acc
0167 7446       916            mov     a,#0x46
0169 C0E0       917            push    acc
016B 8A82       918            mov     dpl,r2
016D 8B83       919            mov     dph,r3
016F 8CF0       920            mov     b,r4
0171 ED         921            mov     a,r5
0172 120100     922            lcall   ___fsdiv
0175 AA82       923            mov     r2,dpl
0177 AB83       924            mov     r3,dph
0179 ACF0       925            mov     r4,b
017B FD         926            mov     r5,a
017C E581       927            mov     a,sp
017E 24FC       928            add     a,#0xfc
0180 F581       929            mov     sp,a
0182 8A82       930            mov     dpl,r2
0184 8B83       931            mov     dph,r3
0186 8CF0       932            mov     b,r4
0188 ED         933            mov     a,r5
0189 22         934            ret
018A            935   ;------------------------------------------------------------
018A            936   ;Allocation info for local variables in function 'TIMER0_Init'
018A            937   ;------------------------------------------------------------
018A            938   ;------------------------------------------------------------
018A            939   ;        C:\Users\allisony\Documents\ElecRobot\test.c:178: void TIMER0_Init(void)
018A            940   ;        -----------------------------------------
018A            941   ;         function TIMER0_Init
018A            942   ;        -----------------------------------------
018A            943   _TIMER0_Init:
018A            944   ;        C:\Users\allisony\Documents\ElecRobot\test.c:180: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
018A 5389F0     945            anl     _TMOD,#0xF0
018D            946   ;        C:\Users\allisony\Documents\ElecRobot\test.c:181: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
018D 438901     947            orl     _TMOD,#0x01
0190            948   ;        C:\Users\allisony\Documents\ElecRobot\test.c:182: TR0=0; // Stop Timer/Counter 0
0190 C28C       949            clr     _TR0
0192 22         950            ret
0193            951   ;------------------------------------------------------------
0193            952   ;Allocation info for local variables in function 'LCD_pulse'
0193            953   ;------------------------------------------------------------
0193            954   ;------------------------------------------------------------
0193            955   ;        C:\Users\allisony\Documents\ElecRobot\test.c:184: void LCD_pulse (void)
0193            956   ;        -----------------------------------------
0193            957   ;         function LCD_pulse
0193            958   ;        -----------------------------------------
0193            959   _LCD_pulse:
0193            960   ;        C:\Users\allisony\Documents\ElecRobot\test.c:186: LCD_E=1;
0193 D2A5       961            setb    _P2_5
0195            962   ;        C:\Users\allisony\Documents\ElecRobot\test.c:187: Timer3us(40);
0195 900028     963            mov     dptr,#0x0028
0198 120100     964            lcall   _Timer3us
019B            965   ;        C:\Users\allisony\Documents\ElecRobot\test.c:188: LCD_E=0;
019B C2A5       966            clr     _P2_5
019D 22         967            ret
019E            968   ;------------------------------------------------------------
019E            969   ;Allocation info for local variables in function 'LCD_byte'
019E            970   ;------------------------------------------------------------
019E            971   ;x                         Allocated to registers r2 
019E            972   ;------------------------------------------------------------
019E            973   ;        C:\Users\allisony\Documents\ElecRobot\test.c:191: void LCD_byte (unsigned char x)
019E            974   ;        -----------------------------------------
019E            975   ;         function LCD_byte
019E            976   ;        -----------------------------------------
019E            977   _LCD_byte:
019E AA82       978            mov     r2,dpl
01A0            979   ;        C:\Users\allisony\Documents\ElecRobot\test.c:194: ACC=x; //Send high nible
01A0 8AE0       980            mov     _ACC,r2
01A2            981   ;        C:\Users\allisony\Documents\ElecRobot\test.c:195: LCD_D7=ACC_7;
01A2 A2E7       982            mov     c,_ACC_7
01A4 92A1       983            mov     _P2_1,c
01A6            984   ;        C:\Users\allisony\Documents\ElecRobot\test.c:196: LCD_D6=ACC_6;
01A6 A2E6       985            mov     c,_ACC_6
01A8 92A2       986            mov     _P2_2,c
01AA            987   ;        C:\Users\allisony\Documents\ElecRobot\test.c:197: LCD_D5=ACC_5;
01AA A2E5       988            mov     c,_ACC_5
01AC 92A3       989            mov     _P2_3,c
01AE            990   ;        C:\Users\allisony\Documents\ElecRobot\test.c:198: LCD_D4=ACC_4;
01AE A2E4       991            mov     c,_ACC_4
01B0 92A4       992            mov     _P2_4,c
01B2            993   ;        C:\Users\allisony\Documents\ElecRobot\test.c:199: LCD_pulse();
01B2 C002       994            push    ar2
01B4 120100     995            lcall   _LCD_pulse
01B7            996   ;        C:\Users\allisony\Documents\ElecRobot\test.c:200: Timer3us(40);
01B7 900028     997            mov     dptr,#0x0028
01BA 120100     998            lcall   _Timer3us
01BD D002       999            pop     ar2
01BF           1000   ;        C:\Users\allisony\Documents\ElecRobot\test.c:201: ACC=x; //Send low nible
01BF 8AE0      1001            mov     _ACC,r2
01C1           1002   ;        C:\Users\allisony\Documents\ElecRobot\test.c:202: LCD_D7=ACC_3;
01C1 A2E3      1003            mov     c,_ACC_3
01C3 92A1      1004            mov     _P2_1,c
01C5           1005   ;        C:\Users\allisony\Documents\ElecRobot\test.c:203: LCD_D6=ACC_2;
01C5 A2E2      1006            mov     c,_ACC_2
01C7 92A2      1007            mov     _P2_2,c
01C9           1008   ;        C:\Users\allisony\Documents\ElecRobot\test.c:204: LCD_D5=ACC_1;
01C9 A2E1      1009            mov     c,_ACC_1
01CB 92A3      1010            mov     _P2_3,c
01CD           1011   ;        C:\Users\allisony\Documents\ElecRobot\test.c:205: LCD_D4=ACC_0;
01CD A2E0      1012            mov     c,_ACC_0
01CF 92A4      1013            mov     _P2_4,c
01D1           1014   ;        C:\Users\allisony\Documents\ElecRobot\test.c:206: LCD_pulse();
01D1 020100    1015            ljmp    _LCD_pulse
01D4           1016   ;------------------------------------------------------------
01D4           1017   ;Allocation info for local variables in function 'WriteData'
01D4           1018   ;------------------------------------------------------------
01D4           1019   ;x                         Allocated to registers r2 
01D4           1020   ;------------------------------------------------------------
01D4           1021   ;        C:\Users\allisony\Documents\ElecRobot\test.c:209: void WriteData (unsigned char x)
01D4           1022   ;        -----------------------------------------
01D4           1023   ;         function WriteData
01D4           1024   ;        -----------------------------------------
01D4           1025   _WriteData:
01D4 AA82      1026            mov     r2,dpl
01D6           1027   ;        C:\Users\allisony\Documents\ElecRobot\test.c:211: LCD_RS=1;
01D6 D2A6      1028            setb    _P2_6
01D8           1029   ;        C:\Users\allisony\Documents\ElecRobot\test.c:212: LCD_byte(x);
01D8 8A82      1030            mov     dpl,r2
01DA 120100    1031            lcall   _LCD_byte
01DD           1032   ;        C:\Users\allisony\Documents\ElecRobot\test.c:213: waitms(2);
01DD 900002    1033            mov     dptr,#0x0002
01E0 020100    1034            ljmp    _waitms
01E3           1035   ;------------------------------------------------------------
01E3           1036   ;Allocation info for local variables in function 'WriteCommand'
01E3           1037   ;------------------------------------------------------------
01E3           1038   ;x                         Allocated to registers r2 
01E3           1039   ;------------------------------------------------------------
01E3           1040   ;        C:\Users\allisony\Documents\ElecRobot\test.c:216: void WriteCommand (unsigned char x)
01E3           1041   ;        -----------------------------------------
01E3           1042   ;         function WriteCommand
01E3           1043   ;        -----------------------------------------
01E3           1044   _WriteCommand:
01E3 AA82      1045            mov     r2,dpl
01E5           1046   ;        C:\Users\allisony\Documents\ElecRobot\test.c:218: LCD_RS=0;
01E5 C2A6      1047            clr     _P2_6
01E7           1048   ;        C:\Users\allisony\Documents\ElecRobot\test.c:219: LCD_byte(x);
01E7 8A82      1049            mov     dpl,r2
01E9 120100    1050            lcall   _LCD_byte
01EC           1051   ;        C:\Users\allisony\Documents\ElecRobot\test.c:220: waitms(5);
01EC 900005    1052            mov     dptr,#0x0005
01EF 020100    1053            ljmp    _waitms
01F2           1054   ;------------------------------------------------------------
01F2           1055   ;Allocation info for local variables in function 'LCD_4BIT'
01F2           1056   ;------------------------------------------------------------
01F2           1057   ;------------------------------------------------------------
01F2           1058   ;        C:\Users\allisony\Documents\ElecRobot\test.c:223: void LCD_4BIT (void)
01F2           1059   ;        -----------------------------------------
01F2           1060   ;         function LCD_4BIT
01F2           1061   ;        -----------------------------------------
01F2           1062   _LCD_4BIT:
01F2           1063   ;        C:\Users\allisony\Documents\ElecRobot\test.c:225: LCD_E=0; // Resting state of LCD's enable is zero
01F2 C2A5      1064            clr     _P2_5
01F4           1065   ;        C:\Users\allisony\Documents\ElecRobot\test.c:227: waitms(20);
01F4 900014    1066            mov     dptr,#0x0014
01F7 120100    1067            lcall   _waitms
01FA           1068   ;        C:\Users\allisony\Documents\ElecRobot\test.c:229: WriteCommand(0x33);
01FA 758233    1069            mov     dpl,#0x33
01FD 120100    1070            lcall   _WriteCommand
0200           1071   ;        C:\Users\allisony\Documents\ElecRobot\test.c:230: WriteCommand(0x33);
0200 758233    1072            mov     dpl,#0x33
0203 120100    1073            lcall   _WriteCommand
0206           1074   ;        C:\Users\allisony\Documents\ElecRobot\test.c:231: WriteCommand(0x32); // Change to 4-bit mode
0206 758232    1075            mov     dpl,#0x32
0209 120100    1076            lcall   _WriteCommand
020C           1077   ;        C:\Users\allisony\Documents\ElecRobot\test.c:234: WriteCommand(0x28);
020C 758228    1078            mov     dpl,#0x28
020F 120100    1079            lcall   _WriteCommand
0212           1080   ;        C:\Users\allisony\Documents\ElecRobot\test.c:235: WriteCommand(0x0c);
0212 75820C    1081            mov     dpl,#0x0C
0215 120100    1082            lcall   _WriteCommand
0218           1083   ;        C:\Users\allisony\Documents\ElecRobot\test.c:236: WriteCommand(0x01); // Clear screen command (takes some time)
0218 758201    1084            mov     dpl,#0x01
021B 120100    1085            lcall   _WriteCommand
021E           1086   ;        C:\Users\allisony\Documents\ElecRobot\test.c:237: waitms(20); // Wait for clear screen command to finsih.
021E 900014    1087            mov     dptr,#0x0014
0221 020100    1088            ljmp    _waitms
0224           1089   ;------------------------------------------------------------
0224           1090   ;Allocation info for local variables in function 'LCDprint'
0224           1091   ;------------------------------------------------------------
0224           1092   ;line                      Allocated with name '_LCDprint_PARM_2'
0224           1093   ;string                    Allocated to registers r2 r3 r4 
0224           1094   ;j                         Allocated to registers r5 r6 
0224           1095   ;------------------------------------------------------------
0224           1096   ;        C:\Users\allisony\Documents\ElecRobot\test.c:240: void LCDprint(char * string, unsigned char line, bit clear)
0224           1097   ;        -----------------------------------------
0224           1098   ;         function LCDprint
0224           1099   ;        -----------------------------------------
0224           1100   _LCDprint:
0224 AA82      1101            mov     r2,dpl
0226 AB83      1102            mov     r3,dph
0228 ACF0      1103            mov     r4,b
022A           1104   ;        C:\Users\allisony\Documents\ElecRobot\test.c:244: WriteCommand(line==2?0xc0:0x80);
022A 7402      1105            mov     a,#0x02
022C B57050    1106            cjne    a,_LCDprint_PARM_2,L015013?
022F 7DC0      1107            mov     r5,#0xC0
0231 8001      1108            sjmp    L015014?
0233           1109   L015013?:
0233 7D80      1110            mov     r5,#0x80
0235           1111   L015014?:
0235 8D82      1112            mov     dpl,r5
0237 C002      1113            push    ar2
0239 C003      1114            push    ar3
023B C004      1115            push    ar4
023D 120100    1116            lcall   _WriteCommand
0240           1117   ;        C:\Users\allisony\Documents\ElecRobot\test.c:245: waitms(5);
0240 900005    1118            mov     dptr,#0x0005
0243 120100    1119            lcall   _waitms
0246 D004      1120            pop     ar4
0248 D003      1121            pop     ar3
024A D002      1122            pop     ar2
024C           1123   ;        C:\Users\allisony\Documents\ElecRobot\test.c:247: for(j=0; string[j]!=0; j++)   WriteData(string[j]);// Write the message
024C 7D00      1124            mov     r5,#0x00
024E 7E00      1125            mov     r6,#0x00
0250           1126   L015003?:
0250 ED        1127            mov     a,r5
0251 2A        1128            add     a,r2
0252 FF        1129            mov     r7,a
0253 EE        1130            mov     a,r6
0254 3B        1131            addc    a,r3
0255 F8        1132            mov     r0,a
0256 8C01      1133            mov     ar1,r4
0258 8F82      1134            mov     dpl,r7
025A 8883      1135            mov     dph,r0
025C 89F0      1136            mov     b,r1
025E 120100    1137            lcall   __gptrget
0261 FF        1138            mov     r7,a
0262 6001      1139            jz      L015006?
0264 8F82      1140            mov     dpl,r7
0266 C002      1141            push    ar2
0268 C003      1142            push    ar3
026A C004      1143            push    ar4
026C C005      1144            push    ar5
026E C006      1145            push    ar6
0270 120100    1146            lcall   _WriteData
0273 D006      1147            pop     ar6
0275 D005      1148            pop     ar5
0277 D004      1149            pop     ar4
0279 D003      1150            pop     ar3
027B D002      1151            pop     ar2
027D 0D        1152            inc     r5
027E BD00D0    1153            cjne    r5,#0x00,L015003?
0281 0E        1154            inc     r6
0282 8001      1155            sjmp    L015003?
0284           1156   L015006?:
0284           1157   ;        C:\Users\allisony\Documents\ElecRobot\test.c:248: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0284 30A090    1158            jnb     _LCDprint_PARM_3,L015011?
0287 8D02      1159            mov     ar2,r5
0289 8E03      1160            mov     ar3,r6
028B           1161   L015007?:
028B C3        1162            clr     c
028C EA        1163            mov     a,r2
028D 9410      1164            subb    a,#0x10
028F EB        1165            mov     a,r3
0290 6480      1166            xrl     a,#0x80
0292 9480      1167            subb    a,#0x80
0294 5001      1168            jnc     L015011?
0296 758220    1169            mov     dpl,#0x20
0299 C002      1170            push    ar2
029B C003      1171            push    ar3
029D 120100    1172            lcall   _WriteData
02A0 D003      1173            pop     ar3
02A2 D002      1174            pop     ar2
02A4 0A        1175            inc     r2
02A5 BA00D0    1176            cjne    r2,#0x00,L015007?
02A8 0B        1177            inc     r3
02A9 8001      1178            sjmp    L015007?
02AB           1179   L015011?:
02AB 22        1180            ret
02AC           1181   ;------------------------------------------------------------
02AC           1182   ;Allocation info for local variables in function 'LCDprint_column'
02AC           1183   ;------------------------------------------------------------
02AC           1184   ;line                      Allocated with name '_LCDprint_column_PARM_2'
02AC           1185   ;column                    Allocated with name '_LCDprint_column_PARM_3'
02AC           1186   ;string                    Allocated to registers r2 r3 r4 
02AC           1187   ;j                         Allocated to registers r5 r6 
02AC           1188   ;k                         Allocated to registers r5 r6 
02AC           1189   ;------------------------------------------------------------
02AC           1190   ;        C:\Users\allisony\Documents\ElecRobot\test.c:251: void LCDprint_column(char* string, unsigned char line, unsigned char column, bit clear)
02AC           1191   ;        -----------------------------------------
02AC           1192   ;         function LCDprint_column
02AC           1193   ;        -----------------------------------------
02AC           1194   _LCDprint_column:
02AC AA82      1195            mov     r2,dpl
02AE AB83      1196            mov     r3,dph
02B0 ACF0      1197            mov     r4,b
02B2           1198   ;        C:\Users\allisony\Documents\ElecRobot\test.c:254: int k=column-1;
02B2 ADD0      1199            mov     r5,_LCDprint_column_PARM_3
02B4 7E00      1200            mov     r6,#0x00
02B6 1D        1201            dec     r5
02B7 BDFF10    1202            cjne    r5,#0xff,L016028?
02BA 1E        1203            dec     r6
02BB           1204   L016028?:
02BB           1205   ;        C:\Users\allisony\Documents\ElecRobot\test.c:258: WriteCommand(line==2?0xc0:0x80);
02BB 7402      1206            mov     a,#0x02
02BD B52050    1207            cjne    a,_LCDprint_column_PARM_2,L016016?
02C0 7FC0      1208            mov     r7,#0xC0
02C2 8001      1209            sjmp    L016017?
02C4           1210   L016016?:
02C4 7F80      1211            mov     r7,#0x80
02C6           1212   L016017?:
02C6 8F82      1213            mov     dpl,r7
02C8 C002      1214            push    ar2
02CA C003      1215            push    ar3
02CC C004      1216            push    ar4
02CE C005      1217            push    ar5
02D0 C006      1218            push    ar6
02D2 120100    1219            lcall   _WriteCommand
02D5           1220   ;        C:\Users\allisony\Documents\ElecRobot\test.c:259: waitms(5);
02D5 900005    1221            mov     dptr,#0x0005
02D8 120100    1222            lcall   _waitms
02DB D006      1223            pop     ar6
02DD D005      1224            pop     ar5
02DF D004      1225            pop     ar4
02E1 D003      1226            pop     ar3
02E3 D002      1227            pop     ar2
02E5           1228   ;        C:\Users\allisony\Documents\ElecRobot\test.c:262: while(k!=0){
02E5           1229   L016001?:
02E5 ED        1230            mov     a,r5
02E6 4E        1231            orl     a,r6
02E7 6001      1232            jz      L016003?
02E9           1233   ;        C:\Users\allisony\Documents\ElecRobot\test.c:263: WriteCommand(0x14);
02E9 758214    1234            mov     dpl,#0x14
02EC C002      1235            push    ar2
02EE C003      1236            push    ar3
02F0 C004      1237            push    ar4
02F2 C005      1238            push    ar5
02F4 C006      1239            push    ar6
02F6 120100    1240            lcall   _WriteCommand
02F9 D006      1241            pop     ar6
02FB D005      1242            pop     ar5
02FD D004      1243            pop     ar4
02FF D003      1244            pop     ar3
0301 D002      1245            pop     ar2
0303           1246   ;        C:\Users\allisony\Documents\ElecRobot\test.c:264: k--;
0303 1D        1247            dec     r5
0304 BDFFD0    1248            cjne    r5,#0xff,L016001?
0307 1E        1249            dec     r6
0308 8001      1250            sjmp    L016001?
030A           1251   L016003?:
030A           1252   ;        C:\Users\allisony\Documents\ElecRobot\test.c:268: for(j=0; string[j]!=0; j++)   WriteData(string[j]);// Write the message
030A 7D00      1253            mov     r5,#0x00
030C 7E00      1254            mov     r6,#0x00
030E           1255   L016006?:
030E ED        1256            mov     a,r5
030F 2A        1257            add     a,r2
0310 FF        1258            mov     r7,a
0311 EE        1259            mov     a,r6
0312 3B        1260            addc    a,r3
0313 F8        1261            mov     r0,a
0314 8C01      1262            mov     ar1,r4
0316 8F82      1263            mov     dpl,r7
0318 8883      1264            mov     dph,r0
031A 89F0      1265            mov     b,r1
031C 120100    1266            lcall   __gptrget
031F FF        1267            mov     r7,a
0320 6001      1268            jz      L016009?
0322 8F82      1269            mov     dpl,r7
0324 C002      1270            push    ar2
0326 C003      1271            push    ar3
0328 C004      1272            push    ar4
032A C005      1273            push    ar5
032C C006      1274            push    ar6
032E 120100    1275            lcall   _WriteData
0331 D006      1276            pop     ar6
0333 D005      1277            pop     ar5
0335 D004      1278            pop     ar4
0337 D003      1279            pop     ar3
0339 D002      1280            pop     ar2
033B 0D        1281            inc     r5
033C BD0050    1282            cjne    r5,#0x00,L016006?
033F 0E        1283            inc     r6
0340 8001      1284            sjmp    L016006?
0342           1285   L016009?:
0342           1286   ;        C:\Users\allisony\Documents\ElecRobot\test.c:269: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0342 3050D0    1287            jnb     _LCDprint_column_PARM_4,L016014?
0345 8D02      1288            mov     ar2,r5
0347 8E03      1289            mov     ar3,r6
0349           1290   L016010?:
0349 C3        1291            clr     c
034A EA        1292            mov     a,r2
034B 9410      1293            subb    a,#0x10
034D EB        1294            mov     a,r3
034E 6480      1295            xrl     a,#0x80
0350 9480      1296            subb    a,#0x80
0352 5001      1297            jnc     L016014?
0354 758220    1298            mov     dpl,#0x20
0357 C002      1299            push    ar2
0359 C003      1300            push    ar3
035B 120100    1301            lcall   _WriteData
035E D003      1302            pop     ar3
0360 D002      1303            pop     ar2
0362 0A        1304            inc     r2
0363 BA0010    1305            cjne    r2,#0x00,L016010?
0366 0B        1306            inc     r3
0367 8001      1307            sjmp    L016010?
0369           1308   L016014?:
0369 22        1309            ret
036A           1310   ;------------------------------------------------------------
036A           1311   ;Allocation info for local variables in function 'getsn'
036A           1312   ;------------------------------------------------------------
036A           1313   ;len                       Allocated with name '_getsn_PARM_2'
036A           1314   ;buff                      Allocated with name '_getsn_buff_1_75'
036A           1315   ;j                         Allocated with name '_getsn_sloc0_1_0'
036A           1316   ;c                         Allocated to registers r3 
036A           1317   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
036A           1318   ;------------------------------------------------------------
036A           1319   ;        C:\Users\allisony\Documents\ElecRobot\test.c:273: int getsn (char * buff, int len)
036A           1320   ;        -----------------------------------------
036A           1321   ;         function getsn
036A           1322   ;        -----------------------------------------
036A           1323   _getsn:
036A 8582A0    1324            mov     _getsn_buff_1_75,dpl
036D 8583A1    1325            mov     (_getsn_buff_1_75 + 1),dph
0370 85F0A2    1326            mov     (_getsn_buff_1_75 + 2),b
0373           1327   ;        C:\Users\allisony\Documents\ElecRobot\test.c:278: for(j=0; j<(len-1); j++)
0373 E4        1328            clr     a
0374 F5F0      1329            mov     _getsn_sloc0_1_0,a
0376 F5F1      1330            mov     (_getsn_sloc0_1_0 + 1),a
0378 E580      1331            mov     a,_getsn_PARM_2
037A 24FF      1332            add     a,#0xff
037C FF        1333            mov     r7,a
037D E581      1334            mov     a,(_getsn_PARM_2 + 1)
037F 34FF      1335            addc    a,#0xff
0381 F8        1336            mov     r0,a
0382 7900      1337            mov     r1,#0x00
0384 7A00      1338            mov     r2,#0x00
0386           1339   L017005?:
0386 C3        1340            clr     c
0387 E9        1341            mov     a,r1
0388 9F        1342            subb    a,r7
0389 EA        1343            mov     a,r2
038A 6480      1344            xrl     a,#0x80
038C 88F0      1345            mov     b,r0
038E 63F080    1346            xrl     b,#0x80
0391 95F0      1347            subb    a,b
0393 5001      1348            jnc     L017008?
0395           1349   ;        C:\Users\allisony\Documents\ElecRobot\test.c:280: c=getchar();
0395 C002      1350            push    ar2
0397 C007      1351            push    ar7
0399 C000      1352            push    ar0
039B C001      1353            push    ar1
039D 120100    1354            lcall   _getchar
03A0 AB82      1355            mov     r3,dpl
03A2 D001      1356            pop     ar1
03A4 D000      1357            pop     ar0
03A6 D007      1358            pop     ar7
03A8 D002      1359            pop     ar2
03AA           1360   ;        C:\Users\allisony\Documents\ElecRobot\test.c:281: if ( (c=='\n') || (c=='\r') )
03AA BB0A10    1361            cjne    r3,#0x0A,L017015?
03AD 8001      1362            sjmp    L017001?
03AF           1363   L017015?:
03AF BB0D90    1364            cjne    r3,#0x0D,L017002?
03B2           1365   L017001?:
03B2           1366   ;        C:\Users\allisony\Documents\ElecRobot\test.c:283: buff[j]=0;
03B2 E5F0      1367            mov     a,_getsn_sloc0_1_0
03B4 25A0      1368            add     a,_getsn_buff_1_75
03B6 FC        1369            mov     r4,a
03B7 E5F1      1370            mov     a,(_getsn_sloc0_1_0 + 1)
03B9 35A1      1371            addc    a,(_getsn_buff_1_75 + 1)
03BB FD        1372            mov     r5,a
03BC AEA2      1373            mov     r6,(_getsn_buff_1_75 + 2)
03BE 8C82      1374            mov     dpl,r4
03C0 8D83      1375            mov     dph,r5
03C2 8EF0      1376            mov     b,r6
03C4 E4        1377            clr     a
03C5 120100    1378            lcall   __gptrput
03C8           1379   ;        C:\Users\allisony\Documents\ElecRobot\test.c:284: return j;
03C8 85F082    1380            mov     dpl,_getsn_sloc0_1_0
03CB 85F183    1381            mov     dph,(_getsn_sloc0_1_0 + 1)
03CE 22        1382            ret
03CF           1383   L017002?:
03CF           1384   ;        C:\Users\allisony\Documents\ElecRobot\test.c:288: buff[j]=c;
03CF E9        1385            mov     a,r1
03D0 25A0      1386            add     a,_getsn_buff_1_75
03D2 FC        1387            mov     r4,a
03D3 EA        1388            mov     a,r2
03D4 35A1      1389            addc    a,(_getsn_buff_1_75 + 1)
03D6 FD        1390            mov     r5,a
03D7 AEA2      1391            mov     r6,(_getsn_buff_1_75 + 2)
03D9 8C82      1392            mov     dpl,r4
03DB 8D83      1393            mov     dph,r5
03DD 8EF0      1394            mov     b,r6
03DF EB        1395            mov     a,r3
03E0 120100    1396            lcall   __gptrput
03E3           1397   ;        C:\Users\allisony\Documents\ElecRobot\test.c:278: for(j=0; j<(len-1); j++)
03E3 09        1398            inc     r1
03E4 B90010    1399            cjne    r1,#0x00,L017018?
03E7 0A        1400            inc     r2
03E8           1401   L017018?:
03E8 89F0      1402            mov     _getsn_sloc0_1_0,r1
03EA 8AF1      1403            mov     (_getsn_sloc0_1_0 + 1),r2
03EC 8001      1404            sjmp    L017005?
03EE           1405   L017008?:
03EE           1406   ;        C:\Users\allisony\Documents\ElecRobot\test.c:291: buff[j]=0;
03EE E5F0      1407            mov     a,_getsn_sloc0_1_0
03F0 25A0      1408            add     a,_getsn_buff_1_75
03F2 FA        1409            mov     r2,a
03F3 E5F1      1410            mov     a,(_getsn_sloc0_1_0 + 1)
03F5 35A1      1411            addc    a,(_getsn_buff_1_75 + 1)
03F7 FB        1412            mov     r3,a
03F8 ACA2      1413            mov     r4,(_getsn_buff_1_75 + 2)
03FA 8A82      1414            mov     dpl,r2
03FC 8B83      1415            mov     dph,r3
03FE 8CF0      1416            mov     b,r4
0400 E4        1417            clr     a
0401 120100    1418            lcall   __gptrput
0404           1419   ;        C:\Users\allisony\Documents\ElecRobot\test.c:292: return len;
0404 858082    1420            mov     dpl,_getsn_PARM_2
0407 858183    1421            mov     dph,(_getsn_PARM_2 + 1)
040A 22        1422            ret
040B           1423   ;------------------------------------------------------------
040B           1424   ;Allocation info for local variables in function 'Convert_to_ascii'
040B           1425   ;------------------------------------------------------------
040B           1426   ;num                       Allocated with name '_Convert_to_ascii_PARM_2'
040B           1427   ;size                      Allocated with name '_Convert_to_ascii_PARM_3'
040B           1428   ;string                    Allocated with name '_Convert_to_ascii_string_1_80'
040B           1429   ;------------------------------------------------------------
040B           1430   ;        C:\Users\allisony\Documents\ElecRobot\test.c:295: void Convert_to_ascii(char* string, unsigned int num, unsigned int size){
040B           1431   ;        -----------------------------------------
040B           1432   ;         function Convert_to_ascii
040B           1433   ;        -----------------------------------------
040B           1434   _Convert_to_ascii:
040B 858240    1435            mov     _Convert_to_ascii_string_1_80,dpl
040E 858341    1436            mov     (_Convert_to_ascii_string_1_80 + 1),dph
0411 85F042    1437            mov     (_Convert_to_ascii_string_1_80 + 2),b
0414           1438   ;        C:\Users\allisony\Documents\ElecRobot\test.c:297: while(size>0 && num != 0){
0414           1439   L018002?:
0414 E5F0      1440            mov     a,_Convert_to_ascii_PARM_3
0416 45F1      1441            orl     a,(_Convert_to_ascii_PARM_3 + 1)
0418 6001      1442            jz      L018005?
041A E540      1443            mov     a,_Convert_to_ascii_PARM_2
041C 4541      1444            orl     a,(_Convert_to_ascii_PARM_2 + 1)
041E 6001      1445            jz      L018005?
0420           1446   ;        C:\Users\allisony\Documents\ElecRobot\test.c:298: string[size-1] = 48 + (num%10);
0420 E5F0      1447            mov     a,_Convert_to_ascii_PARM_3
0422 24FF      1448            add     a,#0xff
0424 FD        1449            mov     r5,a
0425 E5F1      1450            mov     a,(_Convert_to_ascii_PARM_3 + 1)
0427 34FF      1451            addc    a,#0xff
0429 FE        1452            mov     r6,a
042A ED        1453            mov     a,r5
042B 2540      1454            add     a,_Convert_to_ascii_string_1_80
042D FF        1455            mov     r7,a
042E EE        1456            mov     a,r6
042F 3541      1457            addc    a,(_Convert_to_ascii_string_1_80 + 1)
0431 F8        1458            mov     r0,a
0432 A942      1459            mov     r1,(_Convert_to_ascii_string_1_80 + 2)
0434 75000A    1460            mov     __moduint_PARM_2,#0x0A
0437 E4        1461            clr     a
0438 F501      1462            mov     (__moduint_PARM_2 + 1),a
043A 854082    1463            mov     dpl,_Convert_to_ascii_PARM_2
043D 854183    1464            mov     dph,(_Convert_to_ascii_PARM_2 + 1)
0440 C005      1465            push    ar5
0442 C006      1466            push    ar6
0444 C007      1467            push    ar7
0446 C000      1468            push    ar0
0448 C001      1469            push    ar1
044A 120100    1470            lcall   __moduint
044D AA82      1471            mov     r2,dpl
044F D001      1472            pop     ar1
0451 D000      1473            pop     ar0
0453 D007      1474            pop     ar7
0455 D006      1475            pop     ar6
0457 D005      1476            pop     ar5
0459 7430      1477            mov     a,#0x30
045B 2A        1478            add     a,r2
045C 8F82      1479            mov     dpl,r7
045E 8883      1480            mov     dph,r0
0460 89F0      1481            mov     b,r1
0462 120100    1482            lcall   __gptrput
0465           1483   ;        C:\Users\allisony\Documents\ElecRobot\test.c:299: size--;
0465 8DF0      1484            mov     _Convert_to_ascii_PARM_3,r5
0467 8EF1      1485            mov     (_Convert_to_ascii_PARM_3 + 1),r6
0469           1486   ;        C:\Users\allisony\Documents\ElecRobot\test.c:300: num=num/10;
0469 75000A    1487            mov     __divuint_PARM_2,#0x0A
046C E4        1488            clr     a
046D F501      1489            mov     (__divuint_PARM_2 + 1),a
046F 854082    1490            mov     dpl,_Convert_to_ascii_PARM_2
0472 854183    1491            mov     dph,(_Convert_to_ascii_PARM_2 + 1)
0475 120100    1492            lcall   __divuint
0478 858240    1493            mov     _Convert_to_ascii_PARM_2,dpl
047B 858341    1494            mov     (_Convert_to_ascii_PARM_2 + 1),dph
047E           1495   ;        C:\Users\allisony\Documents\ElecRobot\test.c:302: while(size>0){
047E 8001      1496            sjmp    L018002?
0480           1497   L018005?:
0480 E5F0      1498            mov     a,_Convert_to_ascii_PARM_3
0482 45F1      1499            orl     a,(_Convert_to_ascii_PARM_3 + 1)
0484 6001      1500            jz      L018008?
0486           1501   ;        C:\Users\allisony\Documents\ElecRobot\test.c:303: string[size-1]=' ';
0486 E5F0      1502            mov     a,_Convert_to_ascii_PARM_3
0488 24FF      1503            add     a,#0xff
048A FA        1504            mov     r2,a
048B E5F1      1505            mov     a,(_Convert_to_ascii_PARM_3 + 1)
048D 34FF      1506            addc    a,#0xff
048F FB        1507            mov     r3,a
0490 EA        1508            mov     a,r2
0491 2540      1509            add     a,_Convert_to_ascii_string_1_80
0493 FC        1510            mov     r4,a
0494 EB        1511            mov     a,r3
0495 3541      1512            addc    a,(_Convert_to_ascii_string_1_80 + 1)
0497 FD        1513            mov     r5,a
0498 AE42      1514            mov     r6,(_Convert_to_ascii_string_1_80 + 2)
049A 8C82      1515            mov     dpl,r4
049C 8D83      1516            mov     dph,r5
049E 8EF0      1517            mov     b,r6
04A0 7420      1518            mov     a,#0x20
04A2 120100    1519            lcall   __gptrput
04A5           1520   ;        C:\Users\allisony\Documents\ElecRobot\test.c:304: size--;
04A5 8AF0      1521            mov     _Convert_to_ascii_PARM_3,r2
04A7 8BF1      1522            mov     (_Convert_to_ascii_PARM_3 + 1),r3
04A9 8001      1523            sjmp    L018005?
04AB           1524   L018008?:
04AB 22        1525            ret
04AC           1526   ;------------------------------------------------------------
04AC           1527   ;Allocation info for local variables in function 'main'
04AC           1528   ;------------------------------------------------------------
04AC           1529   ;v                         Allocated with name '_main_v_1_85'
04AC           1530   ;overflow_count            Allocated to registers r2 r3 
04AC           1531   ;period1                   Allocated with name '_main_period1_1_85'
04AC           1532   ;period                    Allocated to registers r2 r3 r4 r5 
04AC           1533   ;peak                      Allocated with name '_main_peak_1_85'
04AC           1534   ;peak1                     Allocated with name '_main_peak1_1_85'
04AC           1535   ;testRMS                   Allocated with name '_main_testRMS_1_85'
04AC           1536   ;refRMS                    Allocated with name '_main_refRMS_1_85'
04AC           1537   ;frequency                 Allocated to registers r2 r3 r4 r5 
04AC           1538   ;overflow_diff             Allocated with name '_main_overflow_diff_1_85'
04AC           1539   ;phase_diff                Allocated with name '_main_phase_diff_1_85'
04AC           1540   ;time_diff                 Allocated with name '_main_time_diff_1_85'
04AC           1541   ;message                   Allocated with name '_main_message_1_85'
04AC           1542   ;i                         Allocated with name '_main_i_1_85'
04AC           1543   ;max                       Allocated to registers 
04AC           1544   ;------------------------------------------------------------
04AC           1545   ;        C:\Users\allisony\Documents\ElecRobot\test.c:308: void main (void)
04AC           1546   ;        -----------------------------------------
04AC           1547   ;         function main
04AC           1548   ;        -----------------------------------------
04AC           1549   _main:
04AC           1550   ;        C:\Users\allisony\Documents\ElecRobot\test.c:326: TL0=0; 
04AC 758A00    1551            mov     _TL0,#0x00
04AF           1552   ;        C:\Users\allisony\Documents\ElecRobot\test.c:327: TH0=0;
04AF 758C00    1553            mov     _TH0,#0x00
04B2           1554   ;        C:\Users\allisony\Documents\ElecRobot\test.c:328: TF0=0;
04B2 C28D      1555            clr     _TF0
04B4           1556   ;        C:\Users\allisony\Documents\ElecRobot\test.c:329: TIMER0_Init();
04B4 120100    1557            lcall   _TIMER0_Init
04B7           1558   ;        C:\Users\allisony\Documents\ElecRobot\test.c:332: waitms(500); // Give PuTTy a chance to start before sending
04B7 9001F4    1559            mov     dptr,#0x01F4
04BA 120100    1560            lcall   _waitms
04BD           1561   ;        C:\Users\allisony\Documents\ElecRobot\test.c:333: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
04BD 7430      1562            mov     a,#__str_0
04BF C0E0      1563            push    acc
04C1 74CA      1564            mov     a,#(__str_0 >> 8)
04C3 C0E0      1565            push    acc
04C5 7480      1566            mov     a,#0x80
04C7 C0E0      1567            push    acc
04C9 120100    1568            lcall   _printf
04CC 1581      1569            dec     sp
04CE 1581      1570            dec     sp
04D0 1581      1571            dec     sp
04D2           1572   ;        C:\Users\allisony\Documents\ElecRobot\test.c:338: __FILE__, __DATE__, __TIME__);
04D2           1573   ;        C:\Users\allisony\Documents\ElecRobot\test.c:337: "Compiled: %s, %s\n\n",
04D2 74B0      1574            mov     a,#__str_4
04D4 C0E0      1575            push    acc
04D6 74CA      1576            mov     a,#(__str_4 >> 8)
04D8 C0E0      1577            push    acc
04DA 7480      1578            mov     a,#0x80
04DC C0E0      1579            push    acc
04DE 74F0      1580            mov     a,#__str_3
04E0 C0E0      1581            push    acc
04E2 74CA      1582            mov     a,#(__str_3 >> 8)
04E4 C0E0      1583            push    acc
04E6 7480      1584            mov     a,#0x80
04E8 C0E0      1585            push    acc
04EA 7430      1586            mov     a,#__str_2
04EC C0E0      1587            push    acc
04EE 74CB      1588            mov     a,#(__str_2 >> 8)
04F0 C0E0      1589            push    acc
04F2 7480      1590            mov     a,#0x80
04F4 C0E0      1591            push    acc
04F6 7470      1592            mov     a,#__str_1
04F8 C0E0      1593            push    acc
04FA 74CB      1594            mov     a,#(__str_1 >> 8)
04FC C0E0      1595            push    acc
04FE 7480      1596            mov     a,#0x80
0500 C0E0      1597            push    acc
0502 120100    1598            lcall   _printf
0505 E581      1599            mov     a,sp
0507 24F4      1600            add     a,#0xf4
0509 F581      1601            mov     sp,a
050B           1602   ;        C:\Users\allisony\Documents\ElecRobot\test.c:341: InitPinADC(1, 4); // Configure P2.3 as analog input
050B 755004    1603            mov     _InitPinADC_PARM_2,#0x04
050E 758201    1604            mov     dpl,#0x01
0511 120100    1605            lcall   _InitPinADC
0514           1606   ;        C:\Users\allisony\Documents\ElecRobot\test.c:342: InitPinADC(1, 7); // Configure P2.4 as analog input
0514 755007    1607            mov     _InitPinADC_PARM_2,#0x07
0517 758201    1608            mov     dpl,#0x01
051A 120100    1609            lcall   _InitPinADC
051D           1610   ;        C:\Users\allisony\Documents\ElecRobot\test.c:344: InitADC();
051D 120100    1611            lcall   _InitADC
0520           1612   ;        C:\Users\allisony\Documents\ElecRobot\test.c:345: LCD_4BIT();
0520 120100    1613            lcall   _LCD_4BIT
0523           1614   ;        C:\Users\allisony\Documents\ElecRobot\test.c:348: while (1)
0523           1615   L019018?:
0523           1616   ;        C:\Users\allisony\Documents\ElecRobot\test.c:351: TL0=0; 
0523 758A00    1617            mov     _TL0,#0x00
0526           1618   ;        C:\Users\allisony\Documents\ElecRobot\test.c:352: TH0=0;
0526 758C00    1619            mov     _TH0,#0x00
0529           1620   ;        C:\Users\allisony\Documents\ElecRobot\test.c:353: TF0=0;
0529 C28D      1621            clr     _TF0
052B           1622   ;        C:\Users\allisony\Documents\ElecRobot\test.c:355: TR0=0;
052B C28C      1623            clr     _TR0
052D           1624   ;        C:\Users\allisony\Documents\ElecRobot\test.c:361: while(P1_7!=0); // Wait for the signal to be zero
052D           1625   L019001?:
052D 2097F0    1626            jb      _P1_7,L019001?
0530           1627   ;        C:\Users\allisony\Documents\ElecRobot\test.c:362: while(P1_7!=1); // Wait for the signal to be one
0530           1628   L019004?:
0530 309730    1629            jnb     _P1_7,L019004?
0533           1630   ;        C:\Users\allisony\Documents\ElecRobot\test.c:363: TR0=1; // Start the timer
0533 D28C      1631            setb    _TR0
0535           1632   ;        C:\Users\allisony\Documents\ElecRobot\test.c:364: while(P1_7!=0) // Wait for the signal to be zero
0535 7A00      1633            mov     r2,#0x00
0537 7B00      1634            mov     r3,#0x00
0539           1635   L019009?:
0539 3097B0    1636            jnb     _P1_7,L019029?
053C           1637   ;        C:\Users\allisony\Documents\ElecRobot\test.c:366: if(TF0==1) // Did the 16-bit timer overflow?
053C           1638   ;        C:\Users\allisony\Documents\ElecRobot\test.c:368: TF0=0;
053C 108DF0    1639            jbc     _TF0,L019037?
053F 8001      1640            sjmp    L019009?
0541           1641   L019037?:
0541           1642   ;        C:\Users\allisony\Documents\ElecRobot\test.c:369: overflow_count++;
0541 0A        1643            inc     r2
0542 BA0070    1644            cjne    r2,#0x00,L019009?
0545 0B        1645            inc     r3
0546           1646   ;        C:\Users\allisony\Documents\ElecRobot\test.c:372: while(P1_7!=1) // Wait for the signal to be one
0546 8001      1647            sjmp    L019009?
0548           1648   L019029?:
0548           1649   L019014?:
0548 209770    1650            jb      _P1_7,L019016?
054B           1651   ;        C:\Users\allisony\Documents\ElecRobot\test.c:374: if(TF0==1) // Did the 16-bit timer overflow?
054B           1652   ;        C:\Users\allisony\Documents\ElecRobot\test.c:376: TF0=0;
054B 108DB0    1653            jbc     _TF0,L019039?
054E 8001      1654            sjmp    L019014?
0550           1655   L019039?:
0550           1656   ;        C:\Users\allisony\Documents\ElecRobot\test.c:377: overflow_count++;
0550 0A        1657            inc     r2
0551 BA0030    1658            cjne    r2,#0x00,L019014?
0554 0B        1659            inc     r3
0555 8001      1660            sjmp    L019014?
0557           1661   L019016?:
0557           1662   ;        C:\Users\allisony\Documents\ElecRobot\test.c:380: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0557 C28C      1663            clr     _TR0
0559           1664   ;        C:\Users\allisony\Documents\ElecRobot\test.c:381: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0559 8A82      1665            mov     dpl,r2
055B 8B83      1666            mov     dph,r3
055D 120100    1667            lcall   ___sint2fs
0560 AA82      1668            mov     r2,dpl
0562 AB83      1669            mov     r3,dph
0564 ACF0      1670            mov     r4,b
0566 FD        1671            mov     r5,a
0567 C002      1672            push    ar2
0569 C003      1673            push    ar3
056B C004      1674            push    ar4
056D C005      1675            push    ar5
056F 900000    1676            mov     dptr,#0x0000
0572 75F080    1677            mov     b,#0x80
0575 7447      1678            mov     a,#0x47
0577 120100    1679            lcall   ___fsmul
057A AA82      1680            mov     r2,dpl
057C AB83      1681            mov     r3,dph
057E ACF0      1682            mov     r4,b
0580 FD        1683            mov     r5,a
0581 E581      1684            mov     a,sp
0583 24FC      1685            add     a,#0xfc
0585 F581      1686            mov     sp,a
0587 858C82    1687            mov     dpl,_TH0
058A C002      1688            push    ar2
058C C003      1689            push    ar3
058E C004      1690            push    ar4
0590 C005      1691            push    ar5
0592 120100    1692            lcall   ___uchar2fs
0595 AE82      1693            mov     r6,dpl
0597 AF83      1694            mov     r7,dph
0599 A8F0      1695            mov     r0,b
059B F9        1696            mov     r1,a
059C C006      1697            push    ar6
059E C007      1698            push    ar7
05A0 C000      1699            push    ar0
05A2 C001      1700            push    ar1
05A4 900000    1701            mov     dptr,#0x0000
05A7 75F080    1702            mov     b,#0x80
05AA 7443      1703            mov     a,#0x43
05AC 120100    1704            lcall   ___fsmul
05AF AE82      1705            mov     r6,dpl
05B1 AF83      1706            mov     r7,dph
05B3 A8F0      1707            mov     r0,b
05B5 F9        1708            mov     r1,a
05B6 E581      1709            mov     a,sp
05B8 24FC      1710            add     a,#0xfc
05BA F581      1711            mov     sp,a
05BC D005      1712            pop     ar5
05BE D004      1713            pop     ar4
05C0 D003      1714            pop     ar3
05C2 D002      1715            pop     ar2
05C4 C006      1716            push    ar6
05C6 C007      1717            push    ar7
05C8 C000      1718            push    ar0
05CA C001      1719            push    ar1
05CC 8A82      1720            mov     dpl,r2
05CE 8B83      1721            mov     dph,r3
05D0 8CF0      1722            mov     b,r4
05D2 ED        1723            mov     a,r5
05D3 120100    1724            lcall   ___fsadd
05D6 AA82      1725            mov     r2,dpl
05D8 AB83      1726            mov     r3,dph
05DA ACF0      1727            mov     r4,b
05DC FD        1728            mov     r5,a
05DD E581      1729            mov     a,sp
05DF 24FC      1730            add     a,#0xfc
05E1 F581      1731            mov     sp,a
05E3 AE8A      1732            mov     r6,_TL0
05E5 7F00      1733            mov     r7,#0x00
05E7 8E82      1734            mov     dpl,r6
05E9 8F83      1735            mov     dph,r7
05EB C002      1736            push    ar2
05ED C003      1737            push    ar3
05EF C004      1738            push    ar4
05F1 C005      1739            push    ar5
05F3 120100    1740            lcall   ___sint2fs
05F6 AE82      1741            mov     r6,dpl
05F8 AF83      1742            mov     r7,dph
05FA A8F0      1743            mov     r0,b
05FC F9        1744            mov     r1,a
05FD D005      1745            pop     ar5
05FF D004      1746            pop     ar4
0601 D003      1747            pop     ar3
0603 D002      1748            pop     ar2
0605 C006      1749            push    ar6
0607 C007      1750            push    ar7
0609 C000      1751            push    ar0
060B C001      1752            push    ar1
060D 8A82      1753            mov     dpl,r2
060F 8B83      1754            mov     dph,r3
0611 8CF0      1755            mov     b,r4
0613 ED        1756            mov     a,r5
0614 120100    1757            lcall   ___fsadd
0617 AA82      1758            mov     r2,dpl
0619 AB83      1759            mov     r3,dph
061B ACF0      1760            mov     r4,b
061D FD        1761            mov     r5,a
061E E581      1762            mov     a,sp
0620 24FC      1763            add     a,#0xfc
0622 F581      1764            mov     sp,a
0624 C002      1765            push    ar2
0626 C003      1766            push    ar3
0628 C004      1767            push    ar4
062A C005      1768            push    ar5
062C 90F4FC    1769            mov     dptr,#0xF4FC
062F 75F032    1770            mov     b,#0x32
0632 7434      1771            mov     a,#0x34
0634 120100    1772            lcall   ___fsmul
0637 AA82      1773            mov     r2,dpl
0639 AB83      1774            mov     r3,dph
063B ACF0      1775            mov     r4,b
063D FD        1776            mov     r5,a
063E E581      1777            mov     a,sp
0640 24FC      1778            add     a,#0xfc
0642 F581      1779            mov     sp,a
0644           1780   ;        C:\Users\allisony\Documents\ElecRobot\test.c:384: printf("\t\t\tperiod: =%f \n", period);
0644 C002      1781            push    ar2
0646 C003      1782            push    ar3
0648 C004      1783            push    ar4
064A C005      1784            push    ar5
064C C002      1785            push    ar2
064E C003      1786            push    ar3
0650 C004      1787            push    ar4
0652 C005      1788            push    ar5
0654 74B0      1789            mov     a,#__str_5
0656 C0E0      1790            push    acc
0658 74CE      1791            mov     a,#(__str_5 >> 8)
065A C0E0      1792            push    acc
065C 7480      1793            mov     a,#0x80
065E C0E0      1794            push    acc
0660 120100    1795            lcall   _printf
0663 E581      1796            mov     a,sp
0665 24F9      1797            add     a,#0xf9
0667 F581      1798            mov     sp,a
0669           1799   ;        C:\Users\allisony\Documents\ElecRobot\test.c:386: frequency = 1/period;
0669 900000    1800            mov     dptr,#0x0000
066C 75F080    1801            mov     b,#0x80
066F 743F      1802            mov     a,#0x3F
0671 120100    1803            lcall   ___fsdiv
0674 AA82      1804            mov     r2,dpl
0676 AB83      1805            mov     r3,dph
0678 ACF0      1806            mov     r4,b
067A FD        1807            mov     r5,a
067B E581      1808            mov     a,sp
067D 24FC      1809            add     a,#0xfc
067F F581      1810            mov     sp,a
0681           1811   ;        C:\Users\allisony\Documents\ElecRobot\test.c:387: printf("\t\t\tfreq: =%f \n", frequency);
0681 C002      1812            push    ar2
0683 C003      1813            push    ar3
0685 C004      1814            push    ar4
0687 C005      1815            push    ar5
0689 74F0      1816            mov     a,#__str_6
068B C0E0      1817            push    acc
068D 74CE      1818            mov     a,#(__str_6 >> 8)
068F C0E0      1819            push    acc
0691 7480      1820            mov     a,#0x80
0693 C0E0      1821            push    acc
0695 120100    1822            lcall   _printf
0698 E581      1823            mov     a,sp
069A 24F9      1824            add     a,#0xf9
069C F581      1825            mov     sp,a
069E           1826   ;        C:\Users\allisony\Documents\ElecRobot\test.c:389: waitms(200);
069E 9000C8    1827            mov     dptr,#0x00C8
06A1 120100    1828            lcall   _waitms
06A4 020100    1829            ljmp    L019018?
06A7           1830            rseg R_CSEG
06A7           1831   
0000           1832            rseg R_XINIT
0000           1833   
0000           1834            rseg R_CONST
0000           1835   __str_0:
0000 1B        1836            db 0x1B
0001 5B324A    1837            db '[2J'
0004 00        1838            db 0x00
0005           1839   __str_1:
0005 41444320  1840            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1841            db 0x0A
0016 46696C65  1842            db 'File: %s'
     3A202573
001E 0A        1843            db 0x0A
001F 436F6D70  1844            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1845            db 0x0A
0030 0A        1846            db 0x0A
0031 00        1847            db 0x00
0032           1848   __str_2:
0032 433A      1849            db 'C:'
0034 5C        1850            db 0x5C
0035 55736572  1851            db 'Users'
     73
003A 5C        1852            db 0x5C
003B 616C6C69  1853            db 'allisony'
     736F6E79
0043 5C        1854            db 0x5C
0044 446F6375  1855            db 'Documents'
     6D656E74
     73
004D 5C        1856            db 0x5C
004E 456C6563  1857            db 'ElecRobot'
     526F626F
     74
0057 5C        1858            db 0x5C
0058 74657374  1859            db 'test.c'
     2E63
005E 00        1860            db 0x00
005F           1861   __str_3:
005F 4D617220  1862            db 'Mar 24 2018'
     32342032
     303138
006A 00        1863            db 0x00
006B           1864   __str_4:
006B 31393A35  1865            db '19:55:46'
     353A3436
0073 00        1866            db 0x00
0074           1867   __str_5:
0074 09        1868            db 0x09
0075 09        1869            db 0x09
0076 09        1870            db 0x09
0077 70657269  1871            db 'period: =%f '
     6F643A20
     3D256620
0083 0A        1872            db 0x0A
0084 00        1873            db 0x00
0085           1874   __str_6:
0085 09        1875            db 0x09
0086 09        1876            db 0x09
0087 09        1877            db 0x09
0088 66726571  1878            db 'freq: =%f '
     3A203D25
     6620
0092 0A        1879            db 0x0A
0093 00        1880            db 0x00
0094           1881   
0003           1882            CSEG
0003           1883   
0003           1884   end
